<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Electron 유저 데이터 백업 및 복구</title>
      <link href="/electron/21/"/>
      <url>/electron/21/</url>
      
        <content type="html"><![CDATA[<h1 id="유저-데이터-백업-및-복구"><a href="#유저-데이터-백업-및-복구" class="headerlink" title="유저 데이터 백업 및 복구"></a>유저 데이터 백업 및 복구</h1><p>안녕하세요, <strong>뉴코딩</strong>입니다!<br>이번 시간에는 <strong>Electron</strong> 애플리케이션에서 <strong>유저 데이터 백업 및 복구</strong>를 구현하는 방법을 알아보겠습니다. 사용자 데이터 백업 구현과 백업된 데이터 복구 및 관리 방법을 다루겠습니다.</p><h2 id="1-사용자-데이터-백업-구현"><a href="#1-사용자-데이터-백업-구현" class="headerlink" title="1. 사용자 데이터 백업 구현"></a>1. 사용자 데이터 백업 구현</h2><p>Electron 애플리케이션에서 사용자 데이터를 백업하기 위해 파일 시스템을 사용할 수 있습니다.</p><h3 id="1-1-데이터-백업"><a href="#1-1-데이터-백업" class="headerlink" title="1.1 데이터 백업"></a>1.1 데이터 백업</h3><p>다음은 사용자 데이터를 JSON 파일로 백업하는 예제입니다:</p><pre><code class="highlight javascript"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);<span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);<span class="keyword">function</span> <span class="title function_">backupData</span>(<span class="params">data</span>) &#123;  <span class="keyword">const</span> backupPath = path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;backup.json&quot;</span>);  fs.<span class="title function_">writeFileSync</span>(backupPath, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data));&#125;<span class="keyword">const</span> userData = &#123;  <span class="attr">name</span>: <span class="string">&quot;뉴코딩&quot;</span>,  <span class="attr">email</span>: <span class="string">&quot;newcoding@example.com&quot;</span>,&#125;;<span class="title function_">backupData</span>(userData);</code></pre><h2 id="2-백업된-데이터-복구-및-관리"><a href="#2-백업된-데이터-복구-및-관리" class="headerlink" title="2. 백업된 데이터 복구 및 관리"></a>2. 백업된 데이터 복구 및 관리</h2><p>백업된 데이터를 복구하고 관리하는 방법을 알아보겠습니다.</p><h3 id="2-1-데이터-복구"><a href="#2-1-데이터-복구" class="headerlink" title="2.1 데이터 복구"></a>2.1 데이터 복구</h3><p>다음은 백업된 데이터를 복구하는 예제입니다:</p><pre><code class="highlight javascript"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);<span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);<span class="keyword">function</span> <span class="title function_">restoreData</span>(<span class="params"></span>) &#123;  <span class="keyword">const</span> backupPath = path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;backup.json&quot;</span>);  <span class="keyword">if</span> (fs.<span class="title function_">existsSync</span>(backupPath)) &#123;    <span class="keyword">const</span> data = fs.<span class="title function_">readFileSync</span>(backupPath, <span class="string">&quot;utf8&quot;</span>);    <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">parse</span>(data);  &#125;  <span class="keyword">return</span> <span class="literal">null</span>;&#125;<span class="keyword">const</span> restoredData = <span class="title function_">restoreData</span>();<span class="variable language_">console</span>.<span class="title function_">log</span>(restoredData);</code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 Electron 애플리케이션에서 유저 데이터 백업 및 복구를 구현하는 방법에 대해 알아보았습니다. 사용자 데이터 백업 구현과 백업된 데이터 복구 및 관리 방법을 다루었습니다. 이러한 기능들은 사용자 데이터를 안전하게 보호하고, 데이터 손실을 방지하는 데 중요한 역할을 합니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> Electron </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Electron 동기화 및 오프라인 기능</title>
      <link href="/electron/20/"/>
      <url>/electron/20/</url>
      
        <content type="html"><![CDATA[<h1 id="동기화-및-오프라인-기능"><a href="#동기화-및-오프라인-기능" class="headerlink" title="동기화 및 오프라인 기능"></a>동기화 및 오프라인 기능</h1><p>안녕하세요, <strong>뉴코딩</strong>입니다!<br>이번 시간에는 <strong>Electron</strong> 애플리케이션에서 <strong>동기화 및 오프라인 기능</strong>을 구현하는 방법을 알아보겠습니다. 데이터 동기화 전략 및 오프라인 모드 지원과 P2P 통신 및 로컬 네트워크 통합 방법을 다루겠습니다.</p><h2 id="1-데이터-동기화-전략-및-오프라인-모드-지원"><a href="#1-데이터-동기화-전략-및-오프라인-모드-지원" class="headerlink" title="1. 데이터 동기화 전략 및 오프라인 모드 지원"></a>1. 데이터 동기화 전략 및 오프라인 모드 지원</h2><p>Electron 애플리케이션에서 데이터 동기화와 오프라인 모드를 지원하기 위해 IndexedDB와 같은 로컬 데이터베이스를 사용할 수 있습니다.</p><h3 id="1-1-IndexedDB-사용"><a href="#1-1-IndexedDB-사용" class="headerlink" title="1.1 IndexedDB 사용"></a>1.1 IndexedDB 사용</h3><p>IndexedDB는 브라우저 내장 데이터베이스로, 오프라인 모드에서도 데이터를 저장하고 사용할 수 있습니다. 다음은 IndexedDB를 사용하는 예제입니다:</p><pre><code class="highlight javascript"><span class="comment">// renderer.js</span><span class="keyword">let</span> db;<span class="keyword">const</span> request = indexedDB.<span class="title function_">open</span>(<span class="string">&quot;myDatabase&quot;</span>, <span class="number">1</span>);request.<span class="property">onupgradeneeded</span> = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;  db = event.<span class="property">target</span>.<span class="property">result</span>;  db.<span class="title function_">createObjectStore</span>(<span class="string">&quot;myStore&quot;</span>, &#123; <span class="attr">keyPath</span>: <span class="string">&quot;id&quot;</span> &#125;);&#125;;request.<span class="property">onsuccess</span> = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;  db = event.<span class="property">target</span>.<span class="property">result</span>;&#125;;<span class="keyword">function</span> <span class="title function_">addData</span>(<span class="params">data</span>) &#123;  <span class="keyword">const</span> transaction = db.<span class="title function_">transaction</span>([<span class="string">&quot;myStore&quot;</span>], <span class="string">&quot;readwrite&quot;</span>);  <span class="keyword">const</span> store = transaction.<span class="title function_">objectStore</span>(<span class="string">&quot;myStore&quot;</span>);  store.<span class="title function_">add</span>(data);&#125;<span class="keyword">function</span> <span class="title function_">getData</span>(<span class="params">id</span>) &#123;  <span class="keyword">const</span> transaction = db.<span class="title function_">transaction</span>([<span class="string">&quot;myStore&quot;</span>], <span class="string">&quot;readonly&quot;</span>);  <span class="keyword">const</span> store = transaction.<span class="title function_">objectStore</span>(<span class="string">&quot;myStore&quot;</span>);  <span class="keyword">const</span> request = store.<span class="title function_">get</span>(id);  request.<span class="property">onsuccess</span> = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">target</span>.<span class="property">result</span>);  &#125;;&#125;</code></pre><h2 id="2-P2P-통신-및-로컬-네트워크-통합"><a href="#2-P2P-통신-및-로컬-네트워크-통합" class="headerlink" title="2. P2P 통신 및 로컬 네트워크 통합"></a>2. P2P 통신 및 로컬 네트워크 통합</h2><p>P2P 통신과 로컬 네트워크 통합을 통해 애플리케이션 간의 데이터를 동기화할 수 있습니다.</p><h3 id="2-1-WebRTC-사용"><a href="#2-1-WebRTC-사용" class="headerlink" title="2.1 WebRTC 사용"></a>2.1 WebRTC 사용</h3><p>WebRTC는 브라우저 간의 P2P 통신을 가능하게 하는 기술입니다. 다음은 WebRTC를 사용하여 P2P 통신을 설정하는 예제입니다:</p><pre><code class="highlight javascript"><span class="comment">// renderer.js</span><span class="keyword">const</span> peerConnection = <span class="keyword">new</span> <span class="title class_">RTCPeerConnection</span>();peerConnection.<span class="property">onicecandidate</span> = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;  <span class="keyword">if</span> (event.<span class="property">candidate</span>) &#123;    <span class="comment">// ICE 후보를 상대방에게 전송</span>  &#125;&#125;;peerConnection.<span class="property">ondatachannel</span> = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;  <span class="keyword">const</span> dataChannel = event.<span class="property">channel</span>;  dataChannel.<span class="property">onmessage</span> = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Received message:&quot;</span>, event.<span class="property">data</span>);  &#125;;&#125;;<span class="keyword">const</span> dataChannel = peerConnection.<span class="title function_">createDataChannel</span>(<span class="string">&quot;myDataChannel&quot;</span>);dataChannel.<span class="property">onopen</span> = <span class="function">() =&gt;</span> &#123;  dataChannel.<span class="title function_">send</span>(<span class="string">&quot;Hello, World!&quot;</span>);&#125;;</code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 Electron 애플리케이션에서 동기화 및 오프라인 기능을 구현하는 방법에 대해 알아보았습니다. 데이터 동기화 전략 및 오프라인 모드 지원과 P2P 통신 및 로컬 네트워크 통합 방법을 다루었습니다. 이러한 기능들은 애플리케이션의 유연성과 사용성을 높이는 데 중요한 역할을 합니다. 다음 시간에는 유저 데이터 백업 및 복구에 대해 알아보겠습니다.</p><p>감사합니다!</p><pre><code class="highlight plaintext"></code></pre>]]></content>
      
      
      <categories>
          
          <category> Electron </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Electron 프로세스 및 자원 관리</title>
      <link href="/electron/19/"/>
      <url>/electron/19/</url>
      
        <content type="html"><![CDATA[<h1 id="프로세스-및-자원-관리"><a href="#프로세스-및-자원-관리" class="headerlink" title="프로세스 및 자원 관리"></a>프로세스 및 자원 관리</h1><p>안녕하세요, <strong>뉴코딩</strong>입니다!<br>이번 시간에는 <strong>Electron</strong> 애플리케이션에서 <strong>프로세스 및 자원 관리</strong>를 설정하는 방법을 알아보겠습니다. 백그라운드 작업 및 비동기 처리와 시스템 자원 접근 및 관리 방법을 다루겠습니다.</p><h2 id="1-백그라운드-작업-및-비동기-처리"><a href="#1-백그라운드-작업-및-비동기-처리" class="headerlink" title="1. 백그라운드 작업 및 비동기 처리"></a>1. 백그라운드 작업 및 비동기 처리</h2><p>Electron 애플리케이션에서 백그라운드 작업을 처리하기 위해 메인 프로세스와 렌더러 프로세스 간의 비동기 통신을 사용할 수 있습니다.</p><h3 id="1-1-IPC를-사용한-비동기-통신"><a href="#1-1-IPC를-사용한-비동기-통신" class="headerlink" title="1.1 IPC를 사용한 비동기 통신"></a>1.1 IPC를 사용한 비동기 통신</h3><p>다음은 IPC를 사용하여 메인 프로세스와 렌더러 프로세스 간의 비동기 통신을 설정하는 예제입니다:</p><pre><code class="highlight javascript"><span class="comment">// main.js</span><span class="keyword">const</span> &#123; app, <span class="title class_">BrowserWindow</span>, ipcMain &#125; = <span class="built_in">require</span>(<span class="string">&quot;electron&quot;</span>);<span class="keyword">function</span> <span class="title function_">createWindow</span>(<span class="params"></span>) &#123;  <span class="keyword">const</span> win = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;    <span class="attr">width</span>: <span class="number">800</span>,    <span class="attr">height</span>: <span class="number">600</span>,    <span class="attr">webPreferences</span>: &#123;      <span class="attr">nodeIntegration</span>: <span class="literal">true</span>,      <span class="attr">contextIsolation</span>: <span class="literal">false</span>,    &#125;,  &#125;);  win.<span class="title function_">loadFile</span>(<span class="string">&quot;index.html&quot;</span>);  ipcMain.<span class="title function_">on</span>(<span class="string">&quot;async-message&quot;</span>, <span class="function">(<span class="params">event, arg</span>) =&gt;</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(arg); <span class="comment">// &quot;ping&quot;</span>    event.<span class="title function_">reply</span>(<span class="string">&quot;async-reply&quot;</span>, <span class="string">&quot;pong&quot;</span>);  &#125;);&#125;app.<span class="title function_">whenReady</span>().<span class="title function_">then</span>(createWindow);</code></pre><pre><code class="highlight javascript"><span class="comment">// renderer.js</span><span class="keyword">const</span> &#123; ipcRenderer &#125; = <span class="built_in">require</span>(<span class="string">&quot;electron&quot;</span>);ipcRenderer.<span class="title function_">send</span>(<span class="string">&quot;async-message&quot;</span>, <span class="string">&quot;ping&quot;</span>);ipcRenderer.<span class="title function_">on</span>(<span class="string">&quot;async-reply&quot;</span>, <span class="function">(<span class="params">event, arg</span>) =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(arg); <span class="comment">// &quot;pong&quot;</span>&#125;);</code></pre><h2 id="2-시스템-자원-접근-및-관리"><a href="#2-시스템-자원-접근-및-관리" class="headerlink" title="2. 시스템 자원 접근 및 관리"></a>2. 시스템 자원 접근 및 관리</h2><p>Electron 애플리케이션에서 시스템 자원에 접근하고 관리하는 방법을 알아보겠습니다.</p><h3 id="2-1-파일-시스템-접근"><a href="#2-1-파일-시스템-접근" class="headerlink" title="2.1 파일 시스템 접근"></a>2.1 파일 시스템 접근</h3><p>Node.js의 <code>fs</code> 모듈을 사용하여 파일 시스템에 접근할 수 있습니다. 다음은 파일을 읽고 쓰는 예제입니다:</p><pre><code class="highlight javascript"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);<span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);<span class="keyword">const</span> filePath = path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;example.txt&quot;</span>);<span class="comment">// 파일 쓰기</span>fs.<span class="title function_">writeFileSync</span>(filePath, <span class="string">&quot;Hello, World!&quot;</span>);<span class="comment">// 파일 읽기</span><span class="keyword">const</span> data = fs.<span class="title function_">readFileSync</span>(filePath, <span class="string">&quot;utf8&quot;</span>);<span class="variable language_">console</span>.<span class="title function_">log</span>(data); <span class="comment">// &quot;Hello, World!&quot;</span></code></pre><h3 id="2-2-시스템-정보-가져오기"><a href="#2-2-시스템-정보-가져오기" class="headerlink" title="2.2 시스템 정보 가져오기"></a>2.2 시스템 정보 가져오기</h3><p>Node.js의 <code>os</code> 모듈을 사용하여 시스템 정보를 가져올 수 있습니다. 다음은 시스템 정보를 가져오는 예제입니다:</p><pre><code class="highlight javascript"><span class="keyword">const</span> os = <span class="built_in">require</span>(<span class="string">&quot;os&quot;</span>);<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;시스템 아키텍처:&quot;</span>, os.<span class="title function_">arch</span>());<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;CPU 정보:&quot;</span>, os.<span class="title function_">cpus</span>());<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;메모리 정보:&quot;</span>, os.<span class="title function_">totalmem</span>());</code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 Electron 애플리케이션에서 프로세스 및 자원 관리를 설정하는 방법에 대해 알아보았습니다. 백그라운드 작업 및 비동기 처리와 시스템 자원 접근 및 관리 방법을 다루었습니다. 이러한 설정은 애플리케이션의 성능과 효율성을 높이는 데 중요한 역할을 합니다. 다음 시간에는 동기화 및 오프라인 기능에 대해 알아보겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> Electron </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Electron 키보드 단축키 설정</title>
      <link href="/electron/18/"/>
      <url>/electron/18/</url>
      
        <content type="html"><![CDATA[<h1 id="키보드-단축키-설정"><a href="#키보드-단축키-설정" class="headerlink" title="키보드 단축키 설정"></a>키보드 단축키 설정</h1><p>안녕하세요, <strong>뉴코딩</strong>입니다!<br>이번 시간에는 <strong>Electron</strong> 애플리케이션에서 <strong>키보드 단축키</strong>를 설정하는 방법을 알아보겠습니다. 전역 및 로컬 단축키 설정과 사용자 설정 가능한 단축키 구현 방법을 다루겠습니다.</p><h2 id="1-전역-단축키-설정"><a href="#1-전역-단축키-설정" class="headerlink" title="1. 전역 단축키 설정"></a>1. 전역 단축키 설정</h2><p>전역 단축키는 애플리케이션이 포커스를 잃었을 때도 작동하는 단축키입니다. Electron의 <code>globalShortcut</code> 모듈을 사용하여 전역 단축키를 설정할 수 있습니다.</p><h3 id="1-1-전역-단축키-등록"><a href="#1-1-전역-단축키-등록" class="headerlink" title="1.1 전역 단축키 등록"></a>1.1 전역 단축키 등록</h3><p>다음은 전역 단축키를 등록하는 예제입니다:</p><pre><code class="highlight javascript"><span class="keyword">const</span> &#123; app, globalShortcut &#125; = <span class="built_in">require</span>(<span class="string">&quot;electron&quot;</span>);app.<span class="title function_">whenReady</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;  globalShortcut.<span class="title function_">register</span>(<span class="string">&quot;CommandOrControl+X&quot;</span>, <span class="function">() =&gt;</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;CommandOrControl+X is pressed&quot;</span>);  &#125;);&#125;);app.<span class="title function_">on</span>(<span class="string">&quot;will-quit&quot;</span>, <span class="function">() =&gt;</span> &#123;  globalShortcut.<span class="title function_">unregisterAll</span>();&#125;);</code></pre><h2 id="2-로컬-단축키-설정"><a href="#2-로컬-단축키-설정" class="headerlink" title="2. 로컬 단축키 설정"></a>2. 로컬 단축키 설정</h2><p>로컬 단축키는 애플리케이션이 포커스를 가지고 있을 때만 작동하는 단축키입니다. <code>electron-localshortcut</code> 모듈을 사용하여 로컬 단축키를 설정할 수 있습니다.</p><h3 id="2-1-설치"><a href="#2-1-설치" class="headerlink" title="2.1 설치"></a>2.1 설치</h3><p>먼저 <code>electron-localshortcut</code> 패키지를 설치해야 합니다:</p><pre><code class="highlight bash">npm install electron-localshortcut</code></pre><h3 id="2-2-로컬-단축키-등록"><a href="#2-2-로컬-단축키-등록" class="headerlink" title="2.2 로컬 단축키 등록"></a>2.2 로컬 단축키 등록</h3><p>다음은 로컬 단축키를 등록하는 예제입니다:</p><pre><code class="highlight javascript"><span class="keyword">const</span> &#123; app, <span class="title class_">BrowserWindow</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;electron&quot;</span>);<span class="keyword">const</span> localShortcut = <span class="built_in">require</span>(<span class="string">&quot;electron-localshortcut&quot;</span>);<span class="keyword">function</span> <span class="title function_">createWindow</span>(<span class="params"></span>) &#123;  <span class="keyword">const</span> win = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;    <span class="attr">width</span>: <span class="number">800</span>,    <span class="attr">height</span>: <span class="number">600</span>,    <span class="attr">webPreferences</span>: &#123;      <span class="attr">nodeIntegration</span>: <span class="literal">true</span>,    &#125;,  &#125;);  win.<span class="title function_">loadFile</span>(<span class="string">&quot;index.html&quot;</span>);  localShortcut.<span class="title function_">register</span>(win, <span class="string">&quot;CommandOrControl+Y&quot;</span>, <span class="function">() =&gt;</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;CommandOrControl+Y is pressed&quot;</span>);  &#125;);&#125;app.<span class="title function_">whenReady</span>().<span class="title function_">then</span>(createWindow);app.<span class="title function_">on</span>(<span class="string">&quot;will-quit&quot;</span>, <span class="function">() =&gt;</span> &#123;  localShortcut.<span class="title function_">unregisterAll</span>();&#125;);</code></pre><h2 id="3-사용자-설정-가능한-단축키-구현"><a href="#3-사용자-설정-가능한-단축키-구현" class="headerlink" title="3. 사용자 설정 가능한 단축키 구현"></a>3. 사용자 설정 가능한 단축키 구현</h2><p>사용자가 단축키를 설정할 수 있도록 기능을 구현할 수 있습니다. 이를 위해 설정 파일을 사용하여 단축키를 저장하고, 애플리케이션 시작 시 해당 단축키를 등록합니다.</p><h3 id="3-1-설정-파일-사용"><a href="#3-1-설정-파일-사용" class="headerlink" title="3.1 설정 파일 사용"></a>3.1 설정 파일 사용</h3><p>다음은 설정 파일을 사용하여 단축키를 저장하고 불러오는 예제입니다:</p><pre><code class="highlight javascript"><span class="keyword">const</span> &#123; app, globalShortcut &#125; = <span class="built_in">require</span>(<span class="string">&quot;electron&quot;</span>);<span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);<span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);<span class="keyword">const</span> configPath = path.<span class="title function_">join</span>(app.<span class="title function_">getPath</span>(<span class="string">&quot;userData&quot;</span>), <span class="string">&quot;config.json&quot;</span>);<span class="keyword">function</span> <span class="title function_">loadConfig</span>(<span class="params"></span>) &#123;  <span class="keyword">if</span> (fs.<span class="title function_">existsSync</span>(configPath)) &#123;    <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">parse</span>(fs.<span class="title function_">readFileSync</span>(configPath));  &#125;  <span class="keyword">return</span> &#123;&#125;;&#125;<span class="keyword">function</span> <span class="title function_">saveConfig</span>(<span class="params">config</span>) &#123;  fs.<span class="title function_">writeFileSync</span>(configPath, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(config));&#125;app.<span class="title function_">whenReady</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;  <span class="keyword">const</span> config = <span class="title function_">loadConfig</span>();  <span class="keyword">const</span> shortcut = config.<span class="property">shortcut</span> || <span class="string">&quot;CommandOrControl+X&quot;</span>;  globalShortcut.<span class="title function_">register</span>(shortcut, <span class="function">() =&gt;</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;shortcut&#125;</span> is pressed`</span>);  &#125;);&#125;);app.<span class="title function_">on</span>(<span class="string">&quot;will-quit&quot;</span>, <span class="function">() =&gt;</span> &#123;  globalShortcut.<span class="title function_">unregisterAll</span>();&#125;);</code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 Electron 애플리케이션에서 키보드 단축키를 설정하는 방법에 대해 알아보았습니다. 전역 및 로컬 단축키 설정과 사용자 설정 가능한 단축키 구현 방법을 다루었습니다. 이러한 단축키 설정은 애플리케이션의 사용성을 높이고, 사용자 경험을 향상시키는 데 중요한 역할을 합니다. 다음 시간에는 프로세스 및 자원 관리에 대해 알아보겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> Electron </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Electron 다중 언어 지원</title>
      <link href="/electron/17/"/>
      <url>/electron/17/</url>
      
        <content type="html"><![CDATA[<h1 id="다중-언어-지원"><a href="#다중-언어-지원" class="headerlink" title="다중 언어 지원"></a>다중 언어 지원</h1><p>안녕하세요, <strong>뉴코딩</strong>입니다!<br>이번 시간에는 <strong>Electron</strong> 애플리케이션에서 <strong>다중 언어 지원</strong>을 설정하는 방법을 알아보겠습니다. 국제화(i18n) 설정과 다중 언어 지원을 위한 리소스 관리 방법을 다루겠습니다.</p><h2 id="1-국제화-i18n-설정"><a href="#1-국제화-i18n-설정" class="headerlink" title="1. 국제화(i18n) 설정"></a>1. 국제화(i18n) 설정</h2><p>국제화(i18n)는 애플리케이션이 여러 언어를 지원할 수 있도록 하는 과정입니다. <code>i18next</code> 라이브러리를 사용하여 국제화를 설정할 수 있습니다.</p><h3 id="1-1-설치"><a href="#1-1-설치" class="headerlink" title="1.1 설치"></a>1.1 설치</h3><p>먼저 <code>i18next</code>와 <code>react-i18next</code> 패키지를 설치해야 합니다:</p><pre><code class="highlight bash">npm install i18next react-i18next</code></pre><h3 id="1-2-설정"><a href="#1-2-설정" class="headerlink" title="1.2 설정"></a>1.2 설정</h3><p>다음은 <code>i18next</code>를 설정하는 예제입니다:</p><pre><code class="highlight javascript"><span class="keyword">import</span> i18n <span class="keyword">from</span> <span class="string">&quot;i18next&quot;</span>;<span class="keyword">import</span> &#123; initReactI18next &#125; <span class="keyword">from</span> <span class="string">&quot;react-i18next&quot;</span>;i18n.<span class="title function_">use</span>(initReactI18next).<span class="title function_">init</span>(&#123;  <span class="attr">resources</span>: &#123;    <span class="attr">en</span>: &#123;      <span class="attr">translation</span>: &#123;        <span class="string">&quot;Welcome to React&quot;</span>: <span class="string">&quot;Welcome to React and react-i18next&quot;</span>,      &#125;,    &#125;,    <span class="attr">ko</span>: &#123;      <span class="attr">translation</span>: &#123;        <span class="string">&quot;Welcome to React&quot;</span>: <span class="string">&quot;리액트와 react-i18next에 오신 것을 환영합니다&quot;</span>,      &#125;,    &#125;,  &#125;,  <span class="attr">lng</span>: <span class="string">&quot;en&quot;</span>,  <span class="attr">fallbackLng</span>: <span class="string">&quot;en&quot;</span>,  <span class="attr">interpolation</span>: &#123;    <span class="attr">escapeValue</span>: <span class="literal">false</span>,  &#125;,&#125;);<span class="keyword">export</span> <span class="keyword">default</span> i18n;</code></pre><h2 id="2-다중-언어-지원을-위한-리소스-관리"><a href="#2-다중-언어-지원을-위한-리소스-관리" class="headerlink" title="2. 다중 언어 지원을 위한 리소스 관리"></a>2. 다중 언어 지원을 위한 리소스 관리</h2><p>다중 언어 지원을 위해 각 언어별로 리소스 파일을 관리할 수 있습니다.</p><h3 id="2-1-리소스-파일-생성"><a href="#2-1-리소스-파일-생성" class="headerlink" title="2.1 리소스 파일 생성"></a>2.1 리소스 파일 생성</h3><p>다음은 각 언어별로 리소스 파일을 생성하는 예제입니다:</p><pre><code class="highlight json"><span class="comment">// public/locales/en/translation.json</span><span class="punctuation">&#123;</span>  <span class="attr">&quot;Welcome to React&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Welcome to React and react-i18next&quot;</span><span class="punctuation">&#125;</span></code></pre><pre><code class="highlight json"><span class="comment">// public/locales/ko/translation.json</span><span class="punctuation">&#123;</span>  <span class="attr">&quot;Welcome to React&quot;</span><span class="punctuation">:</span> <span class="string">&quot;리액트와 react-i18next에 오신 것을 환영합니다&quot;</span><span class="punctuation">&#125;</span></code></pre><h3 id="2-2-리소스-파일-사용"><a href="#2-2-리소스-파일-사용" class="headerlink" title="2.2 리소스 파일 사용"></a>2.2 리소스 파일 사용</h3><p>다음은 리소스 파일을 사용하여 다중 언어를 지원하는 예제입니다:</p><pre><code class="highlight javascript"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;<span class="keyword">import</span> &#123; useTranslation &#125; <span class="keyword">from</span> <span class="string">&quot;react-i18next&quot;</span>;<span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;  <span class="keyword">const</span> &#123; t &#125; = <span class="title function_">useTranslation</span>();  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;t(&quot;Welcome to React&quot;)&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;&#125;<span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 Electron 애플리케이션에서 다중 언어 지원을 설정하는 방법에 대해 알아보았습니다. 국제화(i18n) 설정과 다중 언어 지원을 위한 리소스 관리 방법을 다루었습니다. 이러한 다중 언어 지원은 글로벌 사용자에게 애플리케이션을 제공하는 데 중요한 역할을 합니다. 다음 시간에는 키보드 단축키 설정에 대해 알아보겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> Electron </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Electron 시스템 트레이 및 알림</title>
      <link href="/electron/16/"/>
      <url>/electron/16/</url>
      
        <content type="html"><![CDATA[<h1 id="시스템-트레이-및-알림"><a href="#시스템-트레이-및-알림" class="headerlink" title="시스템 트레이 및 알림"></a>시스템 트레이 및 알림</h1><p>안녕하세요, <strong>뉴코딩</strong>입니다!<br>이번 시간에는 <strong>Electron</strong> 애플리케이션에서 <strong>시스템 트레이</strong>와 <strong>알림</strong>을 설정하는 방법을 알아보겠습니다. 시스템 트레이 아이콘 및 메뉴 구현과 데스크톱 알림 설정 및 사용 방법을 다루겠습니다.</p><h2 id="1-시스템-트레이-아이콘-및-메뉴-구현"><a href="#1-시스템-트레이-아이콘-및-메뉴-구현" class="headerlink" title="1. 시스템 트레이 아이콘 및 메뉴 구현"></a>1. 시스템 트레이 아이콘 및 메뉴 구현</h2><p>시스템 트레이는 애플리케이션이 백그라운드에서 실행 중임을 사용자에게 알리고, 빠른 액세스를 제공하는 데 유용합니다.</p><h3 id="1-1-시스템-트레이-아이콘-설정"><a href="#1-1-시스템-트레이-아이콘-설정" class="headerlink" title="1.1 시스템 트레이 아이콘 설정"></a>1.1 시스템 트레이 아이콘 설정</h3><p>다음은 시스템 트레이 아이콘을 설정하는 예제입니다:</p><pre><code class="highlight javascript"><span class="keyword">const</span> &#123; app, <span class="title class_">BrowserWindow</span>, <span class="title class_">Tray</span>, <span class="title class_">Menu</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;electron&quot;</span>);<span class="keyword">let</span> tray = <span class="literal">null</span>;app.<span class="title function_">whenReady</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;  <span class="keyword">const</span> win = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;    <span class="attr">width</span>: <span class="number">800</span>,    <span class="attr">height</span>: <span class="number">600</span>,    <span class="attr">webPreferences</span>: &#123;      <span class="attr">nodeIntegration</span>: <span class="literal">true</span>,    &#125;,  &#125;);  win.<span class="title function_">loadFile</span>(<span class="string">&quot;index.html&quot;</span>);  tray = <span class="keyword">new</span> <span class="title class_">Tray</span>(<span class="string">&quot;path/to/icon.png&quot;</span>);  <span class="keyword">const</span> contextMenu = <span class="title class_">Menu</span>.<span class="title function_">buildFromTemplate</span>([    &#123; <span class="attr">label</span>: <span class="string">&quot;항목1&quot;</span>, <span class="attr">type</span>: <span class="string">&quot;radio&quot;</span> &#125;,    &#123; <span class="attr">label</span>: <span class="string">&quot;항목2&quot;</span>, <span class="attr">type</span>: <span class="string">&quot;radio&quot;</span> &#125;,  ]);  tray.<span class="title function_">setToolTip</span>(<span class="string">&quot;이것은 내 애플리케이션입니다.&quot;</span>);  tray.<span class="title function_">setContextMenu</span>(contextMenu);&#125;);</code></pre><h2 id="2-데스크톱-알림-설정-및-사용"><a href="#2-데스크톱-알림-설정-및-사용" class="headerlink" title="2. 데스크톱 알림 설정 및 사용"></a>2. 데스크톱 알림 설정 및 사용</h2><p>데스크톱 알림은 사용자에게 중요한 정보를 전달하는 데 유용합니다.</p><h3 id="2-1-알림-설정"><a href="#2-1-알림-설정" class="headerlink" title="2.1 알림 설정"></a>2.1 알림 설정</h3><p>다음은 데스크톱 알림을 설정하는 예제입니다:</p><pre><code class="highlight javascript"><span class="keyword">const</span> &#123; <span class="title class_">Notification</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;electron&quot;</span>);<span class="keyword">function</span> <span class="title function_">showNotification</span>(<span class="params"></span>) &#123;  <span class="keyword">const</span> notification = <span class="keyword">new</span> <span class="title class_">Notification</span>(&#123;    <span class="attr">title</span>: <span class="string">&quot;기본 알림&quot;</span>,    <span class="attr">body</span>: <span class="string">&quot;이것은 기본 알림입니다.&quot;</span>,  &#125;);  notification.<span class="title function_">show</span>();&#125;app.<span class="title function_">whenReady</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;  <span class="title function_">showNotification</span>();&#125;);</code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 Electron 애플리케이션에서 시스템 트레이와 알림을 설정하는 방법에 대해 알아보았습니다. 시스템 트레이 아이콘 및 메뉴 구현과 데스크톱 알림 설정 및 사용 방법을 다루었습니다. 이러한 기능들은 사용자 경험을 향상시키고, 애플리케이션의 유용성을 높이는 데 중요한 역할을 합니다. 다음 시간에는 다중 언어 지원에 대해 알아보겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> Electron </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Electron 테스트 및 성능 최적화</title>
      <link href="/electron/15/"/>
      <url>/electron/15/</url>
      
        <content type="html"><![CDATA[<h1 id="테스트-및-성능-최적화"><a href="#테스트-및-성능-최적화" class="headerlink" title="테스트 및 성능 최적화"></a>테스트 및 성능 최적화</h1><p>안녕하세요, <strong>뉴코딩</strong>입니다!<br>이번 시간에는 <strong>Electron</strong> 애플리케이션에서 <strong>테스트</strong>와 <strong>성능 최적화</strong>를 설정하는 방법을 알아보겠습니다. 자동화된 테스트 설정(Spectron)과 메모리 사용 최적화 및 애플리케이션 성능 향상 방법을 다루겠습니다.</p><h2 id="1-자동화된-테스트-설정-Spectron"><a href="#1-자동화된-테스트-설정-Spectron" class="headerlink" title="1. 자동화된 테스트 설정 (Spectron)"></a>1. 자동화된 테스트 설정 (Spectron)</h2><p>Spectron은 Electron 애플리케이션을 테스트하기 위한 프레임워크입니다. WebDriver와 Mocha를 사용하여 애플리케이션의 기능을 자동으로 테스트할 수 있습니다.</p><h3 id="1-1-설치"><a href="#1-1-설치" class="headerlink" title="1.1 설치"></a>1.1 설치</h3><p>먼저 Spectron과 Mocha를 설치해야 합니다:</p><pre><code class="highlight bash">npm install spectron mocha</code></pre><h3 id="1-2-테스트-설정"><a href="#1-2-테스트-설정" class="headerlink" title="1.2 테스트 설정"></a>1.2 테스트 설정</h3><p>다음은 Spectron을 사용하여 간단한 테스트를 설정하는 예제입니다:</p><pre><code class="highlight javascript"><span class="keyword">const</span> <span class="title class_">Application</span> = <span class="built_in">require</span>(<span class="string">&quot;spectron&quot;</span>).<span class="property">Application</span>;<span class="keyword">const</span> assert = <span class="built_in">require</span>(<span class="string">&quot;assert&quot;</span>);<span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);<span class="title function_">describe</span>(<span class="string">&quot;애플리케이션 테스트&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;  <span class="variable language_">this</span>.<span class="title function_">timeout</span>(<span class="number">10000</span>);  <span class="title function_">beforeEach</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;    <span class="variable language_">this</span>.<span class="property">app</span> = <span class="keyword">new</span> <span class="title class_">Application</span>(&#123;      <span class="attr">path</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;node_modules&quot;</span>, <span class="string">&quot;.bin&quot;</span>, <span class="string">&quot;electron&quot;</span>),      <span class="attr">args</span>: [path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;main.js&quot;</span>)],    &#125;);    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">app</span>.<span class="title function_">start</span>();  &#125;);  <span class="title function_">afterEach</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">app</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">app</span>.<span class="title function_">isRunning</span>()) &#123;      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">app</span>.<span class="title function_">stop</span>();    &#125;  &#125;);  <span class="title function_">it</span>(<span class="string">&quot;애플리케이션이 시작되고 윈도우가 생성되는지 확인&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">app</span>.<span class="property">client</span>.<span class="title function_">getWindowCount</span>().<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">count</span>) &#123;      assert.<span class="title function_">strictEqual</span>(count, <span class="number">1</span>);    &#125;);  &#125;);&#125;);</code></pre><h2 id="2-메모리-사용-최적화-및-애플리케이션-성능-향상"><a href="#2-메모리-사용-최적화-및-애플리케이션-성능-향상" class="headerlink" title="2. 메모리 사용 최적화 및 애플리케이션 성능 향상"></a>2. 메모리 사용 최적화 및 애플리케이션 성능 향상</h2><p>Electron 애플리케이션의 성능을 최적화하고 메모리 사용을 줄이는 방법을 알아보겠습니다.</p><h3 id="2-1-메모리-사용-최적화"><a href="#2-1-메모리-사용-최적화" class="headerlink" title="2.1 메모리 사용 최적화"></a>2.1 메모리 사용 최적화</h3><p>메모리 사용을 최적화하기 위해 불필요한 객체를 제거하고, 이벤트 리스너를 적절히 관리해야 합니다. 다음은 메모리 사용을 최적화하는 몇 가지 방법입니다:</p><ul><li>사용하지 않는 객체를 <code>null</code>로 설정하여 가비지 컬렉션이 이를 수집할 수 있도록 합니다.</li><li>이벤트 리스너를 더 이상 필요하지 않을 때 제거합니다.</li></ul><h3 id="2-2-애플리케이션-성능-향상"><a href="#2-2-애플리케이션-성능-향상" class="headerlink" title="2.2 애플리케이션 성능 향상"></a>2.2 애플리케이션 성능 향상</h3><p>애플리케이션의 성능을 향상시키기 위해 다음과 같은 방법을 사용할 수 있습니다:</p><ul><li>렌더링 최적화: 가상 DOM을 사용하여 렌더링 성능을 향상시킵니다.</li><li>코드 스플리팅: 필요한 시점에만 코드를 로드하여 초기 로딩 시간을 줄입니다.</li><li>캐싱: 자주 사용되는 데이터를 캐싱하여 성능을 향상시킵니다.</li></ul><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 Electron 애플리케이션에서 테스트와 성능 최적화를 설정하는 방법에 대해 알아보았습니다. 자동화된 테스트 설정(Spectron)과 메모리 사용 최적화 및 애플리케이션 성능 향상 방법을 다루었습니다. 이러한 테스트와 성능 최적화는 애플리케이션의 안정성과 효율성을 높이는 데 중요한 역할을 합니다. 다음 시간에는 시스템 트레이 및 알림에 대해 알아보겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> Electron </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Electron 자동 업데이트 구현</title>
      <link href="/electron/14/"/>
      <url>/electron/14/</url>
      
        <content type="html"><![CDATA[<h1 id="자동-업데이트-구현"><a href="#자동-업데이트-구현" class="headerlink" title="자동 업데이트 구현"></a>자동 업데이트 구현</h1><p>안녕하세요, <strong>뉴코딩</strong>입니다!<br>이번 시간에는 <strong>Electron</strong> 애플리케이션에서 <strong>자동 업데이트</strong>를 구현하는 방법을 알아보겠습니다. 업데이트 체크 및 다운로드 구현과 애플리케이션 업데이트 후 자동 재시작 처리 방법을 다루겠습니다.</p><h2 id="1-업데이트-체크-및-다운로드-구현"><a href="#1-업데이트-체크-및-다운로드-구현" class="headerlink" title="1. 업데이트 체크 및 다운로드 구현"></a>1. 업데이트 체크 및 다운로드 구현</h2><p>Electron 애플리케이션에서 자동 업데이트를 구현하기 위해 <code>electron-updater</code> 라이브러리를 사용할 수 있습니다.</p><h3 id="1-1-설치"><a href="#1-1-설치" class="headerlink" title="1.1 설치"></a>1.1 설치</h3><p>먼저 <code>electron-updater</code> 패키지를 설치해야 합니다:</p><pre><code class="highlight bash">npm install electron-updater</code></pre><h3 id="1-2-설정"><a href="#1-2-설정" class="headerlink" title="1.2 설정"></a>1.2 설정</h3><p>다음은 <code>main.js</code> 파일에 자동 업데이트를 설정하는 예제입니다:</p><pre><code class="highlight javascript"><span class="keyword">const</span> &#123; app, <span class="title class_">BrowserWindow</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;electron&quot;</span>);<span class="keyword">const</span> &#123; autoUpdater &#125; = <span class="built_in">require</span>(<span class="string">&quot;electron-updater&quot;</span>);<span class="keyword">function</span> <span class="title function_">createWindow</span>(<span class="params"></span>) &#123;  <span class="keyword">const</span> win = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;    <span class="attr">width</span>: <span class="number">800</span>,    <span class="attr">height</span>: <span class="number">600</span>,    <span class="attr">webPreferences</span>: &#123;      <span class="attr">nodeIntegration</span>: <span class="literal">true</span>,    &#125;,  &#125;);  win.<span class="title function_">loadFile</span>(<span class="string">&quot;index.html&quot;</span>);  autoUpdater.<span class="title function_">checkForUpdatesAndNotify</span>();&#125;app.<span class="title function_">whenReady</span>().<span class="title function_">then</span>(createWindow);autoUpdater.<span class="title function_">on</span>(<span class="string">&quot;update-available&quot;</span>, <span class="function">() =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;업데이트가 가능합니다.&quot;</span>);&#125;);autoUpdater.<span class="title function_">on</span>(<span class="string">&quot;update-downloaded&quot;</span>, <span class="function">() =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;업데이트가 다운로드되었습니다.&quot;</span>);&#125;);</code></pre><h2 id="2-애플리케이션-업데이트-후-자동-재시작-처리"><a href="#2-애플리케이션-업데이트-후-자동-재시작-처리" class="headerlink" title="2. 애플리케이션 업데이트 후 자동 재시작 처리"></a>2. 애플리케이션 업데이트 후 자동 재시작 처리</h2><p>업데이트가 다운로드된 후 애플리케이션을 자동으로 재시작하여 업데이트를 적용할 수 있습니다.</p><h3 id="2-1-업데이트-후-재시작"><a href="#2-1-업데이트-후-재시작" class="headerlink" title="2.1 업데이트 후 재시작"></a>2.1 업데이트 후 재시작</h3><p>다음은 업데이트가 다운로드된 후 애플리케이션을 자동으로 재시작하는 예제입니다:</p><pre><code class="highlight javascript"><span class="keyword">const</span> &#123; app, <span class="title class_">BrowserWindow</span>, dialog &#125; = <span class="built_in">require</span>(<span class="string">&quot;electron&quot;</span>);<span class="keyword">const</span> &#123; autoUpdater &#125; = <span class="built_in">require</span>(<span class="string">&quot;electron-updater&quot;</span>);<span class="keyword">function</span> <span class="title function_">createWindow</span>(<span class="params"></span>) &#123;  <span class="keyword">const</span> win = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;    <span class="attr">width</span>: <span class="number">800</span>,    <span class="attr">height</span>: <span class="number">600</span>,    <span class="attr">webPreferences</span>: &#123;      <span class="attr">nodeIntegration</span>: <span class="literal">true</span>,    &#125;,  &#125;);  win.<span class="title function_">loadFile</span>(<span class="string">&quot;index.html&quot;</span>);  autoUpdater.<span class="title function_">checkForUpdatesAndNotify</span>();&#125;app.<span class="title function_">whenReady</span>().<span class="title function_">then</span>(createWindow);autoUpdater.<span class="title function_">on</span>(<span class="string">&quot;update-downloaded&quot;</span>, <span class="function">() =&gt;</span> &#123;  <span class="keyword">const</span> options = &#123;    <span class="attr">type</span>: <span class="string">&quot;info&quot;</span>,    <span class="attr">buttons</span>: [<span class="string">&quot;재시작&quot;</span>, <span class="string">&quot;나중에&quot;</span>],    <span class="attr">title</span>: <span class="string">&quot;업데이트 다운로드 완료&quot;</span>,    <span class="attr">message</span>: <span class="string">&quot;업데이트가 다운로드되었습니다. 지금 재시작하시겠습니까?&quot;</span>,  &#125;;  dialog.<span class="title function_">showMessageBox</span>(options).<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;    <span class="keyword">if</span> (result.<span class="property">response</span> === <span class="number">0</span>) &#123;      autoUpdater.<span class="title function_">quitAndInstall</span>();    &#125;  &#125;);&#125;);</code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 Electron 애플리케이션에서 자동 업데이트를 구현하는 방법에 대해 알아보았습니다. 업데이트 체크 및 다운로드 구현과 애플리케이션 업데이트 후 자동 재시작 처리 방법을 다루었습니다. 이러한 자동 업데이트 기능은 애플리케이션의 최신 상태를 유지하고, 사용자에게 새로운 기능과 버그 수정을 제공하는 데 중요한 역할을 합니다. 다음 시간에는 테스트 및 성능 최적화에 대해 알아보겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> Electron </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Electron 애플리케이션 패키징 및 배포</title>
      <link href="/electron/13/"/>
      <url>/electron/13/</url>
      
        <content type="html"><![CDATA[<h1 id="애플리케이션-패키징-및-배포"><a href="#애플리케이션-패키징-및-배포" class="headerlink" title="애플리케이션 패키징 및 배포"></a>애플리케이션 패키징 및 배포</h1><p>안녕하세요, <strong>뉴코딩</strong>입니다!<br>이번 시간에는 <strong>Electron</strong> 애플리케이션을 <strong>패키징</strong>하고 <strong>배포</strong>하는 방법을 알아보겠습니다. Electron Forge와 Electron Builder를 사용하여 다양한 OS(Windows, macOS, Linux)용 애플리케이션을 빌드하고 배포하는 방법을 다루겠습니다.</p><h2 id="1-Electron-Forge-사용"><a href="#1-Electron-Forge-사용" class="headerlink" title="1. Electron Forge 사용"></a>1. Electron Forge 사용</h2><p>Electron Forge는 Electron 애플리케이션을 쉽게 패키징하고 배포할 수 있는 도구입니다.</p><h3 id="1-1-설치"><a href="#1-1-설치" class="headerlink" title="1.1 설치"></a>1.1 설치</h3><p>먼저 Electron Forge를 설치해야 합니다:</p><pre><code class="highlight bash">npx create-electron-app my-app --template=typescript-webpack<span class="built_in">cd</span> my-appnpm install --save-dev @electron-forge/clinpx electron-forge import</code></pre><h3 id="1-2-패키징"><a href="#1-2-패키징" class="headerlink" title="1.2 패키징"></a>1.2 패키징</h3><p>다음은 Electron Forge를 사용하여 애플리케이션을 패키징하는 예제입니다:</p><pre><code class="highlight bash">npm run make</code></pre><p>이 명령어를 실행하면 <code>out</code> 디렉터리에 패키징된 애플리케이션이 생성됩니다.</p><h2 id="2-Electron-Builder-사용"><a href="#2-Electron-Builder-사용" class="headerlink" title="2. Electron Builder 사용"></a>2. Electron Builder 사용</h2><p>Electron Builder는 Electron 애플리케이션을 빌드하고 배포하는 데 사용되는 또 다른 강력한 도구입니다.</p><h3 id="2-1-설치"><a href="#2-1-설치" class="headerlink" title="2.1 설치"></a>2.1 설치</h3><p>먼저 Electron Builder를 설치해야 합니다:</p><pre><code class="highlight bash">npm install --save-dev electron-builder</code></pre><h3 id="2-2-설정"><a href="#2-2-설정" class="headerlink" title="2.2 설정"></a>2.2 설정</h3><p>다음은 <code>package.json</code> 파일에 Electron Builder 설정을 추가하는 예제입니다:</p><pre><code class="highlight json"><span class="punctuation">&#123;</span>  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;my-app&quot;</span><span class="punctuation">,</span>  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span>  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;main.js&quot;</span><span class="punctuation">,</span>  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;electron-builder&quot;</span>  <span class="punctuation">&#125;</span><span class="punctuation">,</span>  <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>    <span class="attr">&quot;appId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;com.example.myapp&quot;</span><span class="punctuation">,</span>    <span class="attr">&quot;mac&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>      <span class="attr">&quot;category&quot;</span><span class="punctuation">:</span> <span class="string">&quot;public.app-category.utilities&quot;</span>    <span class="punctuation">&#125;</span><span class="punctuation">,</span>    <span class="attr">&quot;win&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>      <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;nsis&quot;</span>    <span class="punctuation">&#125;</span><span class="punctuation">,</span>    <span class="attr">&quot;linux&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>      <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;AppImage&quot;</span>    <span class="punctuation">&#125;</span>  <span class="punctuation">&#125;</span><span class="punctuation">,</span>  <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>    <span class="attr">&quot;electron&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^23.0.0&quot;</span><span class="punctuation">,</span>    <span class="attr">&quot;electron-builder&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^22.11.7&quot;</span>  <span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></code></pre><h3 id="2-3-빌드"><a href="#2-3-빌드" class="headerlink" title="2.3 빌드"></a>2.3 빌드</h3><p>다음은 Electron Builder를 사용하여 애플리케이션을 빌드하는 예제입니다:</p><pre><code class="highlight bash">npm run build</code></pre><p>이 명령어를 실행하면 <code>dist</code> 디렉터리에 빌드된 애플리케이션이 생성됩니다.</p><h2 id="3-다양한-OS용-애플리케이션-빌드-및-배포"><a href="#3-다양한-OS용-애플리케이션-빌드-및-배포" class="headerlink" title="3. 다양한 OS용 애플리케이션 빌드 및 배포"></a>3. 다양한 OS용 애플리케이션 빌드 및 배포</h2><p>Electron Forge와 Electron Builder를 사용하여 Windows, macOS, Linux용 애플리케이션을 쉽게 빌드하고 배포할 수 있습니다.</p><h3 id="3-1-Windows용-빌드"><a href="#3-1-Windows용-빌드" class="headerlink" title="3.1 Windows용 빌드"></a>3.1 Windows용 빌드</h3><p>Windows용 애플리케이션을 빌드하려면, <code>target</code>을 <code>nsis</code>로 설정합니다. 빌드된 애플리케이션은 <code>.exe</code> 파일로 생성됩니다.</p><h3 id="3-2-macOS용-빌드"><a href="#3-2-macOS용-빌드" class="headerlink" title="3.2 macOS용 빌드"></a>3.2 macOS용 빌드</h3><p>macOS용 애플리케이션을 빌드하려면, <code>target</code>을 <code>dmg</code> 또는 <code>zip</code>으로 설정합니다. 빌드된 애플리케이션은 <code>.dmg</code> 또는 <code>.zip</code> 파일로 생성됩니다.</p><h3 id="3-3-Linux용-빌드"><a href="#3-3-Linux용-빌드" class="headerlink" title="3.3 Linux용 빌드"></a>3.3 Linux용 빌드</h3><p>Linux용 애플리케이션을 빌드하려면, <code>target</code>을 <code>AppImage</code> 또는 <code>deb</code>으로 설정합니다. 빌드된 애플리케이션은 <code>.AppImage</code> 또는 <code>.deb</code> 파일로 생성됩니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 Electron 애플리케이션을 패키징하고 배포하는 방법에 대해 알아보았습니다. Electron Forge와 Electron Builder를 사용하여 다양한 OS(Windows, macOS, Linux)용 애플리케이션을 빌드하고 배포하는 방법을 다루었습니다. 이러한 패키징과 배포 과정은 애플리케이션을 사용자에게 제공하는 데 중요한 역할을 합니다. 다음 시간에는 자동 업데이트 구현에 대해 알아보겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> Electron </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Electron 사용자 인터페이스 개선</title>
      <link href="/electron/12/"/>
      <url>/electron/12/</url>
      
        <content type="html"><![CDATA[<h1 id="사용자-인터페이스-개선"><a href="#사용자-인터페이스-개선" class="headerlink" title="사용자 인터페이스 개선"></a>사용자 인터페이스 개선</h1><p>안녕하세요, <strong>뉴코딩</strong>입니다!<br>이번 시간에는 <strong>Electron</strong> 애플리케이션에서 <strong>사용자 인터페이스</strong>를 개선하는 방법을 알아보겠습니다. CSS 프레임워크(Bootstrap, Tailwind 등)를 통합하고, 사용자 경험을 고려한 UI&#x2F;UX 설계 방법을 다루겠습니다.</p><h2 id="1-CSS-프레임워크-통합"><a href="#1-CSS-프레임워크-통합" class="headerlink" title="1. CSS 프레임워크 통합"></a>1. CSS 프레임워크 통합</h2><p>CSS 프레임워크를 사용하면 빠르고 쉽게 아름다운 사용자 인터페이스를 만들 수 있습니다. 대표적인 CSS 프레임워크로는 Bootstrap과 Tailwind가 있습니다.</p><h3 id="1-1-Bootstrap-통합"><a href="#1-1-Bootstrap-통합" class="headerlink" title="1.1 Bootstrap 통합"></a>1.1 Bootstrap 통합</h3><p>Bootstrap은 가장 널리 사용되는 CSS 프레임워크 중 하나입니다. 다음은 Bootstrap을 통합하는 예제입니다:</p><h4 id="1-1-1-설치"><a href="#1-1-1-설치" class="headerlink" title="1.1.1 설치"></a>1.1.1 설치</h4><p>먼저 Bootstrap을 설치해야 합니다:</p><pre><code class="highlight bash">npm install bootstrap</code></pre><h4 id="1-1-2-사용"><a href="#1-1-2-사용" class="headerlink" title="1.1.2 사용"></a>1.1.2 사용</h4><p>다음은 Bootstrap을 사용하여 간단한 버튼을 만드는 예제입니다:</p><pre><code class="highlight html"><span class="comment">&lt;!-- index.html --&gt;</span><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">head</span>&gt;</span>    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span>    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span>    <span class="tag">&lt;<span class="name">link</span></span><span class="tag">      <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span></span><span class="tag">      <span class="attr">href</span>=<span class="string">&quot;node_modules/bootstrap/dist/css/bootstrap.min.css&quot;</span></span><span class="tag">    /&gt;</span>    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Bootstrap 통합<span class="tag">&lt;/<span class="name">title</span>&gt;</span>  <span class="tag">&lt;/<span class="name">head</span>&gt;</span>  <span class="tag">&lt;<span class="name">body</span>&gt;</span>    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span>      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Bootstrap 버튼 예제<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>클릭하세요<span class="tag">&lt;/<span class="name">button</span>&gt;</span>    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>  <span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></code></pre><h3 id="1-2-Tailwind-통합"><a href="#1-2-Tailwind-통합" class="headerlink" title="1.2 Tailwind 통합"></a>1.2 Tailwind 통합</h3><p>Tailwind는 유틸리티 클래스 기반의 CSS 프레임워크로, 매우 유연하고 커스터마이징이 용이합니다. 다음은 Tailwind를 통합하는 예제입니다:</p><h4 id="1-2-1-설치"><a href="#1-2-1-설치" class="headerlink" title="1.2.1 설치"></a>1.2.1 설치</h4><p>먼저 Tailwind를 설치해야 합니다:</p><pre><code class="highlight bash">npm install tailwindcssnpx tailwindcss init</code></pre><h4 id="1-2-2-설정"><a href="#1-2-2-설정" class="headerlink" title="1.2.2 설정"></a>1.2.2 설정</h4><p>다음은 Tailwind를 설정하는 예제입니다:</p><pre><code class="highlight javascript"><span class="comment">// tailwind.config.js</span><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;  <span class="attr">content</span>: [<span class="string">&quot;./src/**/*.&#123;html,js&#125;&quot;</span>],  <span class="attr">theme</span>: &#123;    <span class="attr">extend</span>: &#123;&#125;,  &#125;,  <span class="attr">plugins</span>: [],&#125;;</code></pre><h4 id="1-2-3-사용"><a href="#1-2-3-사용" class="headerlink" title="1.2.3 사용"></a>1.2.3 사용</h4><p>다음은 Tailwind를 사용하여 간단한 버튼을 만드는 예제입니다:</p><pre><code class="highlight html"><span class="comment">&lt;!-- index.html --&gt;</span><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">head</span>&gt;</span>    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span>    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span>    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;dist/output.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> /&gt;</span>    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Tailwind 통합<span class="tag">&lt;/<span class="name">title</span>&gt;</span>  <span class="tag">&lt;/<span class="name">head</span>&gt;</span>  <span class="tag">&lt;<span class="name">body</span>&gt;</span>    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container mx-auto&quot;</span>&gt;</span>      <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;text-2xl font-bold&quot;</span>&gt;</span>Tailwind 버튼 예제<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;bg-blue-500 text-white px-4 py-2 rounded&quot;</span>&gt;</span>        클릭하세요      <span class="tag">&lt;/<span class="name">button</span>&gt;</span>    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>  <span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></code></pre><h2 id="2-사용자-경험을-고려한-UI-UX-설계"><a href="#2-사용자-경험을-고려한-UI-UX-설계" class="headerlink" title="2. 사용자 경험을 고려한 UI&#x2F;UX 설계"></a>2. 사용자 경험을 고려한 UI&#x2F;UX 설계</h2><p>사용자 경험(UX)을 고려한 UI 설계는 애플리케이션의 사용성을 크게 향상시킵니다. 다음은 몇 가지 중요한 원칙입니다:</p><h3 id="2-1-일관성-유지"><a href="#2-1-일관성-유지" class="headerlink" title="2.1 일관성 유지"></a>2.1 일관성 유지</h3><p>일관된 디자인과 인터랙션 패턴을 유지하여 사용자가 애플리케이션을 쉽게 이해하고 사용할 수 있도록 합니다.</p><h3 id="2-2-피드백-제공"><a href="#2-2-피드백-제공" class="headerlink" title="2.2 피드백 제공"></a>2.2 피드백 제공</h3><p>사용자가 작업을 수행할 때 적절한 피드백을 제공하여 현재 상태를 명확히 알 수 있도록 합니다. 예를 들어, 버튼 클릭 시 로딩 스피너를 표시하는 것이 좋습니다.</p><h3 id="2-3-접근성-고려"><a href="#2-3-접근성-고려" class="headerlink" title="2.3 접근성 고려"></a>2.3 접근성 고려</h3><p>모든 사용자가 애플리케이션을 사용할 수 있도록 접근성을 고려한 디자인을 적용합니다. 예를 들어, 색상 대비를 충분히 높이고, 스크린 리더를 지원하는 태그를 추가합니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 Electron 애플리케이션에서 사용자 인터페이스를 개선하는 방법에 대해 알아보았습니다. CSS 프레임워크(Bootstrap, Tailwind 등)를 통합하고, 사용자 경험을 고려한 UI&#x2F;UX 설계 방법을 다루었습니다. 이러한 개선은 애플리케이션의 사용성을 높이고, 사용자 만족도를 향상시키는 데 중요한 역할을 합니다. 다음 시간에는 애플리케이션 패키징 및 배포에 대해 알아보겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> Electron </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Electron 애플리케이션 로깅 및 디버깅</title>
      <link href="/electron/11/"/>
      <url>/electron/11/</url>
      
        <content type="html"><![CDATA[<h1 id="애플리케이션-로깅-및-디버깅"><a href="#애플리케이션-로깅-및-디버깅" class="headerlink" title="애플리케이션 로깅 및 디버깅"></a>애플리케이션 로깅 및 디버깅</h1><p>안녕하세요, <strong>뉴코딩</strong>입니다!<br>이번 시간에는 <strong>Electron</strong> 애플리케이션에서 <strong>로깅</strong>과 <strong>디버깅</strong>을 설정하는 방법을 알아보겠습니다. 콘솔 로깅 및 파일 로깅 설정과 Electron의 개발자 도구 활용 방법을 다루겠습니다.</p><h2 id="1-콘솔-로깅"><a href="#1-콘솔-로깅" class="headerlink" title="1. 콘솔 로깅"></a>1. 콘솔 로깅</h2><p>콘솔 로깅은 개발 중 애플리케이션의 상태를 확인하는 데 유용합니다. <code>console.log</code>, <code>console.error</code> 등을 사용하여 로그를 출력할 수 있습니다.</p><h3 id="1-1-기본-콘솔-로깅"><a href="#1-1-기본-콘솔-로깅" class="headerlink" title="1.1 기본 콘솔 로깅"></a>1.1 기본 콘솔 로깅</h3><p>다음은 기본적인 콘솔 로깅 예제입니다:</p><pre><code class="highlight javascript"><span class="keyword">const</span> &#123; app, <span class="title class_">BrowserWindow</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;electron&quot;</span>);<span class="keyword">function</span> <span class="title function_">createWindow</span>(<span class="params"></span>) &#123;  <span class="keyword">const</span> win = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;    <span class="attr">width</span>: <span class="number">800</span>,    <span class="attr">height</span>: <span class="number">600</span>,    <span class="attr">webPreferences</span>: &#123;      <span class="attr">nodeIntegration</span>: <span class="literal">true</span>,    &#125;,  &#125;);  win.<span class="title function_">loadFile</span>(<span class="string">&quot;index.html&quot;</span>);  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;윈도우가 생성되었습니다.&quot;</span>);&#125;app.<span class="title function_">whenReady</span>().<span class="title function_">then</span>(createWindow);</code></pre><h2 id="2-파일-로깅"><a href="#2-파일-로깅" class="headerlink" title="2. 파일 로깅"></a>2. 파일 로깅</h2><p>파일 로깅은 애플리케이션의 로그를 파일에 저장하여 나중에 분석할 수 있도록 합니다. <code>winston</code> 라이브러리를 사용하여 파일 로깅을 설정할 수 있습니다.</p><h3 id="2-1-설치"><a href="#2-1-설치" class="headerlink" title="2.1 설치"></a>2.1 설치</h3><p>먼저 <code>winston</code> 패키지를 설치해야 합니다:</p><pre><code class="highlight bash">npm install winston</code></pre><h3 id="2-2-파일-로깅-설정"><a href="#2-2-파일-로깅-설정" class="headerlink" title="2.2 파일 로깅 설정"></a>2.2 파일 로깅 설정</h3><p>다음은 <code>winston</code>을 사용하여 파일 로깅을 설정하는 예제입니다:</p><pre><code class="highlight javascript"><span class="keyword">const</span> &#123; app, <span class="title class_">BrowserWindow</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;electron&quot;</span>);<span class="keyword">const</span> winston = <span class="built_in">require</span>(<span class="string">&quot;winston&quot;</span>);<span class="keyword">const</span> logger = winston.<span class="title function_">createLogger</span>(&#123;  <span class="attr">level</span>: <span class="string">&quot;info&quot;</span>,  <span class="attr">format</span>: winston.<span class="property">format</span>.<span class="title function_">json</span>(),  <span class="attr">transports</span>: [    <span class="keyword">new</span> winston.<span class="property">transports</span>.<span class="title class_">File</span>(&#123; <span class="attr">filename</span>: <span class="string">&quot;error.log&quot;</span>, <span class="attr">level</span>: <span class="string">&quot;error&quot;</span> &#125;),    <span class="keyword">new</span> winston.<span class="property">transports</span>.<span class="title class_">File</span>(&#123; <span class="attr">filename</span>: <span class="string">&quot;combined.log&quot;</span> &#125;),  ],&#125;);<span class="keyword">function</span> <span class="title function_">createWindow</span>(<span class="params"></span>) &#123;  <span class="keyword">const</span> win = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;    <span class="attr">width</span>: <span class="number">800</span>,    <span class="attr">height</span>: <span class="number">600</span>,    <span class="attr">webPreferences</span>: &#123;      <span class="attr">nodeIntegration</span>: <span class="literal">true</span>,    &#125;,  &#125;);  win.<span class="title function_">loadFile</span>(<span class="string">&quot;index.html&quot;</span>);  logger.<span class="title function_">info</span>(<span class="string">&quot;윈도우가 생성되었습니다.&quot;</span>);&#125;app.<span class="title function_">whenReady</span>().<span class="title function_">then</span>(createWindow);</code></pre><h2 id="3-Electron의-개발자-도구-활용"><a href="#3-Electron의-개발자-도구-활용" class="headerlink" title="3. Electron의 개발자 도구 활용"></a>3. Electron의 개발자 도구 활용</h2><p>Electron은 크롬 개발자 도구를 내장하고 있어, 애플리케이션을 디버깅하는 데 매우 유용합니다.</p><h3 id="3-1-개발자-도구-열기"><a href="#3-1-개발자-도구-열기" class="headerlink" title="3.1 개발자 도구 열기"></a>3.1 개발자 도구 열기</h3><p>다음은 애플리케이션 시작 시 개발자 도구를 자동으로 여는 예제입니다:</p><pre><code class="highlight javascript"><span class="keyword">const</span> &#123; app, <span class="title class_">BrowserWindow</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;electron&quot;</span>);<span class="keyword">function</span> <span class="title function_">createWindow</span>(<span class="params"></span>) &#123;  <span class="keyword">const</span> win = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;    <span class="attr">width</span>: <span class="number">800</span>,    <span class="attr">height</span>: <span class="number">600</span>,    <span class="attr">webPreferences</span>: &#123;      <span class="attr">nodeIntegration</span>: <span class="literal">true</span>,    &#125;,  &#125;);  win.<span class="title function_">loadFile</span>(<span class="string">&quot;index.html&quot;</span>);  win.<span class="property">webContents</span>.<span class="title function_">openDevTools</span>();&#125;app.<span class="title function_">whenReady</span>().<span class="title function_">then</span>(createWindow);</code></pre><h3 id="3-2-개발자-도구-활용"><a href="#3-2-개발자-도구-활용" class="headerlink" title="3.2 개발자 도구 활용"></a>3.2 개발자 도구 활용</h3><p>개발자 도구를 사용하여 콘솔 로그를 확인하고, 네트워크 요청을 모니터링하며, 애플리케이션의 성능을 분석할 수 있습니다. 또한, 브레이크포인트를 설정하여 코드 실행을 중단하고 변수 값을 확인할 수 있습니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 Electron 애플리케이션에서 로깅과 디버깅을 설정하는 방법에 대해 알아보았습니다. 콘솔 로깅 및 파일 로깅 설정과 Electron의 개발자 도구 활용 방법을 다루었습니다. 이러한 로깅과 디버깅 설정은 애플리케이션의 문제를 빠르게 찾고 해결하는 데 중요한 역할을 합니다. 다음 시간에는 사용자 인터페이스 개선에 대해 알아보겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> Electron </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Electron 데이터베이스 통합</title>
      <link href="/electron/10/"/>
      <url>/electron/10/</url>
      
        <content type="html"><![CDATA[<h1 id="데이터베이스-통합"><a href="#데이터베이스-통합" class="headerlink" title="데이터베이스 통합"></a>데이터베이스 통합</h1><p>안녕하세요, <strong>뉴코딩</strong>입니다!<br>이번 시간에는 <strong>Electron</strong> 애플리케이션에서 <strong>데이터베이스</strong>를 통합하는 방법을 알아보겠습니다. SQLite 또는 NeDB를 사용하여 로컬 데이터베이스를 구현하고, 데이터 생성, 조회, 수정, 삭제 기능을 구현하는 방법을 다루겠습니다.</p><h2 id="1-SQLite를-사용한-로컬-데이터베이스-구현"><a href="#1-SQLite를-사용한-로컬-데이터베이스-구현" class="headerlink" title="1. SQLite를 사용한 로컬 데이터베이스 구현"></a>1. SQLite를 사용한 로컬 데이터베이스 구현</h2><p>SQLite는 가벼운 로컬 데이터베이스로, Electron 애플리케이션에서 쉽게 사용할 수 있습니다.</p><h3 id="1-1-설치"><a href="#1-1-설치" class="headerlink" title="1.1 설치"></a>1.1 설치</h3><p>먼저 <code>sqlite3</code> 패키지를 설치해야 합니다:</p><pre><code class="highlight bash">npm install sqlite3</code></pre><h3 id="1-2-데이터베이스-설정"><a href="#1-2-데이터베이스-설정" class="headerlink" title="1.2 데이터베이스 설정"></a>1.2 데이터베이스 설정</h3><p>다음은 SQLite 데이터베이스를 설정하는 예제입니다:</p><pre><code class="highlight javascript"><span class="keyword">const</span> sqlite3 = <span class="built_in">require</span>(<span class="string">&quot;sqlite3&quot;</span>).<span class="title function_">verbose</span>();<span class="keyword">const</span> db = <span class="keyword">new</span> sqlite3.<span class="title class_">Database</span>(<span class="string">&quot;mydatabase.db&quot;</span>);db.<span class="title function_">serialize</span>(<span class="function">() =&gt;</span> &#123;  db.<span class="title function_">run</span>(    <span class="string">&quot;CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, name TEXT, email TEXT)&quot;</span>  );&#125;);db.<span class="title function_">close</span>();</code></pre><h3 id="1-3-데이터-생성-조회-수정-삭제"><a href="#1-3-데이터-생성-조회-수정-삭제" class="headerlink" title="1.3 데이터 생성, 조회, 수정, 삭제"></a>1.3 데이터 생성, 조회, 수정, 삭제</h3><p>다음은 데이터 생성, 조회, 수정, 삭제 기능을 구현하는 예제입니다:</p><pre><code class="highlight javascript"><span class="keyword">const</span> sqlite3 = <span class="built_in">require</span>(<span class="string">&quot;sqlite3&quot;</span>).<span class="title function_">verbose</span>();<span class="keyword">const</span> db = <span class="keyword">new</span> sqlite3.<span class="title class_">Database</span>(<span class="string">&quot;mydatabase.db&quot;</span>);<span class="comment">// 데이터 생성</span>db.<span class="title function_">run</span>(<span class="string">&quot;INSERT INTO users (name, email) VALUES (?, ?)&quot;</span>, [  <span class="string">&quot;뉴코딩&quot;</span>,  <span class="string">&quot;newcoding@example.com&quot;</span>,]);<span class="comment">// 데이터 조회</span>db.<span class="title function_">all</span>(<span class="string">&quot;SELECT * FROM users&quot;</span>, <span class="function">(<span class="params">err, rows</span>) =&gt;</span> &#123;  <span class="keyword">if</span> (err) &#123;    <span class="keyword">throw</span> err;  &#125;  <span class="variable language_">console</span>.<span class="title function_">log</span>(rows);&#125;);<span class="comment">// 데이터 수정</span>db.<span class="title function_">run</span>(<span class="string">&quot;UPDATE users SET email = ? WHERE name = ?&quot;</span>, [  <span class="string">&quot;newemail@example.com&quot;</span>,  <span class="string">&quot;뉴코딩&quot;</span>,]);<span class="comment">// 데이터 삭제</span>db.<span class="title function_">run</span>(<span class="string">&quot;DELETE FROM users WHERE name = ?&quot;</span>, [<span class="string">&quot;뉴코딩&quot;</span>]);db.<span class="title function_">close</span>();</code></pre><h2 id="2-NeDB를-사용한-로컬-데이터베이스-구현"><a href="#2-NeDB를-사용한-로컬-데이터베이스-구현" class="headerlink" title="2. NeDB를 사용한 로컬 데이터베이스 구현"></a>2. NeDB를 사용한 로컬 데이터베이스 구현</h2><p>NeDB는 Node.js 환경에서 사용할 수 있는 경량의 NoSQL 데이터베이스입니다.</p><h3 id="2-1-설치"><a href="#2-1-설치" class="headerlink" title="2.1 설치"></a>2.1 설치</h3><p>먼저 <code>nedb</code> 패키지를 설치해야 합니다:</p><pre><code class="highlight bash">npm install nedb</code></pre><h3 id="2-2-데이터베이스-설정"><a href="#2-2-데이터베이스-설정" class="headerlink" title="2.2 데이터베이스 설정"></a>2.2 데이터베이스 설정</h3><p>다음은 NeDB 데이터베이스를 설정하는 예제입니다:</p><pre><code class="highlight javascript"><span class="keyword">const</span> <span class="title class_">Datastore</span> = <span class="built_in">require</span>(<span class="string">&quot;nedb&quot;</span>);<span class="keyword">const</span> db = <span class="keyword">new</span> <span class="title class_">Datastore</span>(&#123; <span class="attr">filename</span>: <span class="string">&quot;mydatabase.db&quot;</span>, <span class="attr">autoload</span>: <span class="literal">true</span> &#125;);<span class="comment">// 데이터 생성</span>db.<span class="title function_">insert</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;뉴코딩&quot;</span>, <span class="attr">email</span>: <span class="string">&quot;newcoding@example.com&quot;</span> &#125;, <span class="function">(<span class="params">err, newDoc</span>) =&gt;</span> &#123;  <span class="keyword">if</span> (err) &#123;    <span class="keyword">throw</span> err;  &#125;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;New document inserted:&quot;</span>, newDoc);&#125;);<span class="comment">// 데이터 조회</span>db.<span class="title function_">find</span>(&#123;&#125;, <span class="function">(<span class="params">err, docs</span>) =&gt;</span> &#123;  <span class="keyword">if</span> (err) &#123;    <span class="keyword">throw</span> err;  &#125;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Documents found:&quot;</span>, docs);&#125;);<span class="comment">// 데이터 수정</span>db.<span class="title function_">update</span>(  &#123; <span class="attr">name</span>: <span class="string">&quot;뉴코딩&quot;</span> &#125;,  &#123; <span class="attr">$set</span>: &#123; <span class="attr">email</span>: <span class="string">&quot;newemail@example.com&quot;</span> &#125; &#125;,  &#123;&#125;,  <span class="function">(<span class="params">err, numReplaced</span>) =&gt;</span> &#123;    <span class="keyword">if</span> (err) &#123;      <span class="keyword">throw</span> err;    &#125;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Number of documents updated:&quot;</span>, numReplaced);  &#125;);<span class="comment">// 데이터 삭제</span>db.<span class="title function_">remove</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;뉴코딩&quot;</span> &#125;, &#123;&#125;, <span class="function">(<span class="params">err, numRemoved</span>) =&gt;</span> &#123;  <span class="keyword">if</span> (err) &#123;    <span class="keyword">throw</span> err;  &#125;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Number of documents removed:&quot;</span>, numRemoved);&#125;);</code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 Electron 애플리케이션에서 SQLite와 NeDB를 사용하여 로컬 데이터베이스를 구현하고, 데이터 생성, 조회, 수정, 삭제 기능을 구현하는 방법에 대해 알아보았습니다. 이러한 데이터베이스 통합은 애플리케이션의 데이터를 효율적으로 관리하는 데 중요한 역할을 합니다. 다음 시간에는 애플리케이션 로깅 및 디버깅에 대해 알아보겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> Electron </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Electron 애플리케이션 보안 적용</title>
      <link href="/electron/9/"/>
      <url>/electron/9/</url>
      
        <content type="html"><![CDATA[<h1 id="애플리케이션-보안-적용"><a href="#애플리케이션-보안-적용" class="headerlink" title="애플리케이션 보안 적용"></a>애플리케이션 보안 적용</h1><p>안녕하세요, <strong>뉴코딩</strong>입니다!<br>이번 시간에는 <strong>Electron</strong> 애플리케이션에서 <strong>보안</strong>을 적용하는 방법을 알아보겠습니다. 웹 보안 기초 적용(CSP, HTTPS 사용)과 주요 보안 위험 및 방어 전략을 다루겠습니다.</p><h2 id="1-웹-보안-기초-적용"><a href="#1-웹-보안-기초-적용" class="headerlink" title="1. 웹 보안 기초 적용"></a>1. 웹 보안 기초 적용</h2><p>Electron 애플리케이션에서도 일반 웹 애플리케이션과 마찬가지로 보안 설정이 중요합니다. 특히, 콘텐츠 보안 정책(CSP)과 HTTPS 사용을 통해 보안을 강화할 수 있습니다.</p><h3 id="1-1-콘텐츠-보안-정책-CSP"><a href="#1-1-콘텐츠-보안-정책-CSP" class="headerlink" title="1.1 콘텐츠 보안 정책(CSP)"></a>1.1 콘텐츠 보안 정책(CSP)</h3><p>CSP(Content Security Policy)는 XSS(Cross-Site Scripting) 공격을 방지하기 위해 사용됩니다. 다음은 CSP를 설정하는 예제입니다:</p><pre><code class="highlight javascript"><span class="keyword">const</span> &#123; app, <span class="title class_">BrowserWindow</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;electron&quot;</span>);<span class="keyword">function</span> <span class="title function_">createWindow</span>(<span class="params"></span>) &#123;  <span class="keyword">const</span> win = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;    <span class="attr">width</span>: <span class="number">800</span>,    <span class="attr">height</span>: <span class="number">600</span>,    <span class="attr">webPreferences</span>: &#123;      <span class="attr">nodeIntegration</span>: <span class="literal">false</span>, <span class="comment">// Node.js 통합 비활성화</span>      <span class="attr">contextIsolation</span>: <span class="literal">true</span>, <span class="comment">// 컨텍스트 격리 활성화</span>    &#125;,  &#125;);  win.<span class="title function_">loadFile</span>(<span class="string">&quot;index.html&quot;</span>);&#125;app.<span class="title function_">whenReady</span>().<span class="title function_">then</span>(createWindow);</code></pre><pre><code class="highlight html"><span class="comment">&lt;!-- index.html --&gt;</span><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">head</span>&gt;</span>    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span>    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span>    <span class="tag">&lt;<span class="name">meta</span></span><span class="tag">      <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span></span><span class="tag">      <span class="attr">content</span>=<span class="string">&quot;default-src &#x27;self&#x27;; script-src &#x27;self&#x27;; style-src &#x27;self&#x27;;&quot;</span></span><span class="tag">    /&gt;</span>    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Secure Electron App<span class="tag">&lt;/<span class="name">title</span>&gt;</span>  <span class="tag">&lt;/<span class="name">head</span>&gt;</span>  <span class="tag">&lt;<span class="name">body</span>&gt;</span>    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>안전한 Electron 애플리케이션<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>  <span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></code></pre><h3 id="1-2-HTTPS-사용"><a href="#1-2-HTTPS-사용" class="headerlink" title="1.2 HTTPS 사용"></a>1.2 HTTPS 사용</h3><p>HTTPS는 데이터 전송 시 암호화를 통해 보안을 강화합니다. Electron 애플리케이션에서 HTTPS를 사용하려면, 서버 측에서 HTTPS를 설정해야 합니다. 다음은 간단한 예제입니다:</p><pre><code class="highlight javascript"><span class="keyword">const</span> https = <span class="built_in">require</span>(<span class="string">&quot;https&quot;</span>);<span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);<span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);<span class="keyword">const</span> app = <span class="title function_">express</span>();<span class="keyword">const</span> options = &#123;  <span class="attr">key</span>: fs.<span class="title function_">readFileSync</span>(<span class="string">&quot;path/to/your/private.key&quot;</span>),  <span class="attr">cert</span>: fs.<span class="title function_">readFileSync</span>(<span class="string">&quot;path/to/your/certificate.crt&quot;</span>),&#125;;https.<span class="title function_">createServer</span>(options, app).<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;HTTPS 서버가 3000 포트에서 실행 중입니다.&quot;</span>);&#125;);</code></pre><h2 id="2-주요-보안-위험-및-방어-전략"><a href="#2-주요-보안-위험-및-방어-전략" class="headerlink" title="2. 주요 보안 위험 및 방어 전략"></a>2. 주요 보안 위험 및 방어 전략</h2><p>Electron 애플리케이션에서 발생할 수 있는 주요 보안 위험과 이를 방어하기 위한 전략을 알아보겠습니다.</p><h3 id="2-1-XSS-Cross-Site-Scripting-공격-방지"><a href="#2-1-XSS-Cross-Site-Scripting-공격-방지" class="headerlink" title="2.1 XSS(Cross-Site Scripting) 공격 방지"></a>2.1 XSS(Cross-Site Scripting) 공격 방지</h3><p>XSS 공격을 방지하기 위해 CSP를 설정하고, 사용자 입력을 철저히 검증해야 합니다. 다음은 사용자 입력을 검증하는 예제입니다:</p><pre><code class="highlight javascript"><span class="keyword">function</span> <span class="title function_">sanitizeInput</span>(<span class="params">input</span>) &#123;  <span class="keyword">return</span> input.<span class="title function_">replace</span>(<span class="regexp">/&lt;/g</span>, <span class="string">&quot;&amp;lt;&quot;</span>).<span class="title function_">replace</span>(<span class="regexp">/&gt;/g</span>, <span class="string">&quot;&amp;gt;&quot;</span>);&#125;<span class="keyword">const</span> userInput = <span class="string">&quot;&lt;script&gt;alert(&#x27;XSS&#x27;);&lt;/script&gt;&quot;</span>;<span class="keyword">const</span> sanitizedInput = <span class="title function_">sanitizeInput</span>(userInput);<span class="variable language_">console</span>.<span class="title function_">log</span>(sanitizedInput); <span class="comment">// &amp;lt;script&amp;gt;alert(&#x27;XSS&#x27;);&amp;lt;/script&amp;gt;</span></code></pre><h3 id="2-2-Node-통합-비활성화"><a href="#2-2-Node-통합-비활성화" class="headerlink" title="2.2 Node 통합 비활성화"></a>2.2 Node 통합 비활성화</h3><p>Node.js 통합을 비활성화하여 렌더러 프로세스에서 Node.js API에 접근하지 못하도록 설정합니다. 이는 XSS 공격으로부터 보호하는 데 도움이 됩니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> &#123; app, <span class="title class_">BrowserWindow</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;electron&quot;</span>);<span class="keyword">function</span> <span class="title function_">createWindow</span>(<span class="params"></span>) &#123;  <span class="keyword">const</span> win = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;    <span class="attr">width</span>: <span class="number">800</span>,    <span class="attr">height</span>: <span class="number">600</span>,    <span class="attr">webPreferences</span>: &#123;      <span class="attr">nodeIntegration</span>: <span class="literal">false</span>, <span class="comment">// Node.js 통합 비활성화</span>      <span class="attr">contextIsolation</span>: <span class="literal">true</span>, <span class="comment">// 컨텍스트 격리 활성화</span>    &#125;,  &#125;);  win.<span class="title function_">loadFile</span>(<span class="string">&quot;index.html&quot;</span>);&#125;app.<span class="title function_">whenReady</span>().<span class="title function_">then</span>(createWindow);</code></pre><h3 id="2-3-컨텍스트-격리"><a href="#2-3-컨텍스트-격리" class="headerlink" title="2.3 컨텍스트 격리"></a>2.3 컨텍스트 격리</h3><p>컨텍스트 격리를 활성화하여 렌더러 프로세스와 메인 프로세스 간의 격리를 강화합니다. 이는 보안 취약점을 줄이는 데 도움이 됩니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> &#123; app, <span class="title class_">BrowserWindow</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;electron&quot;</span>);<span class="keyword">function</span> <span class="title function_">createWindow</span>(<span class="params"></span>) &#123;  <span class="keyword">const</span> win = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;    <span class="attr">width</span>: <span class="number">800</span>,    <span class="attr">height</span>: <span class="number">600</span>,    <span class="attr">webPreferences</span>: &#123;      <span class="attr">nodeIntegration</span>: <span class="literal">false</span>,      <span class="attr">contextIsolation</span>: <span class="literal">true</span>,    &#125;,  &#125;);  win.<span class="title function_">loadFile</span>(<span class="string">&quot;index.html&quot;</span>);&#125;app.<span class="title function_">whenReady</span>().<span class="title function_">then</span>(createWindow);</code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 Electron 애플리케이션에서 보안을 적용하는 방법에 대해 알아보았습니다. 웹 보안 기초 적용(CSP, HTTPS 사용)과 주요 보안 위험 및 방어 전략을 다루었습니다. 이러한 보안 설정들은 애플리케이션의 안전성을 높이는 데 중요한 역할을 합니다. 다음 시간에는 데이터베이스 통합에 대해 알아보겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> Electron </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Electron 네트워크 요청 및 외부 API 통합</title>
      <link href="/electron/8/"/>
      <url>/electron/8/</url>
      
        <content type="html"><![CDATA[<h1 id="네트워크-요청-및-외부-API-통합"><a href="#네트워크-요청-및-외부-API-통합" class="headerlink" title="네트워크 요청 및 외부 API 통합"></a>네트워크 요청 및 외부 API 통합</h1><p>안녕하세요, <strong>뉴코딩</strong>입니다!<br>이번 시간에는 <strong>Electron</strong> 애플리케이션에서 <strong>네트워크 요청</strong>을 보내고 <strong>외부 API</strong>를 통합하는 방법을 알아보겠습니다. <code>fetch</code>와 <code>axios</code>를 사용하여 HTTP 요청을 보내고, REST API를 호출하여 데이터를 처리하는 방법을 다루겠습니다.</p><h2 id="1-fetch를-사용한-HTTP-요청"><a href="#1-fetch를-사용한-HTTP-요청" class="headerlink" title="1. fetch를 사용한 HTTP 요청"></a>1. <code>fetch</code>를 사용한 HTTP 요청</h2><p><code>fetch</code>는 브라우저와 Node.js 환경에서 모두 사용할 수 있는 내장 함수로, HTTP 요청을 보내는 데 사용됩니다.</p><h3 id="1-1-GET-요청"><a href="#1-1-GET-요청" class="headerlink" title="1.1 GET 요청"></a>1.1 GET 요청</h3><p>다음은 <code>fetch</code>를 사용하여 GET 요청을 보내는 예제입니다:</p><pre><code class="highlight javascript"><span class="keyword">const</span> url = <span class="string">&quot;https://api.example.com/data&quot;</span>;<span class="title function_">fetch</span>(url)  .<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> response.<span class="title function_">json</span>())  .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);  &#125;)  .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;Error:&quot;</span>, error);  &#125;);</code></pre><h3 id="1-2-POST-요청"><a href="#1-2-POST-요청" class="headerlink" title="1.2 POST 요청"></a>1.2 POST 요청</h3><p>다음은 <code>fetch</code>를 사용하여 POST 요청을 보내는 예제입니다:</p><pre><code class="highlight javascript"><span class="keyword">const</span> url = <span class="string">&quot;https://api.example.com/data&quot;</span>;<span class="keyword">const</span> data = &#123; <span class="attr">key</span>: <span class="string">&quot;value&quot;</span> &#125;;<span class="title function_">fetch</span>(url, &#123;  <span class="attr">method</span>: <span class="string">&quot;POST&quot;</span>,  <span class="attr">headers</span>: &#123;    <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span>,  &#125;,  <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data),&#125;)  .<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> response.<span class="title function_">json</span>())  .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);  &#125;)  .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;Error:&quot;</span>, error);  &#125;);</code></pre><h2 id="2-axios를-사용한-HTTP-요청"><a href="#2-axios를-사용한-HTTP-요청" class="headerlink" title="2. axios를 사용한 HTTP 요청"></a>2. <code>axios</code>를 사용한 HTTP 요청</h2><p><code>axios</code>는 Promise 기반의 HTTP 클라이언트로, 브라우저와 Node.js 환경에서 모두 사용할 수 있습니다. <code>axios</code>를 사용하면 더 간결하고 직관적인 코드로 HTTP 요청을 보낼 수 있습니다.</p><h3 id="2-1-설치"><a href="#2-1-설치" class="headerlink" title="2.1 설치"></a>2.1 설치</h3><p>먼저 <code>axios</code>를 설치해야 합니다:</p><pre><code class="highlight bash">npm install axios</code></pre><h3 id="2-2-GET-요청"><a href="#2-2-GET-요청" class="headerlink" title="2.2 GET 요청"></a>2.2 GET 요청</h3><p>다음은 <code>axios</code>를 사용하여 GET 요청을 보내는 예제입니다:</p><pre><code class="highlight javascript"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">&quot;axios&quot;</span>);<span class="keyword">const</span> url = <span class="string">&quot;https://api.example.com/data&quot;</span>;axios  .<span class="title function_">get</span>(url)  .<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>);  &#125;)  .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;Error:&quot;</span>, error);  &#125;);</code></pre><h3 id="2-3-POST-요청"><a href="#2-3-POST-요청" class="headerlink" title="2.3 POST 요청"></a>2.3 POST 요청</h3><p>다음은 <code>axios</code>를 사용하여 POST 요청을 보내는 예제입니다:</p><pre><code class="highlight javascript"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">&quot;axios&quot;</span>);<span class="keyword">const</span> url = <span class="string">&quot;https://api.example.com/data&quot;</span>;<span class="keyword">const</span> data = &#123; <span class="attr">key</span>: <span class="string">&quot;value&quot;</span> &#125;;axios  .<span class="title function_">post</span>(url, data)  .<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>);  &#125;)  .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;Error:&quot;</span>, error);  &#125;);</code></pre><h2 id="3-REST-API-호출-및-데이터-처리"><a href="#3-REST-API-호출-및-데이터-처리" class="headerlink" title="3. REST API 호출 및 데이터 처리"></a>3. REST API 호출 및 데이터 처리</h2><p>Electron 애플리케이션에서 REST API를 호출하고 데이터를 처리하는 방법을 알아보겠습니다.</p><h3 id="3-1-REST-API-호출"><a href="#3-1-REST-API-호출" class="headerlink" title="3.1 REST API 호출"></a>3.1 REST API 호출</h3><p>다음은 <code>axios</code>를 사용하여 REST API를 호출하는 예제입니다:</p><pre><code class="highlight javascript"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">&quot;axios&quot;</span>);<span class="keyword">const</span> apiUrl = <span class="string">&quot;https://api.example.com/users&quot;</span>;<span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchUsers</span>(<span class="params"></span>) &#123;  <span class="keyword">try</span> &#123;    <span class="keyword">const</span> response = <span class="keyword">await</span> axios.<span class="title function_">get</span>(apiUrl);    <span class="keyword">const</span> users = response.<span class="property">data</span>;    <span class="variable language_">console</span>.<span class="title function_">log</span>(users);  &#125; <span class="keyword">catch</span> (error) &#123;    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;Error fetching users:&quot;</span>, error);  &#125;&#125;<span class="title function_">fetchUsers</span>();</code></pre><h3 id="3-2-데이터-처리"><a href="#3-2-데이터-처리" class="headerlink" title="3.2 데이터 처리"></a>3.2 데이터 처리</h3><p>API에서 받은 데이터를 처리하여 화면에 표시하는 예제입니다:</p><pre><code class="highlight javascript"><span class="keyword">const</span> &#123; ipcRenderer &#125; = <span class="built_in">require</span>(<span class="string">&quot;electron&quot;</span>);<span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">&quot;axios&quot;</span>);<span class="keyword">const</span> apiUrl = <span class="string">&quot;https://api.example.com/users&quot;</span>;<span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchUsers</span>(<span class="params"></span>) &#123;  <span class="keyword">try</span> &#123;    <span class="keyword">const</span> response = <span class="keyword">await</span> axios.<span class="title function_">get</span>(apiUrl);    <span class="keyword">const</span> users = response.<span class="property">data</span>;    ipcRenderer.<span class="title function_">send</span>(<span class="string">&quot;users-fetched&quot;</span>, users);  &#125; <span class="keyword">catch</span> (error) &#123;    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;Error fetching users:&quot;</span>, error);  &#125;&#125;<span class="title function_">fetchUsers</span>();</code></pre><pre><code class="highlight javascript"><span class="comment">// main.js</span><span class="keyword">const</span> &#123; app, <span class="title class_">BrowserWindow</span>, ipcMain &#125; = <span class="built_in">require</span>(<span class="string">&quot;electron&quot;</span>);<span class="keyword">function</span> <span class="title function_">createWindow</span>(<span class="params"></span>) &#123;  <span class="keyword">const</span> win = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;    <span class="attr">width</span>: <span class="number">800</span>,    <span class="attr">height</span>: <span class="number">600</span>,    <span class="attr">webPreferences</span>: &#123;      <span class="attr">nodeIntegration</span>: <span class="literal">true</span>,      <span class="attr">contextIsolation</span>: <span class="literal">false</span>,    &#125;,  &#125;);  win.<span class="title function_">loadFile</span>(<span class="string">&quot;index.html&quot;</span>);  ipcMain.<span class="title function_">on</span>(<span class="string">&quot;users-fetched&quot;</span>, <span class="function">(<span class="params">event, users</span>) =&gt;</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Fetched users:&quot;</span>, users);    <span class="comment">// 데이터를 처리하여 화면에 표시하는 로직 추가</span>  &#125;);&#125;app.<span class="title function_">whenReady</span>().<span class="title function_">then</span>(createWindow);</code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 Electron 애플리케이션에서 네트워크 요청을 보내고 외부 API를 통합하는 방법에 대해 알아보았습니다. <code>fetch</code>와 <code>axios</code>를 사용하여 HTTP 요청을 보내고, REST API를 호출하여 데이터를 처리하는 방법을 다루었습니다. 이러한 기능들은 애플리케이션의 기능을 확장하고, 외부 서비스와의 연동을 가능하게 합니다. 다음 시간에는 애플리케이션 보안 적용에 대해 알아보겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> Electron </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Electron 애플리케이션 내 라우팅</title>
      <link href="/electron/7/"/>
      <url>/electron/7/</url>
      
        <content type="html"><![CDATA[<h1 id="애플리케이션-내-라우팅"><a href="#애플리케이션-내-라우팅" class="headerlink" title="애플리케이션 내 라우팅"></a>애플리케이션 내 라우팅</h1><p>안녕하세요, <strong>뉴코딩</strong>입니다!<br>이번 시간에는 <strong>Electron</strong> 애플리케이션에서 <strong>라우팅</strong>을 구현하는 방법을 알아보겠습니다. 단일 페이지 애플리케이션(SPA) 라우팅과 여러 창 간의 상호 작용 및 데이터 공유 방법을 다루겠습니다.</p><h2 id="1-단일-페이지-애플리케이션-SPA-라우팅"><a href="#1-단일-페이지-애플리케이션-SPA-라우팅" class="headerlink" title="1. 단일 페이지 애플리케이션(SPA) 라우팅"></a>1. 단일 페이지 애플리케이션(SPA) 라우팅</h2><p>Electron 애플리케이션에서 SPA 라우팅을 구현하려면, 일반적인 웹 애플리케이션과 마찬가지로 클라이언트 사이드 라우팅 라이브러리를 사용할 수 있습니다. 대표적으로 <code>react-router</code>나 <code>vue-router</code>를 사용할 수 있습니다.</p><h3 id="1-1-React와-react-router-사용-예제"><a href="#1-1-React와-react-router-사용-예제" class="headerlink" title="1.1 React와 react-router 사용 예제"></a>1.1 React와 react-router 사용 예제</h3><p>React와 <code>react-router</code>를 사용하여 SPA 라우팅을 구현하는 예제입니다:</p><pre><code class="highlight javascript"><span class="comment">// main.js</span><span class="keyword">const</span> &#123; app, <span class="title class_">BrowserWindow</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;electron&quot;</span>);<span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);<span class="keyword">function</span> <span class="title function_">createWindow</span>(<span class="params"></span>) &#123;  <span class="keyword">const</span> win = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;    <span class="attr">width</span>: <span class="number">800</span>,    <span class="attr">height</span>: <span class="number">600</span>,    <span class="attr">webPreferences</span>: &#123;      <span class="attr">preload</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;preload.js&quot;</span>),    &#125;,  &#125;);  win.<span class="title function_">loadURL</span>(<span class="string">&quot;http://localhost:3000&quot;</span>);&#125;app.<span class="title function_">whenReady</span>().<span class="title function_">then</span>(createWindow);</code></pre><pre><code class="highlight javascript"><span class="comment">// App.js (React)</span><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;<span class="keyword">import</span> &#123; <span class="title class_">BrowserRouter</span> <span class="keyword">as</span> <span class="title class_">Router</span>, <span class="title class_">Route</span>, <span class="title class_">Switch</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;<span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&quot;./Home&quot;</span>;<span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&quot;./About&quot;</span>;<span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;  <span class="keyword">return</span> (    <span class="language-xml"><span class="tag">&lt;<span class="name">Router</span>&gt;</span></span><span class="language-xml">      <span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">exact</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Home&#125;</span> /&gt;</span></span><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/about&quot;</span> <span class="attr">component</span>=<span class="string">&#123;About&#125;</span> /&gt;</span></span><span class="language-xml">      <span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span><span class="language-xml">    <span class="tag">&lt;/<span class="name">Router</span>&gt;</span></span>  );&#125;<span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</code></pre><h3 id="1-2-Vue와-vue-router-사용-예제"><a href="#1-2-Vue와-vue-router-사용-예제" class="headerlink" title="1.2 Vue와 vue-router 사용 예제"></a>1.2 Vue와 vue-router 사용 예제</h3><p>Vue와 <code>vue-router</code>를 사용하여 SPA 라우팅을 구현하는 예제입니다:</p><pre><code class="highlight javascript"><span class="comment">// main.js</span><span class="keyword">const</span> &#123; app, <span class="title class_">BrowserWindow</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;electron&quot;</span>);<span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);<span class="keyword">function</span> <span class="title function_">createWindow</span>(<span class="params"></span>) &#123;  <span class="keyword">const</span> win = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;    <span class="attr">width</span>: <span class="number">800</span>,    <span class="attr">height</span>: <span class="number">600</span>,    <span class="attr">webPreferences</span>: &#123;      <span class="attr">preload</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;preload.js&quot;</span>),    &#125;,  &#125;);  win.<span class="title function_">loadURL</span>(<span class="string">&quot;http://localhost:8080&quot;</span>);&#125;app.<span class="title function_">whenReady</span>().<span class="title function_">then</span>(createWindow);</code></pre><pre><code class="highlight javascript"><span class="comment">// main.js (Vue)</span><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;<span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;<span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&quot;./App.vue&quot;</span>;<span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&quot;./components/Home.vue&quot;</span>;<span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&quot;./components/About.vue&quot;</span>;<span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>);<span class="keyword">const</span> routes = [  &#123; <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>, <span class="attr">component</span>: <span class="title class_">Home</span> &#125;,  &#123; <span class="attr">path</span>: <span class="string">&quot;/about&quot;</span>, <span class="attr">component</span>: <span class="title class_">About</span> &#125;,];<span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;  routes,&#125;);<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;  <span class="attr">render</span>: <span class="function">(<span class="params">h</span>) =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),  router,&#125;).$mount(<span class="string">&quot;#app&quot;</span>);</code></pre><h2 id="2-여러-창-간의-상호-작용-및-데이터-공유"><a href="#2-여러-창-간의-상호-작용-및-데이터-공유" class="headerlink" title="2. 여러 창 간의 상호 작용 및 데이터 공유"></a>2. 여러 창 간의 상호 작용 및 데이터 공유</h2><p>Electron 애플리케이션에서 여러 창을 생성하고, 창 간의 데이터를 공유하는 방법을 알아보겠습니다.</p><h3 id="2-1-여러-창-생성"><a href="#2-1-여러-창-생성" class="headerlink" title="2.1 여러 창 생성"></a>2.1 여러 창 생성</h3><p>다음은 여러 창을 생성하는 예제입니다:</p><pre><code class="highlight javascript"><span class="keyword">const</span> &#123; app, <span class="title class_">BrowserWindow</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;electron&quot;</span>);<span class="keyword">let</span> mainWindow;<span class="keyword">let</span> secondWindow;<span class="keyword">function</span> <span class="title function_">createWindows</span>(<span class="params"></span>) &#123;  mainWindow = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;    <span class="attr">width</span>: <span class="number">800</span>,    <span class="attr">height</span>: <span class="number">600</span>,    <span class="attr">webPreferences</span>: &#123;      <span class="attr">nodeIntegration</span>: <span class="literal">true</span>,    &#125;,  &#125;);  secondWindow = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;    <span class="attr">width</span>: <span class="number">400</span>,    <span class="attr">height</span>: <span class="number">300</span>,    <span class="attr">parent</span>: mainWindow, <span class="comment">// 메인 윈도우의 자식 창으로 설정</span>    <span class="attr">webPreferences</span>: &#123;      <span class="attr">nodeIntegration</span>: <span class="literal">true</span>,    &#125;,  &#125;);  mainWindow.<span class="title function_">loadFile</span>(<span class="string">&quot;index.html&quot;</span>);  secondWindow.<span class="title function_">loadFile</span>(<span class="string">&quot;second.html&quot;</span>);&#125;app.<span class="title function_">whenReady</span>().<span class="title function_">then</span>(createWindows);</code></pre><h3 id="2-2-창-간-데이터-공유"><a href="#2-2-창-간-데이터-공유" class="headerlink" title="2.2 창 간 데이터 공유"></a>2.2 창 간 데이터 공유</h3><p>창 간 데이터를 공유하기 위해 IPC를 사용할 수 있습니다. 다음은 IPC를 사용하여 데이터를 공유하는 예제입니다:</p><pre><code class="highlight javascript"><span class="comment">// main.js</span><span class="keyword">const</span> &#123; app, <span class="title class_">BrowserWindow</span>, ipcMain &#125; = <span class="built_in">require</span>(<span class="string">&quot;electron&quot;</span>);<span class="keyword">let</span> mainWindow;<span class="keyword">let</span> secondWindow;<span class="keyword">function</span> <span class="title function_">createWindows</span>(<span class="params"></span>) &#123;  mainWindow = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;    <span class="attr">width</span>: <span class="number">800</span>,    <span class="attr">height</span>: <span class="number">600</span>,    <span class="attr">webPreferences</span>: &#123;      <span class="attr">nodeIntegration</span>: <span class="literal">true</span>,      <span class="attr">contextIsolation</span>: <span class="literal">false</span>,    &#125;,  &#125;);  secondWindow = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;    <span class="attr">width</span>: <span class="number">400</span>,    <span class="attr">height</span>: <span class="number">300</span>,    <span class="attr">parent</span>: mainWindow,    <span class="attr">webPreferences</span>: &#123;      <span class="attr">nodeIntegration</span>: <span class="literal">true</span>,      <span class="attr">contextIsolation</span>: <span class="literal">false</span>,    &#125;,  &#125;);  mainWindow.<span class="title function_">loadFile</span>(<span class="string">&quot;index.html&quot;</span>);  secondWindow.<span class="title function_">loadFile</span>(<span class="string">&quot;second.html&quot;</span>);  ipcMain.<span class="title function_">on</span>(<span class="string">&quot;send-data&quot;</span>, <span class="function">(<span class="params">event, data</span>) =&gt;</span> &#123;    secondWindow.<span class="property">webContents</span>.<span class="title function_">send</span>(<span class="string">&quot;receive-data&quot;</span>, data);  &#125;);&#125;app.<span class="title function_">whenReady</span>().<span class="title function_">then</span>(createWindows);</code></pre><pre><code class="highlight javascript"><span class="comment">// index.html (렌더러 프로세스)</span><span class="keyword">const</span> &#123; ipcRenderer &#125; = <span class="built_in">require</span>(<span class="string">&quot;electron&quot;</span>);<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;sendButton&quot;</span>).<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">() =&gt;</span> &#123;  <span class="keyword">const</span> data = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;inputField&quot;</span>).<span class="property">value</span>;  ipcRenderer.<span class="title function_">send</span>(<span class="string">&quot;send-data&quot;</span>, data);&#125;);</code></pre><pre><code class="highlight javascript"><span class="comment">// second.html (렌더러 프로세스)</span><span class="keyword">const</span> &#123; ipcRenderer &#125; = <span class="built_in">require</span>(<span class="string">&quot;electron&quot;</span>);ipcRenderer.<span class="title function_">on</span>(<span class="string">&quot;receive-data&quot;</span>, <span class="function">(<span class="params">event, data</span>) =&gt;</span> &#123;  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;displayField&quot;</span>).<span class="property">innerText</span> = data;&#125;);</code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 Electron 애플리케이션에서 단일 페이지 애플리케이션(SPA) 라우팅과 여러 창 간의 상호 작용 및 데이터 공유 방법에 대해 알아보았습니다. 이러한 기능들은 애플리케이션의 구조를 효율적으로 관리하고, 사용자 경험을 향상시키는 데 중요한 역할을 합니다. 다음 시간에는 네트워크 요청 및 외부 API 통합에 대해 알아보겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> Electron </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Electron 인터프로세스 통신(IPC)</title>
      <link href="/electron/6/"/>
      <url>/electron/6/</url>
      
        <content type="html"><![CDATA[<h1 id="인터프로세스-통신-IPC"><a href="#인터프로세스-통신-IPC" class="headerlink" title="인터프로세스 통신(IPC)"></a>인터프로세스 통신(IPC)</h1><p>안녕하세요, <strong>뉴코딩</strong>입니다!<br>이번 시간에는 <strong>Electron</strong> 애플리케이션에서 **인터프로세스 통신(IPC)**을 통해 메인 프로세스와 렌더러 프로세스 간에 데이터를 교환하는 방법을 알아보겠습니다.</p><h2 id="1-IPC-개요"><a href="#1-IPC-개요" class="headerlink" title="1. IPC 개요"></a>1. IPC 개요</h2><p>Electron에서는 <code>ipcMain</code>과 <code>ipcRenderer</code> 모듈을 사용하여 메인 프로세스와 렌더러 프로세스 간에 통신할 수 있습니다. 이를 통해 이벤트 및 명령을 전송할 수 있습니다.</p><h3 id="1-1-메인-프로세스-설정"><a href="#1-1-메인-프로세스-설정" class="headerlink" title="1.1 메인 프로세스 설정"></a>1.1 메인 프로세스 설정</h3><p>메인 프로세스에서 <code>ipcMain</code> 모듈을 사용하여 이벤트를 수신하고 처리할 수 있습니다. 다음은 간단한 예제입니다:</p><pre><code class="highlight javascript"><span class="keyword">const</span> &#123; app, <span class="title class_">BrowserWindow</span>, ipcMain &#125; = <span class="built_in">require</span>(<span class="string">&quot;electron&quot;</span>);<span class="keyword">function</span> <span class="title function_">createWindow</span>(<span class="params"></span>) &#123;  <span class="keyword">const</span> win = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;    <span class="attr">width</span>: <span class="number">800</span>,    <span class="attr">height</span>: <span class="number">600</span>,    <span class="attr">webPreferences</span>: &#123;      <span class="attr">nodeIntegration</span>: <span class="literal">true</span>,      <span class="attr">contextIsolation</span>: <span class="literal">false</span>,    &#125;,  &#125;);  win.<span class="title function_">loadFile</span>(<span class="string">&quot;index.html&quot;</span>);  ipcMain.<span class="title function_">on</span>(<span class="string">&quot;asynchronous-message&quot;</span>, <span class="function">(<span class="params">event, arg</span>) =&gt;</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(arg); <span class="comment">// 렌더러 프로세스에서 받은 메시지</span>    event.<span class="title function_">reply</span>(<span class="string">&quot;asynchronous-reply&quot;</span>, <span class="string">&quot;메인 프로세스에서 응답&quot;</span>);  &#125;);  ipcMain.<span class="title function_">handle</span>(<span class="string">&quot;synchronous-message&quot;</span>, <span class="function">(<span class="params">event, arg</span>) =&gt;</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(arg); <span class="comment">// 렌더러 프로세스에서 받은 메시지</span>    <span class="keyword">return</span> <span class="string">&quot;메인 프로세스에서 응답&quot;</span>;  &#125;);&#125;app.<span class="title function_">whenReady</span>().<span class="title function_">then</span>(createWindow);</code></pre><h3 id="1-2-렌더러-프로세스-설정"><a href="#1-2-렌더러-프로세스-설정" class="headerlink" title="1.2 렌더러 프로세스 설정"></a>1.2 렌더러 프로세스 설정</h3><p>렌더러 프로세스에서 <code>ipcRenderer</code> 모듈을 사용하여 메인 프로세스에 이벤트를 전송할 수 있습니다. 다음은 간단한 예제입니다:</p><pre><code class="highlight javascript"><span class="keyword">const</span> &#123; ipcRenderer &#125; = <span class="built_in">require</span>(<span class="string">&quot;electron&quot;</span>);<span class="comment">// 비동기 메시지 전송</span>ipcRenderer.<span class="title function_">send</span>(<span class="string">&quot;asynchronous-message&quot;</span>, <span class="string">&quot;렌더러 프로세스에서 메시지&quot;</span>);<span class="comment">// 비동기 응답 수신</span>ipcRenderer.<span class="title function_">on</span>(<span class="string">&quot;asynchronous-reply&quot;</span>, <span class="function">(<span class="params">event, arg</span>) =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(arg); <span class="comment">// 메인 프로세스에서 받은 응답</span>&#125;);<span class="comment">// 동기 메시지 전송 및 응답 수신</span>(<span class="title function_">async</span> () =&gt; &#123;  <span class="keyword">const</span> response = <span class="keyword">await</span> ipcRenderer.<span class="title function_">invoke</span>(    <span class="string">&quot;synchronous-message&quot;</span>,    <span class="string">&quot;렌더러 프로세스에서 메시지&quot;</span>  );  <span class="variable language_">console</span>.<span class="title function_">log</span>(response); <span class="comment">// 메인 프로세스에서 받은 응답</span>&#125;)();</code></pre><h2 id="2-이벤트-및-명령-전송"><a href="#2-이벤트-및-명령-전송" class="headerlink" title="2. 이벤트 및 명령 전송"></a>2. 이벤트 및 명령 전송</h2><p>IPC를 사용하여 다양한 이벤트 및 명령을 전송할 수 있습니다. 이를 통해 메인 프로세스와 렌더러 프로세스 간의 상호작용을 효율적으로 관리할 수 있습니다.</p><h3 id="2-1-이벤트-전송"><a href="#2-1-이벤트-전송" class="headerlink" title="2.1 이벤트 전송"></a>2.1 이벤트 전송</h3><p>이벤트 전송은 <code>send</code>와 <code>on</code> 메서드를 사용하여 비동기적으로 이루어집니다. 다음은 이벤트 전송의 예제입니다:</p><pre><code class="highlight javascript"><span class="comment">// 메인 프로세스</span>ipcMain.<span class="title function_">on</span>(<span class="string">&quot;event-name&quot;</span>, <span class="function">(<span class="params">event, arg</span>) =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(arg);  event.<span class="title function_">reply</span>(<span class="string">&quot;event-reply&quot;</span>, <span class="string">&quot;메인 프로세스에서 응답&quot;</span>);&#125;);<span class="comment">// 렌더러 프로세스</span>ipcRenderer.<span class="title function_">send</span>(<span class="string">&quot;event-name&quot;</span>, <span class="string">&quot;렌더러 프로세스에서 메시지&quot;</span>);ipcRenderer.<span class="title function_">on</span>(<span class="string">&quot;event-reply&quot;</span>, <span class="function">(<span class="params">event, arg</span>) =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(arg);&#125;);</code></pre><h3 id="2-2-명령-전송"><a href="#2-2-명령-전송" class="headerlink" title="2.2 명령 전송"></a>2.2 명령 전송</h3><p>명령 전송은 <code>invoke</code>와 <code>handle</code> 메서드를 사용하여 동기적으로 이루어집니다. 다음은 명령 전송의 예제입니다:</p><pre><code class="highlight javascript"><span class="comment">// 메인 프로세스</span>ipcMain.<span class="title function_">handle</span>(<span class="string">&quot;command-name&quot;</span>, <span class="function">(<span class="params">event, arg</span>) =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(arg);  <span class="keyword">return</span> <span class="string">&quot;메인 프로세스에서 응답&quot;</span>;&#125;);<span class="comment">// 렌더러 프로세스</span>(<span class="title function_">async</span> () =&gt; &#123;  <span class="keyword">const</span> response = <span class="keyword">await</span> ipcRenderer.<span class="title function_">invoke</span>(    <span class="string">&quot;command-name&quot;</span>,    <span class="string">&quot;렌더러 프로세스에서 메시지&quot;</span>  );  <span class="variable language_">console</span>.<span class="title function_">log</span>(response);&#125;)();</code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 Electron 애플리케이션에서 인터프로세스 통신(IPC)을 통해 메인 프로세스와 렌더러 프로세스 간에 데이터를 교환하는 방법에 대해 알아보았습니다. 이러한 통신 방법은 애플리케이션의 다양한 기능을 구현하는 데 중요한 역할을 합니다. 다음 시간에는 애플리케이션 내 라우팅에 대해 알아보겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> Electron </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Electron 애플리케이션 상태 관리</title>
      <link href="/electron/5/"/>
      <url>/electron/5/</url>
      
        <content type="html"><![CDATA[<h1 id="애플리케이션-상태-관리"><a href="#애플리케이션-상태-관리" class="headerlink" title="애플리케이션 상태 관리"></a>애플리케이션 상태 관리</h1><p>안녕하세요, <strong>뉴코딩</strong>입니다!<br>이번 시간에는 <strong>Electron</strong> 애플리케이션에서 <strong>전역 상태 관리</strong>와 <strong>간단한 데이터 저장 및 불러오기</strong> 방법을 알아보겠습니다.</p><h2 id="1-전역-상태-관리"><a href="#1-전역-상태-관리" class="headerlink" title="1. 전역 상태 관리"></a>1. 전역 상태 관리</h2><p>Electron 애플리케이션에서 전역 상태를 관리하는 것은 매우 중요합니다. 예를 들어, 로그인 정보나 사용자 설정을 전역적으로 관리할 수 있습니다.</p><h3 id="1-1-전역-상태-저장"><a href="#1-1-전역-상태-저장" class="headerlink" title="1.1 전역 상태 저장"></a>1.1 전역 상태 저장</h3><p>전역 상태를 저장하기 위해 <code>global</code> 객체를 사용할 수 있습니다. 다음은 간단한 예제입니다:</p><pre><code class="highlight javascript"><span class="keyword">const</span> &#123; app, <span class="title class_">BrowserWindow</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;electron&quot;</span>);<span class="variable language_">global</span>.<span class="property">sharedObject</span> = &#123;  <span class="attr">user</span>: <span class="literal">null</span>,  <span class="attr">settings</span>: &#123;&#125;,&#125;;<span class="keyword">function</span> <span class="title function_">createWindow</span>(<span class="params"></span>) &#123;  <span class="keyword">const</span> win = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;    <span class="attr">width</span>: <span class="number">800</span>,    <span class="attr">height</span>: <span class="number">600</span>,    <span class="attr">webPreferences</span>: &#123;      <span class="attr">nodeIntegration</span>: <span class="literal">true</span>,    &#125;,  &#125;);  win.<span class="title function_">loadFile</span>(<span class="string">&quot;index.html&quot;</span>);&#125;app.<span class="title function_">whenReady</span>().<span class="title function_">then</span>(createWindow);</code></pre><h3 id="1-2-전역-상태-접근"><a href="#1-2-전역-상태-접근" class="headerlink" title="1.2 전역 상태 접근"></a>1.2 전역 상태 접근</h3><p>렌더러 프로세스에서 전역 상태에 접근하려면 <code>remote</code> 모듈을 사용할 수 있습니다:</p><pre><code class="highlight javascript"><span class="keyword">const</span> &#123; remote &#125; = <span class="built_in">require</span>(<span class="string">&quot;electron&quot;</span>);<span class="keyword">const</span> user = remote.<span class="title function_">getGlobal</span>(<span class="string">&quot;sharedObject&quot;</span>).<span class="property">user</span>;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`현재 사용자: <span class="subst">$&#123;user&#125;</span>`</span>);</code></pre><h2 id="2-간단한-데이터-저장-및-불러오기"><a href="#2-간단한-데이터-저장-및-불러오기" class="headerlink" title="2. 간단한 데이터 저장 및 불러오기"></a>2. 간단한 데이터 저장 및 불러오기</h2><p>Electron에서는 JSON 파일을 사용하여 간단한 데이터를 저장하고 불러올 수 있습니다.</p><h3 id="2-1-데이터-저장"><a href="#2-1-데이터-저장" class="headerlink" title="2.1 데이터 저장"></a>2.1 데이터 저장</h3><p>데이터를 저장하기 위해 <code>fs</code> 모듈을 사용할 수 있습니다. 다음은 데이터를 JSON 파일에 저장하는 예제입니다:</p><pre><code class="highlight javascript"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);<span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);<span class="keyword">function</span> <span class="title function_">saveData</span>(<span class="params">data</span>) &#123;  <span class="keyword">const</span> filePath = path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;data.json&quot;</span>);  fs.<span class="title function_">writeFileSync</span>(filePath, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data));&#125;<span class="keyword">const</span> data = &#123; <span class="attr">user</span>: <span class="string">&quot;뉴코딩&quot;</span>, <span class="attr">settings</span>: &#123; <span class="attr">theme</span>: <span class="string">&quot;dark&quot;</span> &#125; &#125;;<span class="title function_">saveData</span>(data);</code></pre><h3 id="2-2-데이터-불러오기"><a href="#2-2-데이터-불러오기" class="headerlink" title="2.2 데이터 불러오기"></a>2.2 데이터 불러오기</h3><p>저장된 데이터를 불러오기 위해 <code>fs</code> 모듈을 사용할 수 있습니다. 다음은 JSON 파일에서 데이터를 불러오는 예제입니다:</p><pre><code class="highlight javascript"><span class="keyword">function</span> <span class="title function_">loadData</span>(<span class="params"></span>) &#123;  <span class="keyword">const</span> filePath = path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;data.json&quot;</span>);  <span class="keyword">if</span> (fs.<span class="title function_">existsSync</span>(filePath)) &#123;    <span class="keyword">const</span> data = fs.<span class="title function_">readFileSync</span>(filePath);    <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">parse</span>(data);  &#125;  <span class="keyword">return</span> <span class="literal">null</span>;&#125;<span class="keyword">const</span> loadedData = <span class="title function_">loadData</span>();<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`불러온 데이터: <span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(loadedData)&#125;</span>`</span>);</code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 Electron 애플리케이션에서 전역 상태를 관리하고, JSON 파일을 사용하여 데이터를 저장하고 불러오는 방법에 대해 알아보았습니다. 이러한 기능들은 애플리케이션의 상태를 효율적으로 관리하는 데 중요한 역할을 합니다. 다음 시간에는 인터프로세스 통신(IPC)에 대해 알아보겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> Electron </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Electron 메뉴 및 대화 상자 구성</title>
      <link href="/electron/4/"/>
      <url>/electron/4/</url>
      
        <content type="html"><![CDATA[<h1 id="메뉴-및-대화-상자-구성"><a href="#메뉴-및-대화-상자-구성" class="headerlink" title="메뉴 및 대화 상자 구성"></a>메뉴 및 대화 상자 구성</h1><p>안녕하세요, <strong>뉴코딩</strong>입니다!<br>이번 시간에는 <strong>Electron</strong> 애플리케이션에서 <strong>메뉴</strong>를 커스터마이징하고, <strong>파일 열기</strong> 및 <strong>저장 대화 상자</strong>를 구현하는 방법을 알아보겠습니다.</p><h2 id="1-애플리케이션-메뉴-커스터마이징"><a href="#1-애플리케이션-메뉴-커스터마이징" class="headerlink" title="1. 애플리케이션 메뉴 커스터마이징"></a>1. 애플리케이션 메뉴 커스터마이징</h2><p>Electron에서는 애플리케이션 메뉴를 쉽게 커스터마이징할 수 있습니다. 이를 통해 사용자에게 더 나은 인터페이스를 제공할 수 있습니다.</p><h3 id="1-1-기본-메뉴-설정"><a href="#1-1-기본-메뉴-설정" class="headerlink" title="1.1 기본 메뉴 설정"></a>1.1 기본 메뉴 설정</h3><p>Electron의 <code>Menu</code> 모듈을 사용하여 기본 메뉴를 설정할 수 있습니다. 다음은 간단한 예제입니다:</p><pre><code class="highlight javascript"><span class="keyword">const</span> &#123; app, <span class="title class_">BrowserWindow</span>, <span class="title class_">Menu</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;electron&quot;</span>);<span class="keyword">function</span> <span class="title function_">createWindow</span>(<span class="params"></span>) &#123;  <span class="keyword">const</span> win = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;    <span class="attr">width</span>: <span class="number">800</span>,    <span class="attr">height</span>: <span class="number">600</span>,    <span class="attr">webPreferences</span>: &#123;      <span class="attr">nodeIntegration</span>: <span class="literal">true</span>,    &#125;,  &#125;);  win.<span class="title function_">loadFile</span>(<span class="string">&quot;index.html&quot;</span>);  <span class="keyword">const</span> menuTemplate = [    &#123;      <span class="attr">label</span>: <span class="string">&quot;파일&quot;</span>,      <span class="attr">submenu</span>: [        &#123;          <span class="attr">label</span>: <span class="string">&quot;열기&quot;</span>,          <span class="attr">click</span>: <span class="function">() =&gt;</span> &#123;            <span class="comment">/* 파일 열기 로직 */</span>          &#125;,        &#125;,        &#123;          <span class="attr">label</span>: <span class="string">&quot;저장&quot;</span>,          <span class="attr">click</span>: <span class="function">() =&gt;</span> &#123;            <span class="comment">/* 파일 저장 로직 */</span>          &#125;,        &#125;,        &#123; <span class="attr">type</span>: <span class="string">&quot;separator&quot;</span> &#125;,        &#123; <span class="attr">label</span>: <span class="string">&quot;종료&quot;</span>, <span class="attr">role</span>: <span class="string">&quot;quit&quot;</span> &#125;,      ],    &#125;,    &#123;      <span class="attr">label</span>: <span class="string">&quot;편집&quot;</span>,      <span class="attr">submenu</span>: [        &#123; <span class="attr">label</span>: <span class="string">&quot;실행 취소&quot;</span>, <span class="attr">role</span>: <span class="string">&quot;undo&quot;</span> &#125;,        &#123; <span class="attr">label</span>: <span class="string">&quot;다시 실행&quot;</span>, <span class="attr">role</span>: <span class="string">&quot;redo&quot;</span> &#125;,        &#123; <span class="attr">type</span>: <span class="string">&quot;separator&quot;</span> &#125;,        &#123; <span class="attr">label</span>: <span class="string">&quot;잘라내기&quot;</span>, <span class="attr">role</span>: <span class="string">&quot;cut&quot;</span> &#125;,        &#123; <span class="attr">label</span>: <span class="string">&quot;복사&quot;</span>, <span class="attr">role</span>: <span class="string">&quot;copy&quot;</span> &#125;,        &#123; <span class="attr">label</span>: <span class="string">&quot;붙여넣기&quot;</span>, <span class="attr">role</span>: <span class="string">&quot;paste&quot;</span> &#125;,      ],    &#125;,  ];  <span class="keyword">const</span> menu = <span class="title class_">Menu</span>.<span class="title function_">buildFromTemplate</span>(menuTemplate);  <span class="title class_">Menu</span>.<span class="title function_">setApplicationMenu</span>(menu);&#125;app.<span class="title function_">whenReady</span>().<span class="title function_">then</span>(createWindow);</code></pre><p>위 코드에서는 <code>Menu</code> 모듈을 사용하여 파일 및 편집 메뉴를 설정하고, 각 메뉴 항목에 클릭 이벤트를 추가했습니다.</p><h2 id="2-파일-열기-및-저장-대화-상자-구현"><a href="#2-파일-열기-및-저장-대화-상자-구현" class="headerlink" title="2. 파일 열기 및 저장 대화 상자 구현"></a>2. 파일 열기 및 저장 대화 상자 구현</h2><p>Electron에서는 <code>dialog</code> 모듈을 사용하여 파일 열기 및 저장 대화 상자를 쉽게 구현할 수 있습니다.</p><h3 id="2-1-파일-열기-대화-상자"><a href="#2-1-파일-열기-대화-상자" class="headerlink" title="2.1 파일 열기 대화 상자"></a>2.1 파일 열기 대화 상자</h3><p>파일 열기 대화 상자는 사용자가 파일을 선택할 수 있도록 도와줍니다. 다음은 파일 열기 대화 상자를 구현하는 예제입니다:</p><pre><code class="highlight javascript"><span class="keyword">const</span> &#123; dialog &#125; = <span class="built_in">require</span>(<span class="string">&quot;electron&quot;</span>);<span class="keyword">function</span> <span class="title function_">openFile</span>(<span class="params"></span>) &#123;  <span class="keyword">const</span> files = dialog.<span class="title function_">showOpenDialogSync</span>(&#123;    <span class="attr">properties</span>: [<span class="string">&quot;openFile&quot;</span>],    <span class="attr">filters</span>: [      &#123; <span class="attr">name</span>: <span class="string">&quot;텍스트 파일&quot;</span>, <span class="attr">extensions</span>: [<span class="string">&quot;txt&quot;</span>] &#125;,      &#123; <span class="attr">name</span>: <span class="string">&quot;모든 파일&quot;</span>, <span class="attr">extensions</span>: [<span class="string">&quot;*&quot;</span>] &#125;,    ],  &#125;);  <span class="keyword">if</span> (files) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`선택된 파일: <span class="subst">$&#123;files[<span class="number">0</span>]&#125;</span>`</span>);    <span class="comment">// 파일 읽기 로직 추가</span>  &#125;&#125;</code></pre><h3 id="2-2-파일-저장-대화-상자"><a href="#2-2-파일-저장-대화-상자" class="headerlink" title="2.2 파일 저장 대화 상자"></a>2.2 파일 저장 대화 상자</h3><p>파일 저장 대화 상자는 사용자가 파일을 저장할 위치와 이름을 선택할 수 있도록 도와줍니다. 다음은 파일 저장 대화 상자를 구현하는 예제입니다:</p><pre><code class="highlight javascript"><span class="keyword">function</span> <span class="title function_">saveFile</span>(<span class="params"></span>) &#123;  <span class="keyword">const</span> file = dialog.<span class="title function_">showSaveDialogSync</span>(&#123;    <span class="attr">title</span>: <span class="string">&quot;파일 저장&quot;</span>,    <span class="attr">defaultPath</span>: <span class="string">&quot;untitled.txt&quot;</span>,    <span class="attr">filters</span>: [      &#123; <span class="attr">name</span>: <span class="string">&quot;텍스트 파일&quot;</span>, <span class="attr">extensions</span>: [<span class="string">&quot;txt&quot;</span>] &#125;,      &#123; <span class="attr">name</span>: <span class="string">&quot;모든 파일&quot;</span>, <span class="attr">extensions</span>: [<span class="string">&quot;*&quot;</span>] &#125;,    ],  &#125;);  <span class="keyword">if</span> (file) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`저장할 파일: <span class="subst">$&#123;file&#125;</span>`</span>);    <span class="comment">// 파일 쓰기 로직 추가</span>  &#125;&#125;</code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 Electron 애플리케이션에서 메뉴를 커스터마이징하고, 파일 열기 및 저장 대화 상자를 구현하는 방법에 대해 알아보았습니다. 이러한 기능들은 사용자 경험을 향상시키는 데 중요한 역할을 합니다. 다음 시간에는 애플리케이션 상태 관리에 대해 알아보겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> Electron </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Electron 웹 콘텐츠 로딩</title>
      <link href="/electron/3/"/>
      <url>/electron/3/</url>
      
        <content type="html"><![CDATA[<h1 id="웹-콘텐츠-로딩"><a href="#웹-콘텐츠-로딩" class="headerlink" title="웹 콘텐츠 로딩"></a>웹 콘텐츠 로딩</h1><p>안녕하세요, <strong>뉴코딩</strong>입니다!<br>이번 글에서는 Electron에서 <strong>웹 콘텐츠</strong>를 로딩하는 방법을 알아보겠습니다. Electron의 <code>BrowserWindow</code> 객체를 통해 HTML, CSS, JavaScript로 구성된 웹 콘텐츠를 로드할 수 있으며, 로컬 파일과 외부 웹 페이지를 로드하는 방법도 다릅니다. 이 글에서는 각 방법을 구체적으로 알아보겠습니다.</p><h2 id="1-HTML-CSS-JavaScript-파일-로드"><a href="#1-HTML-CSS-JavaScript-파일-로드" class="headerlink" title="1. HTML, CSS, JavaScript 파일 로드"></a>1. HTML, CSS, JavaScript 파일 로드</h2><p>Electron에서 <strong>웹 콘텐츠</strong>를 로드하는 기본 방법은 <code>BrowserWindow</code>를 사용하여 로컬 HTML 파일을 로드하는 것입니다. 이는 Electron 애플리케이션의 기본 UI를 생성하는 데 중요한 과정입니다.</p><h3 id="1-1-로컬-HTML-파일-로드"><a href="#1-1-로컬-HTML-파일-로드" class="headerlink" title="1-1. 로컬 HTML 파일 로드"></a>1-1. 로컬 HTML 파일 로드</h3><p>아래 코드는 <code>BrowserWindow</code> 객체에 로컬 HTML 파일을 로드하는 방법입니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> &#123; app, <span class="title class_">BrowserWindow</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;electron&quot;</span>);<span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);<span class="keyword">let</span> mainWindow;app.<span class="title function_">on</span>(<span class="string">&quot;ready&quot;</span>, <span class="function">() =&gt;</span> &#123;  mainWindow = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;    <span class="attr">width</span>: <span class="number">800</span>,    <span class="attr">height</span>: <span class="number">600</span>,    <span class="attr">webPreferences</span>: &#123;      <span class="attr">nodeIntegration</span>: <span class="literal">true</span>,      <span class="attr">contextIsolation</span>: <span class="literal">false</span>,    &#125;,  &#125;);  mainWindow.<span class="title function_">loadFile</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;index.html&quot;</span>));&#125;);</code></pre><p>이 코드에서 중요한 부분은 <code>loadFile()</code> 메서드를 사용하여 <code>index.html</code> 파일을 로드하는 부분입니다. 이 파일은 Electron 애플리케이션이 실행될 때 브라우저 창에 표시될 HTML 파일입니다.</p><h3 id="1-2-CSS-및-JavaScript-파일-로드"><a href="#1-2-CSS-및-JavaScript-파일-로드" class="headerlink" title="1-2. CSS 및 JavaScript 파일 로드"></a>1-2. CSS 및 JavaScript 파일 로드</h3><p>HTML 파일 안에서 CSS와 JavaScript 파일을 로드하는 방법은 일반 웹 개발과 동일합니다. HTML 파일 내에서 <code>link</code> 태그로 CSS 파일을, <code>script</code> 태그로 JavaScript 파일을 로드할 수 있습니다.</p><p><strong>index.html</strong></p><pre><code class="highlight html"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">head</span>&gt;</span>    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span>    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span>    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;styles.css&quot;</span> /&gt;</span>    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Electron App<span class="tag">&lt;/<span class="name">title</span>&gt;</span>  <span class="tag">&lt;/<span class="name">head</span>&gt;</span>  <span class="tag">&lt;<span class="name">body</span>&gt;</span>    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Electron에서 로드된 웹 콘텐츠<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;renderer.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  <span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></code></pre><p>이 파일에서 <code>styles.css</code> 파일을 로드하여 스타일을 적용하고, <code>renderer.js</code> 파일을 로드하여 JavaScript 로직을 추가할 수 있습니다.</p><h2 id="2-로컬-파일-및-외부-웹-페이지-로드"><a href="#2-로컬-파일-및-외부-웹-페이지-로드" class="headerlink" title="2. 로컬 파일 및 외부 웹 페이지 로드"></a>2. 로컬 파일 및 외부 웹 페이지 로드</h2><p>Electron에서는 로컬 파일뿐만 아니라 외부 웹 페이지도 쉽게 로드할 수 있습니다. 이를 통해 Electron 애플리케이션에서 브라우저처럼 웹 콘텐츠를 표시할 수 있습니다.</p><h3 id="2-1-로컬-파일-로드"><a href="#2-1-로컬-파일-로드" class="headerlink" title="2-1. 로컬 파일 로드"></a>2-1. 로컬 파일 로드</h3><p>로컬 HTML 파일을 로드하는 것은 위에서 살펴본 것처럼 <code>loadFile()</code> 메서드를 사용하면 됩니다. 다음과 같이 HTML 파일의 경로를 지정하여 로드합니다.</p><pre><code class="highlight javascript">mainWindow.<span class="title function_">loadFile</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;index.html&quot;</span>));</code></pre><h3 id="2-2-외부-웹-페이지-로드"><a href="#2-2-외부-웹-페이지-로드" class="headerlink" title="2-2. 외부 웹 페이지 로드"></a>2-2. 외부 웹 페이지 로드</h3><p>외부 웹 페이지를 로드하는 방법은 <code>loadURL()</code> 메서드를 사용하는 것입니다. 이를 통해 Electron 애플리케이션에서 외부 웹 사이트를 로드할 수 있습니다.</p><pre><code class="highlight javascript">mainWindow.<span class="title function_">loadURL</span>(<span class="string">&quot;https://example.com&quot;</span>);</code></pre><p>이 코드를 실행하면, Electron 애플리케이션은 브라우저처럼 외부 웹 사이트를 로드하여 화면에 표시합니다.</p><h3 id="2-3-로컬-파일과-외부-URL-혼용"><a href="#2-3-로컬-파일과-외부-URL-혼용" class="headerlink" title="2-3. 로컬 파일과 외부 URL 혼용"></a>2-3. 로컬 파일과 외부 URL 혼용</h3><p>Electron 애플리케이션에서는 로컬 HTML 파일과 외부 웹 페이지를 동시에 사용할 수 있습니다. 예를 들어, 애플리케이션의 메인 페이지는 로컬 파일을 사용하고, 특정 기능에서 외부 웹 페이지를 로드할 수 있습니다.</p><pre><code class="highlight javascript"><span class="keyword">if</span> (useLocalFile) &#123;  mainWindow.<span class="title function_">loadFile</span>(<span class="string">&quot;index.html&quot;</span>);&#125; <span class="keyword">else</span> &#123;  mainWindow.<span class="title function_">loadURL</span>(<span class="string">&quot;https://example.com&quot;</span>);&#125;</code></pre><p>이 코드처럼 조건에 따라 로컬 파일 또는 외부 URL을 로드하도록 설정할 수 있습니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 글에서는 Electron에서 <strong>웹 콘텐츠</strong>를 로딩하는 다양한 방법을 알아보았습니다. Electron에서는 로컬 파일과 외부 웹 페이지 모두 쉽게 로드할 수 있으며, 이를 통해 독립적인 데스크탑 애플리케이션뿐만 아니라 웹 기반 애플리케이션을 쉽게 개발할 수 있습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> Electron </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript 타입 선언 파일(.d.ts) 오류 해결</title>
      <link href="/typescript/troubleshooting/12/"/>
      <url>/typescript/troubleshooting/12/</url>
      
        <content type="html"><![CDATA[<h1 id="TypeScript-타입-선언-파일-d-ts-오류-해결-커스텀-타입-선언-파일-생성"><a href="#TypeScript-타입-선언-파일-d-ts-오류-해결-커스텀-타입-선언-파일-생성" class="headerlink" title="TypeScript 타입 선언 파일(.d.ts) 오류 해결 - 커스텀 타입 선언 파일 생성"></a>TypeScript 타입 선언 파일(.d.ts) 오류 해결 - 커스텀 타입 선언 파일 생성</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 npm 모듈에서 기본 제공하는 타입 선언 파일(<code>.d.ts</code>)에 문제가 있을 때 이를 해결하는 방법에 대해 알아보겠습니다.<br>버그리포팅이 꾸준하게 안되는 소규모 npm 모듈을 사용할 때, 혹은 개발자가 보통의 use-case를 벗어나서 특별하게 사용하려고 할때, 아래 2가지 이슈가 발생할 수 있습니다.</p><ul><li>타입 선언 파일의 오류로 컴파일이 되지 않음.</li><li>필요한 선언이 누락됨</li></ul><p>이러한 경우 커스텀 타입 선언 파일을 사용하여 문제를 해결할 수 있습니다.</p><h2 id="문제-상황"><a href="#문제-상황" class="headerlink" title="문제 상황"></a>문제 상황</h2><h3 id="문제의-발생"><a href="#문제의-발생" class="headerlink" title="문제의 발생"></a>문제의 발생</h3><p>RPG 게임을 개발하던 중 npm 모듈에서 제공하는 타입 선언 파일(<code>.d.ts</code>)에 오류가 있어 컴파일이 되지 않는 상황을 가정해봅시다. 예를 들어, RPG 게임의 몬스터 모듈에서 <code>attack</code> 메서드가 잘못된 타입으로 선언되어 있다고 가정합니다.</p><pre><code class="highlight typescript"><span class="comment">// node_modules/moduleA/index.d.ts</span><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&quot;moduleA&quot;</span> &#123;  <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">attack</span>(<span class="params"><span class="attr">target</span>: <span class="built_in">number</span></span>): <span class="built_in">void</span>; <span class="comment">// 잘못된 타입 선언</span>&#125;</code></pre><h2 id="해결-방안"><a href="#해결-방안" class="headerlink" title="해결 방안"></a>해결 방안</h2><h3 id="디렉토리-구조"><a href="#디렉토리-구조" class="headerlink" title="디렉토리 구조"></a>디렉토리 구조</h3><p>먼저, 프로젝트의 디렉토리 구조를 다음과 같이 구성합니다:</p><pre><code class="highlight plaintext">root├─node_modules│ ├─moduleA│ │ ├─index.js│ │ └─index.d.ts  (원본)│ ├─moduleB│ │ └─index.js│ └─@types│   └─moduleB│     └─index.d.ts  (원본)├─src│ ├─@types│ │ └─custom.d.ts  (커스텀)│ └─index.ts└─tsconfig.json</code></pre><h3 id="1-원본-d-ts-파일이-node-modules-아래에-있을-경우"><a href="#1-원본-d-ts-파일이-node-modules-아래에-있을-경우" class="headerlink" title="1. 원본 .d.ts 파일이 node_modules 아래에 있을 경우"></a>1. 원본 .d.ts 파일이 node_modules 아래에 있을 경우</h3><p><code>moduleA</code>의 타입 선언 파일을 커스텀 파일로 대체해보겠습니다.</p><p><strong>src&#x2F;index.ts</strong></p><pre><code class="highlight typescript"><span class="keyword">import</span> &#123; attack &#125; <span class="keyword">from</span> <span class="string">&quot;moduleA&quot;</span>;<span class="title function_">attack</span>(<span class="string">&quot;Dragon&quot;</span>);</code></pre><p><strong>src&#x2F;@types&#x2F;custom.d.ts</strong></p><pre><code class="highlight typescript"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&quot;moduleA&quot;</span> &#123;  <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">attack</span>(<span class="params"><span class="attr">target</span>: <span class="built_in">string</span></span>): <span class="built_in">void</span>; <span class="comment">// 올바른 타입 선언</span>&#125;</code></pre><p><strong>tsconfig.json</strong></p><pre><code class="highlight json"><span class="punctuation">&#123;</span>  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>    <span class="attr">&quot;baseUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.&quot;</span><span class="punctuation">,</span>    <span class="attr">&quot;paths&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>      <span class="attr">&quot;moduleA&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;./src/@types/custom.d.ts&quot;</span><span class="punctuation">]</span>    <span class="punctuation">&#125;</span>  <span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></code></pre><p>컴파일러는 <code>src/index.ts</code>에서 <code>moduleA</code> 모듈을 탐색할 때 <code>compilerOptions.paths</code>에 설정된 경로를 우선적으로 탐색하여 커스텀 선언 파일을 참조합니다.</p><h3 id="2-원본-d-ts-파일이-node-modules-types-아래에-있을-경우"><a href="#2-원본-d-ts-파일이-node-modules-types-아래에-있을-경우" class="headerlink" title="2. 원본 .d.ts 파일이 node_modules&#x2F;@types 아래에 있을 경우"></a>2. 원본 .d.ts 파일이 node_modules&#x2F;@types 아래에 있을 경우</h3><p><code>moduleB</code>의 타입 선언 파일을 커스텀 파일로 대체해보겠습니다.</p><p><strong>src&#x2F;index.ts</strong></p><pre><code class="highlight typescript"><span class="keyword">import</span> &#123; defend &#125; <span class="keyword">from</span> <span class="string">&quot;moduleB&quot;</span>;<span class="title function_">defend</span>();</code></pre><p><strong>src&#x2F;@types&#x2F;custom.d.ts</strong></p><pre><code class="highlight typescript"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&quot;moduleB&quot;</span> &#123;  <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">defend</span>(<span class="params"></span>): <span class="built_in">void</span>; <span class="comment">// 커스텀 타입 선언</span>&#125;</code></pre><p><strong>tsconfig.json</strong></p><pre><code class="highlight json"><span class="punctuation">&#123;</span>  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>    <span class="attr">&quot;baseUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.&quot;</span><span class="punctuation">,</span>    <span class="attr">&quot;paths&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>      <span class="attr">&quot;moduleB&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;./src/@types/custom.d.ts&quot;</span><span class="punctuation">]</span>    <span class="punctuation">&#125;</span><span class="punctuation">,</span>    <span class="attr">&quot;types&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span> <span class="comment">// 빈 배열로 설정</span>  <span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></code></pre><p><code>compilerOptions.types</code>에 빈 배열을 설정하면 <code>node_modules/@types</code> 디렉토리 내의 모듈 자동 포함이 동작하지 않게 되어 커스텀 선언 파일이 우선 참조됩니다.</p><h2 id="예제-RPG-게임-모듈"><a href="#예제-RPG-게임-모듈" class="headerlink" title="예제: RPG 게임 모듈"></a>예제: RPG 게임 모듈</h2><p>RPG 게임의 몬스터 모듈을 예시로 커스텀 타입 선언 파일을 작성하고 적용해보겠습니다.</p><p><strong>src&#x2F;@types&#x2F;custom.d.ts</strong></p><pre><code class="highlight typescript"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&quot;moduleA&quot;</span> &#123;  <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">attack</span>(<span class="params"><span class="attr">target</span>: <span class="built_in">string</span></span>): <span class="built_in">void</span>;&#125;<span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&quot;moduleB&quot;</span> &#123;  <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">defend</span>(<span class="params"></span>): <span class="built_in">void</span>;&#125;</code></pre><p><strong>src&#x2F;index.ts</strong></p><pre><code class="highlight typescript"><span class="keyword">import</span> &#123; attack &#125; <span class="keyword">from</span> <span class="string">&quot;moduleA&quot;</span>;<span class="keyword">import</span> &#123; defend &#125; <span class="keyword">from</span> <span class="string">&quot;moduleB&quot;</span>;<span class="title function_">attack</span>(<span class="string">&quot;Dragon&quot;</span>);<span class="title function_">defend</span>();</code></pre><p>이제 <code>tsconfig.json</code> 파일을 설정하고 컴파일러가 커스텀 타입 선언 파일을 참조하도록 합니다.</p><p><strong>tsconfig.json</strong></p><pre><code class="highlight json"><span class="punctuation">&#123;</span>  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>    <span class="attr">&quot;baseUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.&quot;</span><span class="punctuation">,</span>    <span class="attr">&quot;paths&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>      <span class="attr">&quot;moduleA&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;./src/@types/custom.d.ts&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span>      <span class="attr">&quot;moduleB&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;./src/@types/custom.d.ts&quot;</span><span class="punctuation">]</span>    <span class="punctuation">&#125;</span><span class="punctuation">,</span>    <span class="attr">&quot;types&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span>  <span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></code></pre><p>위 설정을 통해 컴파일러는 <code>moduleA</code>와 <code>moduleB</code> 모듈을 탐색할 때 커스텀 타입 선언 파일을 참조하여 올바르게 동작하게 됩니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 npm 모듈의 타입 선언 파일을 커스텀 파일로 대체하는 방법에 대해 알아보았습니다. 이를 통해 타입 선언 파일의 오류를 해결하고, 필요한 선언을 추가할 수 있습니다. TypeScript의 모듈 탐색 과정과 설정 파일을 이해하면 더 유연하게 문제를 해결할 수 있습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> TS_트러블슈팅 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Electron 창(Window) 생성 및 설정</title>
      <link href="/electron/2/"/>
      <url>/electron/2/</url>
      
        <content type="html"><![CDATA[<h1 id="주요-창-Window-생성-및-설정"><a href="#주요-창-Window-생성-및-설정" class="headerlink" title="주요 창(Window) 생성 및 설정"></a>주요 창(Window) 생성 및 설정</h1><p>안녕하세요, <strong>뉴코딩</strong>입니다!<br>이번 시간에는 <strong>Electron</strong> 애플리케이션에서 <strong>주요 창</strong>을 생성하고, 다양한 설정을 적용하는 방법을 알아보겠습니다. 메인 창을 만들고, 크기와 아이콘, 최소&#x2F;최대 크기를 설정하는 예제도 다뤄보겠습니다.</p><h2 id="1-BrowserWindow를-사용한-메인-윈도우-생성"><a href="#1-BrowserWindow를-사용한-메인-윈도우-생성" class="headerlink" title="1. BrowserWindow를 사용한 메인 윈도우 생성"></a>1. <code>BrowserWindow</code>를 사용한 메인 윈도우 생성</h2><p>Electron에서 <strong>BrowserWindow</strong>는 애플리케이션 창을 생성하는 가장 기본적인 클래스입니다. 이 클래스는 윈도우를 열고 HTML 파일을 로드하여 사용자에게 보여줍니다.</p><h3 id="기본-사용법"><a href="#기본-사용법" class="headerlink" title="기본 사용법"></a>기본 사용법</h3><p>다음은 <code>BrowserWindow</code>를 사용해 메인 창을 생성하는 기본적인 예시입니다:</p><pre><code class="highlight javascript"><span class="keyword">const</span> &#123; app, <span class="title class_">BrowserWindow</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;electron&quot;</span>);<span class="keyword">function</span> <span class="title function_">createWindow</span>(<span class="params"></span>) &#123;  <span class="keyword">const</span> win = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;    <span class="attr">width</span>: <span class="number">800</span>,    <span class="attr">height</span>: <span class="number">600</span>,    <span class="attr">webPreferences</span>: &#123;      <span class="attr">nodeIntegration</span>: <span class="literal">true</span>,    &#125;,  &#125;);  win.<span class="title function_">loadFile</span>(<span class="string">&quot;index.html&quot;</span>);&#125;app.<span class="title function_">whenReady</span>().<span class="title function_">then</span>(createWindow);</code></pre><p>위 코드에서 <code>BrowserWindow</code>는 800x600 크기의 창을 생성하며, <strong><code>index.html</code></strong> 파일을 로드합니다. 이 창은 Electron 애플리케이션의 메인 창 역할을 하며, 필요한 설정들을 추가할 수 있습니다.</p><h2 id="2-창-설정"><a href="#2-창-설정" class="headerlink" title="2. 창 설정"></a>2. 창 설정</h2><p><code>BrowserWindow</code>는 창의 크기, 최소&#x2F;최대 크기, 창 모양(아이콘 등)과 같은 다양한 설정을 지원합니다. 이러한 설정들은 <code>BrowserWindow</code> 객체를 생성할 때 옵션으로 지정됩니다.</p><h3 id="2-1-창-크기-설정"><a href="#2-1-창-크기-설정" class="headerlink" title="2.1 창 크기 설정"></a>2.1 창 크기 설정</h3><p>창의 초기 크기와 최소&#x2F;최대 크기를 설정하려면, <code>width</code>, <code>height</code>, <code>minWidth</code>, <code>maxWidth</code> 등의 옵션을 사용합니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> win = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;  <span class="attr">width</span>: <span class="number">1024</span>, <span class="comment">// 창의 너비</span>  <span class="attr">height</span>: <span class="number">768</span>, <span class="comment">// 창의 높이</span>  <span class="attr">minWidth</span>: <span class="number">800</span>, <span class="comment">// 최소 너비</span>  <span class="attr">minHeight</span>: <span class="number">600</span>, <span class="comment">// 최소 높이</span>  <span class="attr">maxWidth</span>: <span class="number">1280</span>, <span class="comment">// 최대 너비</span>  <span class="attr">maxHeight</span>: <span class="number">1024</span>, <span class="comment">// 최대 높이</span>&#125;);</code></pre><p>위 코드에서 창의 초기 크기를 <strong>1024x768</strong>로 설정하고, 최소 크기는 <strong>800x600</strong>, 최대 크기는 <strong>1280x1024</strong>로 제한하고 있습니다.</p><h3 id="2-2-아이콘-설정"><a href="#2-2-아이콘-설정" class="headerlink" title="2.2 아이콘 설정"></a>2.2 아이콘 설정</h3><p>애플리케이션 창의 아이콘은 <code>icon</code> 옵션을 사용해 설정할 수 있습니다. 이 아이콘은 애플리케이션 실행 시 창의 제목 표시줄에 표시됩니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> win = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;  <span class="attr">width</span>: <span class="number">800</span>,  <span class="attr">height</span>: <span class="number">600</span>,  <span class="attr">icon</span>: __dirname + <span class="string">&quot;/assets/icon.png&quot;</span>, <span class="comment">// 아이콘 경로</span>&#125;);</code></pre><p>위 코드에서는 <strong><code>/assets/icon.png</code></strong> 경로에 있는 이미지를 창의 아이콘으로 설정합니다. 이 아이콘 파일은 PNG 형식을 권장합니다.</p><h3 id="2-3-창-모양-및-동작-설정"><a href="#2-3-창-모양-및-동작-설정" class="headerlink" title="2.3 창 모양 및 동작 설정"></a>2.3 창 모양 및 동작 설정</h3><p>Electron은 창의 기본 동작과 모양을 설정할 수 있는 여러 옵션을 제공합니다. 몇 가지 중요한 설정은 다음과 같습니다:</p><ul><li><strong><code>resizable</code></strong>: 창 크기를 조정할 수 있는지 여부를 설정합니다.</li><li><strong><code>fullscreen</code></strong>: 창을 전체 화면 모드로 설정합니다.</li><li><strong><code>frame</code></strong>: 기본 창의 프레임(제목 표시줄 및 경계선)을 숨길 수 있습니다.</li></ul><pre><code class="highlight javascript"><span class="keyword">const</span> win = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;  <span class="attr">width</span>: <span class="number">800</span>,  <span class="attr">height</span>: <span class="number">600</span>,  <span class="attr">resizable</span>: <span class="literal">false</span>, <span class="comment">// 창 크기 고정</span>  <span class="attr">fullscreen</span>: <span class="literal">false</span>, <span class="comment">// 전체 화면 비활성화</span>  <span class="attr">frame</span>: <span class="literal">true</span>, <span class="comment">// 프레임 활성화</span>&#125;);</code></pre><h2 id="3-창의-위치-설정"><a href="#3-창의-위치-설정" class="headerlink" title="3. 창의 위치 설정"></a>3. 창의 위치 설정</h2><p>창이 화면에 처음 열릴 때의 위치도 설정할 수 있습니다. 이를 위해 <code>x</code>, <code>y</code> 좌표 값을 지정할 수 있습니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> win = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;  <span class="attr">width</span>: <span class="number">800</span>,  <span class="attr">height</span>: <span class="number">600</span>,  <span class="attr">x</span>: <span class="number">100</span>, <span class="comment">// 화면에서 가로 위치</span>  <span class="attr">y</span>: <span class="number">100</span>, <span class="comment">// 화면에서 세로 위치</span>&#125;);</code></pre><p>위 코드에서는 창이 화면의 <strong>(100, 100)</strong> 좌표에서 시작되도록 설정했습니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 Electron에서 <strong>BrowserWindow</strong>를 사용하여 메인 윈도우를 생성하고, 창의 크기, 아이콘, 최소&#x2F;최대 크기 등 다양한 설정을 적용하는 방법에 대해 알아보았습니다. 이러한 설정들은 애플리케이션의 UI&#x2F;UX를 사용자 맞춤형으로 제공하는 데 중요한 역할을 합니다.<br>다음 시간에는 웹 콘텐츠 로딩에 대해 알아보겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> Electron </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Electron 기본 설정</title>
      <link href="/electron/1/"/>
      <url>/electron/1/</url>
      
        <content type="html"><![CDATA[<h1 id="Electron-기본-설정-LTS-버전-기반"><a href="#Electron-기본-설정-LTS-버전-기반" class="headerlink" title="Electron 기본 설정 (LTS 버전 기반)"></a>Electron 기본 설정 (LTS 버전 기반)</h1><p>안녕하세요, <strong>뉴코딩</strong>입니다!<br>이번 시간에는 <strong>Electron</strong> 데스크탑 애플리케이션 개발을 시작하기 위해, <strong>기본 설정</strong>부터 알아보겠습니다. <strong>Electron 23</strong> 버전이 LTS(Long-Term Support)로 안정적인 환경을 제공하므로,<br>23 버전을 기반으로 Node.js, npm, nvm 설치까지 함께 살펴보겠습니다.</p><h2 id="1-Electron-23-버전과-Node-js-설정"><a href="#1-Electron-23-버전과-Node-js-설정" class="headerlink" title="1. Electron 23 버전과 Node.js 설정"></a>1. Electron 23 버전과 Node.js 설정</h2><p>Electron 23 버전을 설치하려면, Node.js <strong>v18</strong> 이상이 필요합니다. 여기서는 <strong>nvm</strong>(Node Version Manager)을 사용하여 여러 Node.js 버전을 관리하는 방법도 함께 다루겠습니다.</p><h3 id="1-1-Node-js와-npm-설치"><a href="#1-1-Node-js와-npm-설치" class="headerlink" title="1.1 Node.js와 npm 설치"></a>1.1 Node.js와 npm 설치</h3><p>Electron은 Node.js 환경에서 동작하기 때문에 먼저 Node.js와 npm(Node Package Manager)을 설치해야 합니다. <a href="https://nodejs.org/">Node.js 공식 웹사이트</a>에서 <strong>v18 LTS</strong> 버전을 다운로드하여 설치합니다.</p><p>설치가 완료되면 다음 명령어로 Node.js와 npm 버전을 확인합니다:</p><pre><code class="highlight bash">node -vnpm -v</code></pre><p>Node.js <strong>v18</strong> 이상이 출력되어야 합니다.</p><h3 id="1-2-nvm-설치-필요-시"><a href="#1-2-nvm-설치-필요-시" class="headerlink" title="1.2 nvm 설치 (필요 시)"></a>1.2 nvm 설치 (필요 시)</h3><p>개발 중 여러 Node.js 버전을 사용해야 할 경우, <strong>nvm</strong>을 설치하여 관리할 수 있습니다.</p><h4 id="nvm-설치-방법"><a href="#nvm-설치-방법" class="headerlink" title="nvm 설치 방법:"></a>nvm 설치 방법:</h4><ol><li>nvm 설치 스크립트를 실행합니다:</li></ol><pre><code class="highlight bash">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash</code></pre><ol start="2"><li>설치 후, <code>nvm</code> 명령어를 사용하여 Node.js 버전을 관리할 수 있습니다. Electron 23에 필요한 <strong>Node.js v18</strong>을 설치하고 활성화합니다:</li></ol><pre><code class="highlight bash">nvm install 18nvm use 18</code></pre><p>이 명령어로 Node.js v18이 활성화됩니다.</p><h2 id="2-Electron-설치-및-첫-프로젝트-생성"><a href="#2-Electron-설치-및-첫-프로젝트-생성" class="headerlink" title="2. Electron 설치 및 첫 프로젝트 생성"></a>2. Electron 설치 및 첫 프로젝트 생성</h2><h3 id="2-1-Electron-설치"><a href="#2-1-Electron-설치" class="headerlink" title="2.1 Electron 설치"></a>2.1 Electron 설치</h3><p>이제 <strong>Electron 23</strong>을 설치합니다. 프로젝트 디렉터리를 만들고 Electron을 설치하는 과정을 진행하겠습니다.</p><ol><li>프로젝트 디렉터리 생성:</li></ol><pre><code class="highlight bash"><span class="built_in">mkdir</span> my-electron-app<span class="built_in">cd</span> my-electron-app</code></pre><ol start="2"><li>프로젝트 초기화:</li></ol><pre><code class="highlight bash">npm init -y</code></pre><ol start="3"><li>Electron 설치:</li></ol><pre><code class="highlight bash">npm install --save-dev electron@23</code></pre><p><code>electron@23</code>으로 LTS 버전인 23을 명시적으로 설치합니다.</p><h3 id="2-2-첫-Electron-프로젝트-생성"><a href="#2-2-첫-Electron-프로젝트-생성" class="headerlink" title="2.2 첫 Electron 프로젝트 생성"></a>2.2 첫 Electron 프로젝트 생성</h3><p>이제 Electron 프로젝트 구조를 설정하고 기본 애플리케이션을 실행해보겠습니다. 다음과 같은 구조로 파일을 생성합니다:</p><pre><code class="highlight bash">my-electron-app/├── package.json├── main.js└── index.html</code></pre><h4 id="main-js-파일"><a href="#main-js-파일" class="headerlink" title="main.js 파일"></a><strong>main.js</strong> 파일</h4><p>Electron의 <strong>메인 프로세스</strong>를 설정하는 파일입니다. 창을 열고, 렌더링할 HTML 파일을 로드하는 기능을 포함합니다.</p><pre><code class="highlight javascript"><span class="comment">// main.js</span><span class="keyword">const</span> &#123; app, <span class="title class_">BrowserWindow</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;electron&quot;</span>);<span class="keyword">function</span> <span class="title function_">createWindow</span>(<span class="params"></span>) &#123;  <span class="keyword">const</span> win = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;    <span class="attr">width</span>: <span class="number">800</span>,    <span class="attr">height</span>: <span class="number">600</span>,    <span class="attr">webPreferences</span>: &#123;      <span class="attr">nodeIntegration</span>: <span class="literal">true</span>,    &#125;,  &#125;);  win.<span class="title function_">loadFile</span>(<span class="string">&quot;index.html&quot;</span>);&#125;app.<span class="title function_">whenReady</span>().<span class="title function_">then</span>(createWindow);app.<span class="title function_">on</span>(<span class="string">&quot;window-all-closed&quot;</span>, <span class="function">() =&gt;</span> &#123;  <span class="keyword">if</span> (process.<span class="property">platform</span> !== <span class="string">&quot;darwin&quot;</span>) &#123;    app.<span class="title function_">quit</span>();  &#125;&#125;);app.<span class="title function_">on</span>(<span class="string">&quot;activate&quot;</span>, <span class="function">() =&gt;</span> &#123;  <span class="keyword">if</span> (<span class="title class_">BrowserWindow</span>.<span class="title function_">getAllWindows</span>().<span class="property">length</span> === <span class="number">0</span>) &#123;    <span class="title function_">createWindow</span>();  &#125;&#125;);</code></pre><h4 id="index-html-파일"><a href="#index-html-파일" class="headerlink" title="index.html 파일"></a><strong>index.html</strong> 파일</h4><p>애플리케이션의 <strong>렌더러 프로세스</strong>에서 보여줄 기본 HTML 파일입니다.</p><pre><code class="highlight html"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">head</span>&gt;</span>    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span>    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span>    <span class="tag">&lt;<span class="name">title</span>&gt;</span>My Electron App<span class="tag">&lt;/<span class="name">title</span>&gt;</span>  <span class="tag">&lt;/<span class="name">head</span>&gt;</span>  <span class="tag">&lt;<span class="name">body</span>&gt;</span>    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>안녕하세요, Electron으로 뭐 좀 만들어보시죠!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>  <span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></code></pre><h3 id="2-3-Electron-실행"><a href="#2-3-Electron-실행" class="headerlink" title="2.3 Electron 실행"></a>2.3 Electron 실행</h3><p>프로젝트를 실행하기 위한 <strong>npm 스크립트</strong>를 추가합니다. <code>package.json</code> 파일에 다음을 추가합니다:</p><pre><code class="highlight json"><span class="punctuation">&#123;</span>  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;electron .&quot;</span>  <span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></code></pre><p>이제 <code>npm start</code> 명령어로 애플리케이션을 실행할 수 있습니다:</p><pre><code class="highlight bash">npm start</code></pre><p>이 명령어를 실행하면 Electron 23으로 만들어진 애플리케이션 창이 열리며, 화면에 “안녕하세요, Electron으로 뭐 좀 만들어보시죠!” 메시지가 표시됩니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 Electron 23 LTS 버전을 기준으로 Node.js와 npm, nvm을 설정하고, 첫 번째 Electron 프로젝트를 만들어 실행해보았습니다. 다음 시간에는 창(Window) 생성 및 설정 방법에 대해 알아보겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> Electron </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript 모듈 빌드 순서와 중복 함수 참조 문제 해결</title>
      <link href="/typescript/troubleshooting/11/"/>
      <url>/typescript/troubleshooting/11/</url>
      
        <content type="html"><![CDATA[<h1 id="TypeScript-모듈-빌드-순서와-중복-함수-참조-문제-해결"><a href="#TypeScript-모듈-빌드-순서와-중복-함수-참조-문제-해결" class="headerlink" title="TypeScript 모듈 빌드 순서와 중복 함수 참조 문제 해결"></a>TypeScript 모듈 빌드 순서와 중복 함수 참조 문제 해결</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 TypeScript에서 동일한 모듈 경로에 대해 파일과 디렉토리가 동시에 존재할 경우 발생할 수 있는 문제와 그 해결 방안에 대해 알아보겠습니다.<br>이러한 문제는 빌드 시 예상치 못한 동작을 유발할 수 있습니다.</p><h2 id="TypeScript-모듈-빌드-순서의-개념"><a href="#TypeScript-모듈-빌드-순서의-개념" class="headerlink" title="TypeScript 모듈 빌드 순서의 개념"></a>TypeScript 모듈 빌드 순서의 개념</h2><h3 id="TypeScript-모듈-빌드-순서"><a href="#TypeScript-모듈-빌드-순서" class="headerlink" title="TypeScript 모듈 빌드 순서"></a>TypeScript 모듈 빌드 순서</h3><pre><code class="highlight bash">src/├── handler.ts└── handler/    └── index.ts</code></pre><p>TypeScript는 모듈을 빌드할 때, 동일한 경로에 파일과 디렉토리가 동시에 존재하는 경우 기본적으로 디렉토리의 <code>index.ts</code> 파일을 우선 참조합니다. 이로 인해 빌드 시 <code>index.ts</code>의 내용이 사용되며, 같은 경로에 있는 다른 파일(<code>handler.ts</code>)의 내용은 무시될 수 있습니다.</p><h3 id="중복-함수-참조-문제"><a href="#중복-함수-참조-문제" class="headerlink" title="중복 함수 참조 문제"></a>중복 함수 참조 문제</h3><p>파일과 디렉토리의 모듈 경로가 중복될 때, 두 파일에서 동일한 이름의 함수를 정의해버린다면 참조 문제로 인해 예기치 않은 동작이 발생할 수 있습니다. 이 문제를 해결하기 위해 모듈의 경로와 파일 구조를 명확히 하고, 함수 이름을 구분해야 합니다.</p><h2 id="테스트-시나리오"><a href="#테스트-시나리오" class="headerlink" title="테스트 시나리오"></a>테스트 시나리오</h2><h3 id="프로젝트-구조"><a href="#프로젝트-구조" class="headerlink" title="프로젝트 구조"></a>프로젝트 구조</h3><p>다음과 같은 프로젝트 구조를 가정합니다:</p><pre><code class="highlight bash">src/├── handler.ts└── handler/    └── index.ts</code></pre><h3 id="파일-내용"><a href="#파일-내용" class="headerlink" title="파일 내용"></a>파일 내용</h3><pre><code class="highlight typescript"><span class="comment">// src/handler.ts</span><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">handlerFunction</span> = (<span class="params"></span>) =&gt; &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Handler function from handler.ts&quot;</span>);&#125;;</code></pre><pre><code class="highlight typescript"><span class="comment">// src/handler/index.ts</span><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">handlerFunction</span> = (<span class="params"></span>) =&gt; &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Handler function from handler/index.ts&quot;</span>);&#125;;</code></pre><h2 id="빌드-및-테스트"><a href="#빌드-및-테스트" class="headerlink" title="빌드 및 테스트"></a>빌드 및 테스트</h2><h3 id="TypeScript-빌드-설정"><a href="#TypeScript-빌드-설정" class="headerlink" title="TypeScript 빌드 설정"></a>TypeScript 빌드 설정</h3><p><code>tsconfig.json</code> 파일을 설정합니다.</p><pre><code class="highlight json"><span class="punctuation">&#123;</span>  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>    <span class="attr">&quot;outDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./lib&quot;</span><span class="punctuation">,</span>    <span class="attr">&quot;rootDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./src&quot;</span><span class="punctuation">,</span>    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;commonjs&quot;</span><span class="punctuation">,</span>    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;es6&quot;</span><span class="punctuation">,</span>    <span class="attr">&quot;esModuleInterop&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span>  <span class="punctuation">&#125;</span><span class="punctuation">,</span>  <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;src&quot;</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></code></pre><h3 id="빌드-스크립트-작성"><a href="#빌드-스크립트-작성" class="headerlink" title="빌드 스크립트 작성"></a>빌드 스크립트 작성</h3><p><code>package.json</code>에 빌드 스크립트를 추가합니다.</p><pre><code class="highlight json"><span class="punctuation">&#123;</span>  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tsc&quot;</span>  <span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></code></pre><h3 id="빌드-실행"><a href="#빌드-실행" class="headerlink" title="빌드 실행"></a>빌드 실행</h3><p>다음 명령어를 사용하여 빌드를 실행합니다:</p><pre><code class="highlight bash">npm run build</code></pre><h3 id="빌드-결과-확인"><a href="#빌드-결과-확인" class="headerlink" title="빌드 결과 확인"></a>빌드 결과 확인</h3><p>빌드된 <code>lib</code> 디렉토리의 구조를 확인합니다.</p><pre><code class="highlight bash">lib/├── handler.js└── handler/    └── index.js</code></pre><p><code>lib/handler.js</code>와 <code>lib/handler/index.js</code> 파일의 내용을 확인합니다.</p><pre><code class="highlight javascript"><span class="comment">// lib/handler.js</span><span class="meta">&quot;use strict&quot;</span>;<span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="built_in">exports</span>, <span class="string">&quot;__esModule&quot;</span>, &#123; <span class="attr">value</span>: <span class="literal">true</span> &#125;);<span class="built_in">exports</span>.<span class="property">handlerFunction</span> = <span class="keyword">void</span> <span class="number">0</span>;<span class="keyword">var</span> handlerFunction = <span class="keyword">function</span> (<span class="params"></span>) &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Handler function from handler.ts&quot;</span>);&#125;;<span class="built_in">exports</span>.<span class="property">handlerFunction</span> = handlerFunction;</code></pre><pre><code class="highlight javascript"><span class="comment">// lib/handler/index.js</span><span class="meta">&quot;use strict&quot;</span>;<span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="built_in">exports</span>, <span class="string">&quot;__esModule&quot;</span>, &#123; <span class="attr">value</span>: <span class="literal">true</span> &#125;);<span class="built_in">exports</span>.<span class="property">handlerFunction</span> = <span class="keyword">void</span> <span class="number">0</span>;<span class="keyword">var</span> handlerFunction = <span class="keyword">function</span> (<span class="params"></span>) &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Handler function from handler/index.ts&quot;</span>);&#125;;<span class="built_in">exports</span>.<span class="property">handlerFunction</span> = handlerFunction;</code></pre><h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><ul><li><strong>빌드 결과</strong>: 기본적으로 TypeScript는 <code>index.ts</code> 파일을 우선 참조합니다. 따라서 <code>handler/index.ts</code>의 내용이 최종 빌드된 <code>lib</code> 디렉토리에서 우선 사용됩니다.</li><li><strong>참조 순서</strong>: <code>./handler</code> 경로로 임포트할 때, <code>index.ts</code> 파일이 우선 참조되며, <code>handler.ts</code>는 무시됩니다.</li></ul><h2 id="해결-방안"><a href="#해결-방안" class="headerlink" title="해결 방안"></a>해결 방안</h2><ol><li><p><strong>파일 및 폴더 구조 수정</strong></p><ul><li>함수 이름을 구분하거나 파일 구조를 변경하여 중복 참조 문제를 방지합니다.</li></ul><pre><code class="highlight typescript"><span class="comment">// src/handler.ts</span><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">handlerFunctionFromFile</span> = (<span class="params"></span>) =&gt; &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Handler function from handler.ts&quot;</span>);&#125;;</code></pre><pre><code class="highlight typescript"><span class="comment">// src/handler/index.ts</span><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">handlerFunctionFromFolder</span> = (<span class="params"></span>) =&gt; &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Handler function from handler/index.ts&quot;</span>);&#125;;</code></pre></li><li><p><strong>임포트 경로 수정</strong></p><ul><li>임포트 시 명확한 경로를 사용하여 파일을 구분합니다.</li></ul><pre><code class="highlight typescript"><span class="comment">// 예시: 사용 시</span><span class="keyword">import</span> &#123; handlerFunctionFromFile &#125; <span class="keyword">from</span> <span class="string">&quot;./handler&quot;</span>;<span class="keyword">import</span> &#123; handlerFunctionFromFolder &#125; <span class="keyword">from</span> <span class="string">&quot;./handler/index&quot;</span>;<span class="title function_">handlerFunctionFromFile</span>();<span class="title function_">handlerFunctionFromFolder</span>();</code></pre></li></ol><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 TypeScript에서 동일한 모듈 경로에 파일과 디렉토리가 동시에 존재할 때 발생할 수 있는 문제와 그 해결 방안을 알아보았습니다.<br>이를 통해 빌드 시 모듈 참조 문제를 방지하고, 안정적인 코드를 작성할 수 있습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> TS_트러블슈팅 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Node.js Lerna</title>
      <link href="/cli/15/"/>
      <url>/cli/15/</url>
      
        <content type="html"><![CDATA[<h1 id="Lerna-모노레포-관리-도구"><a href="#Lerna-모노레포-관리-도구" class="headerlink" title="Lerna: 모노레포 관리 도구"></a>Lerna: 모노레포 관리 도구</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 모노레포 관리 도구인 Lerna에 대해 알아보겠습니다. Lerna의 역할과 필요성, 설치 및 설정 방법, 기본 사용법을 알아보겠습니다.</p><h2 id="1-Lerna-소개"><a href="#1-Lerna-소개" class="headerlink" title="1. Lerna 소개"></a>1. Lerna 소개</h2><h3 id="Lerna란-무엇인가"><a href="#Lerna란-무엇인가" class="headerlink" title="Lerna란 무엇인가?"></a>Lerna란 무엇인가?</h3><p>Lerna는 JavaScript 프로젝트에서 여러 패키지를 단일 저장소에서 관리할 수 있게 해주는 도구입니다. 모노레포(Monorepo) 방식의 프로젝트 관리에 유용하며, 코드의 재사용성과 유지보수성을 높이는 데 도움을 줍니다.</p><h3 id="Lerna의-역할과-필요성"><a href="#Lerna의-역할과-필요성" class="headerlink" title="Lerna의 역할과 필요성"></a>Lerna의 역할과 필요성</h3><ul><li><strong>패키지 관리</strong>: 단일 저장소 내에서 여러 패키지를 효율적으로 관리할 수 있습니다.</li><li><strong>의존성 관리</strong>: 패키지 간의 의존성을 쉽게 관리하고, 중복된 의존성을 제거할 수 있습니다.</li><li><strong>배포 관리</strong>: 여러 패키지를 한 번에 배포하거나, 변경된 패키지만 선택적으로 배포할 수 있습니다.</li></ul><h2 id="2-설치-및-설정"><a href="#2-설치-및-설정" class="headerlink" title="2. 설치 및 설정"></a>2. 설치 및 설정</h2><h3 id="Lerna-설치-방법"><a href="#Lerna-설치-방법" class="headerlink" title="Lerna 설치 방법"></a>Lerna 설치 방법</h3><p>Lerna를 전역으로 설치하려면 다음 명령어를 사용합니다.</p><pre><code class="highlight bash">npm install -g lerna</code></pre><h3 id="Lerna-초기화"><a href="#Lerna-초기화" class="headerlink" title="Lerna 초기화"></a>Lerna 초기화</h3><p>Lerna를 초기화하여 모노레포를 설정합니다.</p><pre><code class="highlight bash">lerna init</code></pre><p>이 명령어를 실행하면, 기본적으로 다음과 같은 파일 구조가 생성됩니다.</p><pre><code class="highlight plaintext">my-monorepo/├── packages/└── lerna.json</code></pre><h2 id="3-기본-사용법"><a href="#3-기본-사용법" class="headerlink" title="3. 기본 사용법"></a>3. 기본 사용법</h2><h3 id="패키지-추가"><a href="#패키지-추가" class="headerlink" title="패키지 추가"></a>패키지 추가</h3><p><code>packages</code> 디렉토리 안에 새 패키지를 추가할 수 있습니다. 예를 들어, <code>package-a</code>와 <code>package-b</code>를 추가합니다.</p><pre><code class="highlight bash"><span class="built_in">mkdir</span> packages/package-a<span class="built_in">mkdir</span> packages/package-b</code></pre><p>각 패키지 디렉토리에 <code>package.json</code> 파일을 생성합니다.</p><p><strong>packages&#x2F;package-a&#x2F;package.json</strong></p><pre><code class="highlight json"><span class="punctuation">&#123;</span>  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;package-a&quot;</span><span class="punctuation">,</span>  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span>  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span><span class="punctuation">,</span>  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Running tests for package-a\&quot;&quot;</span>  <span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></code></pre><p><strong>packages&#x2F;package-b&#x2F;package.json</strong></p><pre><code class="highlight json"><span class="punctuation">&#123;</span>  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;package-b&quot;</span><span class="punctuation">,</span>  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span>  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span><span class="punctuation">,</span>  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Running tests for package-b\&quot;&quot;</span>  <span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></code></pre><p>이제 예시 RPG 게임을 위한 간단한 패키지들을 만들어보겠습니다.</p><h3 id="RPG-게임-패키지-생성"><a href="#RPG-게임-패키지-생성" class="headerlink" title="RPG 게임 패키지 생성"></a>RPG 게임 패키지 생성</h3><h4 id="character-패키지"><a href="#character-패키지" class="headerlink" title="character 패키지"></a><code>character</code> 패키지</h4><p><strong>packages&#x2F;character&#x2F;package.json</strong></p><pre><code class="highlight json"><span class="punctuation">&#123;</span>  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;character&quot;</span><span class="punctuation">,</span>  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span>  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span><span class="punctuation">,</span>  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Running tests for character\&quot;&quot;</span>  <span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></code></pre><p><strong>packages&#x2F;character&#x2F;index.js</strong></p><pre><code class="highlight javascript"><span class="keyword">class</span> <span class="title class_">Character</span> &#123;  <span class="title function_">constructor</span>(<span class="params">name, type</span>) &#123;    <span class="variable language_">this</span>.<span class="property">name</span> = name;    <span class="variable language_">this</span>.<span class="property">type</span> = type;  &#125;  <span class="title function_">describe</span>(<span class="params"></span>) &#123;    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> is a <span class="subst">$&#123;<span class="variable language_">this</span>.type&#125;</span>.`</span>;  &#125;&#125;<span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">Character</span>;</code></pre><h4 id="warrior-패키지"><a href="#warrior-패키지" class="headerlink" title="warrior 패키지"></a><code>warrior</code> 패키지</h4><p><strong>packages&#x2F;warrior&#x2F;package.json</strong></p><pre><code class="highlight json"><span class="punctuation">&#123;</span>  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;warrior&quot;</span><span class="punctuation">,</span>  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span>  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span><span class="punctuation">,</span>  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Running tests for warrior\&quot;&quot;</span><span class="punctuation">,</span>    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node index.js&quot;</span>  <span class="punctuation">&#125;</span><span class="punctuation">,</span>  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>    <span class="attr">&quot;character&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.0.0&quot;</span>  <span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></code></pre><p><strong>packages&#x2F;warrior&#x2F;index.js</strong></p><pre><code class="highlight javascript"><span class="keyword">const</span> <span class="title class_">Character</span> = <span class="built_in">require</span>(<span class="string">&quot;character&quot;</span>);<span class="keyword">class</span> <span class="title class_">Warrior</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Character</span> &#123;  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;    <span class="variable language_">super</span>(name, <span class="string">&quot;Warrior&quot;</span>);  &#125;  <span class="title function_">attack</span>(<span class="params"></span>) &#123;    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> swings a sword!`</span>;  &#125;&#125;<span class="keyword">const</span> warrior = <span class="keyword">new</span> <span class="title class_">Warrior</span>(<span class="string">&quot;Arthas&quot;</span>);<span class="variable language_">console</span>.<span class="title function_">log</span>(warrior.<span class="title function_">describe</span>());<span class="variable language_">console</span>.<span class="title function_">log</span>(warrior.<span class="title function_">attack</span>());</code></pre><h4 id="mage-패키지"><a href="#mage-패키지" class="headerlink" title="mage 패키지"></a><code>mage</code> 패키지</h4><p><strong>packages&#x2F;mage&#x2F;package.json</strong></p><pre><code class="highlight json"><span class="punctuation">&#123;</span>  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mage&quot;</span><span class="punctuation">,</span>  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span>  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span><span class="punctuation">,</span>  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Running tests for mage\&quot;&quot;</span><span class="punctuation">,</span>    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node index.js&quot;</span>  <span class="punctuation">&#125;</span><span class="punctuation">,</span>  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>    <span class="attr">&quot;character&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.0.0&quot;</span>  <span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></code></pre><p><strong>packages&#x2F;mage&#x2F;index.js</strong></p><pre><code class="highlight javascript"><span class="keyword">const</span> <span class="title class_">Character</span> = <span class="built_in">require</span>(<span class="string">&quot;character&quot;</span>);<span class="keyword">class</span> <span class="title class_">Mage</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Character</span> &#123;  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;    <span class="variable language_">super</span>(name, <span class="string">&quot;Mage&quot;</span>);  &#125;  <span class="title function_">castSpell</span>(<span class="params"></span>) &#123;    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> casts a fireball!`</span>;  &#125;&#125;<span class="keyword">const</span> mage = <span class="keyword">new</span> <span class="title class_">Mage</span>(<span class="string">&quot;Gandalf&quot;</span>);<span class="variable language_">console</span>.<span class="title function_">log</span>(mage.<span class="title function_">describe</span>());<span class="variable language_">console</span>.<span class="title function_">log</span>(mage.<span class="title function_">castSpell</span>());</code></pre><h3 id="Lerna-부트스트랩"><a href="#Lerna-부트스트랩" class="headerlink" title="Lerna 부트스트랩"></a>Lerna 부트스트랩</h3><p><code>lerna bootstrap</code> 명령어를 사용하여 패키지 간의 의존성을 설치하고 링크합니다.</p><pre><code class="highlight bash">lerna bootstrap</code></pre><h3 id="패키지-실행"><a href="#패키지-실행" class="headerlink" title="패키지 실행"></a>패키지 실행</h3><p>각 패키지의 <code>start</code> 스크립트를 사용하여 실행할 수 있습니다.</p><h4 id="warrior-패키지-실행"><a href="#warrior-패키지-실행" class="headerlink" title="warrior 패키지 실행"></a><code>warrior</code> 패키지 실행</h4><pre><code class="highlight bash">lerna run start --scope warrior</code></pre><h4 id="mage-패키지-실행"><a href="#mage-패키지-실행" class="headerlink" title="mage 패키지 실행"></a><code>mage</code> 패키지 실행</h4><pre><code class="highlight bash">lerna run start --scope mage</code></pre><h3 id="패키지-버전-업데이트"><a href="#패키지-버전-업데이트" class="headerlink" title="패키지 버전 업데이트"></a>패키지 버전 업데이트</h3><p>Lerna를 사용하여 모든 패키지의 버전을 일괄적으로 업데이트할 수 있습니다.</p><pre><code class="highlight bash">lerna version</code></pre><h3 id="패키지-배포"><a href="#패키지-배포" class="headerlink" title="패키지 배포"></a>패키지 배포</h3><p>Lerna를 사용하여 패키지를 배포할 수 있습니다.</p><pre><code class="highlight bash">lerna publish</code></pre><h3 id="패키지-테스트"><a href="#패키지-테스트" class="headerlink" title="패키지 테스트"></a>패키지 테스트</h3><p>Lerna를 사용하여 모든 패키지의 테스트 스크립트를 실행할 수 있습니다.</p><pre><code class="highlight bash">lerna run <span class="built_in">test</span></code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 Lerna의 기본 개념부터 설치 방법, 기본 사용법, 그리고 예제로 RPG 게임 패키지를 다루어 보았습니다.<br>Lerna를 통해 모노레포 방식을 효율적으로 관리하고, 여러 패키지를 단일 저장소에서 쉽게 운영할 수 있습니다. 다음 시간에는 또 다른 유용한 CLI 도구를 소개하겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> CLI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hardhat을 사용한 스마트 컨트랙트 개발</title>
      <link href="/web3/1/"/>
      <url>/web3/1/</url>
      
        <content type="html"><![CDATA[<h1 id="Hardhat을-사용한-스마트-컨트랙트-개발"><a href="#Hardhat을-사용한-스마트-컨트랙트-개발" class="headerlink" title="Hardhat을 사용한 스마트 컨트랙트 개발"></a>Hardhat을 사용한 스마트 컨트랙트 개발</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 이더리움 블록체인에서 스마트 컨트랙트를 개발하기 위한 Hardhat 사용법에 대해 알아보겠습니다.<br>Hardhat은 이더리움 개발자들 사이에서 널리 사용되는 강력한 개발 환경으로, 스마트 컨트랙트의 작성, 테스트, 배포 및 디버깅을 위한 종합적인 솔루션을 제공합니다.</p><h2 id="Hardhat-필요성"><a href="#Hardhat-필요성" class="headerlink" title="Hardhat 필요성"></a>Hardhat 필요성</h2><p>스마트 컨트랙트 개발은 일반적인 소프트웨어 개발과 다른 특성을 가지고 있습니다. 블록체인에 배포된 코드는 변경이 어렵고, 버그가 있을 경우 심각한 금전적 손실을 초래할 수 있습니다. Hardhat은 이러한 위험을 최소화하기 위한 다양한 기능을 제공합니다:</p><ol><li><p><strong>로컬 이더리움 네트워크:</strong> 메인넷이나 테스트넷에 배포하기 전에 로컬 환경에서 스마트 컨트랙트를 테스트할 수 있는 자체 이더리움 네트워크를 제공합니다. 이를 통해 가스 비용 없이 빠르게 반복 개발이 가능합니다.</p></li><li><p><strong>고급 테스트 프레임워크:</strong> Mocha와 Chai를 기반으로 한 강력한 테스트 환경을 제공하여 스마트 컨트랙트의 모든 기능을 철저히 검증할 수 있습니다.</p></li><li><p><strong>콘솔 디버깅:</strong> 트랜잭션 실행 중 발생하는 오류를 쉽게 추적하고 디버깅할 수 있는 도구를 제공합니다. 스택 트레이스와 가스 사용량 분석 등 상세한 정보를 확인할 수 있습니다.</p></li><li><p><strong>유연한 플러그인 시스템:</strong> 다양한 플러그인을 통해 기능을 확장할 수 있으며, 필요에 따라 커스텀 태스크를 정의할 수 있습니다.</p></li><li><p><strong>TypeScript 지원:</strong> JavaScript뿐만 아니라 TypeScript를 사용하여 타입 안전성을 확보할 수 있습니다.</p></li></ol><h2 id="Hardhat-설치"><a href="#Hardhat-설치" class="headerlink" title="Hardhat 설치"></a>Hardhat 설치</h2><p>Hardhat을 시작하기 위해서는 Node.js 환경이 필요합니다. 다음 단계를 따라 새 프로젝트를 설정해 보겠습니다.</p><h3 id="1-프로젝트-폴더-생성-및-초기화"><a href="#1-프로젝트-폴더-생성-및-초기화" class="headerlink" title="1. 프로젝트 폴더 생성 및 초기화"></a>1. 프로젝트 폴더 생성 및 초기화</h3><pre><code class="highlight bash"><span class="built_in">mkdir</span> my-hardhat-project<span class="built_in">cd</span> my-hardhat-projectnpm init -y</code></pre><h3 id="2-Hardhat-및-필요한-의존성-설치"><a href="#2-Hardhat-및-필요한-의존성-설치" class="headerlink" title="2. Hardhat 및 필요한 의존성 설치"></a>2. Hardhat 및 필요한 의존성 설치</h3><pre><code class="highlight bash">npm install --save-dev hardhat @nomicfoundation/hardhat-toolbox</code></pre><h3 id="3-Hardhat-프로젝트-설정"><a href="#3-Hardhat-프로젝트-설정" class="headerlink" title="3. Hardhat 프로젝트 설정"></a>3. Hardhat 프로젝트 설정</h3><pre><code class="highlight bash">npx hardhat</code></pre><p>이 명령을 실행하면 다음과 같은 옵션이 표시됩니다:</p><ul><li>JavaScript 프로젝트 생성</li><li>TypeScript 프로젝트 생성</li><li>빈 hardhat.config.js 파일 생성</li></ul><p>원하는 옵션을 선택하면 기본 프로젝트 구조가 생성됩니다. TypeScript를 사용하는 것이 타입 안전성을 위해 권장됩니다.</p><h2 id="Hardhat-프로젝트-구조"><a href="#Hardhat-프로젝트-구조" class="headerlink" title="Hardhat 프로젝트 구조"></a>Hardhat 프로젝트 구조</h2><p>Hardhat 프로젝트는 일반적으로 다음과 같은 구조를 가집니다:</p><pre><code class="highlight plaintext">my-hardhat-project/├── contracts/           # 솔리디티 스마트 컨트랙트 파일├── scripts/             # 배포 및 기타 스크립트├── test/                # 테스트 파일├── hardhat.config.js    # Hardhat 설정 파일└── node_modules/        # 설치된 패키지</code></pre><h2 id="스마트-컨트랙트-작성"><a href="#스마트-컨트랙트-작성" class="headerlink" title="스마트 컨트랙트 작성"></a>스마트 컨트랙트 작성</h2><p>이제 간단한 스마트 컨트랙트를 작성해 보겠습니다. <code>contracts</code> 폴더에 <code>MessageStore.sol</code> 파일을 생성합니다:</p><pre><code class="highlight solidity">// contracts/MessageStore.sol// SPDX-License-Identifier: MITpragma solidity ^0.8.20;contract MessageStore &#123;    string private message;    address public owner;    event MessageUpdated(address indexed user, string newMessage);    constructor(string memory initialMessage) &#123;        message = initialMessage;        owner = msg.sender;    &#125;    function setMessage(string memory newMessage) public &#123;        message = newMessage;        emit MessageUpdated(msg.sender, newMessage);    &#125;    function getMessage() public view returns (string memory) &#123;        return message;    &#125;    function transferOwnership(address newOwner) public &#123;        require(msg.sender == owner, &quot;Only owner can transfer ownership&quot;);        require(newOwner != address(0), &quot;New owner cannot be zero address&quot;);        owner = newOwner;    &#125;&#125;</code></pre><p>이 컨트랙트는 메시지를 저장하고 업데이트할 수 있는 기능을 제공합니다. 또한 소유권 개념을 도입하여 보안을 강화했습니다.</p><h2 id="배포-스크립트-작성"><a href="#배포-스크립트-작성" class="headerlink" title="배포 스크립트 작성"></a>배포 스크립트 작성</h2><p><code>scripts</code> 폴더에 <code>deploy.js</code> 파일을 생성하여 배포 스크립트를 작성합니다:</p><pre><code class="highlight javascript"><span class="comment">// scripts/deploy.js</span><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;  <span class="keyword">try</span> &#123;    <span class="keyword">const</span> [deployer] = <span class="keyword">await</span> ethers.<span class="title function_">getSigners</span>();    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Deploying contracts with the account:&quot;</span>, deployer.<span class="property">address</span>);    <span class="variable language_">console</span>.<span class="title function_">log</span>(      <span class="string">&quot;Account balance:&quot;</span>,      (<span class="keyword">await</span> deployer.<span class="property">provider</span>.<span class="title function_">getBalance</span>(deployer.<span class="property">address</span>)).<span class="title function_">toString</span>()    );    <span class="keyword">const</span> <span class="title class_">MessageStore</span> = <span class="keyword">await</span> ethers.<span class="title function_">getContractFactory</span>(<span class="string">&quot;MessageStore&quot;</span>);    <span class="keyword">const</span> initialMessage = <span class="string">&quot;Hello, Blockchain World!&quot;</span>;    <span class="keyword">const</span> messageStore = <span class="keyword">await</span> <span class="title class_">MessageStore</span>.<span class="title function_">deploy</span>(initialMessage);    <span class="keyword">await</span> messageStore.<span class="title function_">waitForDeployment</span>();    <span class="keyword">const</span> deployedAddress = <span class="keyword">await</span> messageStore.<span class="title function_">getAddress</span>();    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;MessageStore deployed to:&quot;</span>, deployedAddress);    <span class="comment">// 컨트랙트 상태 확인</span>    <span class="keyword">const</span> currentMessage = <span class="keyword">await</span> messageStore.<span class="title function_">getMessage</span>();    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Initial message:&quot;</span>, currentMessage);    <span class="keyword">const</span> owner = <span class="keyword">await</span> messageStore.<span class="title function_">owner</span>();    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Contract owner:&quot;</span>, owner);    <span class="keyword">return</span> &#123; messageStore, deployedAddress &#125;;  &#125; <span class="keyword">catch</span> (error) &#123;    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;Deployment failed:&quot;</span>, error);    process.<span class="title function_">exit</span>(<span class="number">1</span>);  &#125;&#125;<span class="title function_">main</span>()  .<span class="title function_">then</span>(<span class="function">(<span class="params">deployedContract</span>) =&gt;</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Deployment completed successfully!&quot;</span>);    process.<span class="title function_">exit</span>(<span class="number">0</span>);  &#125;)  .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">error</span>(error);    process.<span class="title function_">exit</span>(<span class="number">1</span>);  &#125;);</code></pre><h2 id="Hardhat-설정-파일-구성"><a href="#Hardhat-설정-파일-구성" class="headerlink" title="Hardhat 설정 파일 구성"></a>Hardhat 설정 파일 구성</h2><p><code>hardhat.config.js</code> 파일을 다음과 같이 구성합니다:</p><pre><code class="highlight javascript"><span class="built_in">require</span>(<span class="string">&quot;@nomicfoundation/hardhat-toolbox&quot;</span>);<span class="comment">/** <span class="doctag">@type</span> import(&#x27;hardhat/config&#x27;).HardhatUserConfig */</span><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;  <span class="attr">solidity</span>: &#123;    <span class="attr">version</span>: <span class="string">&quot;0.8.20&quot;</span>,    <span class="attr">settings</span>: &#123;      <span class="attr">optimizer</span>: &#123;        <span class="attr">enabled</span>: <span class="literal">true</span>,        <span class="attr">runs</span>: <span class="number">200</span>,      &#125;,    &#125;,  &#125;,  <span class="attr">networks</span>: &#123;    <span class="attr">hardhat</span>: &#123;      <span class="attr">chainId</span>: <span class="number">1337</span>,    &#125;,    <span class="attr">localhost</span>: &#123;      <span class="attr">url</span>: <span class="string">&quot;http://127.0.0.1:8545&quot;</span>,    &#125;,    <span class="comment">// 테스트넷 설정 예시</span>    <span class="attr">sepolia</span>: &#123;      <span class="attr">url</span>: process.<span class="property">env</span>.<span class="property">SEPOLIA_URL</span> || <span class="string">&quot;&quot;</span>,      <span class="attr">accounts</span>:        process.<span class="property">env</span>.<span class="property">PRIVATE_KEY</span> !== <span class="literal">undefined</span> ? [process.<span class="property">env</span>.<span class="property">PRIVATE_KEY</span>] : [],    &#125;,  &#125;,  <span class="attr">paths</span>: &#123;    <span class="attr">sources</span>: <span class="string">&quot;./contracts&quot;</span>,    <span class="attr">tests</span>: <span class="string">&quot;./test&quot;</span>,    <span class="attr">cache</span>: <span class="string">&quot;./cache&quot;</span>,    <span class="attr">artifacts</span>: <span class="string">&quot;./artifacts&quot;</span>,  &#125;,  <span class="attr">mocha</span>: &#123;    <span class="attr">timeout</span>: <span class="number">40000</span>,  &#125;,&#125;;</code></pre><h2 id="로컬-네트워크에서-배포-및-테스트"><a href="#로컬-네트워크에서-배포-및-테스트" class="headerlink" title="로컬 네트워크에서 배포 및 테스트"></a>로컬 네트워크에서 배포 및 테스트</h2><h3 id="로컬-네트워크-시작"><a href="#로컬-네트워크-시작" class="headerlink" title="로컬 네트워크 시작"></a>로컬 네트워크 시작</h3><p>별도의 터미널 창에서 로컬 이더리움 네트워크를 시작합니다:</p><pre><code class="highlight bash">npx hardhat node</code></pre><p>이 명령은 로컬 이더리움 네트워크를 시작하고, 테스트용 계정과 개인 키를 생성합니다.</p><h3 id="배포-스크립트-실행"><a href="#배포-스크립트-실행" class="headerlink" title="배포 스크립트 실행"></a>배포 스크립트 실행</h3><p>다른 터미널 창에서 배포 스크립트를 실행합니다:</p><pre><code class="highlight bash">npx hardhat run scripts/deploy.js --network localhost</code></pre><h3 id="테스트-작성"><a href="#테스트-작성" class="headerlink" title="테스트 작성"></a>테스트 작성</h3><p><code>test</code> 폴더에 <code>MessageStore.test.js</code> 파일을 생성하여 테스트를 작성합니다:</p><pre><code class="highlight javascript"><span class="comment">// test/MessageStore.test.js</span><span class="keyword">const</span> &#123; expect &#125; = <span class="built_in">require</span>(<span class="string">&quot;chai&quot;</span>);<span class="keyword">const</span> &#123; ethers &#125; = <span class="built_in">require</span>(<span class="string">&quot;hardhat&quot;</span>);<span class="title function_">describe</span>(<span class="string">&quot;MessageStore Contract&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;  <span class="keyword">let</span> <span class="title class_">MessageStore</span>;  <span class="keyword">let</span> messageStore;  <span class="keyword">let</span> owner;  <span class="keyword">let</span> addr1;  <span class="keyword">let</span> addr2;  <span class="title function_">beforeEach</span>(<span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;    <span class="comment">// 컨트랙트 배포를 위한 설정</span>    [owner, addr1, addr2] = <span class="keyword">await</span> ethers.<span class="title function_">getSigners</span>();    <span class="comment">// 컨트랙트 배포</span>    <span class="title class_">MessageStore</span> = <span class="keyword">await</span> ethers.<span class="title function_">getContractFactory</span>(<span class="string">&quot;MessageStore&quot;</span>);    messageStore = <span class="keyword">await</span> <span class="title class_">MessageStore</span>.<span class="title function_">deploy</span>(<span class="string">&quot;Initial Message&quot;</span>);    <span class="keyword">await</span> messageStore.<span class="title function_">waitForDeployment</span>();  &#125;);  <span class="title function_">describe</span>(<span class="string">&quot;Deployment&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;    <span class="title function_">it</span>(<span class="string">&quot;Should set the right owner&quot;</span>, <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;      <span class="title function_">expect</span>(<span class="keyword">await</span> messageStore.<span class="title function_">owner</span>()).<span class="property">to</span>.<span class="title function_">equal</span>(owner.<span class="property">address</span>);    &#125;);    <span class="title function_">it</span>(<span class="string">&quot;Should set the initial message correctly&quot;</span>, <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;      <span class="title function_">expect</span>(<span class="keyword">await</span> messageStore.<span class="title function_">getMessage</span>()).<span class="property">to</span>.<span class="title function_">equal</span>(<span class="string">&quot;Initial Message&quot;</span>);    &#125;);  &#125;);  <span class="title function_">describe</span>(<span class="string">&quot;Transactions&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;    <span class="title function_">it</span>(<span class="string">&quot;Should update the message when called&quot;</span>, <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;      <span class="keyword">await</span> messageStore.<span class="title function_">setMessage</span>(<span class="string">&quot;New Message&quot;</span>);      <span class="title function_">expect</span>(<span class="keyword">await</span> messageStore.<span class="title function_">getMessage</span>()).<span class="property">to</span>.<span class="title function_">equal</span>(<span class="string">&quot;New Message&quot;</span>);    &#125;);    <span class="title function_">it</span>(<span class="string">&quot;Should emit MessageUpdated event when message is changed&quot;</span>, <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;      <span class="keyword">await</span> <span class="title function_">expect</span>(messageStore.<span class="title function_">setMessage</span>(<span class="string">&quot;Another Message&quot;</span>))        .<span class="property">to</span>.<span class="title function_">emit</span>(messageStore, <span class="string">&quot;MessageUpdated&quot;</span>)        .<span class="title function_">withArgs</span>(owner.<span class="property">address</span>, <span class="string">&quot;Another Message&quot;</span>);    &#125;);    <span class="title function_">it</span>(<span class="string">&quot;Should allow anyone to update the message&quot;</span>, <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;      <span class="keyword">await</span> messageStore.<span class="title function_">connect</span>(addr1).<span class="title function_">setMessage</span>(<span class="string">&quot;Message from addr1&quot;</span>);      <span class="title function_">expect</span>(<span class="keyword">await</span> messageStore.<span class="title function_">getMessage</span>()).<span class="property">to</span>.<span class="title function_">equal</span>(<span class="string">&quot;Message from addr1&quot;</span>);    &#125;);  &#125;);  <span class="title function_">describe</span>(<span class="string">&quot;Ownership&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;    <span class="title function_">it</span>(<span class="string">&quot;Should allow only owner to transfer ownership&quot;</span>, <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;      <span class="comment">// 소유자가 아닌 계정에서 소유권 이전 시도</span>      <span class="keyword">await</span> <span class="title function_">expect</span>(        messageStore.<span class="title function_">connect</span>(addr1).<span class="title function_">transferOwnership</span>(addr2.<span class="property">address</span>)      ).<span class="property">to</span>.<span class="property">be</span>.<span class="title function_">revertedWith</span>(<span class="string">&quot;Only owner can transfer ownership&quot;</span>);      <span class="comment">// 소유자가 소유권 이전</span>      <span class="keyword">await</span> messageStore.<span class="title function_">transferOwnership</span>(addr1.<span class="property">address</span>);      <span class="title function_">expect</span>(<span class="keyword">await</span> messageStore.<span class="title function_">owner</span>()).<span class="property">to</span>.<span class="title function_">equal</span>(addr1.<span class="property">address</span>);    &#125;);    <span class="title function_">it</span>(<span class="string">&quot;Should not allow transfer to zero address&quot;</span>, <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;      <span class="keyword">await</span> <span class="title function_">expect</span>(        messageStore.<span class="title function_">transferOwnership</span>(ethers.<span class="property">ZeroAddress</span>)      ).<span class="property">to</span>.<span class="property">be</span>.<span class="title function_">revertedWith</span>(<span class="string">&quot;New owner cannot be zero address&quot;</span>);    &#125;);  &#125;);&#125;);</code></pre><h3 id="테스트-실행"><a href="#테스트-실행" class="headerlink" title="테스트 실행"></a>테스트 실행</h3><p>작성한 테스트를 실행합니다:</p><pre><code class="highlight bash">npx hardhat <span class="built_in">test</span></code></pre><h2 id="고급-기능-활용"><a href="#고급-기능-활용" class="headerlink" title="고급 기능 활용"></a>고급 기능 활용</h2><h3 id="콘솔-디버깅"><a href="#콘솔-디버깅" class="headerlink" title="콘솔 디버깅"></a>콘솔 디버깅</h3><p>Hardhat 콘솔을 사용하여 대화형으로 컨트랙트와 상호작용할 수 있습니다:</p><pre><code class="highlight bash">npx hardhat console --network localhost</code></pre><p>콘솔에서 다음과 같이 컨트랙트와 상호작용할 수 있습니다:</p><pre><code class="highlight javascript">&gt; <span class="keyword">const</span> <span class="title class_">MessageStore</span> = <span class="keyword">await</span> ethers.<span class="title function_">getContractFactory</span>(<span class="string">&quot;MessageStore&quot;</span>)&gt; <span class="keyword">const</span> deployedAddress = <span class="string">&quot;배포된 컨트랙트 주소&quot;</span>&gt; <span class="keyword">const</span> messageStore = <span class="keyword">await</span> <span class="title class_">MessageStore</span>.<span class="title function_">attach</span>(deployedAddress)&gt; <span class="keyword">await</span> messageStore.<span class="title function_">getMessage</span>()&gt; <span class="keyword">await</span> messageStore.<span class="title function_">setMessage</span>(<span class="string">&quot;Console Test Message&quot;</span>)</code></pre><h3 id="가스-사용량-분석"><a href="#가스-사용량-분석" class="headerlink" title="가스 사용량 분석"></a>가스 사용량 분석</h3><p>Hardhat의 가스 리포터 플러그인을 사용하여 가스 사용량을 분석할 수 있습니다:</p><pre><code class="highlight bash">npm install --save-dev hardhat-gas-reporter</code></pre><p><code>hardhat.config.js</code>에 다음 설정을 추가합니다:</p><pre><code class="highlight javascript"><span class="built_in">require</span>(<span class="string">&quot;hardhat-gas-reporter&quot;</span>);<span class="variable language_">module</span>.<span class="property">exports</span> = &#123;  <span class="comment">// 기존 설정...</span>  <span class="attr">gasReporter</span>: &#123;    <span class="attr">enabled</span>: <span class="literal">true</span>,    <span class="attr">currency</span>: <span class="string">&quot;USD&quot;</span>,    <span class="attr">gasPrice</span>: <span class="number">21</span>,  &#125;,&#125;;</code></pre><p>이제 테스트를 실행하면 가스 사용량 보고서가 생성됩니다.</p><h2 id="테스트넷-배포"><a href="#테스트넷-배포" class="headerlink" title="테스트넷 배포"></a>테스트넷 배포</h2><p>실제 테스트넷(예: Sepolia)에 배포하려면 다음 단계를 따릅니다:</p><ol><li><code>.env</code> 파일을 생성하고 환경 변수 설정:</li></ol><pre><code class="highlight plaintext">SEPOLIA_URL=https://sepolia.infura.io/v3/YOUR_INFURA_PROJECT_IDPRIVATE_KEY=your_wallet_private_key</code></pre><ol start="2"><li>환경 변수를 로드하기 위한 패키지 설치:</li></ol><pre><code class="highlight bash">npm install --save-dev dotenv</code></pre><ol start="3"><li><code>hardhat.config.js</code> 파일 상단에 추가:</li></ol><pre><code class="highlight javascript"><span class="built_in">require</span>(<span class="string">&quot;dotenv&quot;</span>).<span class="title function_">config</span>();</code></pre><ol start="4"><li>테스트넷에 배포:</li></ol><pre><code class="highlight bash">npx hardhat run scripts/deploy.js --network sepolia</code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 Hardhat을 사용하여 이더리움 스마트 컨트랙트를 개발하는 방법에 대해 알아보았습니다.<br>Hardhat은 스마트 컨트랙트 개발을 위한 필수 도구로, 개발자가 안전하고 효율적으로 작업할 수 있는 환경을 제공합니다.<br>이 가이드를 통해 Hardhat의 기본 사용법을 익히셨다면, 이제 더 복잡한 스마트 컨트랙트를 개발하고 테스트해보세요!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> web3 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Solidity와 JavaScript 간 자료형 변환</title>
      <link href="/web3/2/"/>
      <url>/web3/2/</url>
      
        <content type="html"><![CDATA[<h1 id="Solidity와-JavaScript-간-자료형-변환-이해하기"><a href="#Solidity와-JavaScript-간-자료형-변환-이해하기" class="headerlink" title="Solidity와 JavaScript 간 자료형 변환 이해하기"></a>Solidity와 JavaScript 간 자료형 변환 이해하기</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 Solidity와 JavaScript(ethers.js) 간의 자료형과 변환 방법에 대해 알아보겠습니다. 이 내용은 스마트 계약 개발과 상호작용에서 매우 중요합니다.</p><h2 id="Solidity-자료형"><a href="#Solidity-자료형" class="headerlink" title="Solidity 자료형"></a>Solidity 자료형</h2><p>먼저 Solidity에서 자주 사용하는 자료형을 살펴보겠습니다.</p><h3 id="1-bytes32"><a href="#1-bytes32" class="headerlink" title="1. bytes32"></a>1. <strong>bytes32</strong></h3><ul><li><strong>설명</strong>: 고정 크기 바이트 배열로, 32바이트(256비트) 길이입니다.</li><li><strong>16진수 표현</strong>: <code>0x</code>로 시작하는 64자리 16진수 문자열로 표현됩니다.</li></ul><h3 id="2-address"><a href="#2-address" class="headerlink" title="2. address"></a>2. <strong>address</strong></h3><ul><li><strong>설명</strong>: 이더리움 주소로, 20바이트(160비트) 길이입니다.</li><li><strong>16진수 표현</strong>: <code>0x</code>로 시작하는 40자리 16진수 문자열로 표현됩니다.</li></ul><h3 id="3-uint256"><a href="#3-uint256" class="headerlink" title="3. uint256"></a>3. <strong>uint256</strong></h3><ul><li><strong>설명</strong>: 256비트 무부호 정수입니다.</li><li><strong>표현</strong>: 큰 정수를 다루기 위해 <code>BigNumber</code>로 변환하여 사용합니다.</li></ul><h2 id="JavaScript-ethers-js-에서의-자료형-및-변환"><a href="#JavaScript-ethers-js-에서의-자료형-및-변환" class="headerlink" title="JavaScript (ethers.js)에서의 자료형 및 변환"></a>JavaScript (ethers.js)에서의 자료형 및 변환</h2><p>JavaScript와 Solidity 간의 자료형 변환은 ethers.js 라이브러리를 사용하여 쉽게 수행할 수 있습니다.</p><h3 id="1-ethers-utils-hexlify"><a href="#1-ethers-utils-hexlify" class="headerlink" title="1. ethers.utils.hexlify"></a>1. <strong>ethers.utils.hexlify</strong></h3><ul><li><strong>설명</strong>: 데이터를 16진수 문자열로 변환합니다.</li><li><strong>용법</strong>: 바이트 배열, 숫자, 또는 BigNumber를 16진수 문자열로 변환할 때 사용합니다.</li><li><strong>예제</strong>:</li></ul><pre><code class="highlight javascript"><span class="keyword">const</span> hexString = ethers.<span class="property">utils</span>.<span class="title function_">hexlify</span>(ethers.<span class="property">utils</span>.<span class="title function_">randomBytes</span>(<span class="number">32</span>));<span class="variable language_">console</span>.<span class="title function_">log</span>(hexString); <span class="comment">// &quot;0x...&quot; 형식의 16진수 문자열</span></code></pre><h3 id="2-ethers-utils-arrayify"><a href="#2-ethers-utils-arrayify" class="headerlink" title="2. ethers.utils.arrayify"></a>2. <strong>ethers.utils.arrayify</strong></h3><ul><li><strong>설명</strong>: 16진수 문자열을 바이트 배열(<code>Uint8Array</code>)로 변환합니다.</li><li><strong>용법</strong>: 16진수 문자열을 바이트 배열로 변환하여 처리할 때 사용합니다.</li><li><strong>예제</strong>:</li></ul><pre><code class="highlight javascript"><span class="keyword">const</span> byteArray = ethers.<span class="property">utils</span>.<span class="title function_">arrayify</span>(<span class="string">&quot;0x123456&quot;</span>);<span class="variable language_">console</span>.<span class="title function_">log</span>(byteArray); <span class="comment">// Uint8Array [18, 52, 86]</span></code></pre><h3 id="3-ethers-utils-hexZeroPad"><a href="#3-ethers-utils-hexZeroPad" class="headerlink" title="3. ethers.utils.hexZeroPad"></a>3. <strong>ethers.utils.hexZeroPad</strong></h3><ul><li><strong>설명</strong>: 주어진 값을 특정 바이트 길이로 패딩합니다.</li><li><strong>용법</strong>: 주소나 해시 값의 길이를 맞출 때 사용합니다.</li><li><strong>예제</strong>:</li></ul><pre><code class="highlight javascript"><span class="keyword">const</span> paddedHex = ethers.<span class="property">utils</span>.<span class="title function_">hexZeroPad</span>(<span class="string">&quot;0x123456&quot;</span>, <span class="number">32</span>);<span class="variable language_">console</span>.<span class="title function_">log</span>(paddedHex); <span class="comment">// &quot;0x0000000000000000000000000000000000000000000000000000000000123456&quot;</span></code></pre><h2 id="변환-과정-요약"><a href="#변환-과정-요약" class="headerlink" title="변환 과정 요약"></a>변환 과정 요약</h2><p>이제 Solidity와 JavaScript 간의 변환 과정을 살펴보겠습니다.</p><h3 id="1-주소-address-변환"><a href="#1-주소-address-변환" class="headerlink" title="1. 주소(address) 변환"></a>1. <strong>주소(address) 변환</strong></h3><ul><li>Solidity에서 <code>address</code>는 20바이트 길이의 16진수 문자열입니다.</li><li>JavaScript에서 이를 다룰 때, <code>ethers.utils.hexZeroPad</code>로 패딩하여 20바이트 길이를 맞추고, <code>ethers.utils.arrayify</code>로 바이트 배열로 변환합니다.</li><li><strong>예제</strong>:</li></ul><pre><code class="highlight javascript"><span class="keyword">let</span> address = <span class="string">&quot;0x1234567890abcdef1234567890abcdef12345678&quot;</span>;address = ethers.<span class="property">utils</span>.<span class="title function_">hexZeroPad</span>(address, <span class="number">20</span>); <span class="comment">// 20 바이트로 패딩</span><span class="keyword">const</span> byteArray = ethers.<span class="property">utils</span>.<span class="title function_">arrayify</span>(address); <span class="comment">// 바이트 배열로 변환</span></code></pre><h3 id="2-bytes32-변환"><a href="#2-bytes32-변환" class="headerlink" title="2. bytes32 변환"></a>2. <strong>bytes32 변환</strong></h3><ul><li>Solidity에서 <code>bytes32</code>는 32바이트 길이의 16진수 문자열입니다.</li><li>JavaScript에서 이를 다룰 때, <code>ethers.utils.hexZeroPad</code>로 패딩하여 32바이트 길이를 맞추고, <code>ethers.utils.arrayify</code>로 바이트 배열로 변환합니다.</li><li><strong>예제</strong>:</li></ul><pre><code class="highlight javascript"><span class="keyword">let</span> bytes32Value =  <span class="string">&quot;0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef&quot;</span>;bytes32Value = ethers.<span class="property">utils</span>.<span class="title function_">hexZeroPad</span>(bytes32Value, <span class="number">32</span>); <span class="comment">// 32 바이트로 패딩</span><span class="keyword">const</span> byteArray = ethers.<span class="property">utils</span>.<span class="title function_">arrayify</span>(bytes32Value); <span class="comment">// 바이트 배열로 변환</span></code></pre><h3 id="3-uint256-변환"><a href="#3-uint256-변환" class="headerlink" title="3. uint256 변환"></a>3. <strong>uint256 변환</strong></h3><ul><li>Solidity에서 <code>uint256</code>은 큰 정수를 나타냅니다.</li><li>JavaScript에서 이를 다룰 때, <code>BigNumber</code> 객체로 변환하여 사용합니다.</li><li><strong>예제</strong>:</li></ul><pre><code class="highlight javascript"><span class="keyword">const</span> bigNumberValue = ethers.<span class="property">BigNumber</span>.<span class="title function_">from</span>(<span class="string">&quot;1000000000000000000&quot;</span>);<span class="variable language_">console</span>.<span class="title function_">log</span>(bigNumberValue.<span class="title function_">toString</span>()); <span class="comment">// &quot;1000000000000000000&quot;</span></code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이러한 방법을 통해 Solidity와 JavaScript 간의 데이터 변환을 올바르게 수행할 수 있습니다. 각 자료형에 맞는 변환을 사용하여 데이터의 일관성과 무결성을 유지할 수 있습니다.<br>스마트 계약 개발에서 자료형 변환은 매우 중요하므로, 위의 예제들을 참고하여 올바르게 변환을 수행해 보세요!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> web3 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript require와 import의 차이 및 혼용 사용법</title>
      <link href="/javascript/special/15/"/>
      <url>/javascript/special/15/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-require와-import의-차이-및-혼용-사용법"><a href="#JavaScript-require와-import의-차이-및-혼용-사용법" class="headerlink" title="JavaScript require와 import의 차이 및 혼용 사용법"></a>JavaScript <code>require</code>와 <code>import</code>의 차이 및 혼용 사용법</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 Node.js와 ES6 모듈 시스템에서 사용하는 <code>require</code>와 <code>import</code>의 차이, 혼용 사용 시 발생할 수 있는 이슈와 그 해결 방법에 대해 알아보겠습니다.<br>이 두 가지 모듈 시스템은 JavaScript에서 외부 모듈을 불러오는 방법을 제공하지만, 각각의 사용법과 동작 방식에 차이가 있습니다. 예제를 통해 구체적으로 살펴보겠습니다.</p><h2 id="1-개요"><a href="#1-개요" class="headerlink" title="1. 개요"></a>1. 개요</h2><h3 id="모듈-시스템이란"><a href="#모듈-시스템이란" class="headerlink" title="모듈 시스템이란?"></a>모듈 시스템이란?</h3><p>모듈 시스템은 코드의 재사용성과 유지보수성을 높이기 위해 코드를 여러 파일로 분리하고, 필요한 파일에서 해당 모듈을 불러오는 방식을 의미합니다. JavaScript에는 두 가지 주요 모듈 시스템이 있습니다</p><h3 id="CommonJS-require"><a href="#CommonJS-require" class="headerlink" title="CommonJS (require)"></a>CommonJS (<code>require</code>)</h3><p>CommonJS 모듈 시스템은 Node.js의 기본 모듈 시스템으로, 서버 사이드 JavaScript에서 주로 사용됩니다. CommonJS는 <code>require</code> 키워드를 사용하여 모듈을 동기적으로 불러오며, 파일이 실행되는 시점에 모듈이 로드됩니다. 이는 Node.js의 모든 모듈이 동기적으로 로드된다는 의미입니다.</p><h3 id="ES6-모듈-import"><a href="#ES6-모듈-import" class="headerlink" title="ES6 모듈 (import)"></a>ES6 모듈 (<code>import</code>)</h3><p>ES6 모듈 시스템은 JavaScript의 표준 모듈 시스템으로, <code>import</code> 키워드를 사용하여 모듈을 비동기적으로 불러옵니다. <code>import</code>는 정적 분석이 가능하며, 이는 컴파일 타임에 모듈의 종속성을 파악할 수 있다는 의미입니다. ES6 모듈 시스템은 브라우저 환경과 Node.js 환경 모두에서 사용될 수 있습니다.</p><h2 id="2-require와-import의-차이점"><a href="#2-require와-import의-차이점" class="headerlink" title="2. require와 import의 차이점"></a>2. <code>require</code>와 <code>import</code>의 차이점</h2><h3 id="1-구문"><a href="#1-구문" class="headerlink" title="1. 구문"></a>1. 구문</h3><p><strong>CommonJS (require):</strong></p><pre><code class="highlight javascript"><span class="keyword">const</span> <span class="variable language_">module</span> = <span class="built_in">require</span>(<span class="string">&quot;./module&quot;</span>);</code></pre><p><strong>ES6 모듈 (import):</strong></p><pre><code class="highlight javascript"><span class="keyword">import</span> <span class="variable language_">module</span> <span class="keyword">from</span> <span class="string">&quot;./module&quot;</span>;</code></pre><p>구문에서 볼 수 있듯이, <code>require</code>는 함수처럼 사용되며, 모듈의 경로를 인자로 받습니다. 반면 <code>import</code>는 JavaScript의 문법적인 구문으로, 별도의 함수 호출 없이 모듈을 불러옵니다.</p><h3 id="2-모듈-로딩-시점"><a href="#2-모듈-로딩-시점" class="headerlink" title="2. 모듈 로딩 시점"></a>2. 모듈 로딩 시점</h3><ul><li><strong><code>require</code></strong>: 런타임에 동기적으로 모듈을 로드합니다. 코드가 실행되는 동안 <code>require</code>를 만나면, 해당 모듈이 즉시 로드되고 실행됩니다.</li><li><strong><code>import</code></strong>: 정적 분석 단계에서 모듈을 비동기적으로 로드합니다. ES6 모듈 시스템은 브라우저나 Node.js가 스크립트를 처음 로드할 때부터 모듈을 로드하고 분석합니다.</li></ul><h3 id="3-모듈-내보내기"><a href="#3-모듈-내보내기" class="headerlink" title="3. 모듈 내보내기"></a>3. 모듈 내보내기</h3><p><strong>CommonJS (module.exports):</strong></p><pre><code class="highlight javascript"><span class="comment">// module.js</span><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;  <span class="attr">greet</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello from CommonJS&quot;</span>);  &#125;,&#125;;</code></pre><p><strong>ES6 모듈 (export default):</strong></p><pre><code class="highlight javascript"><span class="comment">// module.js</span><span class="keyword">export</span> <span class="keyword">default</span> &#123;  <span class="attr">greet</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello from ES6 module&quot;</span>);  &#125;,&#125;;</code></pre><p>CommonJS에서는 <code>module.exports</code> 객체를 통해 모듈을 내보내며, 이는 파일 전체에서 단일 객체를 반환합니다. ES6 모듈 시스템에서는 <code>export default</code> 또는 <code>named export</code>를 통해 모듈을 내보낼 수 있습니다.</p><h3 id="4-모듈-가져오기"><a href="#4-모듈-가져오기" class="headerlink" title="4. 모듈 가져오기"></a>4. 모듈 가져오기</h3><p><strong>CommonJS (require):</strong></p><pre><code class="highlight javascript"><span class="keyword">const</span> myModule = <span class="built_in">require</span>(<span class="string">&quot;./module&quot;</span>);myModule.<span class="title function_">greet</span>(); <span class="comment">// Hello from CommonJS</span></code></pre><p><strong>ES6 모듈 (import):</strong></p><pre><code class="highlight javascript"><span class="keyword">import</span> myModule <span class="keyword">from</span> <span class="string">&quot;./module&quot;</span>;myModule.<span class="title function_">greet</span>(); <span class="comment">// Hello from ES6 module</span></code></pre><p><code>require</code>는 CommonJS 모듈 전체를 가져오며, 이는 동기적으로 실행됩니다. <code>import</code>는 모듈의 특정 부분이나 전체를 가져올 수 있으며, 비동기적으로 실행됩니다.</p><h3 id="5-모듈-캐싱"><a href="#5-모듈-캐싱" class="headerlink" title="5. 모듈 캐싱"></a>5. 모듈 캐싱</h3><p>CommonJS 모듈은 한 번 로드되면 캐싱됩니다. 즉, 동일한 모듈을 여러 번 <code>require</code>해도 처음 로드된 모듈이 캐싱되어 재사용됩니다. 이 때문에 모듈 간의 상태 공유가 발생할 수 있습니다.</p><p>ES6 모듈 역시 캐싱되지만, 모듈이 처음 로드될 때까지 비동기적으로 대기합니다. 이로 인해 초기 로드 시점에 차이가 발생할 수 있습니다.</p><h2 id="3-혼용-사용과-관련된-이슈들"><a href="#3-혼용-사용과-관련된-이슈들" class="headerlink" title="3. 혼용 사용과 관련된 이슈들"></a>3. 혼용 사용과 관련된 이슈들</h2><h3 id="CommonJS에서-ES6-모듈-사용"><a href="#CommonJS에서-ES6-모듈-사용" class="headerlink" title="CommonJS에서 ES6 모듈 사용"></a>CommonJS에서 ES6 모듈 사용</h3><p>Node.js에서는 ES6 모듈을 사용하기 위해 <code>import</code>를 사용할 수 있지만, 몇 가지 제약이 있습니다. Node.js에서 ES6 모듈을 사용하려면 <code>.mjs</code> 확장자를 사용하거나, <code>package.json</code> 파일에 <code>&quot;type&quot;: &quot;module&quot;</code>을 추가해야 합니다. 또한, CommonJS 모듈에서 ES6 모듈을 가져올 때는 <code>.default</code>로 접근해야 합니다.</p><pre><code class="highlight javascript"><span class="comment">// CommonJS</span><span class="keyword">const</span> myModule = <span class="built_in">require</span>(<span class="string">&quot;./module&quot;</span>).<span class="property">default</span>;myModule.<span class="title function_">greet</span>(); <span class="comment">// Hello from ES6 module</span></code></pre><h3 id="ES6-모듈에서-CommonJS-모듈-사용"><a href="#ES6-모듈에서-CommonJS-모듈-사용" class="headerlink" title="ES6 모듈에서 CommonJS 모듈 사용"></a>ES6 모듈에서 CommonJS 모듈 사용</h3><p>반대로, ES6 모듈에서 CommonJS 모듈을 가져올 때는 별도의 설정 없이 <code>import</code>를 사용할 수 있습니다. 다만, <code>module.exports</code>로 내보낸 전체 객체를 가져오게 됩니다.</p><pre><code class="highlight javascript"><span class="comment">// ES6 모듈</span><span class="keyword">import</span> myModule <span class="keyword">from</span> <span class="string">&quot;./module&quot;</span>;myModule.<span class="title function_">greet</span>(); <span class="comment">// Hello from CommonJS</span></code></pre><h3 id="Babel을-통한-혼용-사용"><a href="#Babel을-통한-혼용-사용" class="headerlink" title="Babel을 통한 혼용 사용"></a>Babel을 통한 혼용 사용</h3><p>Babel은 최신 JavaScript 코드를 구형 브라우저나 Node.js 버전에서도 실행할 수 있도록 변환해주는 트랜스파일러입니다. Babel을 사용하면 <code>require</code>와 <code>import</code>를 혼용할 수 있으며, ES6 모듈을 CommonJS로 변환하여 호환성을 유지할 수 있습니다.</p><pre><code class="highlight javascript"><span class="comment">// Babel 설정</span>npm install --save-dev @babel/core @babel/preset-env @babel/preset-modules<span class="comment">// .babelrc</span>&#123;  <span class="string">&quot;presets&quot;</span>: [<span class="string">&quot;@babel/preset-env&quot;</span>]&#125;</code></pre><p>Babel을 사용하면 ES6 모듈 코드를 CommonJS 코드로 변환하여 Node.js에서 사용할 수 있습니다. 이 방법을 통해 <code>require</code>와 <code>import</code>를 혼용할 수 있지만, 성능과 복잡성 측면에서 주의가 필요합니다.</p><h2 id="4-예제"><a href="#4-예제" class="headerlink" title="4. 예제"></a>4. 예제</h2><h3 id="CommonJS-예제"><a href="#CommonJS-예제" class="headerlink" title="CommonJS 예제"></a>CommonJS 예제</h3><p><strong>warrior.js</strong></p><pre><code class="highlight javascript"><span class="comment">// warrior.js</span><span class="keyword">class</span> <span class="title class_">Warrior</span> &#123;  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;    <span class="variable language_">this</span>.<span class="property">name</span> = name;    <span class="variable language_">this</span>.<span class="property">class</span> = <span class="string">&quot;Warrior&quot;</span>;  &#125;  <span class="title function_">attack</span>(<span class="params"></span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> the <span class="subst">$&#123;<span class="variable language_">this</span>.<span class="keyword">class</span>&#125;</span> attacks with a sword!`</span>);  &#125;&#125;<span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">Warrior</span>;</code></pre><p><strong>mage.js</strong></p><pre><code class="highlight javascript"><span class="comment">// mage.js</span><span class="keyword">class</span> <span class="title class_">Mage</span> &#123;  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;    <span class="variable language_">this</span>.<span class="property">name</span> = name;    <span class="variable language_">this</span>.<span class="property">class</span> = <span class="string">&quot;Mage&quot;</span>;  &#125;  <span class="title function_">castSpell</span>(<span class="params"></span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> the <span class="subst">$&#123;<span class="variable language_">this</span>.<span class="keyword">class</span>&#125;</span> casts a fireball!`</span>);  &#125;&#125;<span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">Mage</span>;</code></pre><p><strong>game.js</strong></p><pre><code class="highlight javascript"><span class="comment">// game.js</span><span class="keyword">const</span> <span class="title class_">Warrior</span> = <span class="built_in">require</span>(<span class="string">&quot;./warrior&quot;</span>);<span class="keyword">const</span> <span class="title class_">Mage</span> = <span class="built_in">require</span>(<span class="string">&quot;./mage&quot;</span>);<span class="keyword">const</span> warrior = <span class="keyword">new</span> <span class="title class_">Warrior</span>(<span class="string">&quot;Aragon&quot;</span>);<span class="keyword">const</span> mage = <span class="keyword">new</span> <span class="title class_">Mage</span>(<span class="string">&quot;Gandalf&quot;</span>);warrior.<span class="title function_">attack</span>(); <span class="comment">// Aragon the Warrior attacks with a sword!</span>mage.<span class="title function_">castSpell</span>(); <span class="comment">// Gandalf the Mage casts a fireball!</span></code></pre><h3 id="ES6-모듈-예제"><a href="#ES6-모듈-예제" class="headerlink" title="ES6 모듈 예제"></a>ES6 모듈 예제</h3><p><strong>warrior.js</strong></p><pre><code class="highlight javascript"><span class="comment">// warrior.js</span><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Warrior</span> &#123;  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;    <span class="variable language_">this</span>.<span class="property">name</span> = name;    <span class="variable language_">this</span>.<span class="property">class</span> = <span class="string">&quot;Warrior&quot;</span>;  &#125;  <span class="title function_">attack</span>(<span class="params"></span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> the <span class="subst">$&#123;<span class="variable language_">this</span>.<span class="keyword">class</span>&#125;</span> attacks with a sword!`</span>);  &#125;&#125;</code></pre><p><strong>mage.js</strong></p><pre><code class="highlight javascript"><span class="comment">// mage.js</span><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Mage</span> &#123;  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;    <span class="variable language_">this</span>.<span class="property">name</span> = name;    <span class="variable language_">this</span>.<span class="property">class</span> = <span class="string">&quot;Mage&quot;</span>;  &#125;  <span class="title function_">castSpell</span>(<span class="params"></span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> the <span class="subst">$&#123;<span class="variable language_">this</span>.<span class="keyword">class</span>&#125;</span> casts a fireball!`</span>);  &#125;&#125;</code></pre><p><strong>game.js</strong></p><pre><code class="highlight javascript"><span class="comment">// game.js</span><span class="keyword">import</span> <span class="title class_">Warrior</span> <span class="keyword">from</span> <span class="string">&quot;./warrior&quot;</span>;<span class="keyword">import</span> <span class="title class_">Mage</span> <span class="keyword">from</span> <span class="string">&quot;./mage&quot;</span>;<span class="keyword">const</span> warrior = <span class="keyword">new</span> <span class="title class_">Warrior</span>(<span class="string">&quot;Aragon&quot;</span>);<span class="keyword">const</span> mage = <span class="keyword">new</span> <span class="title class_">Mage</span>(<span class="string">&quot;Gandalf&quot;</span>);warrior.<span class="title function_">attack</span>(); <span class="comment">// Aragon the Warrior attacks with a sword!</span>mage.<span class="title function_">castSpell</span>(); <span class="comment">// Gandalf the Mage casts a fireball!</span></code></pre><h3 id="혼용-예제"><a href="#혼용-예제" class="headerlink" title="혼용 예제"></a>혼용 예제</h3><p>만약 기존에 CommonJS 모듈로 작성된 프로젝트에 새로운 ES6 모듈을 추가하고자 한다면 다음과 같은 방식으로 혼용할 수 있습니다.</p><pre><code class="highlight javascript"><span class="comment">// game.js</span><span class="keyword">const</span> <span class="title class_">Warrior</span> = <span class="built_in">require</span>(<span class="string">&quot;./warrior&quot;</span>).<span class="property">default</span>;<span class="keyword">import</span> <span class="title class_">Mage</span> <span class="keyword">from</span> <span class="string">&quot;./mage&quot;</span>;<span class="keyword">const</span> warrior = <span class="keyword">new</span> <span class="title class_">Warrior</span>(<span class="string">&quot;Aragon&quot;</span>);<span class="keyword">const</span> mage = <span class="keyword">new</span> <span class="title class_">Mage</span>(<span class="string">&quot;Gandalf&quot;</span>);warrior.<span class="title function_">attack</span>(); <span class="comment">// Aragon the Warrior attacks with a sword!</span>mage.<span class="title function_">castSpell</span>(); <span class="comment">// Gandalf the Mage casts a fireball!</span></code></pre><p>이처럼 <code>require</code>와 <code>import</code>를 혼용할 수 있지만, 혼용 사용은 가능한 한 피하는 것이 좋습니다. 유지보수와 코드 일관성 측면에서 ES6 모듈로 일관되게 작성하는 것이 바람직합니다.</p><h2 id="5-마무리"><a href="#5-마무리" class="headerlink" title="5. 마무리"></a>5. 마무리</h2><p>이번 시간에는 JavaScript에서 모듈을 불러오는 두 가지 방법인 <code>require</code>와 <code>import</code>의 차이, 각 방법의 특징, 그리고 혼용 사용 시 발생할 수 있는 이슈와 해결 방법에 대해 알아보았습니다.<br>ES6 모듈이 표준으로 자리 잡으면서, 앞으로는 <code>import</code>를 사용하는 것이 더욱 일반화될 것 같습니다.<br>다만 기존 코드베이스와의 호환성을 유지해야하는 경우는 <code>require</code>를 이해하고 적절히 사용하는 것도 중요합니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> JS_필살기 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript this의 다양한 사용 방식과 상황별 정리</title>
      <link href="/javascript/special/14/"/>
      <url>/javascript/special/14/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript에서-this의-다양한-사용-방식과-상황별-정리"><a href="#JavaScript에서-this의-다양한-사용-방식과-상황별-정리" class="headerlink" title="JavaScript에서 this의 다양한 사용 방식과 상황별 정리"></a>JavaScript에서 <code>this</code>의 다양한 사용 방식과 상황별 정리</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 JavaScript에서 자주 사용되는 <code>this</code> 키워드의 다양한 사용 방식과 상황별로 어떻게 동작하는지 자세히 알아보겠습니다. <code>this</code>는 JavaScript에서 혼란을 일으킬 수 있는 개념 중 하나로, 상황에 따라 다른 값을 가질 수 있습니다.</p><h2 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h2><h3 id="this란-무엇인가"><a href="#this란-무엇인가" class="headerlink" title="this란 무엇인가?"></a><code>this</code>란 무엇인가?</h3><p><code>this</code>는 현재 실행 문맥(context)에서의 객체를 참조하는 키워드입니다. 함수가 어떻게 호출되는지에 따라 <code>this</code>의 값이 달라집니다. <code>this</code>는 객체 메서드, 함수, 생성자 함수, 클래스, 그리고 call, apply, bind 메서드 등 다양한 상황에서 사용됩니다.</p><h2 id="1-전역-문맥에서의-this"><a href="#1-전역-문맥에서의-this" class="headerlink" title="1. 전역 문맥에서의 this"></a>1. 전역 문맥에서의 <code>this</code></h2><p>전역 문맥에서는 <code>this</code>가 전역 객체를 참조합니다.</p><h3 id="브라우저-환경"><a href="#브라우저-환경" class="headerlink" title="브라우저 환경"></a>브라우저 환경</h3><p>브라우저에서는 전역 객체가 <code>window</code>입니다.</p><pre><code class="highlight javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// window</span></code></pre><h3 id="Node-js-환경"><a href="#Node-js-환경" class="headerlink" title="Node.js 환경"></a>Node.js 환경</h3><p>Node.js에서는 전역 객체가 <code>global</code>입니다.</p><pre><code class="highlight javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// &#123;&#125;</span></code></pre><h2 id="2-함수-문맥에서의-this"><a href="#2-함수-문맥에서의-this" class="headerlink" title="2. 함수 문맥에서의 this"></a>2. 함수 문맥에서의 <code>this</code></h2><p>일반 함수에서는 <code>this</code>가 호출 컨텍스트에 따라 달라집니다. 기본적으로는 전역 객체를 참조합니다.</p><pre><code class="highlight javascript"><span class="keyword">function</span> <span class="title function_">showThis</span>(<span class="params"></span>) &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);&#125;<span class="title function_">showThis</span>(); <span class="comment">// window (브라우저), global (Node.js)</span></code></pre><h2 id="3-엄격-모드에서의-this"><a href="#3-엄격-모드에서의-this" class="headerlink" title="3. 엄격 모드에서의 this"></a>3. 엄격 모드에서의 <code>this</code></h2><p>엄격 모드(<code>&#39;use strict&#39;</code>)에서는 <code>this</code>가 <code>undefined</code>가 됩니다.</p><pre><code class="highlight javascript"><span class="meta">&quot;use strict&quot;</span>;<span class="keyword">function</span> <span class="title function_">showThis</span>(<span class="params"></span>) &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);&#125;<span class="title function_">showThis</span>(); <span class="comment">// undefined</span></code></pre><h2 id="4-객체-메서드에서의-this"><a href="#4-객체-메서드에서의-this" class="headerlink" title="4. 객체 메서드에서의 this"></a>4. 객체 메서드에서의 <code>this</code></h2><p>객체의 메서드에서는 <code>this</code>가 해당 메서드를 호출한 객체를 참조합니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> obj = &#123;  <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,  <span class="attr">showThis</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);  &#125;,&#125;;obj.<span class="title function_">showThis</span>(); <span class="comment">// obj</span></code></pre><h2 id="5-생성자-함수에서의-this"><a href="#5-생성자-함수에서의-this" class="headerlink" title="5. 생성자 함수에서의 this"></a>5. 생성자 함수에서의 <code>this</code></h2><p>생성자 함수에서는 <code>this</code>가 새로 생성된 인스턴스를 참조합니다.</p><pre><code class="highlight javascript"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;  <span class="variable language_">this</span>.<span class="property">name</span> = name;&#125;<span class="keyword">const</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;John&quot;</span>);<span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>); <span class="comment">// John</span></code></pre><h2 id="6-클래스에서의-this"><a href="#6-클래스에서의-this" class="headerlink" title="6. 클래스에서의 this"></a>6. 클래스에서의 <code>this</code></h2><p>클래스의 메서드에서는 <code>this</code>가 해당 클래스의 인스턴스를 참조합니다.</p><pre><code class="highlight javascript"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;    <span class="variable language_">this</span>.<span class="property">name</span> = name;  &#125;  <span class="title function_">showThis</span>(<span class="params"></span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);  &#125;&#125;<span class="keyword">const</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;John&quot;</span>);person.<span class="title function_">showThis</span>(); <span class="comment">// person</span></code></pre><h2 id="7-이벤트-핸들러에서의-this"><a href="#7-이벤트-핸들러에서의-this" class="headerlink" title="7. 이벤트 핸들러에서의 this"></a>7. 이벤트 핸들러에서의 <code>this</code></h2><p>이벤트 핸들러에서는 <code>this</code>가 이벤트가 발생한 요소를 참조합니다.</p><pre><code class="highlight javascript"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>).<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// &lt;button id=&quot;btn&quot;&gt;</span>&#125;);</code></pre><h2 id="8-화살표-함수에서의-this"><a href="#8-화살표-함수에서의-this" class="headerlink" title="8. 화살표 함수에서의 this"></a>8. 화살표 함수에서의 <code>this</code></h2><p>화살표 함수는 자신만의 <code>this</code>를 가지지 않고, 상위 스코프의 <code>this</code>를 사용합니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> obj = &#123;  <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,  <span class="attr">showThis</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;    <span class="keyword">const</span> <span class="title function_">innerFunction</span> = (<span class="params"></span>) =&gt; &#123;      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);    &#125;;    <span class="title function_">innerFunction</span>();  &#125;,&#125;;obj.<span class="title function_">showThis</span>(); <span class="comment">// obj</span></code></pre><h2 id="9-call-apply-bind를-통한-this-변경"><a href="#9-call-apply-bind를-통한-this-변경" class="headerlink" title="9. call, apply, bind를 통한 this 변경"></a>9. <code>call</code>, <code>apply</code>, <code>bind</code>를 통한 <code>this</code> 변경</h2><h3 id="call과-apply"><a href="#call과-apply" class="headerlink" title="call과 apply"></a><code>call</code>과 <code>apply</code></h3><p><code>call</code>과 <code>apply</code> 메서드를 사용하면 함수 호출 시 <code>this</code>를 명시적으로 지정할 수 있습니다.</p><pre><code class="highlight javascript"><span class="keyword">function</span> <span class="title function_">showThis</span>(<span class="params"></span>) &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);&#125;<span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">&quot;John&quot;</span> &#125;;showThis.<span class="title function_">call</span>(obj); <span class="comment">// obj</span>showThis.<span class="title function_">apply</span>(obj); <span class="comment">// obj</span></code></pre><h3 id="bind"><a href="#bind" class="headerlink" title="bind"></a><code>bind</code></h3><p><code>bind</code> 메서드는 <code>this</code> 값을 영구히 설정한 새로운 함수를 반환합니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">&quot;John&quot;</span> &#125;;<span class="keyword">function</span> <span class="title function_">showThis</span>(<span class="params"></span>) &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);&#125;<span class="keyword">const</span> boundFunction = showThis.<span class="title function_">bind</span>(obj);<span class="title function_">boundFunction</span>(); <span class="comment">// obj</span></code></pre><h2 id="10-생성자-함수에서-new-키워드-사용-시-this"><a href="#10-생성자-함수에서-new-키워드-사용-시-this" class="headerlink" title="10. 생성자 함수에서 new 키워드 사용 시 this"></a>10. 생성자 함수에서 <code>new</code> 키워드 사용 시 <code>this</code></h2><p>생성자 함수 호출 시 <code>new</code> 키워드를 사용하면 <code>this</code>는 새로 생성된 객체를 가리킵니다.</p><pre><code class="highlight javascript"><span class="keyword">function</span> <span class="title function_">Hero</span>(<span class="params">name</span>) &#123;  <span class="variable language_">this</span>.<span class="property">name</span> = name;&#125;<span class="keyword">const</span> hero = <span class="keyword">new</span> <span class="title class_">Hero</span>(<span class="string">&quot;Warrior&quot;</span>);<span class="variable language_">console</span>.<span class="title function_">log</span>(hero.<span class="property">name</span>); <span class="comment">// Warrior</span></code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 JavaScript에서 <code>this</code> 키워드가 어떻게 동작하는지 다양한 상황별로 알아보았습니다. <code>this</code>는 함수가 어떻게 호출되는지에 따라 달라지는 동적인 키워드로, 각 상황을 이해하는 것이 중요합니다.<br>이를 통해 코드의 예기치 않은 동작을 방지하고, 더 정확하고 효율적인 코드를 작성할 수 있습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> JS_필살기 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript 순환참조 문제 해결</title>
      <link href="/typescript/troubleshooting/10/"/>
      <url>/typescript/troubleshooting/10/</url>
      
        <content type="html"><![CDATA[<h1 id="TypeScript-순환참조-문제-해결"><a href="#TypeScript-순환참조-문제-해결" class="headerlink" title="TypeScript 순환참조 문제 해결"></a>TypeScript 순환참조 문제 해결</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 TypeScript에서 발생할 수 있는 순환참조(Circular Reference) 문제와 이를 해결하는 방법에 대해 알아보겠습니다.<br>순환참조는 두 개 이상의 모듈이 서로를 참조할 때 발생하며, 이는 빌드 및 실행 시 오류를 일으킬 수 있습니다.</p><h2 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h2><h3 id="순환참조란"><a href="#순환참조란" class="headerlink" title="순환참조란?"></a>순환참조란?</h3><p>순환참조는 A 모듈이 B 모듈을 참조하고, 동시에 B 모듈이 A 모듈을 참조할 때 발생하는 상황을 말합니다.<br>이로 인해 모듈 로딩이 무한 루프에 빠지거나, 의존성 그래프가 해결되지 않아 오류가 발생할 수 있습니다.</p><h3 id="순환참조-문제의-원인"><a href="#순환참조-문제의-원인" class="headerlink" title="순환참조 문제의 원인"></a>순환참조 문제의 원인</h3><ul><li><strong>모듈 간의 강한 결합</strong>: 두 모듈이 서로 강하게 결합되어 있어, 분리하기 어려운 경우.</li><li><strong>잘못된 설계</strong>: 모듈의 설계가 잘못되어, 의존성이 복잡하게 얽혀 있는 경우.</li></ul><h2 id="문제-상황과-해결-방법"><a href="#문제-상황과-해결-방법" class="headerlink" title="문제 상황과 해결 방법"></a>문제 상황과 해결 방법</h2><h3 id="문제-상황"><a href="#문제-상황" class="headerlink" title="문제 상황"></a>문제 상황</h3><p>다음과 같은 프로젝트 구조를 가정합니다:</p><pre><code class="highlight bash">src/├── A.ts└── B.ts</code></pre><p><strong>A.ts</strong></p><pre><code class="highlight typescript"><span class="keyword">import</span> &#123; B &#125; <span class="keyword">from</span> <span class="string">&quot;./B&quot;</span>;<span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;  <span class="attr">b</span>: B;  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;    <span class="variable language_">this</span>.<span class="property">b</span> = <span class="keyword">new</span> <span class="title function_">B</span>();  &#125;  <span class="title function_">greet</span>(<span class="params"></span>) &#123;    <span class="keyword">return</span> <span class="string">`Hello from A and <span class="subst">$&#123;<span class="variable language_">this</span>.b.greet()&#125;</span>`</span>;  &#125;&#125;</code></pre><p><strong>B.ts</strong></p><pre><code class="highlight typescript"><span class="keyword">import</span> &#123; A &#125; <span class="keyword">from</span> <span class="string">&quot;./A&quot;</span>;<span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">B</span> &#123;  <span class="attr">a</span>: A;  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;    <span class="variable language_">this</span>.<span class="property">a</span> = <span class="keyword">new</span> <span class="title function_">A</span>();  &#125;  <span class="title function_">greet</span>(<span class="params"></span>) &#123;    <span class="keyword">return</span> <span class="string">`Hello from B and <span class="subst">$&#123;<span class="variable language_">this</span>.a.greet()&#125;</span>`</span>;  &#125;&#125;</code></pre><p>이 코드는 <code>A</code>와 <code>B</code>가 서로를 참조하여 순환참조 문제가 발생합니다.</p><h3 id="해결-방법"><a href="#해결-방법" class="headerlink" title="해결 방법"></a>해결 방법</h3><h4 id="1-의존성-역전-원칙-DIP-을-적용하여-설계-개선"><a href="#1-의존성-역전-원칙-DIP-을-적용하여-설계-개선" class="headerlink" title="1. 의존성 역전 원칙(DIP)을 적용하여 설계 개선"></a>1. 의존성 역전 원칙(DIP)을 적용하여 설계 개선</h4><p>순환참조 문제를 해결하는 가장 좋은 방법 중 하나는 의존성 역전 원칙(DIP)을 적용하여 설계를 개선하는 것입니다. 인터페이스를 사용하여 모듈 간의 강한 결합을 줄일 수 있습니다.</p><p><strong>예제: 인터페이스 도입</strong></p><p><strong>interfaces.ts</strong></p><pre><code class="highlight typescript"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">IGreet</span> &#123;  <span class="title function_">greet</span>(): <span class="built_in">string</span>;&#125;</code></pre><p><strong>A.ts</strong></p><pre><code class="highlight typescript"><span class="keyword">import</span> &#123; <span class="title class_">IGreet</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./interfaces&quot;</span>;<span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">implements</span> <span class="title class_">IGreet</span> &#123;  <span class="title function_">greet</span>(<span class="params"></span>) &#123;    <span class="keyword">return</span> <span class="string">&quot;Hello from A&quot;</span>;  &#125;&#125;</code></pre><p><strong>B.ts</strong></p><pre><code class="highlight typescript"><span class="keyword">import</span> &#123; <span class="title class_">IGreet</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./interfaces&quot;</span>;<span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">implements</span> <span class="title class_">IGreet</span> &#123;  <span class="title function_">greet</span>(<span class="params"></span>) &#123;    <span class="keyword">return</span> <span class="string">&quot;Hello from B&quot;</span>;  &#125;&#125;</code></pre><p>이렇게 하면 <code>A</code>와 <code>B</code>가 서로를 참조하지 않게 되어 순환참조 문제가 해결됩니다.</p><h4 id="2-동적-임포트를-사용하여-순환참조-해결"><a href="#2-동적-임포트를-사용하여-순환참조-해결" class="headerlink" title="2. 동적 임포트를 사용하여 순환참조 해결"></a>2. 동적 임포트를 사용하여 순환참조 해결</h4><p>동적 임포트를 사용하여 순환참조를 피할 수 있습니다. 모듈을 동적으로 불러오면 순환참조가 발생하지 않도록 할 수 있습니다.</p><p><strong>예제: 동적 임포트 사용</strong></p><p><strong>A.ts</strong></p><pre><code class="highlight typescript"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;  <span class="keyword">async</span> <span class="title function_">greet</span>(<span class="params"></span>) &#123;    <span class="keyword">const</span> &#123; B &#125; = <span class="keyword">await</span> <span class="keyword">import</span>(<span class="string">&quot;./B&quot;</span>);    <span class="keyword">const</span> b = <span class="keyword">new</span> <span class="title function_">B</span>();    <span class="keyword">return</span> <span class="string">`Hello from A and <span class="subst">$&#123;b.greet()&#125;</span>`</span>;  &#125;&#125;</code></pre><p><strong>B.ts</strong></p><pre><code class="highlight typescript"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">B</span> &#123;  <span class="keyword">async</span> <span class="title function_">greet</span>(<span class="params"></span>) &#123;    <span class="keyword">const</span> &#123; A &#125; = <span class="keyword">await</span> <span class="keyword">import</span>(<span class="string">&quot;./A&quot;</span>);    <span class="keyword">const</span> a = <span class="keyword">new</span> <span class="title function_">A</span>();    <span class="keyword">return</span> <span class="string">`Hello from B and <span class="subst">$&#123;a.greet()&#125;</span>`</span>;  &#125;&#125;</code></pre><p>동적 임포트를 사용하여 순환참조 문제를 해결할 수 있습니다.</p><h4 id="3-모듈-리팩토링"><a href="#3-모듈-리팩토링" class="headerlink" title="3. 모듈 리팩토링"></a>3. 모듈 리팩토링</h4><p>모듈을 리팩토링하여 순환참조 문제를 해결할 수 있습니다. 하나의 모듈로 합치거나, 새로운 모듈을 만들어 공통 기능을 분리합니다.</p><p><strong>예제: 공통 모듈로 분리</strong></p><p><strong>Common.ts</strong></p><pre><code class="highlight typescript"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Common</span> &#123;  <span class="title function_">greetFromA</span>(<span class="params"></span>) &#123;    <span class="keyword">return</span> <span class="string">&quot;Hello from A&quot;</span>;  &#125;  <span class="title function_">greetFromB</span>(<span class="params"></span>) &#123;    <span class="keyword">return</span> <span class="string">&quot;Hello from B&quot;</span>;  &#125;&#125;</code></pre><p><strong>A.ts</strong></p><pre><code class="highlight typescript"><span class="keyword">import</span> &#123; <span class="title class_">Common</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./Common&quot;</span>;<span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;  <span class="attr">common</span>: <span class="title class_">Common</span>;  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;    <span class="variable language_">this</span>.<span class="property">common</span> = <span class="keyword">new</span> <span class="title class_">Common</span>();  &#125;  <span class="title function_">greet</span>(<span class="params"></span>) &#123;    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">common</span>.<span class="title function_">greetFromA</span>();  &#125;&#125;</code></pre><p><strong>B.ts</strong></p><pre><code class="highlight typescript"><span class="keyword">import</span> &#123; <span class="title class_">Common</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./Common&quot;</span>;<span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">B</span> &#123;  <span class="attr">common</span>: <span class="title class_">Common</span>;  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;    <span class="variable language_">this</span>.<span class="property">common</span> = <span class="keyword">new</span> <span class="title class_">Common</span>();  &#125;  <span class="title function_">greet</span>(<span class="params"></span>) &#123;    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">common</span>.<span class="title function_">greetFromB</span>();  &#125;&#125;</code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 TypeScript에서 순환참조 문제를 해결하는 다양한 방법에 대해 알아보았습니다.<br>인터페이스를 도입하거나, 동적 임포트를 사용하거나, 모듈을 리팩토링하는 등 여러 가지 방법을 통해 순환참조 문제를 효과적으로 해결할 수 있습니다.<br>이러한 방법을 통해 코드의 의존성을 줄이고, 더 나은 설계를 할 수 있습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> TS_트러블슈팅 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 웹 워커(Web Workers)를 사용하여 멀티스레딩 구현하기</title>
      <link href="/javascript/special/13/"/>
      <url>/javascript/special/13/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-웹-워커-Web-Workers-를-사용하여-멀티스레딩-구현하기"><a href="#JavaScript-웹-워커-Web-Workers-를-사용하여-멀티스레딩-구현하기" class="headerlink" title="JavaScript 웹 워커(Web Workers)를 사용하여 멀티스레딩 구현하기"></a>JavaScript 웹 워커(Web Workers)를 사용하여 멀티스레딩 구현하기</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!</p><p>JavaScript는 기본적으로 싱글 스레드 언어이지만, 웹 워커(Web Workers)를 사용하면 멀티스레딩을 구현할 수 있습니다.<br>웹 워커는 무거운 작업을 백그라운드에서 실행하여 메인 스레드의 성능을 향상시킬 수 있습니다. 이번 글에서는 웹 워커의 개념, 웹 워커를 사용하여 멀티스레딩을 구현하는 방법, 그리고 웹 워커의 활용 사례를 설명합니다.</p><h2 id="웹-워커의-개념"><a href="#웹-워커의-개념" class="headerlink" title="웹 워커의 개념"></a>웹 워커의 개념</h2><p>웹 워커(Web Workers)는 백그라운드 스레드에서 JavaScript 코드를 실행할 수 있도록 해주는 브라우저 기능입니다. 이를 통해 CPU 집약적인 작업을 메인 스레드에서 분리하여 실행할 수 있으며, UI의 응답성을 유지할 수 있습니다. 웹 워커는 메인 스레드와 분리된 환경에서 동작하기 때문에 DOM에 직접 접근할 수 없지만, 메인 스레드와 메시지(Message) 인터페이스를 통해 통신할 수 있습니다.</p><h2 id="웹-워커-사용하여-멀티스레딩-구현하기"><a href="#웹-워커-사용하여-멀티스레딩-구현하기" class="headerlink" title="웹 워커 사용하여 멀티스레딩 구현하기"></a>웹 워커 사용하여 멀티스레딩 구현하기</h2><h3 id="기본-웹-워커-생성-및-사용"><a href="#기본-웹-워커-생성-및-사용" class="headerlink" title="기본 웹 워커 생성 및 사용"></a>기본 웹 워커 생성 및 사용</h3><p>웹 워커를 생성하고 사용하는 기본 방법을 살펴보겠습니다.</p><ol><li><p><strong>웹 워커 스크립트 작성</strong></p><p>먼저, 웹 워커에서 실행할 스크립트를 작성합니다. 이 스크립트는 별도의 파일로 저장됩니다.</p><pre><code class="highlight javascript"><span class="comment">// worker.js</span>self.<span class="property">onmessage</span> = <span class="keyword">function</span> (<span class="params">event</span>) &#123;  <span class="keyword">const</span> data = event.<span class="property">data</span>;  <span class="keyword">let</span> result = <span class="number">0</span>;  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; data; i++) &#123;    result += i;  &#125;  self.<span class="title function_">postMessage</span>(result);&#125;;</code></pre></li><li><p><strong>웹 워커 생성 및 메시지 전송</strong></p><p>웹 워커를 생성하고, 메인 스레드에서 메시지를 전송하는 방법입니다.</p><pre><code class="highlight javascript"><span class="comment">// main.js</span><span class="keyword">const</span> worker = <span class="keyword">new</span> <span class="title class_">Worker</span>(<span class="string">&quot;worker.js&quot;</span>);worker.<span class="property">onmessage</span> = <span class="keyword">function</span> (<span class="params">event</span>) &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Result from worker:&quot;</span>, event.<span class="property">data</span>);&#125;;worker.<span class="title function_">postMessage</span>(<span class="number">1000000</span>);</code></pre></li></ol><p>위 예제에서 <code>worker.js</code>는 웹 워커 스크립트로, 메인 스레드에서 전달받은 숫자의 합을 계산하고 결과를 메인 스레드로 전송합니다. <code>main.js</code>는 웹 워커를 생성하고, 메시지를 전송하여 웹 워커의 결과를 출력합니다.</p><h3 id="웹-워커-활용-사례"><a href="#웹-워커-활용-사례" class="headerlink" title="웹 워커 활용 사례"></a>웹 워커 활용 사례</h3><p>웹 워커는 다양한 상황에서 활용될 수 있습니다. 몇 가지 일반적인 사례를 살펴보겠습니다.</p><h3 id="1-대규모-데이터-처리"><a href="#1-대규모-데이터-처리" class="headerlink" title="1. 대규모 데이터 처리"></a>1. 대규모 데이터 처리</h3><p>웹 워커는 대규모 데이터 처리를 백그라운드에서 실행할 때 유용합니다. 예를 들어, 이미지 처리, 데이터 분석 등의 작업을 웹 워커를 사용하여 메인 스레드에서 분리할 수 있습니다.</p><pre><code class="highlight javascript"><span class="comment">// imageWorker.js</span>self.<span class="property">onmessage</span> = <span class="keyword">function</span> (<span class="params">event</span>) &#123;  <span class="keyword">const</span> imageData = event.<span class="property">data</span>;  <span class="comment">// 이미지 처리 작업</span>  self.<span class="title function_">postMessage</span>(processedData);&#125;;<span class="comment">// main.js</span><span class="keyword">const</span> imageWorker = <span class="keyword">new</span> <span class="title class_">Worker</span>(<span class="string">&quot;imageWorker.js&quot;</span>);imageWorker.<span class="property">onmessage</span> = <span class="keyword">function</span> (<span class="params">event</span>) &#123;  <span class="title function_">displayImage</span>(event.<span class="property">data</span>);&#125;;imageWorker.<span class="title function_">postMessage</span>(imageData);</code></pre><h3 id="2-웹소켓-WebSockets-과의-통신"><a href="#2-웹소켓-WebSockets-과의-통신" class="headerlink" title="2. 웹소켓(WebSockets)과의 통신"></a>2. 웹소켓(WebSockets)과의 통신</h3><p>웹 워커는 웹소켓을 사용하여 실시간 데이터를 처리하는 데에도 사용할 수 있습니다. 웹 워커를 통해 웹소켓 메시지를 백그라운드에서 처리하여 메인 스레드의 부하를 줄일 수 있습니다.</p><pre><code class="highlight javascript"><span class="comment">// socketWorker.js</span>self.<span class="property">onmessage</span> = <span class="keyword">function</span> (<span class="params">event</span>) &#123;  <span class="keyword">const</span> socket = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">&quot;ws://example.com/socket&quot;</span>);  socket.<span class="property">onmessage</span> = <span class="keyword">function</span> (<span class="params">event</span>) &#123;    self.<span class="title function_">postMessage</span>(event.<span class="property">data</span>);  &#125;;  socket.<span class="title function_">send</span>(event.<span class="property">data</span>);&#125;;<span class="comment">// main.js</span><span class="keyword">const</span> socketWorker = <span class="keyword">new</span> <span class="title class_">Worker</span>(<span class="string">&quot;socketWorker.js&quot;</span>);socketWorker.<span class="property">onmessage</span> = <span class="keyword">function</span> (<span class="params">event</span>) &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Message from WebSocket:&quot;</span>, event.<span class="property">data</span>);&#125;;socketWorker.<span class="title function_">postMessage</span>(<span class="string">&quot;Hello WebSocket&quot;</span>);</code></pre><h3 id="3-반복적인-계산-작업"><a href="#3-반복적인-계산-작업" class="headerlink" title="3. 반복적인 계산 작업"></a>3. 반복적인 계산 작업</h3><p>반복적인 계산 작업도 웹 워커를 통해 처리할 수 있습니다. 예를 들어, 피보나치 수열 계산과 같은 작업을 웹 워커로 실행할 수 있습니다.</p><pre><code class="highlight javascript"><span class="comment">// fibonacciWorker.js</span>self.<span class="property">onmessage</span> = <span class="keyword">function</span> (<span class="params">event</span>) &#123;  <span class="keyword">const</span> n = event.<span class="property">data</span>;  <span class="keyword">const</span> result = <span class="title function_">fibonacci</span>(n);  self.<span class="title function_">postMessage</span>(result);&#125;;<span class="keyword">function</span> <span class="title function_">fibonacci</span>(<span class="params">n</span>) &#123;  <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) <span class="keyword">return</span> n;  <span class="keyword">return</span> <span class="title function_">fibonacci</span>(n - <span class="number">1</span>) + <span class="title function_">fibonacci</span>(n - <span class="number">2</span>);&#125;<span class="comment">// main.js</span><span class="keyword">const</span> fibonacciWorker = <span class="keyword">new</span> <span class="title class_">Worker</span>(<span class="string">&quot;fibonacciWorker.js&quot;</span>);fibonacciWorker.<span class="property">onmessage</span> = <span class="keyword">function</span> (<span class="params">event</span>) &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Fibonacci result:&quot;</span>, event.<span class="property">data</span>);&#125;;fibonacciWorker.<span class="title function_">postMessage</span>(<span class="number">30</span>);</code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>웹 워커(Web Workers)는 JavaScript에서 멀티스레딩을 구현하여 성능을 향상시킬 수 있는 강력한 도구입니다. 웹 워커를 사용하면 대규모 데이터 처리, 실시간 통신, 반복적인 계산 작업 등을 백그라운드에서 실행하여 메인 스레드의 부하를 줄이고 UI의 응답성을 유지할 수 있습니다. 웹 워커의 개념과 활용 방법을 잘 이해하고, 적절한 상황에서 웹 워커를 사용하여 효율적인 JavaScript 코드를 작성해 보세요!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> JS_필살기 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Nginx를 사용한 고가용성 설정 및 Node.js 서버 적용 방법</title>
      <link href="/web/ha/4/"/>
      <url>/web/ha/4/</url>
      
        <content type="html"><![CDATA[<h1 id="Nginx를-사용한-고가용성-설정-및-Node-js-서버-적용-방법"><a href="#Nginx를-사용한-고가용성-설정-및-Node-js-서버-적용-방법" class="headerlink" title="Nginx를 사용한 고가용성 설정 및 Node.js 서버 적용 방법"></a>Nginx를 사용한 고가용성 설정 및 Node.js 서버 적용 방법</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 Nginx의 개념과 역할을 이해하고, 이를 Node.js 서버에 적용하여 고가용성을 구현하는 방법에 대해 알아보겠습니다.<br>Nginx를 사용하여 로드 밸런싱을 설정하고, 여러 Node.js 인스턴스 간의 트래픽을 효과적으로 분산시키는 방법을 알아보겠습니다.</p><h2 id="1-Nginx-개요"><a href="#1-Nginx-개요" class="headerlink" title="1. Nginx 개요"></a>1. Nginx 개요</h2><h3 id="Nginx란-무엇인가"><a href="#Nginx란-무엇인가" class="headerlink" title="Nginx란 무엇인가?"></a>Nginx란 무엇인가?</h3><p>Nginx는 웹 서버, 리버스 프록시 서버, 로드 밸런서 등 다양한 역할을 수행할 수 있는 오픈 소스 소프트웨어입니다. 주로 높은 성능과 확장성을 제공하기 위해 사용됩니다.</p><h3 id="Nginx의-역할과-중요성"><a href="#Nginx의-역할과-중요성" class="headerlink" title="Nginx의 역할과 중요성"></a>Nginx의 역할과 중요성</h3><ul><li><strong>웹 서버</strong>: 정적 파일 제공 및 HTTP 요청 처리</li><li><strong>리버스 프록시</strong>: 클라이언트의 요청을 백엔드 서버로 전달</li><li><strong>로드 밸런서</strong>: 여러 서버에 트래픽을 분산시켜 고가용성 제공</li><li><strong>보안 강화</strong>: SSL&#x2F;TLS 설정을 통해 보안 강화</li></ul><h2 id="2-Nginx-설치-및-기본-설정"><a href="#2-Nginx-설치-및-기본-설정" class="headerlink" title="2. Nginx 설치 및 기본 설정"></a>2. Nginx 설치 및 기본 설정</h2><h3 id="Nginx-설치-방법"><a href="#Nginx-설치-방법" class="headerlink" title="Nginx 설치 방법"></a>Nginx 설치 방법</h3><p>Nginx는 다양한 운영 체제에서 설치할 수 있습니다. 여기서는 Ubuntu를 예로 들어 알아보겠습니다.</p><pre><code class="highlight bash"><span class="built_in">sudo</span> apt update<span class="built_in">sudo</span> apt install nginx</code></pre><h3 id="Nginx-기본-설정-파일"><a href="#Nginx-기본-설정-파일" class="headerlink" title="Nginx 기본 설정 파일"></a>Nginx 기본 설정 파일</h3><p>Nginx의 기본 설정 파일은 <code>/etc/nginx/nginx.conf</code>에 위치합니다. 기본 설정 파일을 열어보면 전체적인 Nginx의 동작을 정의하는 내용을 확인할 수 있습니다.</p><pre><code class="highlight bash"><span class="built_in">sudo</span> nano /etc/nginx/nginx.conf</code></pre><h2 id="3-Node-js-서버-설정"><a href="#3-Node-js-서버-설정" class="headerlink" title="3. Node.js 서버 설정"></a>3. Node.js 서버 설정</h2><h3 id="Node-js-서버-코드-작성"><a href="#Node-js-서버-코드-작성" class="headerlink" title="Node.js 서버 코드 작성"></a>Node.js 서버 코드 작성</h3><p>먼저, 간단한 Node.js 서버 코드를 작성합니다.</p><p><strong>app.js</strong></p><pre><code class="highlight javascript"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);<span class="keyword">const</span> app = <span class="title function_">express</span>();<span class="keyword">const</span> port = process.<span class="property">env</span>.<span class="property">PORT</span> || <span class="number">3000</span>;app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  res.<span class="title function_">send</span>(<span class="string">&quot;Hello from Node.js!&quot;</span>);&#125;);app.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Server is running on port <span class="subst">$&#123;port&#125;</span>`</span>);&#125;);</code></pre><h3 id="Node-js-서버-실행"><a href="#Node-js-서버-실행" class="headerlink" title="Node.js 서버 실행"></a>Node.js 서버 실행</h3><p>Node.js 서버를 실행하여 동작을 확인합니다.</p><pre><code class="highlight bash">node app.js</code></pre><h2 id="4-Nginx와-Node-js-서버-연동"><a href="#4-Nginx와-Node-js-서버-연동" class="headerlink" title="4. Nginx와 Node.js 서버 연동"></a>4. Nginx와 Node.js 서버 연동</h2><h3 id="Nginx-설정-파일-수정"><a href="#Nginx-설정-파일-수정" class="headerlink" title="Nginx 설정 파일 수정"></a>Nginx 설정 파일 수정</h3><p>Nginx 설정 파일을 수정하여 Node.js 서버와 연동합니다. 여기서는 <code>/etc/nginx/sites-available/default</code> 파일을 수정합니다.</p><pre><code class="highlight bash"><span class="built_in">sudo</span> nano /etc/nginx/sites-available/default</code></pre><p><strong>Nginx 설정 예제</strong></p><pre><code class="highlight nginx"><span class="section">upstream</span> nodejs &#123;  <span class="attribute">server</span> <span class="number">127.0.0.1:3000</span>;  <span class="attribute">server</span> <span class="number">127.0.0.1:3001</span>;  <span class="attribute">server</span> <span class="number">127.0.0.1:3002</span>;&#125;<span class="section">server</span> &#123;  <span class="attribute">listen</span> <span class="number">80</span>;  <span class="section">location</span> / &#123;    <span class="attribute">proxy_pass</span> http://nodejs;    <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;    <span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;    <span class="attribute">proxy_set_header</span> Connection <span class="string">&#x27;upgrade&#x27;</span>;    <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;    <span class="attribute">proxy_cache_bypass</span> <span class="variable">$http_upgrade</span>;  &#125;&#125;</code></pre><h3 id="Nginx-설정-적용-및-재시작"><a href="#Nginx-설정-적용-및-재시작" class="headerlink" title="Nginx 설정 적용 및 재시작"></a>Nginx 설정 적용 및 재시작</h3><p>Nginx 설정을 적용하고 서버를 재시작합니다.</p><pre><code class="highlight bash"><span class="built_in">sudo</span> nginx -t<span class="built_in">sudo</span> systemctl restart nginx</code></pre><h2 id="5-고가용성-설정"><a href="#5-고가용성-설정" class="headerlink" title="5. 고가용성 설정"></a>5. 고가용성 설정</h2><h3 id="Node-js-서버-멀티-인스턴스-실행"><a href="#Node-js-서버-멀티-인스턴스-실행" class="headerlink" title="Node.js 서버 멀티 인스턴스 실행"></a>Node.js 서버 멀티 인스턴스 실행</h3><p>Node.js 서버를 여러 포트에서 실행하여 Nginx의 로드 밸런싱 기능을 테스트합니다.</p><p><strong>ecosystem.config.js</strong></p><pre><code class="highlight javascript"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;  <span class="attr">apps</span>: [    &#123;      <span class="attr">name</span>: <span class="string">&quot;app-3000&quot;</span>,      <span class="attr">script</span>: <span class="string">&quot;./app.js&quot;</span>,      <span class="attr">env</span>: &#123;        <span class="attr">PORT</span>: <span class="number">3000</span>,      &#125;,    &#125;,    &#123;      <span class="attr">name</span>: <span class="string">&quot;app-3001&quot;</span>,      <span class="attr">script</span>: <span class="string">&quot;./app.js&quot;</span>,      <span class="attr">env</span>: &#123;        <span class="attr">PORT</span>: <span class="number">3001</span>,      &#125;,    &#125;,    &#123;      <span class="attr">name</span>: <span class="string">&quot;app-3002&quot;</span>,      <span class="attr">script</span>: <span class="string">&quot;./app.js&quot;</span>,      <span class="attr">env</span>: &#123;        <span class="attr">PORT</span>: <span class="number">3002</span>,      &#125;,    &#125;,  ],&#125;;</code></pre><p>PM2를 사용하여 여러 인스턴스를 실행합니다.</p><pre><code class="highlight bash">pm2 start ecosystem.config.js</code></pre><h3 id="Nginx-로드-밸런싱-테스트"><a href="#Nginx-로드-밸런싱-테스트" class="headerlink" title="Nginx 로드 밸런싱 테스트"></a>Nginx 로드 밸런싱 테스트</h3><p>브라우저 또는 <code>curl</code> 명령어를 사용하여 Nginx가 Node.js 서버로 요청을 올바르게 분산시키는지 확인합니다.</p><pre><code class="highlight bash">curl http://localhost</code></pre><h2 id="6-고급-설정-SSL-TLS"><a href="#6-고급-설정-SSL-TLS" class="headerlink" title="6. 고급 설정 (SSL&#x2F;TLS)"></a>6. 고급 설정 (SSL&#x2F;TLS)</h2><p>Nginx를 사용하여 SSL&#x2F;TLS 설정을 추가하면 보안이 강화된 연결을 제공할 수 있습니다.</p><h3 id="SSL-인증서-설치"><a href="#SSL-인증서-설치" class="headerlink" title="SSL 인증서 설치"></a>SSL 인증서 설치</h3><p>Let’s Encrypt를 사용하여 무료 SSL 인증서를 설치할 수 있습니다.</p><pre><code class="highlight bash"><span class="built_in">sudo</span> apt install certbot python3-certbot-nginx<span class="built_in">sudo</span> certbot --nginx -d yourdomain.com</code></pre><h3 id="SSL-설정-추가"><a href="#SSL-설정-추가" class="headerlink" title="SSL 설정 추가"></a>SSL 설정 추가</h3><p>Nginx 설정 파일에 SSL 설정을 추가합니다.</p><p><strong>Nginx 설정 예제</strong></p><pre><code class="highlight nginx"><span class="section">server</span> &#123;  <span class="attribute">listen</span> <span class="number">80</span>;  <span class="attribute">listen</span> [::]:<span class="number">80</span>;  <span class="attribute">server_name</span> yourdomain.com;  <span class="section">location</span> / &#123;    <span class="attribute">proxy_pass</span> http://nodejs;    <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;    <span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;    <span class="attribute">proxy_set_header</span> Connection <span class="string">&#x27;upgrade&#x27;</span>;    <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;    <span class="attribute">proxy_cache_bypass</span> <span class="variable">$http_upgrade</span>;  &#125;  <span class="attribute">listen</span> <span class="number">443</span> ssl; <span class="comment"># managed by Certbot</span>  <span class="attribute">ssl_certificate</span> /etc/letsencrypt/live/yourdomain.com/fullchain.pem; <span class="comment"># managed by Certbot</span>  <span class="attribute">ssl_certificate_key</span> /etc/letsencrypt/live/yourdomain.com/privkey.pem; <span class="comment"># managed by Certbot</span>&#125;</code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 Nginx의 개념과 역할, 설치 방법, 기본 설정, 그리고 Node.js 서버와의 연동을 통한 고가용성 구현 방법에 대해 알아보았습니다. Nginx를 통해 트래픽을 분산시키고, 여러 Node.js 인스턴스를 효과적으로 관리할 수 있습니다. 다음 시간에는 또 다른 유용한 고가용성 설정 방법을 소개하겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> web_고가용성 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Javascript 프로미스 체이닝(Promise Chaining)</title>
      <link href="/javascript/detail/23/"/>
      <url>/javascript/detail/23/</url>
      
        <content type="html"><![CDATA[<h1 id="Javascript-프로미스-체이닝-Promise-Chaining"><a href="#Javascript-프로미스-체이닝-Promise-Chaining" class="headerlink" title="Javascript 프로미스 체이닝(Promise Chaining)"></a>Javascript 프로미스 체이닝(Promise Chaining)</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 JavaScript에서 프로미스 체이닝을 사용하여 비동기 작업을 순차적으로 처리하는 방법에 대해 알아보겠습니다. 프로미스 체이닝은 비동기 코드를 더 간결하고 가독성 있게 작성할 수 있도록 도와줍니다.</p><h2 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h2><h3 id="프로미스-체이닝이란"><a href="#프로미스-체이닝이란" class="headerlink" title="프로미스 체이닝이란?"></a>프로미스 체이닝이란?</h3><p>프로미스 체이닝(Promise Chaining)은 여러 개의 프라미스를 순차적으로 실행하는 기법입니다. 각 프라미스의 결과를 다음 프라미스로 전달하여 비동기 작업을 연속적으로 처리할 수 있습니다.</p><h2 id="활용"><a href="#활용" class="headerlink" title="활용"></a>활용</h2><h3 id="프로미스-체이닝-사용-예제"><a href="#프로미스-체이닝-사용-예제" class="headerlink" title="프로미스 체이닝 사용 예제"></a>프로미스 체이닝 사용 예제</h3><p><strong>예제 1: 기본 프로미스 체이닝</strong></p><pre><code class="highlight javascript"><span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params"></span>) &#123;  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="string">&quot;Data fetched&quot;</span>), <span class="number">1000</span>);  &#125;);&#125;<span class="keyword">function</span> <span class="title function_">processData</span>(<span class="params">data</span>) &#123;  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="string">`<span class="subst">$&#123;data&#125;</span> and processed`</span>), <span class="number">1000</span>);  &#125;);&#125;<span class="keyword">function</span> <span class="title function_">displayData</span>(<span class="params">data</span>) &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(data);&#125;<span class="title function_">fetchData</span>()  .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> <span class="title function_">processData</span>(data))  .<span class="title function_">then</span>(<span class="function">(<span class="params">processedData</span>) =&gt;</span> <span class="title function_">displayData</span>(processedData))  .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(error));</code></pre><p><strong>예제 2: 프로미스 체이닝과 에러 처리</strong></p><pre><code class="highlight javascript"><span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params"></span>) &#123;  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="string">&quot;Data fetched&quot;</span>), <span class="number">1000</span>);  &#125;);&#125;<span class="keyword">function</span> <span class="title function_">processData</span>(<span class="params">data</span>) &#123;  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">reject</span>(<span class="string">&quot;Error in processing&quot;</span>), <span class="number">1000</span>);  &#125;);&#125;<span class="keyword">function</span> <span class="title function_">displayData</span>(<span class="params">data</span>) &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(data);&#125;<span class="title function_">fetchData</span>()  .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> <span class="title function_">processData</span>(data))  .<span class="title function_">then</span>(<span class="function">(<span class="params">processedData</span>) =&gt;</span> <span class="title function_">displayData</span>(processedData))  .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(error)); <span class="comment">// Error in processing</span></code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 프로미스 체이닝의 개념과 사용 예제에 대해 알아보았습니다. 프로미스 체이닝을 사용하면 비동기 작업을 순차적으로 처리할 수 있으며, 코드의 가독성을 높일 수 있습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> JS_디테일 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PM2와 dotenv를 사용한 Express 서버 환경 설정 및 관리</title>
      <link href="/web/ha/3/"/>
      <url>/web/ha/3/</url>
      
        <content type="html"><![CDATA[<h1 id="PM2와-dotenv를-사용한-Express-서버-환경-설정-및-관리"><a href="#PM2와-dotenv를-사용한-Express-서버-환경-설정-및-관리" class="headerlink" title="PM2와 dotenv를 사용한 Express 서버 환경 설정 및 관리"></a>PM2와 dotenv를 사용한 Express 서버 환경 설정 및 관리</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 PM2와 dotenv를 사용하여 로컬, 개발, 운영 환경에서 Express 서버를 설정하고 관리하는 방법을 알아보겠습니다.</p><h2 id="1-PM2-및-dotenv-설치"><a href="#1-PM2-및-dotenv-설치" class="headerlink" title="1. PM2 및 dotenv 설치"></a>1. PM2 및 dotenv 설치</h2><p>먼저, PM2와 dotenv를 설치합니다.</p><pre><code class="highlight bash">npm install pm2 -gnpm install dotenv</code></pre><h2 id="2-환경-변수-파일-설정"><a href="#2-환경-변수-파일-설정" class="headerlink" title="2. 환경 변수 파일 설정"></a>2. 환경 변수 파일 설정</h2><p>프로젝트 루트에 <code>.env</code> 파일을 생성하고 각 환경에 대한 환경 변수를 설정합니다.</p><p><strong>.env</strong></p><pre><code class="highlight env">PORT=3000ENV=local</code></pre><p><strong>.env.development</strong></p><pre><code class="highlight env">PORT=3001ENV=development</code></pre><p><strong>.env.production</strong></p><pre><code class="highlight env">PORT=3002ENV=production</code></pre><h2 id="3-server-js-파일-수정"><a href="#3-server-js-파일-수정" class="headerlink" title="3. server.js 파일 수정"></a>3. server.js 파일 수정</h2><p><code>dotenv</code>를 사용하여 환경 변수를 로드하도록 <code>server.js</code>를 수정합니다.</p><p><strong>server.js</strong></p><pre><code class="highlight javascript"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);<span class="keyword">const</span> dotenv = <span class="built_in">require</span>(<span class="string">&quot;dotenv&quot;</span>);<span class="comment">// 환경 변수 로드</span>dotenv.<span class="title function_">config</span>(&#123;  <span class="attr">path</span>:    process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&quot;production&quot;</span>      ? <span class="string">&quot;.env.production&quot;</span>      : process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&quot;development&quot;</span>      ? <span class="string">&quot;.env.development&quot;</span>      : <span class="string">&quot;.env&quot;</span>,&#125;);<span class="keyword">const</span> app = <span class="title function_">express</span>();<span class="keyword">const</span> port = process.<span class="property">env</span>.<span class="property">PORT</span> || <span class="number">3000</span>;app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  res.<span class="title function_">send</span>(<span class="string">`Hello World! Running in <span class="subst">$&#123;process.env.ENV&#125;</span> mode`</span>);&#125;);app.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Server is running on port <span class="subst">$&#123;port&#125;</span>`</span>);&#125;);</code></pre><h2 id="4-PM2-설정-파일-생성"><a href="#4-PM2-설정-파일-생성" class="headerlink" title="4. PM2 설정 파일 생성"></a>4. PM2 설정 파일 생성</h2><p>PM2를 사용하여 각 환경에 대한 설정 파일을 만듭니다. 인스턴스 수를 함께 설정하여 클러스터 모드를 사용할 수 있도록 합니다.</p><p><strong>ecosystem.config.js</strong></p><pre><code class="highlight javascript"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;  <span class="attr">apps</span>: [    &#123;      <span class="attr">name</span>: <span class="string">&quot;app-local&quot;</span>,      <span class="attr">script</span>: <span class="string">&quot;./server.js&quot;</span>,      <span class="attr">instances</span>: <span class="number">2</span>, <span class="comment">// 로컬 환경에서 2개의 인스턴스를 사용</span>      <span class="attr">env</span>: &#123;        <span class="attr">NODE_ENV</span>: <span class="string">&quot;local&quot;</span>,      &#125;,    &#125;,    &#123;      <span class="attr">name</span>: <span class="string">&quot;app-development&quot;</span>,      <span class="attr">script</span>: <span class="string">&quot;./server.js&quot;</span>,      <span class="attr">instances</span>: <span class="number">4</span>, <span class="comment">// 개발 환경에서 4개의 인스턴스를 사용</span>      <span class="attr">env</span>: &#123;        <span class="attr">NODE_ENV</span>: <span class="string">&quot;development&quot;</span>,      &#125;,    &#125;,    &#123;      <span class="attr">name</span>: <span class="string">&quot;app-production&quot;</span>,      <span class="attr">script</span>: <span class="string">&quot;./server.js&quot;</span>,      <span class="attr">instances</span>: <span class="string">&quot;max&quot;</span>, <span class="comment">// 운영 환경에서 모든 CPU 코어를 사용</span>      <span class="attr">env</span>: &#123;        <span class="attr">NODE_ENV</span>: <span class="string">&quot;production&quot;</span>,      &#125;,    &#125;,  ],&#125;;</code></pre><h2 id="5-PM2-config를-사용하지-않고-인스턴스-생성-및-관리"><a href="#5-PM2-config를-사용하지-않고-인스턴스-생성-및-관리" class="headerlink" title="5. PM2 config를 사용하지 않고 인스턴스 생성 및 관리"></a>5. PM2 config를 사용하지 않고 인스턴스 생성 및 관리</h2><p>PM2를 사용하여 하나의 서버에서 여러 인스턴스를 생성하고 관리할 수 있습니다.<br>이를 통해 서버의 성능을 극대화하고, 애플리케이션의 가용성을 높일 수 있습니다.<br>먼저 하나의</p><h3 id="클러스터-모드-사용"><a href="#클러스터-모드-사용" class="headerlink" title="클러스터 모드 사용"></a>클러스터 모드 사용</h3><p>클러스터 모드를 사용하면 PM2가 여러 인스턴스를 자동으로 생성하여 로드 밸런싱을 제공합니다.</p><pre><code class="highlight bash">pm2 start server.js -i max</code></pre><p>이 명령어는 서버의 모든 CPU 코어를 활용하여 최대한 많은 인스턴스를 생성합니다.</p><h3 id="특정-인스턴스-수-지정"><a href="#특정-인스턴스-수-지정" class="headerlink" title="특정 인스턴스 수 지정"></a>특정 인스턴스 수 지정</h3><p>원하는 수의 인스턴스를 지정할 수도 있습니다.</p><pre><code class="highlight bash">pm2 start server.js -i 4</code></pre><p>이 명령어는 4개의 인스턴스를 생성합니다.</p><h3 id="인스턴스-관리"><a href="#인스턴스-관리" class="headerlink" title="인스턴스 관리"></a>인스턴스 관리</h3><ul><li><strong>리스트 조회</strong>: 현재 실행 중인 인스턴스 목록을 확인할 수 있습니다.</li></ul><pre><code class="highlight bash">pm2 list</code></pre><ul><li><strong>인스턴스 종료</strong>: 특정 인스턴스를 종료합니다.</li></ul><pre><code class="highlight bash">pm2 stop &lt;app_name|<span class="built_in">id</span>&gt;</code></pre><ul><li><strong>인스턴스 재시작</strong>: 특정 인스턴스를 재시작합니다.</li></ul><pre><code class="highlight bash">pm2 restart &lt;app_name|<span class="built_in">id</span>&gt;</code></pre><ul><li><strong>인스턴스 삭제</strong>: 특정 인스턴스를 삭제합니다.</li></ul><pre><code class="highlight bash">pm2 delete &lt;app_name|<span class="built_in">id</span>&gt;</code></pre><h2 id="6-PM2-config를-사용하여-애플리케이션-시작-및-관리"><a href="#6-PM2-config를-사용하여-애플리케이션-시작-및-관리" class="headerlink" title="6. PM2 config를 사용하여 애플리케이션 시작 및 관리"></a>6. PM2 config를 사용하여 애플리케이션 시작 및 관리</h2><p>PM2를 사용하여 애플리케이션을 시작하고 각 환경에서 실행합니다.</p><h3 id="로컬-환경에서-애플리케이션-시작"><a href="#로컬-환경에서-애플리케이션-시작" class="headerlink" title="로컬 환경에서 애플리케이션 시작"></a>로컬 환경에서 애플리케이션 시작</h3><pre><code class="highlight bash">pm2 start ecosystem.config.js --only app-local</code></pre><h3 id="개발-환경에서-애플리케이션-시작"><a href="#개발-환경에서-애플리케이션-시작" class="headerlink" title="개발 환경에서 애플리케이션 시작"></a>개발 환경에서 애플리케이션 시작</h3><pre><code class="highlight bash">pm2 start ecosystem.config.js --only app-development</code></pre><h3 id="운영-환경에서-애플리케이션-시작"><a href="#운영-환경에서-애플리케이션-시작" class="headerlink" title="운영 환경에서 애플리케이션 시작"></a>운영 환경에서 애플리케이션 시작</h3><pre><code class="highlight bash">pm2 start ecosystem.config.js --only app-production</code></pre><h2 id="7-PM2-관리-명령어"><a href="#7-PM2-관리-명령어" class="headerlink" title="7. PM2 관리 명령어"></a>7. PM2 관리 명령어</h2><p>애플리케이션 상태 확인:</p><pre><code class="highlight bash">pm2 status</code></pre><p>로그 확인:</p><pre><code class="highlight bash">pm2 logs</code></pre><p>애플리케이션 재시작:</p><pre><code class="highlight bash">pm2 restart app-localpm2 restart app-developmentpm2 restart app-production</code></pre><p>애플리케이션 종료:</p><pre><code class="highlight bash">pm2 stop app-localpm2 stop app-developmentpm2 stop app-production</code></pre><p>애플리케이션 삭제:</p><pre><code class="highlight bash">pm2 delete app-localpm2 delete app-developmentpm2 delete app-production</code></pre><h2 id="8-PM2를-사용하여-부팅-시-애플리케이션-자동-시작"><a href="#8-PM2를-사용하여-부팅-시-애플리케이션-자동-시작" class="headerlink" title="8. PM2를 사용하여 부팅 시 애플리케이션 자동 시작"></a>8. PM2를 사용하여 부팅 시 애플리케이션 자동 시작</h2><p>PM2를 사용하여 시스템 부팅 시 애플리케이션을 자동으로 시작할 수 있습니다.</p><pre><code class="highlight bash">pm2 startuppm2 save</code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이제 PM2와 dotenv를 사용하여 로컬, 개발, 운영 환경에서 Express 서버를 설정하고 관리하는 방법을 알아보았습니다. 필요에 따라 각 환경에서 애플리케이션을 시작하고 관리해보세요!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> web_고가용성 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Javascript 타입 검사(Type Checking)</title>
      <link href="/javascript/detail/22/"/>
      <url>/javascript/detail/22/</url>
      
        <content type="html"><![CDATA[<h1 id="Javascript-타입-검사-Type-Checking"><a href="#Javascript-타입-검사-Type-Checking" class="headerlink" title="Javascript 타입 검사(Type Checking)"></a>Javascript 타입 검사(Type Checking)</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 JavaScript에서 타입을 검사하는 다양한 방법에 대해 알아보겠습니다. 타입 검사는 코드를 더 안정적이고 예측 가능하게 만들어 주는 중요한 과정입니다.</p><h2 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h2><h3 id="JavaScript에서의-타입-검사"><a href="#JavaScript에서의-타입-검사" class="headerlink" title="JavaScript에서의 타입 검사"></a>JavaScript에서의 타입 검사</h3><p>JavaScript는 동적 타이핑 언어로, 변수의 타입이 런타임에 결정됩니다. 따라서 타입 검사를 통해 변수의 타입을 확인하고, 예상치 못한 동작을 방지할 수 있습니다.</p><h2 id="활용"><a href="#활용" class="headerlink" title="활용"></a>활용</h2><h3 id="타입-검사-방법"><a href="#타입-검사-방법" class="headerlink" title="타입 검사 방법"></a>타입 검사 방법</h3><p><strong>예제 1: <code>typeof</code>를 사용한 타입 검사</strong></p><pre><code class="highlight javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="number">42</span>); <span class="comment">// &quot;number&quot;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="string">&quot;hello&quot;</span>); <span class="comment">// &quot;string&quot;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">true</span>); <span class="comment">// &quot;boolean&quot;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">undefined</span>); <span class="comment">// &quot;undefined&quot;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> &#123; <span class="attr">name</span>: <span class="string">&quot;John&quot;</span> &#125;); <span class="comment">// &quot;object&quot;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">null</span>); <span class="comment">// &quot;object&quot; (주의: null의 타입은 &quot;object&quot;로 반환됩니다)</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;); <span class="comment">// &quot;function&quot;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="title class_">Symbol</span>(<span class="string">&quot;id&quot;</span>)); <span class="comment">// &quot;symbol&quot;</span></code></pre><p><strong>예제 2: <code>instanceof</code>를 사용한 객체 타입 검사</strong></p><pre><code class="highlight javascript"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;&#125;<span class="keyword">const</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>();<span class="variable language_">console</span>.<span class="title function_">log</span>(person <span class="keyword">instanceof</span> <span class="title class_">Person</span>); <span class="comment">// true</span><span class="variable language_">console</span>.<span class="title function_">log</span>([] <span class="keyword">instanceof</span> <span class="title class_">Array</span>); <span class="comment">// true</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="function">() =&gt;</span> &#123;&#125; <span class="keyword">instanceof</span> <span class="title class_">Function</span>); <span class="comment">// true</span></code></pre><p><strong>예제 3: 사용자 정의 타입 검사</strong></p><pre><code class="highlight javascript"><span class="keyword">function</span> <span class="title function_">isArray</span>(<span class="params">value</span>) &#123;  <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="title function_">isArray</span>(value);&#125;<span class="keyword">function</span> <span class="title function_">isFunction</span>(<span class="params">value</span>) &#123;  <span class="keyword">return</span> <span class="keyword">typeof</span> value === <span class="string">&quot;function&quot;</span>;&#125;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isArray</span>([])); <span class="comment">// true</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isFunction</span>(<span class="function">() =&gt;</span> &#123;&#125;)); <span class="comment">// true</span></code></pre><p><strong>예제 4: <code>Object.prototype.toString</code>을 사용한 타입 검사</strong></p><pre><code class="highlight javascript"><span class="keyword">function</span> <span class="title function_">getType</span>(<span class="params">value</span>) &#123;  <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(value).<span class="title function_">slice</span>(<span class="number">8</span>, -<span class="number">1</span>).<span class="title function_">toLowerCase</span>();&#125;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getType</span>(<span class="number">42</span>)); <span class="comment">// &quot;number&quot;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getType</span>(<span class="string">&quot;hello&quot;</span>)); <span class="comment">// &quot;string&quot;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getType</span>(<span class="literal">true</span>)); <span class="comment">// &quot;boolean&quot;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getType</span>([])); <span class="comment">// &quot;array&quot;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getType</span>(&#123;&#125;)); <span class="comment">// &quot;object&quot;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getType</span>(<span class="literal">null</span>)); <span class="comment">// &quot;null&quot;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getType</span>(<span class="literal">undefined</span>)); <span class="comment">// &quot;undefined&quot;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getType</span>(<span class="function">() =&gt;</span> &#123;&#125;)); <span class="comment">// &quot;function&quot;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getType</span>(<span class="title class_">Symbol</span>(<span class="string">&quot;id&quot;</span>))); <span class="comment">// &quot;symbol&quot;</span></code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 JavaScript에서 타입을 검사하는 다양한 방법에 대해 알아보았습니다. <code>typeof</code>, <code>instanceof</code>, 사용자 정의 타입 검사, <code>Object.prototype.toString</code> 등을 활용하여 타입 검사를 효율적으로 수행할 수 있습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> JS_디테일 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Node.js Cluster 모듈을 사용한 멀티 프로세싱</title>
      <link href="/web/ha/2/"/>
      <url>/web/ha/2/</url>
      
        <content type="html"><![CDATA[<h1 id="Node-js-Cluster-모듈을-사용한-멀티-프로세싱"><a href="#Node-js-Cluster-모듈을-사용한-멀티-프로세싱" class="headerlink" title="Node.js Cluster 모듈을 사용한 멀티 프로세싱"></a>Node.js Cluster 모듈을 사용한 멀티 프로세싱</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 Node.js의 기본 기능인 Cluster 모듈을 사용하여 멀티 프로세싱을 구현하는 방법에 대해 알아보겠습니다.<br>Cluster 모듈을 사용하면 하나의 인스턴스에서 여러 워커 프로세스를 생성하여 멀티코어 CPU를 최대한 활용할 수 있습니다.</p><h2 id="1-Cluster-모듈-개념"><a href="#1-Cluster-모듈-개념" class="headerlink" title="1. Cluster 모듈 개념"></a>1. Cluster 모듈 개념</h2><h3 id="Cluster-모듈이란"><a href="#Cluster-모듈이란" class="headerlink" title="Cluster 모듈이란?"></a>Cluster 모듈이란?</h3><p>Cluster 모듈은 Node.js 내장 모듈로, 여러 개의 워커 프로세스를 생성하여 멀티코어 CPU의 성능을 최대한 활용할 수 있게 해줍니다. 마스터 프로세스와 여러 워커 프로세스를 생성하여 로드 밸런싱을 제공합니다.</p><h3 id="Cluster-모듈의-장점"><a href="#Cluster-모듈의-장점" class="headerlink" title="Cluster 모듈의 장점"></a>Cluster 모듈의 장점</h3><ul><li><strong>CPU 활용 극대화</strong>: 여러 워커 프로세스를 생성하여 멀티코어 CPU의 성능을 최대한 활용할 수 있습니다.</li><li><strong>간편한 설정</strong>: Node.js 내장 모듈로, 간편하게 설정할 수 있습니다.</li><li><strong>프로세스 관리</strong>: 마스터 프로세스가 워커 프로세스를 관리하고, 워커 프로세스가 종료되면 자동으로 재시작할 수 있습니다.</li></ul><h2 id="2-Cluster-모듈-사용-예제"><a href="#2-Cluster-모듈-사용-예제" class="headerlink" title="2. Cluster 모듈 사용 예제"></a>2. Cluster 모듈 사용 예제</h2><h3 id="Cluster-모듈-기본-사용법"><a href="#Cluster-모듈-기본-사용법" class="headerlink" title="Cluster 모듈 기본 사용법"></a>Cluster 모듈 기본 사용법</h3><p>다음은 Cluster 모듈을 사용하여 기본적인 멀티 프로세싱을 구현하는 예제입니다.</p><p><strong>server.js</strong></p><pre><code class="highlight javascript"><span class="keyword">const</span> cluster = <span class="built_in">require</span>(<span class="string">&quot;cluster&quot;</span>);<span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);<span class="keyword">const</span> numCPUs = <span class="built_in">require</span>(<span class="string">&quot;os&quot;</span>).<span class="title function_">cpus</span>().<span class="property">length</span>;<span class="keyword">if</span> (cluster.<span class="property">isMaster</span>) &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Master <span class="subst">$&#123;process.pid&#125;</span> is running`</span>);  <span class="comment">// 워커 프로세스를 생성합니다.</span>  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; numCPUs; i++) &#123;    cluster.<span class="title function_">fork</span>();  &#125;  cluster.<span class="title function_">on</span>(<span class="string">&quot;exit&quot;</span>, <span class="function">(<span class="params">worker, code, signal</span>) =&gt;</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Worker <span class="subst">$&#123;worker.process.pid&#125;</span> died`</span>);    <span class="comment">// 워커 프로세스가 종료되면 새로 생성합니다.</span>    cluster.<span class="title function_">fork</span>();  &#125;);&#125; <span class="keyword">else</span> &#123;  <span class="comment">// 워커 프로세스가 HTTP 서버를 생성합니다.</span>  http    .<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;      res.<span class="title function_">writeHead</span>(<span class="number">200</span>);      res.<span class="title function_">end</span>(<span class="string">&quot;Hello, World!&quot;</span>);    &#125;)    .<span class="title function_">listen</span>(<span class="number">8000</span>);  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Worker <span class="subst">$&#123;process.pid&#125;</span> started`</span>);&#125;</code></pre><h3 id="설명"><a href="#설명" class="headerlink" title="설명"></a>설명</h3><ol><li><p><strong>마스터 프로세스와 워커 프로세스</strong>:</p><ul><li><code>cluster.isMaster</code>를 사용하여 현재 프로세스가 마스터 프로세스인지 확인합니다.</li><li>마스터 프로세스는 <code>numCPUs</code> 수만큼 워커 프로세스를 생성합니다.</li><li><code>cluster.on(&#39;exit&#39;)</code> 이벤트를 사용하여 워커 프로세스가 종료되면 새로운 워커 프로세스를 생성합니다.</li></ul></li><li><p><strong>워커 프로세스</strong>:</p><ul><li>워커 프로세스는 HTTP 서버를 생성하고, 클라이언트 요청을 처리합니다.</li><li>각 워커 프로세스는 독립적으로 실행되며, 마스터 프로세스가 로드 밸런싱을 제공합니다.</li></ul></li></ol><h2 id="3-로드-밸런싱-및-워커-프로세스-관리"><a href="#3-로드-밸런싱-및-워커-프로세스-관리" class="headerlink" title="3. 로드 밸런싱 및 워커 프로세스 관리"></a>3. 로드 밸런싱 및 워커 프로세스 관리</h2><h3 id="로드-밸런싱"><a href="#로드-밸런싱" class="headerlink" title="로드 밸런싱"></a>로드 밸런싱</h3><p>Cluster 모듈은 마스터 프로세스가 클라이언트의 요청을 받아 워커 프로세스에 분배하는 방식으로 로드 밸런싱을 제공합니다. 기본적으로 라운드 로빈 방식으로 요청을 분배합니다.</p><h3 id="워커-프로세스-관리"><a href="#워커-프로세스-관리" class="headerlink" title="워커 프로세스 관리"></a>워커 프로세스 관리</h3><ul><li><strong>워커 프로세스 생성</strong>: <code>cluster.fork()</code>를 사용하여 새로운 워커 프로세스를 생성합니다.</li><li><strong>워커 프로세스 종료 및 재시작</strong>: 워커 프로세스가 종료되면 <code>cluster.on(&#39;exit&#39;)</code> 이벤트를 사용하여 새로운 워커 프로세스를 생성합니다.</li><li><strong>워커 프로세스 상태 확인</strong>: <code>cluster.workers</code> 객체를 사용하여 현재 실행 중인 워커 프로세스의 상태를 확인할 수 있습니다.</li></ul><h3 id="워커-프로세스-상태-확인-예제"><a href="#워커-프로세스-상태-확인-예제" class="headerlink" title="워커 프로세스 상태 확인 예제"></a>워커 프로세스 상태 확인 예제</h3><p><strong>server.js</strong></p><pre><code class="highlight javascript"><span class="keyword">const</span> cluster = <span class="built_in">require</span>(<span class="string">&quot;cluster&quot;</span>);<span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);<span class="keyword">const</span> numCPUs = <span class="built_in">require</span>(<span class="string">&quot;os&quot;</span>).<span class="title function_">cpus</span>().<span class="property">length</span>;<span class="keyword">if</span> (cluster.<span class="property">isMaster</span>) &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Master <span class="subst">$&#123;process.pid&#125;</span> is running`</span>);  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; numCPUs; i++) &#123;    cluster.<span class="title function_">fork</span>();  &#125;  cluster.<span class="title function_">on</span>(<span class="string">&quot;exit&quot;</span>, <span class="function">(<span class="params">worker, code, signal</span>) =&gt;</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Worker <span class="subst">$&#123;worker.process.pid&#125;</span> died`</span>);    cluster.<span class="title function_">fork</span>();  &#125;);  <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;    <span class="keyword">const</span> workers = <span class="title class_">Object</span>.<span class="title function_">values</span>(cluster.<span class="property">workers</span>);    workers.<span class="title function_">forEach</span>(<span class="function">(<span class="params">worker</span>) =&gt;</span> &#123;      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Worker <span class="subst">$&#123;worker.process.pid&#125;</span> is alive`</span>);    &#125;);  &#125;, <span class="number">5000</span>); <span class="comment">// 5초마다 워커 프로세스 상태 확인</span>&#125; <span class="keyword">else</span> &#123;  http    .<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;      res.<span class="title function_">writeHead</span>(<span class="number">200</span>);      res.<span class="title function_">end</span>(<span class="string">&quot;Hello, World!&quot;</span>);    &#125;)    .<span class="title function_">listen</span>(<span class="number">8000</span>);  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Worker <span class="subst">$&#123;process.pid&#125;</span> started`</span>);&#125;</code></pre><h2 id="4-실습-예제"><a href="#4-실습-예제" class="headerlink" title="4. 실습 예제"></a>4. 실습 예제</h2><h3 id="실제-프로젝트에서-Cluster-모듈-사용"><a href="#실제-프로젝트에서-Cluster-모듈-사용" class="headerlink" title="실제 프로젝트에서 Cluster 모듈 사용"></a>실제 프로젝트에서 Cluster 모듈 사용</h3><ol><li><strong>프로젝트 생성</strong>: 새로운 디렉토리를 만들고 이동합니다.</li></ol><pre><code class="highlight bash"><span class="built_in">mkdir</span> my-cluster-project<span class="built_in">cd</span> my-cluster-project</code></pre><ol start="2"><li><strong>프로젝트 초기화</strong>: <code>npm init</code> 명령어를 사용하여 프로젝트를 초기화합니다.</li></ol><pre><code class="highlight bash">npm init -y</code></pre><ol start="3"><li><strong>필요한 패키지 설치</strong>: Express를 설치합니다.</li></ol><pre><code class="highlight bash">npm install express</code></pre><ol start="4"><li><strong>server.js 파일 생성 및 수정</strong>: Cluster 모듈을 사용하여 서버를 설정합니다.</li></ol><p><strong>server.js</strong></p><pre><code class="highlight javascript"><span class="keyword">const</span> cluster = <span class="built_in">require</span>(<span class="string">&quot;cluster&quot;</span>);<span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);<span class="keyword">const</span> numCPUs = <span class="built_in">require</span>(<span class="string">&quot;os&quot;</span>).<span class="title function_">cpus</span>().<span class="property">length</span>;<span class="keyword">if</span> (cluster.<span class="property">isMaster</span>) &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Master <span class="subst">$&#123;process.pid&#125;</span> is running`</span>);  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; numCPUs; i++) &#123;    cluster.<span class="title function_">fork</span>();  &#125;  cluster.<span class="title function_">on</span>(<span class="string">&quot;exit&quot;</span>, <span class="function">(<span class="params">worker, code, signal</span>) =&gt;</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Worker <span class="subst">$&#123;worker.process.pid&#125;</span> died`</span>);    cluster.<span class="title function_">fork</span>();  &#125;);&#125; <span class="keyword">else</span> &#123;  <span class="keyword">const</span> app = <span class="title function_">express</span>();  app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;    res.<span class="title function_">send</span>(<span class="string">`Hello World from worker <span class="subst">$&#123;process.pid&#125;</span>!`</span>);  &#125;);  <span class="keyword">const</span> port = process.<span class="property">env</span>.<span class="property">PORT</span> || <span class="number">3000</span>;  app.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Worker <span class="subst">$&#123;process.pid&#125;</span> is running on port <span class="subst">$&#123;port&#125;</span>`</span>);  &#125;);&#125;</code></pre><ol start="5"><li><strong>서버 실행</strong>: <code>node server.js</code> 명령어를 사용하여 서버를 실행합니다.</li></ol><pre><code class="highlight bash">node server.js</code></pre><ol start="6"><li><strong>서버 테스트</strong>: 브라우저 또는 <code>curl</code> 명령어를 사용하여 서버가 제대로 동작하는지 확인합니다.</li></ol><pre><code class="highlight bash">curl http://localhost:3000</code></pre><h3 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h3><p>이번 시간에는 Node.js의 Cluster 모듈을 사용하여 멀티 프로세싱을 구현하는 방법에 대해 알아보았습니다. Cluster 모듈을 사용하면 멀티코어 CPU의 성능을 최대한 활용할 수 있으며, 간편하게 설정할 수 있습니다.<br>다음 시간에는 또 다른 유용한 고가용성 설정 방법을 소개하겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> web_고가용성 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Javascript 함수 합성(Composition)</title>
      <link href="/javascript/detail/21/"/>
      <url>/javascript/detail/21/</url>
      
        <content type="html"><![CDATA[<h1 id="Javascript-함수-합성-Composition"><a href="#Javascript-함수-합성-Composition" class="headerlink" title="Javascript 함수 합성(Composition)"></a>Javascript 함수 합성(Composition)</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 JavaScript에서 함수 합성을 사용하여 여러 함수의 출력을 연쇄적으로 사용하는 방법에 대해 알아보겠습니다. 함수 합성은 함수형 프로그래밍의 중요한 개념 중 하나로, 코드의 재사용성과 가독성을 높일 수 있습니다.</p><h2 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h2><h3 id="함수-합성이란"><a href="#함수-합성이란" class="headerlink" title="함수 합성이란?"></a>함수 합성이란?</h3><p>함수 합성(Composition)은 여러 개의 함수를 결합하여 하나의 함수로 만드는 기법입니다. 함수 합성을 통해 작은 함수를 결합하여 더 복잡한 연산을 수행할 수 있습니다.</p><h2 id="활용"><a href="#활용" class="headerlink" title="활용"></a>활용</h2><h3 id="함수-합성-사용-예제"><a href="#함수-합성-사용-예제" class="headerlink" title="함수 합성 사용 예제"></a>함수 합성 사용 예제</h3><p><strong>예제 1: 기본 함수 합성</strong></p><pre><code class="highlight javascript"><span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params">a</span>) =&gt; <span class="function">(<span class="params">b</span>) =&gt;</span> a + b;<span class="keyword">const</span> <span class="title function_">multiply</span> = (<span class="params">a</span>) =&gt; <span class="function">(<span class="params">b</span>) =&gt;</span> a * b;<span class="keyword">const</span> addFive = <span class="title function_">add</span>(<span class="number">5</span>);<span class="keyword">const</span> multiplyByTwo = <span class="title function_">multiply</span>(<span class="number">2</span>);<span class="keyword">const</span> <span class="title function_">composedFunction</span> = (<span class="params">x</span>) =&gt; <span class="title function_">multiplyByTwo</span>(<span class="title function_">addFive</span>(x));<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">composedFunction</span>(<span class="number">3</span>)); <span class="comment">// (3 + 5) * 2 = 16</span></code></pre><p><strong>예제 2: 함수 합성 유틸리티</strong></p><pre><code class="highlight javascript"><span class="keyword">const</span> <span class="title function_">compose</span> =  (<span class="params">...functions</span>) =&gt;  <span class="function">(<span class="params">initialValue</span>) =&gt;</span>    functions.<span class="title function_">reduceRight</span>(<span class="function">(<span class="params">value, func</span>) =&gt;</span> <span class="title function_">func</span>(value), initialValue);<span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params">a</span>) =&gt; <span class="function">(<span class="params">b</span>) =&gt;</span> a + b;<span class="keyword">const</span> <span class="title function_">multiply</span> = (<span class="params">a</span>) =&gt; <span class="function">(<span class="params">b</span>) =&gt;</span> a * b;<span class="keyword">const</span> addFive = <span class="title function_">add</span>(<span class="number">5</span>);<span class="keyword">const</span> multiplyByTwo = <span class="title function_">multiply</span>(<span class="number">2</span>);<span class="keyword">const</span> composedFunction = <span class="title function_">compose</span>(multiplyByTwo, addFive);<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">composedFunction</span>(<span class="number">3</span>)); <span class="comment">// (3 + 5) * 2 = 16</span></code></pre><p><strong>예제 3: 파이프라인 유틸리티</strong></p><pre><code class="highlight javascript"><span class="keyword">const</span> <span class="title function_">pipe</span> =  (<span class="params">...functions</span>) =&gt;  <span class="function">(<span class="params">initialValue</span>) =&gt;</span>    functions.<span class="title function_">reduce</span>(<span class="function">(<span class="params">value, func</span>) =&gt;</span> <span class="title function_">func</span>(value), initialValue);<span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params">a</span>) =&gt; <span class="function">(<span class="params">b</span>) =&gt;</span> a + b;<span class="keyword">const</span> <span class="title function_">multiply</span> = (<span class="params">a</span>) =&gt; <span class="function">(<span class="params">b</span>) =&gt;</span> a * b;<span class="keyword">const</span> addFive = <span class="title function_">add</span>(<span class="number">5</span>);<span class="keyword">const</span> multiplyByTwo = <span class="title function_">multiply</span>(<span class="number">2</span>);<span class="keyword">const</span> pipedFunction = <span class="title function_">pipe</span>(addFive, multiplyByTwo);<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">pipedFunction</span>(<span class="number">3</span>)); <span class="comment">// (3 + 5) * 2 = 16</span></code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 함수 합성의 개념과 사용 예제에 대해 알아보았습니다. 함수 합성을 통해 작은 함수를 결합하여 더 복잡한 연산을 수행할 수 있으며, 코드의 재사용성과 가독성을 높일 수 있습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> JS_디테일 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Javascript 데코레이터(Decorators)</title>
      <link href="/javascript/detail/20/"/>
      <url>/javascript/detail/20/</url>
      
        <content type="html"><![CDATA[<h1 id="Javascript-데코레이터-Decorators"><a href="#Javascript-데코레이터-Decorators" class="headerlink" title="Javascript 데코레이터(Decorators)"></a>Javascript 데코레이터(Decorators)</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 JavaScript에서 데코레이터를 사용하여 클래스와 메서드에 부가 기능을 추가하는 방법에 대해 알아보겠습니다. 데코레이터는 코드의 가독성과 재사용성을 높이는 데 유용한 패턴입니다.</p><h2 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h2><h3 id="데코레이터란"><a href="#데코레이터란" class="headerlink" title="데코레이터란?"></a>데코레이터란?</h3><p>데코레이터(Decorators)는 클래스 또는 메서드에 부가 기능을 추가할 수 있는 패턴입니다. Python, Java 등 다른 언어에서도 사용되며, JavaScript에서는 주로 클래스와 메서드에 적용됩니다.</p><h2 id="활용"><a href="#활용" class="headerlink" title="활용"></a>활용</h2><h3 id="클래스와-메서드에-데코레이터-적용"><a href="#클래스와-메서드에-데코레이터-적용" class="headerlink" title="클래스와 메서드에 데코레이터 적용"></a>클래스와 메서드에 데코레이터 적용</h3><p><strong>예제 1: 메서드 데코레이터</strong></p><pre><code class="highlight javascript"><span class="keyword">function</span> <span class="title function_">log</span>(<span class="params">target, key, descriptor</span>) &#123;  <span class="keyword">const</span> originalMethod = descriptor.<span class="property">value</span>;  descriptor.<span class="property">value</span> = <span class="keyword">function</span> (<span class="params">...args</span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Calling <span class="subst">$&#123;key&#125;</span> with args: <span class="subst">$&#123;args&#125;</span>`</span>);    <span class="keyword">return</span> originalMethod.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);  &#125;;  <span class="keyword">return</span> descriptor;&#125;<span class="keyword">class</span> <span class="title class_">Person</span> &#123;  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;    <span class="variable language_">this</span>.<span class="property">name</span> = name;  &#125;  @log  <span class="title function_">sayHello</span>(<span class="params">greeting</span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;greeting&#125;</span>, my name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>);  &#125;&#125;<span class="keyword">const</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;John&quot;</span>);person.<span class="title function_">sayHello</span>(<span class="string">&quot;Hello&quot;</span>); <span class="comment">// Calling sayHello with args: Hello // Hello, my name is John</span></code></pre><p><strong>예제 2: 클래스 데코레이터</strong></p><pre><code class="highlight javascript"><span class="keyword">function</span> <span class="title function_">addAge</span>(<span class="params">target</span>) &#123;  target.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">age</span> = <span class="number">30</span>;&#125;@addAge<span class="keyword">class</span> <span class="title class_">Person</span> &#123;  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;    <span class="variable language_">this</span>.<span class="property">name</span> = name;  &#125;  <span class="title function_">sayAge</span>(<span class="params"></span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`I am <span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span> years old`</span>);  &#125;&#125;<span class="keyword">const</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Jane&quot;</span>);person.<span class="title function_">sayAge</span>(); <span class="comment">// I am 30 years old</span></code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 데코레이터의 개념과 사용 예제에 대해 알아보았습니다. 데코레이터를 사용하면 클래스와 메서드에 부가 기능을 쉽게 추가할 수 있습니다. 이를 통해 코드의 재사용성과 가독성을 높일 수 있습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> JS_디테일 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Node.js 고가용성 - pm2, cluster, nginx를 중심으로</title>
      <link href="/web/ha/1/"/>
      <url>/web/ha/1/</url>
      
        <content type="html"><![CDATA[<h1 id="고가용성-설정-pm2-cluster-nginx"><a href="#고가용성-설정-pm2-cluster-nginx" class="headerlink" title="고가용성 설정 - pm2, cluster, nginx"></a>고가용성 설정 - pm2, cluster, nginx</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 Node.js 애플리케이션에서 고가용성을 구현하는 방법에 대해 알아보겠습니다.<br>저는 Node.js 웹 개발을 할 때, 고가용성 구성을 해야할 일이 있다면 아래와 같이 세 가지 방법을 먼저 떠올립니다.</p><ol><li><a href="/web/ha/4">nginx</a></li><li><a href="/web/ha/2">cluster</a></li><li><a href="/web/ha/3">pm2</a></li></ol><p>이 세 가지 방법을 중심으로 고가용성 개념과 간단한 설정 방법을 알아보겠습니다. (자세한 설정 방법은 각각의 고가용성 링크를 참고해주세요!)</p><h2 id="고가용성-High-Availability-개념"><a href="#고가용성-High-Availability-개념" class="headerlink" title="고가용성(High Availability) 개념"></a>고가용성(High Availability) 개념</h2><p>고가용성은 시스템이 장시간 동안 중단 없이 운영될 수 있는 능력을 의미합니다. 서버 장애 시에도 애플리케이션이 지속적으로 동작하도록 설정하는 것이 중요합니다. 이제 고가용성을 구현하는 세 가지 주요 방법에 대해 알아보겠습니다.</p><h2 id="고가용성-구현을-위한-세-가지-방법"><a href="#고가용성-구현을-위한-세-가지-방법" class="headerlink" title="고가용성 구현을 위한 세 가지 방법"></a>고가용성 구현을 위한 세 가지 방법</h2><h3 id="1-Nginx-하드웨어-레벨의-분산-로드-밸런싱"><a href="#1-Nginx-하드웨어-레벨의-분산-로드-밸런싱" class="headerlink" title="1. Nginx: 하드웨어 레벨의 분산 로드 밸런싱"></a>1. Nginx: 하드웨어 레벨의 분산 로드 밸런싱</h3><p>Nginx는 웹 서버, 리버스 프록시 서버, 로드 밸런서 등 다양한 역할을 수행할 수 있는 소프트웨어입니다. 주로 여러 서버에 트래픽을 분산시키기 위해 사용되며, 대규모 시스템에서 고가용성을 구현하는 데 매우 유용합니다.</p><h4 id="Nginx의-장점"><a href="#Nginx의-장점" class="headerlink" title="Nginx의 장점"></a>Nginx의 장점</h4><ul><li><strong>확장성</strong>: 수십 대의 서버에 트래픽을 분산시킬 수 있어 대규모 트래픽 처리에 적합합니다.</li><li><strong>다양한 로드 밸런싱 알고리즘</strong>: Round-robin, Least Connections, IP Hash 등 다양한 알고리즘을 제공합니다.</li><li><strong>높은 성능</strong>: 비동기 이벤트 기반 아키텍처를 사용하여 높은 성능을 발휘합니다.</li></ul><h4 id="Nginx-설정-예제"><a href="#Nginx-설정-예제" class="headerlink" title="Nginx 설정 예제"></a>Nginx 설정 예제</h4><ol><li><strong>Nginx 설치</strong></li></ol><pre><code class="highlight bash"><span class="built_in">sudo</span> apt update<span class="built_in">sudo</span> apt install nginx</code></pre><ol start="2"><li><strong>Nginx 설정 파일 수정</strong></li></ol><pre><code class="highlight nginx"><span class="section">upstream</span> nodejs &#123;  <span class="attribute">server</span> <span class="number">127.0.0.1:3000</span>;  <span class="attribute">server</span> <span class="number">127.0.0.1:3001</span>;  <span class="attribute">server</span> <span class="number">127.0.0.1:3002</span>;&#125;<span class="section">server</span> &#123;  <span class="attribute">listen</span> <span class="number">80</span>;  <span class="section">location</span> / &#123;    <span class="attribute">proxy_pass</span> http://nodejs;    <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;    <span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;    <span class="attribute">proxy_set_header</span> Connection <span class="string">&#x27;upgrade&#x27;</span>;    <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;    <span class="attribute">proxy_cache_bypass</span> <span class="variable">$http_upgrade</span>;  &#125;&#125;</code></pre><ol start="3"><li><strong>Nginx 재시작</strong></li></ol><pre><code class="highlight bash"><span class="built_in">sudo</span> systemctl restart nginx</code></pre><h3 id="2-pm2-서버-한-대에서-여러-인스턴스-관리"><a href="#2-pm2-서버-한-대에서-여러-인스턴스-관리" class="headerlink" title="2. pm2: 서버 한 대에서 여러 인스턴스 관리"></a>2. pm2: 서버 한 대에서 여러 인스턴스 관리</h3><p>pm2는 Node.js 애플리케이션의 프로세스 매니저로, 단일 서버에서 여러 애플리케이션 인스턴스를 관리하고 모니터링할 수 있습니다. pm2는 클러스터 모드, 자동 재시작, 로드 밸런싱 등의 기능을 제공합니다.</p><h4 id="pm2의-장점"><a href="#pm2의-장점" class="headerlink" title="pm2의 장점"></a>pm2의 장점</h4><ul><li><strong>자동 재시작</strong>: 애플리케이션이 비정상 종료될 경우 자동으로 재시작합니다.</li><li><strong>로드 밸런싱</strong>: 클러스터 모드를 사용하여 단일 서버 내에서 로드 밸런싱을 구현합니다.</li><li><strong>모니터링 및 로깅</strong>: 애플리케이션의 상태를 모니터링하고 로그를 관리할 수 있습니다.</li></ul><h4 id="pm2-설치-및-기본-사용법"><a href="#pm2-설치-및-기본-사용법" class="headerlink" title="pm2 설치 및 기본 사용법"></a>pm2 설치 및 기본 사용법</h4><pre><code class="highlight bash">npm install pm2 -gpm2 start app.jspm2 listpm2 stop apppm2 restart apppm2 delete app</code></pre><h4 id="클러스터-모드-사용"><a href="#클러스터-모드-사용" class="headerlink" title="클러스터 모드 사용"></a>클러스터 모드 사용</h4><pre><code class="highlight bash">pm2 start app.js -i max</code></pre><h4 id="ecosystem-config-js-파일을-사용한-설정"><a href="#ecosystem-config-js-파일을-사용한-설정" class="headerlink" title="ecosystem.config.js 파일을 사용한 설정"></a>ecosystem.config.js 파일을 사용한 설정</h4><p>환경변수를 설정하고, pm2를 사용하여 애플리케이션을 관리하는 방법을 알아보겠습니다.</p><pre><code class="highlight javascript"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;  <span class="attr">apps</span>: [    &#123;      <span class="attr">name</span>: <span class="string">&quot;app&quot;</span>,      <span class="attr">script</span>: <span class="string">&quot;./app.js&quot;</span>,      <span class="attr">instances</span>: <span class="string">&quot;max&quot;</span>,      <span class="attr">exec_mode</span>: <span class="string">&quot;cluster&quot;</span>,      <span class="attr">env</span>: &#123;        <span class="attr">NODE_ENV</span>: <span class="string">&quot;development&quot;</span>,        <span class="attr">PORT</span>: <span class="number">3000</span>,      &#125;,      <span class="attr">env_production</span>: &#123;        <span class="attr">NODE_ENV</span>: <span class="string">&quot;production&quot;</span>,        <span class="attr">PORT</span>: <span class="number">8080</span>,      &#125;,    &#125;,  ],&#125;;</code></pre><p><code>ecosystem.config.js</code> 파일을 사용하여 애플리케이션을 실행하고 모니터링합니다.</p><pre><code class="highlight bash">pm2 start ecosystem.config.js --<span class="built_in">env</span> productionpm2 listpm2 logspm2 monit</code></pre><h3 id="3-cluster-하나의-인스턴스에서-여러-스레드-사용"><a href="#3-cluster-하나의-인스턴스에서-여러-스레드-사용" class="headerlink" title="3. cluster: 하나의 인스턴스에서 여러 스레드 사용"></a>3. cluster: 하나의 인스턴스에서 여러 스레드 사용</h3><p>Node.js의 내장 모듈인 cluster를 사용하면 하나의 인스턴스 내에서 여러 워커 프로세스를 생성하여 CPU 코어를 최대한 활용할 수 있습니다. cluster 모듈은 마스터 프로세스와 여러 워커 프로세스를 생성하여 로드 밸런싱을 제공합니다.</p><h4 id="cluster의-장점"><a href="#cluster의-장점" class="headerlink" title="cluster의 장점"></a>cluster의 장점</h4><ul><li><strong>CPU 활용 극대화</strong>: 여러 워커 프로세스를 생성하여 멀티코어 CPU의 성능을 최대한 활용합니다.</li><li><strong>간편한 설정</strong>: Node.js 내장 모듈로, 간편하게 설정할 수 있습니다.</li></ul><h4 id="cluster-모듈-사용-예제"><a href="#cluster-모듈-사용-예제" class="headerlink" title="cluster 모듈 사용 예제"></a>cluster 모듈 사용 예제</h4><pre><code class="highlight javascript"><span class="keyword">const</span> cluster = <span class="built_in">require</span>(<span class="string">&quot;cluster&quot;</span>);<span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);<span class="keyword">const</span> numCPUs = <span class="built_in">require</span>(<span class="string">&quot;os&quot;</span>).<span class="title function_">cpus</span>().<span class="property">length</span>;<span class="keyword">if</span> (cluster.<span class="property">isMaster</span>) &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Master <span class="subst">$&#123;process.pid&#125;</span> is running`</span>);  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; numCPUs; i++) &#123;    cluster.<span class="title function_">fork</span>();  &#125;  cluster.<span class="title function_">on</span>(<span class="string">&quot;exit&quot;</span>, <span class="function">(<span class="params">worker, code, signal</span>) =&gt;</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Worker <span class="subst">$&#123;worker.process.pid&#125;</span> died`</span>);  &#125;);&#125; <span class="keyword">else</span> &#123;  http    .<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;      res.<span class="title function_">writeHead</span>(<span class="number">200</span>);      res.<span class="title function_">end</span>(<span class="string">&quot;Hello, World!&quot;</span>);    &#125;)    .<span class="title function_">listen</span>(<span class="number">8000</span>);  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Worker <span class="subst">$&#123;process.pid&#125;</span> started`</span>);&#125;</code></pre><h2 id="pm2-cluster-nginx-비교"><a href="#pm2-cluster-nginx-비교" class="headerlink" title="pm2, cluster, nginx 비교"></a>pm2, cluster, nginx 비교</h2><table><thead><tr><th>특징</th><th>pm2</th><th>cluster</th><th>nginx</th></tr></thead><tbody><tr><td>사용 편의성</td><td>설정과 관리가 간편</td><td>직접 설정 필요</td><td>설정 파일을 통한 강력한 설정 가능</td></tr><tr><td>로드 밸런싱</td><td>서버 내 로드 밸런싱 지원</td><td>프로세스 간 로드 밸런싱 지원</td><td>여러 서버 간 로드 밸런싱 지원</td></tr><tr><td>프로세스 관리</td><td>자동 재시작, 모니터링, 로그 관리 제공</td><td>수동으로 프로세스 관리 필요</td><td>프로세스 관리는 별도 도구 필요</td></tr><tr><td>확장성</td><td>단일 서버 내 확장</td><td>단일 서버 내 확장</td><td>다수 서버에 트래픽 분산, 대규모 트래픽 처리에 적합</td></tr></tbody></table><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 고가용성을 구현하기 위한 다양한 방법과 도구에 대해 알아보았습니다.<br>nginx는 여러 서버 간의 트래픽을 분산하여 대규모 시스템에서 고가용성을 제공하며,<br>pm2는 단일 서버 내에서 여러 애플리케이션 인스턴스를 관리하고 모니터링합니다.<br>cluster는 단일 인스턴스 내에서 여러 워커 프로세스를 생성하여 CPU 성능을 최대한 활용합니다.<br>각 도구의 특성과 장점을 이해하고 적절히 활용하여 애플리케이션의 가용성을 높일 수 있습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> web_고가용성 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Javascript 고차 함수(Higher-Order Functions)</title>
      <link href="/javascript/detail/19/"/>
      <url>/javascript/detail/19/</url>
      
        <content type="html"><![CDATA[<h1 id="Javascript-고차-함수-Higher-Order-Functions"><a href="#Javascript-고차-함수-Higher-Order-Functions" class="headerlink" title="Javascript 고차 함수(Higher-Order Functions)"></a>Javascript 고차 함수(Higher-Order Functions)</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 JavaScript에서 고차 함수를 사용하여 함수형 프로그래밍을 구현하는 방법에 대해 알아보겠습니다. 고차 함수는 다른 함수를 인자로 받거나, 함수를 반환하는 함수입니다.</p><h2 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h2><h3 id="고차-함수란"><a href="#고차-함수란" class="headerlink" title="고차 함수란?"></a>고차 함수란?</h3><p>고차 함수(Higher-Order Functions)는 함수를 인자로 받거나, 함수를 반환하는 함수입니다. 고차 함수는 함수형 프로그래밍의 핵심 개념 중 하나로, 코드를 더 유연하고 재사용 가능하게 만들어 줍니다.</p><h2 id="활용"><a href="#활용" class="headerlink" title="활용"></a>활용</h2><h3 id="고차-함수-사용-예제"><a href="#고차-함수-사용-예제" class="headerlink" title="고차 함수 사용 예제"></a>고차 함수 사용 예제</h3><p><strong>예제 1: <code>map</code> 함수</strong></p><pre><code class="highlight javascript"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];<span class="keyword">const</span> doubled = numbers.<span class="title function_">map</span>(<span class="function">(<span class="params">num</span>) =&gt;</span> num * <span class="number">2</span>);<span class="variable language_">console</span>.<span class="title function_">log</span>(doubled); <span class="comment">// [2, 4, 6, 8, 10]</span></code></pre><p><strong>예제 2: <code>filter</code> 함수</strong></p><pre><code class="highlight javascript"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];<span class="keyword">const</span> evenNumbers = numbers.<span class="title function_">filter</span>(<span class="function">(<span class="params">num</span>) =&gt;</span> num % <span class="number">2</span> === <span class="number">0</span>);<span class="variable language_">console</span>.<span class="title function_">log</span>(evenNumbers); <span class="comment">// [2, 4]</span></code></pre><p><strong>예제 3: <code>reduce</code> 함수</strong></p><pre><code class="highlight javascript"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];<span class="keyword">const</span> sum = numbers.<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, num</span>) =&gt;</span> acc + num, <span class="number">0</span>);<span class="variable language_">console</span>.<span class="title function_">log</span>(sum); <span class="comment">// 15</span></code></pre><p><strong>예제 4: 함수 반환</strong></p><pre><code class="highlight javascript"><span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params">a</span>) =&gt; <span class="function">(<span class="params">b</span>) =&gt;</span> a + b;<span class="keyword">const</span> addFive = <span class="title function_">add</span>(<span class="number">5</span>);<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">addFive</span>(<span class="number">3</span>)); <span class="comment">// 8</span></code></pre><p><strong>예제 5: 함수 인자로 받기</strong></p><pre><code class="highlight javascript"><span class="keyword">const</span> <span class="title function_">withLogging</span> =  (<span class="params">fn</span>) =&gt;  <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Calling function with args: <span class="subst">$&#123;args&#125;</span>`</span>);    <span class="keyword">return</span> <span class="title function_">fn</span>(...args);  &#125;;<span class="keyword">const</span> <span class="title function_">multiply</span> = (<span class="params">a, b</span>) =&gt; a * b;<span class="keyword">const</span> multiplyWithLogging = <span class="title function_">withLogging</span>(multiply);<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">multiplyWithLogging</span>(<span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// Calling function with args: 2,3 // 6</span></code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 고차 함수의 개념과 사용 예제에 대해 알아보았습니다. 고차 함수를 사용하면 함수형 프로그래밍을 구현할 수 있으며, 코드의 유연성과 재사용성을 높일 수 있습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> JS_디테일 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Javascript 커링 (Currying)</title>
      <link href="/javascript/detail/18/"/>
      <url>/javascript/detail/18/</url>
      
        <content type="html"><![CDATA[<h1 id="Javascript-커링-Currying"><a href="#Javascript-커링-Currying" class="headerlink" title="Javascript 커링 (Currying)"></a>Javascript 커링 (Currying)</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 JavaScript에서 커링(Currying)에 대해 알아보겠습니다. 커링은 함수의 일부 인수를 미리 채워 새로운 함수를 생성하는 기법입니다.</p><h2 id="커링의-기본-개념"><a href="#커링의-기본-개념" class="headerlink" title="커링의 기본 개념"></a>커링의 기본 개념</h2><p>커링은 여러 인수를 받는 함수를 하나의 인수를 받는 함수들의 체인으로 변환하는 과정입니다:</p><pre><code class="highlight javascript"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a</span>) &#123;  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">b</span>) &#123;    <span class="keyword">return</span> a + b;  &#125;;&#125;<span class="keyword">const</span> addFive = <span class="title function_">add</span>(<span class="number">5</span>);<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">addFive</span>(<span class="number">3</span>)); <span class="comment">// 출력: 8</span></code></pre><h2 id="커링-함수-작성"><a href="#커링-함수-작성" class="headerlink" title="커링 함수 작성"></a>커링 함수 작성</h2><p>커링을 사용하여 다중 인수 함수를 변환할 수 있습니다:</p><pre><code class="highlight javascript"><span class="keyword">function</span> <span class="title function_">multiply</span>(<span class="params">a</span>) &#123;  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">b</span>) &#123;    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">c</span>) &#123;      <span class="keyword">return</span> a * b * c;    &#125;;  &#125;;&#125;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">multiply</span>(<span class="number">2</span>)(<span class="number">3</span>)(<span class="number">4</span>)); <span class="comment">// 출력: 24</span></code></pre><h2 id="커링의-활용-예"><a href="#커링의-활용-예" class="headerlink" title="커링의 활용 예"></a>커링의 활용 예</h2><p>커링은 함수형 프로그래밍에서 자주 사용되며, 코드의 재사용성을 높이고 가독성을 향상시킵니다:</p><pre><code class="highlight javascript"><span class="keyword">const</span> <span class="title function_">curry</span> = (<span class="params">fn</span>) =&gt; &#123;  <span class="keyword">const</span> <span class="title function_">curried</span> = (<span class="params">...args</span>) =&gt; &#123;    <span class="keyword">if</span> (args.<span class="property">length</span> &gt;= fn.<span class="property">length</span>) &#123;      <span class="keyword">return</span> <span class="title function_">fn</span>(...args);    &#125; <span class="keyword">else</span> &#123;      <span class="keyword">return</span> <span class="function">(<span class="params">...next</span>) =&gt;</span> <span class="title function_">curried</span>(...args, ...next);    &#125;  &#125;;  <span class="keyword">return</span> curried;&#125;;<span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params">a, b, c</span>) =&gt; a + b + c;<span class="keyword">const</span> curriedAdd = <span class="title function_">curry</span>(add);<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">curriedAdd</span>(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)); <span class="comment">// 출력: 6</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">curriedAdd</span>(<span class="number">1</span>, <span class="number">2</span>)(<span class="number">3</span>)); <span class="comment">// 출력: 6</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">curriedAdd</span>(<span class="number">1</span>)(<span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// 출력: 6</span></code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 Javascript에서 커링을 사용하는 방법에 대해 알아보았습니다. 커링은 함수의 일부 인수를 미리 채워 새로운 함수를 생성하는 기법으로, 함수형 프로그래밍에서 유용하게 사용됩니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> JS_디테일 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Javascript Reflect API</title>
      <link href="/javascript/detail/17/"/>
      <url>/javascript/detail/17/</url>
      
        <content type="html"><![CDATA[<h1 id="Javascript-Reflect-API"><a href="#Javascript-Reflect-API" class="headerlink" title="Javascript Reflect API"></a>Javascript <code>Reflect</code> API</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 JavaScript에서 <code>Reflect</code> API에 대해 알아보겠습니다. <code>Reflect</code> API는 자바스크립트의 내장 객체 조작 메서드를 제공하며, 객체의 동작을 더 쉽게 조작할 수 있게 합니다.</p><h2 id="Reflect-API의-기본-사용법"><a href="#Reflect-API의-기본-사용법" class="headerlink" title="Reflect API의 기본 사용법"></a>Reflect API의 기본 사용법</h2><p><code>Reflect</code> API는 <code>Reflect</code> 객체를 통해 제공됩니다:</p><pre><code class="highlight javascript"><span class="keyword">const</span> obj = &#123;  <span class="attr">name</span>: <span class="string">&quot;John Doe&quot;</span>,  <span class="attr">age</span>: <span class="number">30</span>,&#125;;<span class="comment">// get 메서드</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Reflect</span>.<span class="title function_">get</span>(obj, <span class="string">&quot;name&quot;</span>)); <span class="comment">// 출력: John Doe</span><span class="comment">// set 메서드</span><span class="title class_">Reflect</span>.<span class="title function_">set</span>(obj, <span class="string">&quot;age&quot;</span>, <span class="number">31</span>);<span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">age</span>); <span class="comment">// 출력: 31</span><span class="comment">// has 메서드</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Reflect</span>.<span class="title function_">has</span>(obj, <span class="string">&quot;name&quot;</span>)); <span class="comment">// 출력: true</span><span class="comment">// deleteProperty 메서드</span><span class="title class_">Reflect</span>.<span class="title function_">deleteProperty</span>(obj, <span class="string">&quot;age&quot;</span>);<span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">age</span>); <span class="comment">// 출력: undefined</span></code></pre><h2 id="프록시와-Reflect의-조합"><a href="#프록시와-Reflect의-조합" class="headerlink" title="프록시와 Reflect의 조합"></a>프록시와 <code>Reflect</code>의 조합</h2><p><code>Reflect</code> API는 프록시의 트랩을 구현할 때 유용하게 사용할 수 있습니다:</p><pre><code class="highlight javascript"><span class="keyword">const</span> user = &#123;  <span class="attr">name</span>: <span class="string">&quot;Jane Doe&quot;</span>,  <span class="attr">age</span>: <span class="number">25</span>,&#125;;<span class="keyword">const</span> handler = &#123;  <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params">obj, prop</span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Getting <span class="subst">$&#123;prop&#125;</span>`</span>);    <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(obj, prop);  &#125;,  <span class="attr">set</span>: <span class="keyword">function</span> (<span class="params">obj, prop, value</span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Setting <span class="subst">$&#123;prop&#125;</span> to <span class="subst">$&#123;value&#125;</span>`</span>);    <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">set</span>(obj, prop, value);  &#125;,&#125;;<span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(user, handler);<span class="variable language_">console</span>.<span class="title function_">log</span>(proxy.<span class="property">name</span>); <span class="comment">// 출력: Getting name, Jane Doe</span>proxy.<span class="property">age</span> = <span class="number">26</span>; <span class="comment">// 출력: Setting age to 26</span></code></pre><h2 id="Reflect-메서드-목록"><a href="#Reflect-메서드-목록" class="headerlink" title="Reflect 메서드 목록"></a><code>Reflect</code> 메서드 목록</h2><p><code>Reflect</code> API는 다양한 메서드를 제공합니다:</p><ul><li><code>Reflect.get(target, property, receiver)</code></li><li><code>Reflect.set(target, property, value, receiver)</code></li><li><code>Reflect.has(target, property)</code></li><li><code>Reflect.deleteProperty(target, property)</code></li><li><code>Reflect.apply(target, thisArgument, argumentsList)</code></li><li><code>Reflect.construct(target, argumentsList, newTarget)</code></li><li><code>Reflect.getPrototypeOf(target)</code></li><li><code>Reflect.setPrototypeOf(target, prototype)</code></li><li><code>Reflect.isExtensible(target)</code></li><li><code>Reflect.preventExtensions(target)</code></li><li><code>Reflect.defineProperty(target, property, descriptor)</code></li><li><code>Reflect.getOwnPropertyDescriptor(target, property)</code></li><li><code>Reflect.ownKeys(target)</code></li></ul><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 Javascript에서 <code>Reflect</code> API를 사용하는 방법에 대해 알아보았습니다. <code>Reflect</code> API는 객체의 동작을 더 쉽게 조작할 수 있게 해주며, 프록시와 함께 사용할 때 특히 유용합니다. 다음 시간에는 커링에 대해 알아보겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> JS_디테일 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript와 Babel 통합 시 발생하는 문제 해결</title>
      <link href="/typescript/troubleshooting/9/"/>
      <url>/typescript/troubleshooting/9/</url>
      
        <content type="html"><![CDATA[<h1 id="TypeScript와-Babel-통합-시-발생하는-문제-해결"><a href="#TypeScript와-Babel-통합-시-발생하는-문제-해결" class="headerlink" title="TypeScript와 Babel 통합 시 발생하는 문제 해결"></a>TypeScript와 Babel 통합 시 발생하는 문제 해결</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 TypeScript와 Babel을 함께 사용할 때 발생할 수 있는 문제와 이를 해결하는 방법에 대해 알아보겠습니다.<br>TypeScript와 Babel의 통합은 TypeScript의 타입 시스템과 Babel의 최신 JavaScript 기능 지원을 함께 사용하기 위해 필요할 수 있습니다.</p><h2 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h2><h3 id="TypeScript와-Babel의-차이점"><a href="#TypeScript와-Babel의-차이점" class="headerlink" title="TypeScript와 Babel의 차이점"></a>TypeScript와 Babel의 차이점</h3><ul><li><strong>TypeScript</strong>: JavaScript의 상위 집합으로, 정적 타입 검사를 제공하여 코드의 안전성과 유지보수성을 높입니다. TypeScript 컴파일러는 <code>.ts</code> 파일을 <code>.js</code> 파일로 변환합니다.</li><li><strong>Babel</strong>: 최신 JavaScript 문법을 구형 브라우저에서도 사용할 수 있도록 변환해주는 트랜스파일러입니다. 다양한 플러그인을 통해 JavaScript 코드를 변환할 수 있습니다.</li></ul><h3 id="TypeScript와-Babel-통합의-필요성"><a href="#TypeScript와-Babel-통합의-필요성" class="headerlink" title="TypeScript와 Babel 통합의 필요성"></a>TypeScript와 Babel 통합의 필요성</h3><p>TypeScript와 Babel을 함께 사용하면 TypeScript의 타입 시스템을 활용하면서 Babel의 최신 JavaScript 기능 지원과 다양한 플러그인을 사용할 수 있습니다. 그러나 이 과정에서 몇 가지 문제가 발생할 수 있습니다.</p><h2 id="문제-상황과-해결-방법"><a href="#문제-상황과-해결-방법" class="headerlink" title="문제 상황과 해결 방법"></a>문제 상황과 해결 방법</h2><h3 id="문제-1-TypeScript와-Babel의-충돌"><a href="#문제-1-TypeScript와-Babel의-충돌" class="headerlink" title="문제 1: TypeScript와 Babel의 충돌"></a>문제 1: TypeScript와 Babel의 충돌</h3><h4 id="문제-설명"><a href="#문제-설명" class="headerlink" title="문제 설명"></a>문제 설명</h4><p>TypeScript와 Babel을 함께 사용할 때, 두 컴파일러 간의 설정 충돌로 인해 예기치 않은 문제가 발생할 수 있습니다.</p><h4 id="해결-방법"><a href="#해결-방법" class="headerlink" title="해결 방법"></a>해결 방법</h4><p>TypeScript와 Babel을 함께 사용할 때는 TypeScript 컴파일러를 타입 체크용으로만 사용하고, Babel을 코드 변환용으로 사용하는 것이 일반적입니다. 이를 위해 <code>tsc</code>와 <code>babel</code>을 각각 설정하고 사용합니다.</p><h4 id="예제"><a href="#예제" class="headerlink" title="예제"></a>예제</h4><ol><li><strong>TypeScript 및 Babel 설치</strong></li></ol><pre><code class="highlight bash">npm install --save-dev typescript @babel/core @babel/preset-env @babel/preset-typescript</code></pre><ol start="2"><li><strong>TypeScript 설정 파일 (<code>tsconfig.json</code>)</strong></li></ol><pre><code class="highlight json"><span class="punctuation">&#123;</span>  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>    <span class="attr">&quot;outDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./dist&quot;</span><span class="punctuation">,</span>    <span class="attr">&quot;rootDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./src&quot;</span><span class="punctuation">,</span>    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esnext&quot;</span><span class="punctuation">,</span>    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;commonjs&quot;</span><span class="punctuation">,</span>    <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span>    <span class="attr">&quot;esModuleInterop&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span>    <span class="attr">&quot;skipLibCheck&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span>    <span class="attr">&quot;noEmit&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span>  <span class="punctuation">&#125;</span><span class="punctuation">,</span>  <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;src&quot;</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></code></pre><ol start="3"><li><strong>Babel 설정 파일 (<code>babel.config.js</code>)</strong></li></ol><pre><code class="highlight javascript"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;  <span class="attr">presets</span>: [<span class="string">&quot;@babel/preset-env&quot;</span>, <span class="string">&quot;@babel/preset-typescript&quot;</span>],&#125;;</code></pre><ol start="4"><li><strong>빌드 스크립트 추가</strong></li></ol><pre><code class="highlight json"><span class="punctuation">&#123;</span>  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>    <span class="attr">&quot;type-check&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tsc&quot;</span><span class="punctuation">,</span>    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;babel src --out-dir dist&quot;</span>  <span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></code></pre><h3 id="문제-2-Babel-플러그인과-TypeScript의-호환성-문제"><a href="#문제-2-Babel-플러그인과-TypeScript의-호환성-문제" class="headerlink" title="문제 2: Babel 플러그인과 TypeScript의 호환성 문제"></a>문제 2: Babel 플러그인과 TypeScript의 호환성 문제</h3><h4 id="문제-설명-1"><a href="#문제-설명-1" class="headerlink" title="문제 설명"></a>문제 설명</h4><p>일부 Babel 플러그인은 TypeScript와 호환되지 않을 수 있습니다. 이는 Babel 플러그인이 TypeScript 문법을 인식하지 못하거나, 변환 과정에서 타입 정보를 손실할 수 있기 때문입니다.</p><h4 id="해결-방법-1"><a href="#해결-방법-1" class="headerlink" title="해결 방법"></a>해결 방법</h4><p>Babel 플러그인을 사용할 때는 TypeScript와 호환되는 플러그인을 선택하고, 필요한 경우 TypeScript 설정에서 해당 플러그인과 충돌하지 않도록 설정을 조정합니다.</p><h4 id="예제-1"><a href="#예제-1" class="headerlink" title="예제"></a>예제</h4><ol><li><strong>Babel 플러그인 설치</strong></li></ol><pre><code class="highlight bash">npm install --save-dev @babel/plugin-proposal-class-properties</code></pre><ol start="2"><li><strong>Babel 설정 파일 (<code>babel.config.js</code>) 수정</strong></li></ol><pre><code class="highlight javascript"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;  <span class="attr">presets</span>: [<span class="string">&quot;@babel/preset-env&quot;</span>, <span class="string">&quot;@babel/preset-typescript&quot;</span>],  <span class="attr">plugins</span>: [<span class="string">&quot;@babel/plugin-proposal-class-properties&quot;</span>],&#125;;</code></pre><ol start="3"><li><strong>TypeScript 설정 파일 (<code>tsconfig.json</code>) 수정</strong></li></ol><pre><code class="highlight json"><span class="punctuation">&#123;</span>  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>    <span class="attr">&quot;outDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./dist&quot;</span><span class="punctuation">,</span>    <span class="attr">&quot;rootDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./src&quot;</span><span class="punctuation">,</span>    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esnext&quot;</span><span class="punctuation">,</span>    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;commonjs&quot;</span><span class="punctuation">,</span>    <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span>    <span class="attr">&quot;esModuleInterop&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span>    <span class="attr">&quot;skipLibCheck&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span>    <span class="attr">&quot;noEmit&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span>    <span class="attr">&quot;experimentalDecorators&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span>    <span class="attr">&quot;emitDecoratorMetadata&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span>  <span class="punctuation">&#125;</span><span class="punctuation">,</span>  <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;src&quot;</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></code></pre><h3 id="문제-3-소스-맵-Source-Map-문제"><a href="#문제-3-소스-맵-Source-Map-문제" class="headerlink" title="문제 3: 소스 맵(Source Map) 문제"></a>문제 3: 소스 맵(Source Map) 문제</h3><h4 id="문제-설명-2"><a href="#문제-설명-2" class="headerlink" title="문제 설명"></a>문제 설명</h4><p>TypeScript와 Babel을 함께 사용할 때, 소스 맵 설정이 올바르지 않으면 디버깅 시 원본 파일과 변환된 파일 간의 매핑이 제대로 이루어지지 않을 수 있습니다.</p><h4 id="해결-방법-2"><a href="#해결-방법-2" class="headerlink" title="해결 방법"></a>해결 방법</h4><p>TypeScript와 Babel 모두에서 소스 맵을 생성하도록 설정하고, Babel의 소스 맵 설정이 TypeScript와 일치하도록 구성합니다.</p><h4 id="예제-2"><a href="#예제-2" class="headerlink" title="예제"></a>예제</h4><ol><li><strong>TypeScript 설정 파일 (<code>tsconfig.json</code>) 수정</strong></li></ol><pre><code class="highlight json"><span class="punctuation">&#123;</span>  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>    <span class="attr">&quot;outDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./dist&quot;</span><span class="punctuation">,</span>    <span class="attr">&quot;rootDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./src&quot;</span><span class="punctuation">,</span>    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esnext&quot;</span><span class="punctuation">,</span>    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;commonjs&quot;</span><span class="punctuation">,</span>    <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span>    <span class="attr">&quot;esModuleInterop&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span>    <span class="attr">&quot;skipLibCheck&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span>    <span class="attr">&quot;noEmit&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span>    <span class="attr">&quot;sourceMap&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span>  <span class="punctuation">&#125;</span><span class="punctuation">,</span>  <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;src&quot;</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></code></pre><ol start="2"><li><strong>Babel 설정 파일 (<code>babel.config.js</code>) 수정</strong></li></ol><pre><code class="highlight javascript"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;  <span class="attr">presets</span>: [<span class="string">&quot;@babel/preset-env&quot;</span>, <span class="string">&quot;@babel/preset-typescript&quot;</span>],  <span class="attr">plugins</span>: [<span class="string">&quot;@babel/plugin-proposal-class-properties&quot;</span>],  <span class="attr">sourceMaps</span>: <span class="string">&quot;inline&quot;</span>,&#125;;</code></pre><h3 id="실습-예제"><a href="#실습-예제" class="headerlink" title="실습 예제"></a>실습 예제</h3><p>TypeScript와 Babel을 함께 사용하여 프로젝트를 설정하고 빌드하는 예제를 살펴보겠습니다.</p><ol><li><strong>프로젝트 구조</strong></li></ol><pre><code class="highlight bash">my-project/├── src/│   └── index.ts├── dist/├── tsconfig.json├── babel.config.js├── package.json└── .gitignore</code></pre><ol start="2"><li><strong>TypeScript 및 Babel 설정 파일</strong></li></ol><p><strong>tsconfig.json</strong></p><pre><code class="highlight json"><span class="punctuation">&#123;</span>  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>    <span class="attr">&quot;outDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./dist&quot;</span><span class="punctuation">,</span>    <span class="attr">&quot;rootDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./src&quot;</span><span class="punctuation">,</span>    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esnext&quot;</span><span class="punctuation">,</span>    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;commonjs&quot;</span><span class="punctuation">,</span>    <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span>    <span class="attr">&quot;esModuleInterop&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span>    <span class="attr">&quot;skipLibCheck&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span>    <span class="attr">&quot;noEmit&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span>    <span class="attr">&quot;sourceMap&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span>  <span class="punctuation">&#125;</span><span class="punctuation">,</span>  <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;src&quot;</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></code></pre><p><strong>babel.config.js</strong></p><pre><code class="highlight javascript"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;  <span class="attr">presets</span>: [<span class="string">&quot;@babel/preset-env&quot;</span>, <span class="string">&quot;@babel/preset-typescript&quot;</span>],  <span class="attr">plugins</span>: [<span class="string">&quot;@babel/plugin-proposal-class-properties&quot;</span>],  <span class="attr">sourceMaps</span>: <span class="string">&quot;inline&quot;</span>,&#125;;</code></pre><ol start="3"><li><strong>빌드 스크립트 추가</strong></li></ol><p><strong>package.json</strong></p><pre><code class="highlight json"><span class="punctuation">&#123;</span>  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>    <span class="attr">&quot;type-check&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tsc&quot;</span><span class="punctuation">,</span>    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;babel src --out-dir dist&quot;</span>  <span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></code></pre><ol start="4"><li><strong>예제 코드 작성</strong></li></ol><p><strong>src&#x2F;index.ts</strong></p><pre><code class="highlight typescript"><span class="keyword">class</span> <span class="title class_">Warrior</span> &#123;  <span class="keyword">private</span> <span class="attr">name</span>: <span class="built_in">string</span>;  <span class="title function_">constructor</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span></span>) &#123;    <span class="variable language_">this</span>.<span class="property">name</span> = name;  &#125;  <span class="title function_">attack</span>(<span class="params"></span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> attacks!`</span>);  &#125;&#125;<span class="keyword">const</span> warrior = <span class="keyword">new</span> <span class="title class_">Warrior</span>(<span class="string">&quot;Conan&quot;</span>);warrior.<span class="title function_">attack</span>();</code></pre><ol start="5"><li><strong>빌드 및 실행</strong></li></ol><pre><code class="highlight bash">npm run type-checknpm run buildnode dist/index.js</code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 TypeScript와 Babel을 통합하여 사용하는 방법과 발생할 수 있는 문제 해결 방법에 대해 알아보았습니다.<br>이를 통해 TypeScript의 타입 검사와 Babel의 최신 JavaScript 기능 지원을 함께 활용할 수 있습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> TS_트러블슈팅 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Express 트러블슈팅[20] WebSocket 통신 문제</title>
      <link href="/express/troubleshooting/20/"/>
      <url>/express/troubleshooting/20/</url>
      
        <content type="html"><![CDATA[<h1 id="Express-서버에서-WebSocket-통신-문제-해결하기"><a href="#Express-서버에서-WebSocket-통신-문제-해결하기" class="headerlink" title="Express 서버에서 WebSocket 통신 문제 해결하기"></a>Express 서버에서 WebSocket 통신 문제 해결하기</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 Express 서버에서 발생할 수 있는 WebSocket 통신 문제와 그 해결 방안에 대해 알아보겠습니다. WebSocket은 실시간 양방향 통신을 가능하게 하여 채팅 애플리케이션, 실시간 알림 등 다양한 용도로 사용됩니다.</p><h2 id="WebSocket-통신-문제-개요"><a href="#WebSocket-통신-문제-개요" class="headerlink" title="WebSocket 통신 문제 개요"></a>WebSocket 통신 문제 개요</h2><p>Express 서버에서 WebSocket 통신 문제는 주로 연결 끊김, 메시지 손실, 성능 저하 등으로 인해 발생할 수 있습니다. 아래는 자주 발생하는 문제들입니다.</p><h3 id="1-WebSocket-연결-끊김"><a href="#1-WebSocket-연결-끊김" class="headerlink" title="1. WebSocket 연결 끊김"></a>1. WebSocket 연결 끊김</h3><pre><code class="highlight bash">Error: WebSocket connection closed unexpectedly    at /path/to/project/websocket.js:10:8    ...</code></pre><h3 id="2-메시지-손실"><a href="#2-메시지-손실" class="headerlink" title="2. 메시지 손실"></a>2. 메시지 손실</h3><pre><code class="highlight bash">Error: WebSocket message lost    at /path/to/project/app.js:20:10    ...</code></pre><h3 id="3-성능-저하"><a href="#3-성능-저하" class="headerlink" title="3. 성능 저하"></a>3. 성능 저하</h3><pre><code class="highlight bash">Error: WebSocket performance issue    at /path/to/project/middleware.js:15:12    ...</code></pre><h2 id="해결-방법"><a href="#해결-방법" class="headerlink" title="해결 방법"></a>해결 방법</h2><p>WebSocket 통신 문제를 해결하기 위한 몇 가지 접근 방법을 살펴보겠습니다.</p><h3 id="1-WebSocket-연결-유지하기"><a href="#1-WebSocket-연결-유지하기" class="headerlink" title="1. WebSocket 연결 유지하기"></a>1. WebSocket 연결 유지하기</h3><p>WebSocket 연결이 끊어지지 않도록 핑-퐁(ping-pong) 메시지를 주기적으로 전송합니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);<span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);<span class="keyword">const</span> <span class="title class_">WebSocket</span> = <span class="built_in">require</span>(<span class="string">&quot;ws&quot;</span>);<span class="keyword">const</span> app = <span class="title function_">express</span>();<span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(app);<span class="keyword">const</span> wss = <span class="keyword">new</span> <span class="title class_">WebSocket</span>.<span class="title class_">Server</span>(&#123; server &#125;);wss.<span class="title function_">on</span>(<span class="string">&quot;connection&quot;</span>, <span class="function">(<span class="params">ws</span>) =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Client connected&quot;</span>);  ws.<span class="title function_">on</span>(<span class="string">&quot;pong&quot;</span>, <span class="function">() =&gt;</span> &#123;    ws.<span class="property">isAlive</span> = <span class="literal">true</span>;  &#125;);  ws.<span class="property">isAlive</span> = <span class="literal">true</span>;  <span class="keyword">const</span> interval = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;    wss.<span class="property">clients</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">client</span>) =&gt;</span> &#123;      <span class="keyword">if</span> (!client.<span class="property">isAlive</span>) <span class="keyword">return</span> client.<span class="title function_">terminate</span>();      client.<span class="property">isAlive</span> = <span class="literal">false</span>;      client.<span class="title function_">ping</span>();    &#125;);  &#125;, <span class="number">30000</span>);  ws.<span class="title function_">on</span>(<span class="string">&quot;close&quot;</span>, <span class="function">() =&gt;</span> &#123;    <span class="built_in">clearInterval</span>(interval);  &#125;);&#125;);app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  res.<span class="title function_">send</span>(<span class="string">&quot;Hello, World!&quot;</span>);&#125;);server.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Server running at http://localhost:3000&quot;</span>);&#125;);</code></pre><p>위 코드에서는 핑-퐁 메시지를 주기적으로 전송하여 WebSocket 연결을 유지합니다.</p><h3 id="2-메시지-손실-방지하기"><a href="#2-메시지-손실-방지하기" class="headerlink" title="2. 메시지 손실 방지하기"></a>2. 메시지 손실 방지하기</h3><p>메시지 손실을 방지하기 위해 메시지 큐를 사용하여 메시지를 관리합니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);<span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);<span class="keyword">const</span> <span class="title class_">WebSocket</span> = <span class="built_in">require</span>(<span class="string">&quot;ws&quot;</span>);<span class="keyword">const</span> app = <span class="title function_">express</span>();<span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(app);<span class="keyword">const</span> wss = <span class="keyword">new</span> <span class="title class_">WebSocket</span>.<span class="title class_">Server</span>(&#123; server &#125;);<span class="keyword">const</span> messageQueue = [];wss.<span class="title function_">on</span>(<span class="string">&quot;connection&quot;</span>, <span class="function">(<span class="params">ws</span>) =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Client connected&quot;</span>);  ws.<span class="title function_">on</span>(<span class="string">&quot;message&quot;</span>, <span class="function">(<span class="params">message</span>) =&gt;</span> &#123;    messageQueue.<span class="title function_">push</span>(message);    <span class="title function_">processMessageQueue</span>();  &#125;);  ws.<span class="title function_">on</span>(<span class="string">&quot;close&quot;</span>, <span class="function">() =&gt;</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Client disconnected&quot;</span>);  &#125;);&#125;);<span class="keyword">function</span> <span class="title function_">processMessageQueue</span>(<span class="params"></span>) &#123;  <span class="keyword">while</span> (messageQueue.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;    <span class="keyword">const</span> message = messageQueue.<span class="title function_">shift</span>();    wss.<span class="property">clients</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">client</span>) =&gt;</span> &#123;      <span class="keyword">if</span> (client.<span class="property">readyState</span> === <span class="title class_">WebSocket</span>.<span class="property">OPEN</span>) &#123;        client.<span class="title function_">send</span>(message);      &#125;    &#125;);  &#125;&#125;app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  res.<span class="title function_">send</span>(<span class="string">&quot;Hello, World!&quot;</span>);&#125;);server.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Server running at http://localhost:3000&quot;</span>);&#125;);</code></pre><p>위 코드에서는 메시지 큐를 사용하여 메시지를 관리하고, 메시지 손실을 방지합니다.</p><h3 id="3-성능-최적화하기"><a href="#3-성능-최적화하기" class="headerlink" title="3. 성능 최적화하기"></a>3. 성능 최적화하기</h3><p>WebSocket 통신의 성능을 최적화하기 위해 클러스터링을 사용하여 여러 워커 프로세스를 생성합니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> cluster = <span class="built_in">require</span>(<span class="string">&quot;cluster&quot;</span>);<span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);<span class="keyword">const</span> <span class="title class_">WebSocket</span> = <span class="built_in">require</span>(<span class="string">&quot;ws&quot;</span>);<span class="keyword">const</span> numCPUs = <span class="built_in">require</span>(<span class="string">&quot;os&quot;</span>).<span class="title function_">cpus</span>().<span class="property">length</span>;<span class="keyword">if</span> (cluster.<span class="property">isMaster</span>) &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Master <span class="subst">$&#123;process.pid&#125;</span> is running`</span>);  <span class="comment">// 워커 프로세스 생성</span>  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; numCPUs; i++) &#123;    cluster.<span class="title function_">fork</span>();  &#125;  cluster.<span class="title function_">on</span>(<span class="string">&quot;exit&quot;</span>, <span class="function">(<span class="params">worker, code, signal</span>) =&gt;</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Worker <span class="subst">$&#123;worker.process.pid&#125;</span> died`</span>);  &#125;);&#125; <span class="keyword">else</span> &#123;  <span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);  <span class="keyword">const</span> app = <span class="title function_">express</span>();  <span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(app);  <span class="keyword">const</span> wss = <span class="keyword">new</span> <span class="title class_">WebSocket</span>.<span class="title class_">Server</span>(&#123; server &#125;);  wss.<span class="title function_">on</span>(<span class="string">&quot;connection&quot;</span>, <span class="function">(<span class="params">ws</span>) =&gt;</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Client connected&quot;</span>);    ws.<span class="title function_">on</span>(<span class="string">&quot;message&quot;</span>, <span class="function">(<span class="params">message</span>) =&gt;</span> &#123;      wss.<span class="property">clients</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">client</span>) =&gt;</span> &#123;        <span class="keyword">if</span> (client.<span class="property">readyState</span> === <span class="title class_">WebSocket</span>.<span class="property">OPEN</span>) &#123;          client.<span class="title function_">send</span>(message);        &#125;      &#125;);    &#125;);    ws.<span class="title function_">on</span>(<span class="string">&quot;close&quot;</span>, <span class="function">() =&gt;</span> &#123;      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Client disconnected&quot;</span>);    &#125;);  &#125;);  app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;    res.<span class="title function_">send</span>(<span class="string">&quot;Hello, World!&quot;</span>);  &#125;);  server.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Worker <span class="subst">$&#123;process.pid&#125;</span> started`</span>);  &#125;);&#125;</code></pre><p>위 코드에서는 클러스터링을 사용하여 여러 워커 프로세스를 생성하고, WebSocket 통신의 성능을 최적화합니다.</p><h3 id="4-WebSocket-라이브러리-사용하기"><a href="#4-WebSocket-라이브러리-사용하기" class="headerlink" title="4. WebSocket 라이브러리 사용하기"></a>4. WebSocket 라이브러리 사용하기</h3><p>WebSocket 통신을 쉽게 구현하기 위해 <code>socket.io</code>와 같은 WebSocket 라이브러리를 사용할 수 있습니다.</p><pre><code class="highlight bash">npm install socket.io</code></pre><p>설치 후, <code>socket.io</code>를 사용하여 WebSocket 통신을 구현합니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);<span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);<span class="keyword">const</span> socketIo = <span class="built_in">require</span>(<span class="string">&quot;socket.io&quot;</span>);<span class="keyword">const</span> app = <span class="title function_">express</span>();<span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(app);<span class="keyword">const</span> io = <span class="title function_">socketIo</span>(server);io.<span class="title function_">on</span>(<span class="string">&quot;connection&quot;</span>, <span class="function">(<span class="params">socket</span>) =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Client connected&quot;</span>);  socket.<span class="title function_">on</span>(<span class="string">&quot;message&quot;</span>, <span class="function">(<span class="params">message</span>) =&gt;</span> &#123;    io.<span class="title function_">emit</span>(<span class="string">&quot;message&quot;</span>, message);  &#125;);  socket.<span class="title function_">on</span>(<span class="string">&quot;disconnect&quot;</span>, <span class="function">() =&gt;</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Client disconnected&quot;</span>);  &#125;);&#125;);app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  res.<span class="title function_">send</span>(<span class="string">&quot;Hello, World!&quot;</span>);&#125;);server.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Server running at http://localhost:3000&quot;</span>);&#125;);</code></pre><p>위 코드에서는 <code>socket.io</code>를 사용하여 WebSocket 통신을 구현합니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>위의 방법들을 사용하여 WebSocket 통신 문제를 해결할 수 있습니다. 핑-퐁 메시지를 주기적으로 전송하여 연결을 유지하고, 메시지 큐를 사용하여 메시지 손실을 방지하며, 클러스터링을 사용하여 성능을 최적화하고, <code>socket.io</code>와 같은 WebSocket 라이브러리를 사용하여 WebSocket 통신을 쉽게 구현하여 Express 서버의 WebSocket 통신 문제를 해결해 보세요!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> Express </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Express 트러블슈팅[19] 클러스터링 및 부하 분산 문제</title>
      <link href="/express/troubleshooting/19/"/>
      <url>/express/troubleshooting/19/</url>
      
        <content type="html"><![CDATA[<h1 id="Express-서버에서-클러스터링-및-부하-분산-문제-해결하기"><a href="#Express-서버에서-클러스터링-및-부하-분산-문제-해결하기" class="headerlink" title="Express 서버에서 클러스터링 및 부하 분산 문제 해결하기"></a>Express 서버에서 클러스터링 및 부하 분산 문제 해결하기</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 Express 서버에서 발생할 수 있는 클러스터링 및 부하 분산 문제와 그 해결 방안에 대해 알아보겠습니다. 클러스터링과 부하 분산은 애플리케이션의 확장성을 높이고, 더 많은 요청을 처리할 수 있도록 도와줍니다.</p><h2 id="클러스터링-및-부하-분산-문제-개요"><a href="#클러스터링-및-부하-분산-문제-개요" class="headerlink" title="클러스터링 및 부하 분산 문제 개요"></a>클러스터링 및 부하 분산 문제 개요</h2><p>Express 서버에서 클러스터링 및 부하 분산 문제는 주로 서버의 확장성 부족, 단일 장애점(Single Point of Failure), 부하 분산 설정 오류 등으로 인해 발생할 수 있습니다. 아래는 자주 발생하는 문제들입니다.</p><h3 id="1-서버의-확장성-부족"><a href="#1-서버의-확장성-부족" class="headerlink" title="1. 서버의 확장성 부족"></a>1. 서버의 확장성 부족</h3><pre><code class="highlight bash">Error: Server scalability issue    at /path/to/project/app.js:10:8    ...</code></pre><h3 id="2-단일-장애점-문제"><a href="#2-단일-장애점-문제" class="headerlink" title="2. 단일 장애점 문제"></a>2. 단일 장애점 문제</h3><pre><code class="highlight bash">Error: Single Point of Failure detected    at /path/to/project/server.js:20:10    ...</code></pre><h3 id="3-부하-분산-설정-오류"><a href="#3-부하-분산-설정-오류" class="headerlink" title="3. 부하 분산 설정 오류"></a>3. 부하 분산 설정 오류</h3><pre><code class="highlight bash">Error: Load balancing configuration error    at /path/to/project/loadBalancer.js:15:12    ...</code></pre><h2 id="해결-방법"><a href="#해결-방법" class="headerlink" title="해결 방법"></a>해결 방법</h2><p>클러스터링 및 부하 분산 문제를 해결하기 위한 몇 가지 접근 방법을 살펴보겠습니다.</p><h3 id="1-클러스터-모듈-사용하기"><a href="#1-클러스터-모듈-사용하기" class="headerlink" title="1. 클러스터 모듈 사용하기"></a>1. 클러스터 모듈 사용하기</h3><p>Node.js의 클러스터 모듈을 사용하여 여러 워커 프로세스를 생성하고, 서버의 확장성을 높입니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> cluster = <span class="built_in">require</span>(<span class="string">&quot;cluster&quot;</span>);<span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);<span class="keyword">const</span> numCPUs = <span class="built_in">require</span>(<span class="string">&quot;os&quot;</span>).<span class="title function_">cpus</span>().<span class="property">length</span>;<span class="keyword">if</span> (cluster.<span class="property">isMaster</span>) &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Master <span class="subst">$&#123;process.pid&#125;</span> is running`</span>);  <span class="comment">// 워커 프로세스 생성</span>  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; numCPUs; i++) &#123;    cluster.<span class="title function_">fork</span>();  &#125;  cluster.<span class="title function_">on</span>(<span class="string">&quot;exit&quot;</span>, <span class="function">(<span class="params">worker, code, signal</span>) =&gt;</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Worker <span class="subst">$&#123;worker.process.pid&#125;</span> died`</span>);  &#125;);&#125; <span class="keyword">else</span> &#123;  <span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);  <span class="keyword">const</span> app = <span class="title function_">express</span>();  app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;    res.<span class="title function_">send</span>(<span class="string">&quot;Hello, World!&quot;</span>);  &#125;);  app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Worker <span class="subst">$&#123;process.pid&#125;</span> started`</span>);  &#125;);&#125;</code></pre><p>위 코드에서는 클러스터 모듈을 사용하여 여러 워커 프로세스를 생성하고, 서버의 확장성을 높입니다.</p><h3 id="2-부하-분산기-사용하기"><a href="#2-부하-분산기-사용하기" class="headerlink" title="2. 부하 분산기 사용하기"></a>2. 부하 분산기 사용하기</h3><p>부하 분산기를 사용하여 여러 서버에 요청을 분산시킵니다. Nginx를 부하 분산기로 설정할 수 있습니다.</p><h4 id="Nginx-설정-예제"><a href="#Nginx-설정-예제" class="headerlink" title="Nginx 설정 예제"></a>Nginx 설정 예제</h4><pre><code class="highlight plaintext"># /etc/nginx/nginx.confhttp &#123;  upstream myapp &#123;    server 127.0.0.1:3000;    server 127.0.0.1:3001;    server 127.0.0.1:3002;    server 127.0.0.1:3003;  &#125;  server &#123;    listen 80;    location / &#123;      proxy_pass http://myapp;    &#125;  &#125;&#125;</code></pre><p>위 Nginx 설정에서는 <code>myapp</code> 업스트림에 여러 서버를 추가하여 요청을 분산시킵니다.</p><h3 id="3-PM2-사용하기"><a href="#3-PM2-사용하기" class="headerlink" title="3. PM2 사용하기"></a>3. PM2 사용하기</h3><p>PM2를 사용하여 클러스터링과 프로세스 관리를 쉽게 할 수 있습니다.</p><pre><code class="highlight bash">npm install pm2 -gpm2 start app.js -i max</code></pre><p>위 명령어를 사용하여 PM2를 설치하고, 애플리케이션을 클러스터 모드로 실행합니다.</p><h3 id="4-헬스-체크-설정하기"><a href="#4-헬스-체크-설정하기" class="headerlink" title="4. 헬스 체크 설정하기"></a>4. 헬스 체크 설정하기</h3><p>헬스 체크를 설정하여 서버의 상태를 모니터링하고, 문제가 발생한 서버를 자동으로 제외합니다.</p><h4 id="Nginx-헬스-체크-설정-예제"><a href="#Nginx-헬스-체크-설정-예제" class="headerlink" title="Nginx 헬스 체크 설정 예제"></a>Nginx 헬스 체크 설정 예제</h4><pre><code class="highlight plaintext"># /etc/nginx/nginx.confhttp &#123;  upstream myapp &#123;    server 127.0.0.1:3000;    server 127.0.0.1:3001;    server 127.0.0.1:3002;    server 127.0.0.1:3003;  &#125;  server &#123;    listen 80;    location / &#123;      proxy_pass http://myapp;      proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;    &#125;  &#125;&#125;</code></pre><p>위 Nginx 설정에서는 헬스 체크를 설정하여 문제가 발생한 서버를 자동으로 제외합니다.</p><h3 id="5-로드-밸런서-사용하기"><a href="#5-로드-밸런서-사용하기" class="headerlink" title="5. 로드 밸런서 사용하기"></a>5. 로드 밸런서 사용하기</h3><p>클라우드 서비스의 로드 밸런서를 사용하여 부하 분산을 설정할 수 있습니다. AWS Elastic Load Balancer(ELB)나 Google Cloud Load Balancer를 사용할 수 있습니다.</p><h4 id="AWS-ELB-설정-예제"><a href="#AWS-ELB-설정-예제" class="headerlink" title="AWS ELB 설정 예제"></a>AWS ELB 설정 예제</h4><ol><li>AWS Management Console에 로그인합니다.</li><li>EC2 대시보드에서 “Load Balancers”를 선택합니다.</li><li>“Create Load Balancer”를 클릭하고, Classic Load Balancer를 선택합니다.</li><li>로드 밸런서 설정을 완료하고, 대상 인스턴스를 추가합니다.</li></ol><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>위의 방법들을 사용하여 클러스터링 및 부하 분산 문제를 해결할 수 있습니다. 클러스터 모듈을 사용해 여러 워커 프로세스를 생성합니다. 부하 분산기로 요청을 분산시키고, PM2로 클러스터링과 프로세스 관리를 쉽게 합니다. 헬스 체크를 설정해 서버의 상태를 모니터링합니다. 클라우드 서비스의 로드 밸런서로 부하 분산을 설정합니다. 이렇게 하여 Express 서버의 클러스터링 및 부하 분산 문제를 해결해 보세요!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> Express </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Express 트러블슈팅[18] 성능 최적화 문제</title>
      <link href="/express/troubleshooting/18/"/>
      <url>/express/troubleshooting/18/</url>
      
        <content type="html"><![CDATA[<h1 id="Express-서버에서-성능-최적화-문제-해결하기"><a href="#Express-서버에서-성능-최적화-문제-해결하기" class="headerlink" title="Express 서버에서 성능 최적화 문제 해결하기"></a>Express 서버에서 성능 최적화 문제 해결하기</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 Express 서버에서 발생할 수 있는 성능 최적화 문제와 그 해결 방안에 대해 알아보겠습니다. 성능 최적화는 애플리케이션의 응답 속도를 개선하고, 더 많은 요청을 처리할 수 있도록 도와줍니다.</p><h2 id="성능-최적화-문제-개요"><a href="#성능-최적화-문제-개요" class="headerlink" title="성능 최적화 문제 개요"></a>성능 최적화 문제 개요</h2><p>Express 서버에서 성능 최적화 문제는 주로 비효율적인 코드, 불필요한 미들웨어, 데이터베이스 쿼리 최적화 부족 등으로 인해 발생할 수 있습니다. 아래는 자주 발생하는 문제들입니다.</p><h3 id="1-응답-속도가-느린-경우"><a href="#1-응답-속도가-느린-경우" class="headerlink" title="1. 응답 속도가 느린 경우"></a>1. 응답 속도가 느린 경우</h3><pre><code class="highlight bash">Error: Slow response time    at /path/to/project/routes.js:10:8    ...</code></pre><h3 id="2-CPU-사용량이-높은-경우"><a href="#2-CPU-사용량이-높은-경우" class="headerlink" title="2. CPU 사용량이 높은 경우"></a>2. CPU 사용량이 높은 경우</h3><pre><code class="highlight bash">Error: High CPU usage    at /path/to/project/app.js:20:10    ...</code></pre><h3 id="3-메모리-사용량이-높은-경우"><a href="#3-메모리-사용량이-높은-경우" class="headerlink" title="3. 메모리 사용량이 높은 경우"></a>3. 메모리 사용량이 높은 경우</h3><pre><code class="highlight bash">Error: High memory usage    at /path/to/project/middleware.js:15:12    ...</code></pre><h2 id="해결-방법"><a href="#해결-방법" class="headerlink" title="해결 방법"></a>해결 방법</h2><p>성능 최적화 문제를 해결하기 위한 몇 가지 접근 방법을 살펴보겠습니다.</p><h3 id="1-비효율적인-코드-최적화하기"><a href="#1-비효율적인-코드-최적화하기" class="headerlink" title="1. 비효율적인 코드 최적화하기"></a>1. 비효율적인 코드 최적화하기</h3><p>비효율적인 코드를 최적화하여 성능을 개선합니다. 예를 들어, 반복문을 최적화하거나, 불필요한 연산을 제거합니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);<span class="keyword">const</span> app = <span class="title function_">express</span>();app.<span class="title function_">get</span>(<span class="string">&quot;/data&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  <span class="keyword">const</span> data = [];  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++) &#123;    data.<span class="title function_">push</span>(i);  &#125;  res.<span class="title function_">send</span>(data);&#125;);app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Server running at http://localhost:3000&quot;</span>);&#125;);</code></pre><p>위 코드에서는 불필요한 반복문을 최적화하여 성능을 개선합니다.</p><h3 id="2-불필요한-미들웨어-제거하기"><a href="#2-불필요한-미들웨어-제거하기" class="headerlink" title="2. 불필요한 미들웨어 제거하기"></a>2. 불필요한 미들웨어 제거하기</h3><p>불필요한 미들웨어를 제거하여 요청 처리 속도를 개선합니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);<span class="keyword">const</span> app = <span class="title function_">express</span>();<span class="comment">// 불필요한 미들웨어 제거</span><span class="comment">// app.use(someUnnecessaryMiddleware);</span>app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  res.<span class="title function_">send</span>(<span class="string">&quot;Hello, World!&quot;</span>);&#125;);app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Server running at http://localhost:3000&quot;</span>);&#125;);</code></pre><p>위 코드에서는 불필요한 미들웨어를 제거하여 요청 처리 속도를 개선합니다.</p><h3 id="3-데이터베이스-쿼리-최적화하기"><a href="#3-데이터베이스-쿼리-최적화하기" class="headerlink" title="3. 데이터베이스 쿼리 최적화하기"></a>3. 데이터베이스 쿼리 최적화하기</h3><p>데이터베이스 쿼리를 최적화하여 성능을 개선합니다. 예를 들어, 인덱스를 추가하거나, 쿼리를 최적화합니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);<span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&quot;mongoose&quot;</span>);<span class="keyword">const</span> app = <span class="title function_">express</span>();mongoose.<span class="title function_">connect</span>(<span class="string">&quot;mongodb://localhost:27017/mydatabase&quot;</span>, &#123;  <span class="attr">useNewUrlParser</span>: <span class="literal">true</span>,  <span class="attr">useUnifiedTopology</span>: <span class="literal">true</span>,&#125;);<span class="keyword">const</span> <span class="title class_">UserSchema</span> = <span class="keyword">new</span> mongoose.<span class="title class_">Schema</span>(&#123;  <span class="attr">name</span>: <span class="title class_">String</span>,  <span class="attr">age</span>: <span class="title class_">Number</span>,&#125;);<span class="title class_">UserSchema</span>.<span class="title function_">index</span>(&#123; <span class="attr">name</span>: <span class="number">1</span> &#125;); <span class="comment">// 인덱스 추가</span><span class="keyword">const</span> <span class="title class_">User</span> = mongoose.<span class="title function_">model</span>(<span class="string">&quot;User&quot;</span>, <span class="title class_">UserSchema</span>);app.<span class="title function_">get</span>(<span class="string">&quot;/users&quot;</span>, <span class="title function_">async</span> (req, res) =&gt; &#123;  <span class="keyword">const</span> users = <span class="keyword">await</span> <span class="title class_">User</span>.<span class="title function_">find</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;John&quot;</span> &#125;);  res.<span class="title function_">send</span>(users);&#125;);app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Server running at http://localhost:3000&quot;</span>);&#125;);</code></pre><p>위 코드에서는 데이터베이스 쿼리를 최적화하여 성능을 개선합니다.</p><h3 id="4-캐싱-사용하기"><a href="#4-캐싱-사용하기" class="headerlink" title="4. 캐싱 사용하기"></a>4. 캐싱 사용하기</h3><p>캐싱을 사용하여 자주 요청되는 데이터를 메모리에 저장하고, 성능을 개선합니다. <code>node-cache</code> 패키지를 사용하여 캐싱을 구현할 수 있습니다.</p><pre><code class="highlight bash">npm install node-cache</code></pre><p>설치 후, <code>node-cache</code>를 사용하여 캐싱을 구현합니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);<span class="keyword">const</span> <span class="title class_">NodeCache</span> = <span class="built_in">require</span>(<span class="string">&quot;node-cache&quot;</span>);<span class="keyword">const</span> app = <span class="title function_">express</span>();<span class="keyword">const</span> cache = <span class="keyword">new</span> <span class="title class_">NodeCache</span>(&#123; <span class="attr">stdTTL</span>: <span class="number">100</span>, <span class="attr">checkperiod</span>: <span class="number">120</span> &#125;);app.<span class="title function_">get</span>(<span class="string">&quot;/data&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  <span class="keyword">const</span> cachedData = cache.<span class="title function_">get</span>(<span class="string">&quot;data&quot;</span>);  <span class="keyword">if</span> (cachedData) &#123;    <span class="keyword">return</span> res.<span class="title function_">send</span>(cachedData);  &#125;  <span class="keyword">const</span> data = &#123; <span class="attr">key</span>: <span class="string">&quot;value&quot;</span> &#125;;  cache.<span class="title function_">set</span>(<span class="string">&quot;data&quot;</span>, data);  res.<span class="title function_">send</span>(data);&#125;);app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Server running at http://localhost:3000&quot;</span>);&#125;);</code></pre><p>위 코드에서는 <code>node-cache</code>를 사용하여 자주 요청되는 데이터를 캐싱합니다.</p><h3 id="5-비동기-처리-사용하기"><a href="#5-비동기-처리-사용하기" class="headerlink" title="5. 비동기 처리 사용하기"></a>5. 비동기 처리 사용하기</h3><p>비동기 처리를 사용하여 성능을 개선합니다. <code>async</code>와 <code>await</code>를 사용하여 비동기 작업을 처리합니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);<span class="keyword">const</span> app = <span class="title function_">express</span>();app.<span class="title function_">get</span>(<span class="string">&quot;/data&quot;</span>, <span class="title function_">async</span> (req, res) =&gt; &#123;  <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="title function_">getDataFromDatabase</span>();  res.<span class="title function_">send</span>(data);&#125;);<span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getDataFromDatabase</span>(<span class="params"></span>) &#123;  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;      <span class="title function_">resolve</span>(&#123; <span class="attr">key</span>: <span class="string">&quot;value&quot;</span> &#125;);    &#125;, <span class="number">1000</span>);  &#125;);&#125;app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Server running at http://localhost:3000&quot;</span>);&#125;);</code></pre><p>위 코드에서는 <code>async</code>와 <code>await</code>를 사용하여 비동기 작업을 처리합니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>위의 방법들을 사용하여 성능 최적화 문제를 해결할 수 있습니다. 비효율적인 코드를 최적화하고, 불필요한 미들웨어를 제거하며, 데이터베이스 쿼리를 최적화하고, 캐싱을 사용하며, 비동기 처리를 사용하여 Express 서버의 성능 최적화 문제를 해결해 보세요!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> Express </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Express 트러블슈팅[17] 보안 취약점 문제</title>
      <link href="/express/troubleshooting/17/"/>
      <url>/express/troubleshooting/17/</url>
      
        <content type="html"><![CDATA[<h1 id="Express-서버에서-보안-취약점-문제-해결하기"><a href="#Express-서버에서-보안-취약점-문제-해결하기" class="headerlink" title="Express 서버에서 보안 취약점 문제 해결하기"></a>Express 서버에서 보안 취약점 문제 해결하기</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 Express 서버에서 발생할 수 있는 보안 취약점 문제와 그 해결 방안에 대해 알아보겠습니다. 보안 취약점은 애플리케이션의 데이터와 사용자 정보를 보호하기 위해 반드시 해결해야 하는 중요한 문제입니다.</p><h2 id="보안-취약점-문제-개요"><a href="#보안-취약점-문제-개요" class="headerlink" title="보안 취약점 문제 개요"></a>보안 취약점 문제 개요</h2><p>Express 서버에서 보안 취약점은 주로 입력 검증 부족, 민감한 데이터 노출, CSRF(Cross-Site Request Forgery) 공격, XSS(Cross-Site Scripting) 공격 등으로 인해 발생할 수 있습니다. 아래는 자주 발생하는 문제들입니다.</p><h3 id="1-입력-검증-부족"><a href="#1-입력-검증-부족" class="headerlink" title="1. 입력 검증 부족"></a>1. 입력 검증 부족</h3><pre><code class="highlight bash">Error: SQL Injection detected    at /path/to/project/routes.js:10:8    ...</code></pre><h3 id="2-민감한-데이터-노출"><a href="#2-민감한-데이터-노출" class="headerlink" title="2. 민감한 데이터 노출"></a>2. 민감한 데이터 노출</h3><pre><code class="highlight bash">Error: Sensitive information exposed    at /path/to/project/app.js:20:10    ...</code></pre><h3 id="3-CSRF-공격"><a href="#3-CSRF-공격" class="headerlink" title="3. CSRF 공격"></a>3. CSRF 공격</h3><pre><code class="highlight bash">Error: CSRF token missing or incorrect    at /path/to/project/middleware.js:15:12    ...</code></pre><h3 id="4-XSS-공격"><a href="#4-XSS-공격" class="headerlink" title="4. XSS 공격"></a>4. XSS 공격</h3><pre><code class="highlight bash">Error: XSS attack detected    at /path/to/project/views.js:25:14    ...</code></pre><h2 id="해결-방법"><a href="#해결-방법" class="headerlink" title="해결 방법"></a>해결 방법</h2><p>보안 취약점 문제를 해결하기 위한 몇 가지 접근 방법을 살펴보겠습니다.</p><h3 id="1-입력-검증-강화하기"><a href="#1-입력-검증-강화하기" class="headerlink" title="1. 입력 검증 강화하기"></a>1. 입력 검증 강화하기</h3><p>입력 검증을 강화하여 SQL 인젝션과 같은 공격을 방지합니다. <code>express-validator</code> 패키지를 사용하여 입력 검증을 수행할 수 있습니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);<span class="keyword">const</span> &#123; body, validationResult &#125; = <span class="built_in">require</span>(<span class="string">&quot;express-validator&quot;</span>);<span class="keyword">const</span> app = <span class="title function_">express</span>();app.<span class="title function_">use</span>(express.<span class="title function_">json</span>());app.<span class="title function_">post</span>(  <span class="string">&quot;/user&quot;</span>,  <span class="title function_">body</span>(<span class="string">&quot;username&quot;</span>)    .<span class="title function_">isAlphanumeric</span>()    .<span class="title function_">withMessage</span>(<span class="string">&quot;Username must be alphanumeric&quot;</span>),  <span class="title function_">body</span>(<span class="string">&quot;email&quot;</span>).<span class="title function_">isEmail</span>().<span class="title function_">withMessage</span>(<span class="string">&quot;Email must be valid&quot;</span>),  <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;    <span class="keyword">const</span> errors = <span class="title function_">validationResult</span>(req);    <span class="keyword">if</span> (!errors.<span class="title function_">isEmpty</span>()) &#123;      <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">json</span>(&#123; <span class="attr">errors</span>: errors.<span class="title function_">array</span>() &#125;);    &#125;    res.<span class="title function_">send</span>(<span class="string">&quot;User data is valid&quot;</span>);  &#125;);app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Server running at http://localhost:3000&quot;</span>);&#125;);</code></pre><p>위 코드에서는 <code>express-validator</code>를 사용하여 입력 검증을 수행합니다.</p><h3 id="2-민감한-데이터-보호하기"><a href="#2-민감한-데이터-보호하기" class="headerlink" title="2. 민감한 데이터 보호하기"></a>2. 민감한 데이터 보호하기</h3><p>민감한 데이터를 보호하기 위해 환경 변수를 사용하고, <code>.env</code> 파일을 <code>.gitignore</code> 파일에 추가하여 버전 관리 시스템에 포함되지 않도록 합니다.</p><pre><code class="highlight plaintext"># .env 파일DB_PASSWORD=supersecretpassword</code></pre><pre><code class="highlight plaintext"># .gitignore 파일.env</code></pre><p>위 <code>.env</code> 파일과 <code>.gitignore</code> 파일에서는 민감한 데이터를 보호합니다.</p><h3 id="3-CSRF-방지하기"><a href="#3-CSRF-방지하기" class="headerlink" title="3. CSRF 방지하기"></a>3. CSRF 방지하기</h3><p>CSRF 공격을 방지하기 위해 <code>csurf</code> 패키지를 사용하여 CSRF 토큰을 검증합니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);<span class="keyword">const</span> csrf = <span class="built_in">require</span>(<span class="string">&quot;csurf&quot;</span>);<span class="keyword">const</span> cookieParser = <span class="built_in">require</span>(<span class="string">&quot;cookie-parser&quot;</span>);<span class="keyword">const</span> app = <span class="title function_">express</span>();<span class="keyword">const</span> csrfProtection = <span class="title function_">csrf</span>(&#123; <span class="attr">cookie</span>: <span class="literal">true</span> &#125;);app.<span class="title function_">use</span>(<span class="title function_">cookieParser</span>());app.<span class="title function_">use</span>(csrfProtection);app.<span class="title function_">get</span>(<span class="string">&quot;/form&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  res.<span class="title function_">send</span>(<span class="string">`&lt;form action=&quot;/process&quot; method=&quot;POST&quot;&gt;</span><span class="string">              &lt;input type=&quot;hidden&quot; name=&quot;_csrf&quot; value=&quot;<span class="subst">$&#123;req.csrfToken()&#125;</span>&quot;&gt;</span><span class="string">              &lt;button type=&quot;submit&quot;&gt;Submit&lt;/button&gt;</span><span class="string">            &lt;/form&gt;`</span>);&#125;);app.<span class="title function_">post</span>(<span class="string">&quot;/process&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  res.<span class="title function_">send</span>(<span class="string">&quot;Form processed&quot;</span>);&#125;);app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Server running at http://localhost:3000&quot;</span>);&#125;);</code></pre><p>위 코드에서는 <code>csurf</code> 패키지를 사용하여 CSRF 토큰을 검증합니다.</p><h3 id="4-XSS-방지하기"><a href="#4-XSS-방지하기" class="headerlink" title="4. XSS 방지하기"></a>4. XSS 방지하기</h3><p>XSS 공격을 방지하기 위해 사용자 입력을 적절히 이스케이프 처리합니다. <code>helmet</code> 패키지를 사용하여 기본적인 보안 설정을 추가할 수 있습니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);<span class="keyword">const</span> helmet = <span class="built_in">require</span>(<span class="string">&quot;helmet&quot;</span>);<span class="keyword">const</span> app = <span class="title function_">express</span>();app.<span class="title function_">use</span>(<span class="title function_">helmet</span>());app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  res.<span class="title function_">send</span>(<span class="string">&quot;Hello, World!&quot;</span>);&#125;);app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Server running at http://localhost:3000&quot;</span>);&#125;);</code></pre><p>위 코드에서는 <code>helmet</code> 패키지를 사용하여 기본적인 보안 설정을 추가합니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>위의 방법들을 사용하여 보안 취약점 문제를 해결할 수 있습니다. 입력 검증을 강화하고, 민감한 데이터를 보호하며, CSRF 토큰을 검증하고, XSS 공격을 방지하여 Express 서버의 보안 취약점 문제를 해결해 보세요!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> Express </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Javascript 프록시 (Proxy)</title>
      <link href="/javascript/detail/16/"/>
      <url>/javascript/detail/16/</url>
      
        <content type="html"><![CDATA[<h1 id="Javascript-프록시-Proxy"><a href="#Javascript-프록시-Proxy" class="headerlink" title="Javascript 프록시 (Proxy)"></a>Javascript 프록시 (Proxy)</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 JavaScript에서 프록시(Proxy)에 대해 알아보겠습니다. 프록시는 객체의 기본 동작을 가로채고 재정의할 수 있는 기능을 제공합니다.</p><h2 id="프록시-기본-사용법"><a href="#프록시-기본-사용법" class="headerlink" title="프록시 기본 사용법"></a>프록시 기본 사용법</h2><p>프록시는 <code>new Proxy</code>를 사용하여 생성합니다:</p><pre><code class="highlight javascript"><span class="keyword">const</span> target = &#123;&#125;;<span class="keyword">const</span> handler = &#123;  <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params">obj, prop</span>) &#123;    <span class="keyword">return</span> prop <span class="keyword">in</span> obj ? obj[prop] : <span class="string">&quot;default&quot;</span>;  &#125;,&#125;;<span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, handler);<span class="variable language_">console</span>.<span class="title function_">log</span>(proxy.<span class="property">foo</span>); <span class="comment">// 출력: default</span></code></pre><h2 id="프록시의-트랩"><a href="#프록시의-트랩" class="headerlink" title="프록시의 트랩"></a>프록시의 트랩</h2><p>프록시는 다양한 트랩(trap)을 제공하여 객체의 동작을 가로챌 수 있습니다:</p><pre><code class="highlight javascript"><span class="keyword">const</span> target = &#123;&#125;;<span class="keyword">const</span> handler = &#123;  <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params">obj, prop</span>) &#123;    <span class="keyword">return</span> prop <span class="keyword">in</span> obj ? obj[prop] : <span class="string">&quot;default&quot;</span>;  &#125;,  <span class="attr">set</span>: <span class="keyword">function</span> (<span class="params">obj, prop, value</span>) &#123;    <span class="keyword">if</span> (prop === <span class="string">&quot;age&quot;</span> &amp;&amp; <span class="keyword">typeof</span> value !== <span class="string">&quot;number&quot;</span>) &#123;      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&quot;Age must be a number&quot;</span>);    &#125;    obj[prop] = value;    <span class="keyword">return</span> <span class="literal">true</span>;  &#125;,&#125;;<span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, handler);proxy.<span class="property">age</span> = <span class="number">30</span>;<span class="variable language_">console</span>.<span class="title function_">log</span>(proxy.<span class="property">age</span>); <span class="comment">// 출력: 30</span><span class="comment">// proxy.age = &#x27;thirty&#x27;; // 오류: Age must be a number</span></code></pre><h2 id="프록시의-활용-예"><a href="#프록시의-활용-예" class="headerlink" title="프록시의 활용 예"></a>프록시의 활용 예</h2><p>프록시는 데이터 유효성 검사, 로깅, 접근 제어 등 다양한 용도로 활용할 수 있습니다:</p><pre><code class="highlight javascript"><span class="keyword">const</span> user = &#123;  <span class="attr">name</span>: <span class="string">&quot;John Doe&quot;</span>,  <span class="attr">age</span>: <span class="number">30</span>,&#125;;<span class="keyword">const</span> handler = &#123;  <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params">obj, prop</span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Getting <span class="subst">$&#123;prop&#125;</span>`</span>);    <span class="keyword">return</span> obj[prop];  &#125;,  <span class="attr">set</span>: <span class="keyword">function</span> (<span class="params">obj, prop, value</span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Setting <span class="subst">$&#123;prop&#125;</span> to <span class="subst">$&#123;value&#125;</span>`</span>);    obj[prop] = value;    <span class="keyword">return</span> <span class="literal">true</span>;  &#125;,&#125;;<span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(user, handler);<span class="variable language_">console</span>.<span class="title function_">log</span>(proxy.<span class="property">name</span>); <span class="comment">// 출력: Getting name, John Doe</span>proxy.<span class="property">age</span> = <span class="number">31</span>; <span class="comment">// 출력: Setting age to 31</span></code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 Javascript에서 프록시를 사용하는 방법에 대해 알아보았습니다. 프록시는 객체의 기본 동작을 가로채고 재정의할 수 있는 강력한 기능을 제공합니다. 다음 시간에는 <code>Reflect</code> API에 대해 알아보겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> JS_디테일 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Express 트러블슈팅[16] API 버전 관리 문제</title>
      <link href="/express/troubleshooting/16/"/>
      <url>/express/troubleshooting/16/</url>
      
        <content type="html"><![CDATA[<h1 id="Express-서버에서-API-버전-관리-문제-해결하기"><a href="#Express-서버에서-API-버전-관리-문제-해결하기" class="headerlink" title="Express 서버에서 API 버전 관리 문제 해결하기"></a>Express 서버에서 API 버전 관리 문제 해결하기</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 Express 서버에서 발생할 수 있는 API 버전 관리 문제와 그 해결 방안에 대해 알아보겠습니다. API 버전 관리는 애플리케이션의 호환성을 유지하고, 새로운 기능을 추가할 때 중요한 역할을 합니다.</p><h2 id="API-버전-관리-문제-개요"><a href="#API-버전-관리-문제-개요" class="headerlink" title="API 버전 관리 문제 개요"></a>API 버전 관리 문제 개요</h2><p>Express 서버에서 API 버전 관리를 제대로 하지 않으면 클라이언트와 서버 간의 호환성 문제가 발생할 수 있습니다. 아래는 자주 발생하는 문제들입니다.</p><h3 id="1-API-버전-충돌"><a href="#1-API-버전-충돌" class="headerlink" title="1. API 버전 충돌"></a>1. API 버전 충돌</h3><pre><code class="highlight bash">Error: API version conflict    at /path/to/project/routes.js:10:8    ...</code></pre><h3 id="2-호환성-문제"><a href="#2-호환성-문제" class="headerlink" title="2. 호환성 문제"></a>2. 호환성 문제</h3><pre><code class="highlight bash">Error: Incompatible API version    at /path/to/project/app.js:20:10    ...</code></pre><h3 id="3-버전-관리-누락"><a href="#3-버전-관리-누락" class="headerlink" title="3. 버전 관리 누락"></a>3. 버전 관리 누락</h3><pre><code class="highlight bash">Error: Missing API version    at /path/to/project/routes.js:15:12    ...</code></pre><h2 id="해결-방법"><a href="#해결-방법" class="headerlink" title="해결 방법"></a>해결 방법</h2><p>API 버전 관리 문제를 해결하기 위한 몇 가지 접근 방법을 살펴보겠습니다.</p><h3 id="1-URL-경로에-버전-정보-추가하기"><a href="#1-URL-경로에-버전-정보-추가하기" class="headerlink" title="1. URL 경로에 버전 정보 추가하기"></a>1. URL 경로에 버전 정보 추가하기</h3><p>URL 경로에 버전 정보를 추가하여 API 버전을 관리합니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);<span class="keyword">const</span> app = <span class="title function_">express</span>();<span class="keyword">const</span> v1Router = express.<span class="title class_">Router</span>();<span class="keyword">const</span> v2Router = express.<span class="title class_">Router</span>();v1Router.<span class="title function_">get</span>(<span class="string">&quot;/users&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  res.<span class="title function_">send</span>(<span class="string">&quot;API v1: User list&quot;</span>);&#125;);v2Router.<span class="title function_">get</span>(<span class="string">&quot;/users&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  res.<span class="title function_">send</span>(<span class="string">&quot;API v2: User list&quot;</span>);&#125;);app.<span class="title function_">use</span>(<span class="string">&quot;/api/v1&quot;</span>, v1Router);app.<span class="title function_">use</span>(<span class="string">&quot;/api/v2&quot;</span>, v2Router);app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Server running at http://localhost:3000&quot;</span>);&#125;);</code></pre><p>위 코드에서는 URL 경로에 버전 정보를 추가하여 API 버전을 관리합니다.</p><h3 id="2-요청-헤더에-버전-정보-추가하기"><a href="#2-요청-헤더에-버전-정보-추가하기" class="headerlink" title="2. 요청 헤더에 버전 정보 추가하기"></a>2. 요청 헤더에 버전 정보 추가하기</h3><p>요청 헤더에 버전 정보를 추가하여 API 버전을 관리할 수 있습니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);<span class="keyword">const</span> app = <span class="title function_">express</span>();<span class="keyword">const</span> v1Router = express.<span class="title class_">Router</span>();<span class="keyword">const</span> v2Router = express.<span class="title class_">Router</span>();v1Router.<span class="title function_">get</span>(<span class="string">&quot;/users&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  res.<span class="title function_">send</span>(<span class="string">&quot;API v1: User list&quot;</span>);&#125;);v2Router.<span class="title function_">get</span>(<span class="string">&quot;/users&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  res.<span class="title function_">send</span>(<span class="string">&quot;API v2: User list&quot;</span>);&#125;);app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;  <span class="keyword">const</span> version = req.<span class="property">headers</span>[<span class="string">&quot;accept-version&quot;</span>];  <span class="keyword">if</span> (version === <span class="string">&quot;1.0&quot;</span>) &#123;    <span class="title function_">v1Router</span>(req, res, next);  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (version === <span class="string">&quot;2.0&quot;</span>) &#123;    <span class="title function_">v2Router</span>(req, res, next);  &#125; <span class="keyword">else</span> &#123;    res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">send</span>(<span class="string">&quot;Invalid API version&quot;</span>);  &#125;&#125;);app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Server running at http://localhost:3000&quot;</span>);&#125;);</code></pre><p>위 코드에서는 요청 헤더에 버전 정보를 추가하여 API 버전을 관리합니다.</p><h3 id="3-미들웨어를-사용하여-버전-관리하기"><a href="#3-미들웨어를-사용하여-버전-관리하기" class="headerlink" title="3. 미들웨어를 사용하여 버전 관리하기"></a>3. 미들웨어를 사용하여 버전 관리하기</h3><p>미들웨어를 사용하여 API 버전을 관리할 수 있습니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);<span class="keyword">const</span> app = <span class="title function_">express</span>();<span class="keyword">const</span> v1Router = express.<span class="title class_">Router</span>();<span class="keyword">const</span> v2Router = express.<span class="title class_">Router</span>();v1Router.<span class="title function_">get</span>(<span class="string">&quot;/users&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  res.<span class="title function_">send</span>(<span class="string">&quot;API v1: User list&quot;</span>);&#125;);v2Router.<span class="title function_">get</span>(<span class="string">&quot;/users&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  res.<span class="title function_">send</span>(<span class="string">&quot;API v2: User list&quot;</span>);&#125;);app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;  <span class="keyword">const</span> version = req.<span class="property">query</span>.<span class="property">version</span>;  <span class="keyword">if</span> (version === <span class="string">&quot;1.0&quot;</span>) &#123;    req.<span class="property">version</span> = <span class="string">&quot;1.0&quot;</span>;  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (version === <span class="string">&quot;2.0&quot;</span>) &#123;    req.<span class="property">version</span> = <span class="string">&quot;2.0&quot;</span>;  &#125; <span class="keyword">else</span> &#123;    req.<span class="property">version</span> = <span class="string">&quot;1.0&quot;</span>; <span class="comment">// 기본 버전 설정</span>  &#125;  <span class="title function_">next</span>();&#125;);app.<span class="title function_">use</span>(<span class="string">&quot;/api&quot;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;  <span class="keyword">if</span> (req.<span class="property">version</span> === <span class="string">&quot;1.0&quot;</span>) &#123;    <span class="title function_">v1Router</span>(req, res, next);  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (req.<span class="property">version</span> === <span class="string">&quot;2.0&quot;</span>) &#123;    <span class="title function_">v2Router</span>(req, res, next);  &#125;&#125;);app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Server running at http://localhost:3000&quot;</span>);&#125;);</code></pre><p>위 코드에서는 미들웨어를 사용하여 API 버전을 관리합니다.</p><h3 id="4-API-버전-관리-도구-사용하기"><a href="#4-API-버전-관리-도구-사용하기" class="headerlink" title="4. API 버전 관리 도구 사용하기"></a>4. API 버전 관리 도구 사용하기</h3><p>API 버전 관리를 위해 <code>express-api-version</code>과 같은 도구를 사용할 수 있습니다.</p><pre><code class="highlight bash">npm install express-api-version</code></pre><p>설치 후, <code>express-api-version</code>을 사용하여 API 버전을 관리합니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);<span class="keyword">const</span> apiVersion = <span class="built_in">require</span>(<span class="string">&quot;express-api-version&quot;</span>);<span class="keyword">const</span> app = <span class="title function_">express</span>();<span class="keyword">const</span> v1Router = express.<span class="title class_">Router</span>();<span class="keyword">const</span> v2Router = express.<span class="title class_">Router</span>();v1Router.<span class="title function_">get</span>(<span class="string">&quot;/users&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  res.<span class="title function_">send</span>(<span class="string">&quot;API v1: User list&quot;</span>);&#125;);v2Router.<span class="title function_">get</span>(<span class="string">&quot;/users&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  res.<span class="title function_">send</span>(<span class="string">&quot;API v2: User list&quot;</span>);&#125;);app.<span class="title function_">use</span>(<span class="title function_">apiVersion</span>(&#123; <span class="attr">version</span>: <span class="string">&quot;1.0&quot;</span> &#125;, v1Router));app.<span class="title function_">use</span>(<span class="title function_">apiVersion</span>(&#123; <span class="attr">version</span>: <span class="string">&quot;2.0&quot;</span> &#125;, v2Router));app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Server running at http://localhost:3000&quot;</span>);&#125;);</code></pre><p>위 코드에서는 <code>express-api-version</code>을 사용하여 API 버전을 관리합니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>위의 방법들을 사용하여 API 버전 관리 문제를 해결할 수 있습니다. URL 경로에 버전 정보를 추가하고, 요청 헤더에 버전 정보를 추가하며, 미들웨어를 사용하여 버전을 관리하고, <code>express-api-version</code>과 같은 도구를 사용하여 Express 서버의 API 버전 관리 문제를 해결해 보세요!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> Express </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Express 트러블슈팅[15] 환경 변수 관리 문제</title>
      <link href="/express/troubleshooting/15/"/>
      <url>/express/troubleshooting/15/</url>
      
        <content type="html"><![CDATA[<h1 id="Express-서버에서-환경-변수-관리-문제-해결하기"><a href="#Express-서버에서-환경-변수-관리-문제-해결하기" class="headerlink" title="Express 서버에서 환경 변수 관리 문제 해결하기"></a>Express 서버에서 환경 변수 관리 문제 해결하기</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 Express 서버에서 발생할 수 있는 환경 변수 관리 문제와 그 해결 방안에 대해 알아보겠습니다. 환경 변수는 애플리케이션의 설정 정보를 외부에서 관리할 수 있도록 도와줍니다.</p><h2 id="환경-변수-관리-문제-개요"><a href="#환경-변수-관리-문제-개요" class="headerlink" title="환경 변수 관리 문제 개요"></a>환경 변수 관리 문제 개요</h2><p>Express 서버에서 환경 변수를 제대로 관리하지 않으면 설정 정보가 노출되거나, 환경 변수 값을 읽어오지 못하는 문제가 발생할 수 있습니다. 아래는 자주 발생하는 문제들입니다.</p><h3 id="1-환경-변수를-읽어오지-못하는-경우"><a href="#1-환경-변수를-읽어오지-못하는-경우" class="headerlink" title="1. 환경 변수를 읽어오지 못하는 경우"></a>1. 환경 변수를 읽어오지 못하는 경우</h3><pre><code class="highlight bash">Error: ENOENT: no such file or directory, open <span class="string">&#x27;.env&#x27;</span>    at Error (native)    ...</code></pre><h3 id="2-환경-변수-값이-undefined인-경우"><a href="#2-환경-변수-값이-undefined인-경우" class="headerlink" title="2. 환경 변수 값이 undefined인 경우"></a>2. 환경 변수 값이 undefined인 경우</h3><pre><code class="highlight bash">Error: Environment variable is undefined    at /path/to/project/config.js:10:8    ...</code></pre><h3 id="3-환경-변수-노출-문제"><a href="#3-환경-변수-노출-문제" class="headerlink" title="3. 환경 변수 노출 문제"></a>3. 환경 변수 노출 문제</h3><pre><code class="highlight bash">Error: Sensitive information exposed    at /path/to/project/app.js:20:10    ...</code></pre><h2 id="해결-방법"><a href="#해결-방법" class="headerlink" title="해결 방법"></a>해결 방법</h2><p>환경 변수 관리 문제를 해결하기 위한 몇 가지 접근 방법을 살펴보겠습니다.</p><h3 id="1-dotenv-패키지-사용하기"><a href="#1-dotenv-패키지-사용하기" class="headerlink" title="1. dotenv 패키지 사용하기"></a>1. dotenv 패키지 사용하기</h3><p>환경 변수를 관리하기 위해 <code>dotenv</code> 패키지를 사용하여 <code>.env</code> 파일에서 환경 변수를 로드합니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);<span class="keyword">const</span> dotenv = <span class="built_in">require</span>(<span class="string">&quot;dotenv&quot;</span>);dotenv.<span class="title function_">config</span>();<span class="keyword">const</span> app = <span class="title function_">express</span>();app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  res.<span class="title function_">send</span>(<span class="string">`Hello, <span class="subst">$&#123;process.env.USER_NAME&#125;</span>!`</span>);&#125;);app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Server running at http://localhost:3000&quot;</span>);&#125;);</code></pre><p>위 코드에서는 <code>dotenv</code> 패키지를 사용하여 <code>.env</code> 파일에서 환경 변수를 로드합니다.</p><h3 id="2-env-파일-설정하기"><a href="#2-env-파일-설정하기" class="headerlink" title="2. .env 파일 설정하기"></a>2. .env 파일 설정하기</h3><p><code>.env</code> 파일을 설정하여 환경 변수를 정의합니다.</p><pre><code class="highlight plaintext"># .env 파일USER_NAME=NewCodingPORT=3000</code></pre><p>위 <code>.env</code> 파일에서는 <code>USER_NAME</code>과 <code>PORT</code> 환경 변수를 정의합니다.</p><h3 id="3-환경-변수-유효성-검사하기"><a href="#3-환경-변수-유효성-검사하기" class="headerlink" title="3. 환경 변수 유효성 검사하기"></a>3. 환경 변수 유효성 검사하기</h3><p>환경 변수의 유효성을 검사하여 필수 환경 변수가 설정되지 않은 경우 오류를 발생시킵니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);<span class="keyword">const</span> dotenv = <span class="built_in">require</span>(<span class="string">&quot;dotenv&quot;</span>);dotenv.<span class="title function_">config</span>();<span class="keyword">if</span> (!process.<span class="property">env</span>.<span class="property">USER_NAME</span> || !process.<span class="property">env</span>.<span class="property">PORT</span>) &#123;  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Missing required environment variables&quot;</span>);&#125;<span class="keyword">const</span> app = <span class="title function_">express</span>();app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  res.<span class="title function_">send</span>(<span class="string">`Hello, <span class="subst">$&#123;process.env.USER_NAME&#125;</span>!`</span>);&#125;);app.<span class="title function_">listen</span>(process.<span class="property">env</span>.<span class="property">PORT</span>, <span class="function">() =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Server running at http://localhost:<span class="subst">$&#123;process.env.PORT&#125;</span>`</span>);&#125;);</code></pre><p>위 코드에서는 필수 환경 변수가 설정되지 않은 경우 오류를 발생시킵니다.</p><h3 id="4-환경-변수-보안-설정하기"><a href="#4-환경-변수-보안-설정하기" class="headerlink" title="4. 환경 변수 보안 설정하기"></a>4. 환경 변수 보안 설정하기</h3><p>환경 변수를 보안 설정하여 민감한 정보가 노출되지 않도록 합니다. <code>.env</code> 파일을 <code>.gitignore</code> 파일에 추가하여 버전 관리 시스템에 포함되지 않도록 합니다.</p><pre><code class="highlight plaintext"># .gitignore 파일.env</code></pre><p>위 <code>.gitignore</code> 파일에서는 <code>.env</code> 파일을 제외하여 민감한 정보가 버전 관리 시스템에 포함되지 않도록 합니다.</p><h3 id="5-환경-변수-관리-도구-사용하기"><a href="#5-환경-변수-관리-도구-사용하기" class="headerlink" title="5. 환경 변수 관리 도구 사용하기"></a>5. 환경 변수 관리 도구 사용하기</h3><p>환경 변수를 관리하기 위해 <code>cross-env</code> 패키지와 같은 도구를 사용하여 다양한 환경에서 환경 변수를 설정할 수 있습니다.</p><pre><code class="highlight bash">npm install cross-env</code></pre><p>설치 후, <code>cross-env</code>를 사용하여 환경 변수를 설정합니다.</p><pre><code class="highlight json"><span class="comment">// package.json 파일</span><span class="punctuation">&#123;</span>  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cross-env NODE_ENV=production node app.js&quot;</span><span class="punctuation">,</span>    <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cross-env NODE_ENV=development node app.js&quot;</span>  <span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></code></pre><p>위 <code>package.json</code> 파일에서는 <code>cross-env</code>를 사용하여 환경 변수를 설정합니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>위의 방법들을 사용하여 환경 변수 관리 문제를 해결할 수 있습니다. <code>dotenv</code> 패키지를 사용하여 환경 변수를 로드하고, <code>.env</code> 파일을 설정하며, 환경 변수의 유효성을 검사하고, 보안 설정을 통해 민감한 정보가 노출되지 않도록 하며, <code>cross-env</code>와 같은 도구를 사용하여 다양한 환경에서 환경 변수를 관리하여 Express 서버의 환경 변수 관리 문제를 해결해 보세요!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> Express </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Express 트러블슈팅[14] 정적 파일 제공 문제</title>
      <link href="/express/troubleshooting/14/"/>
      <url>/express/troubleshooting/14/</url>
      
        <content type="html"><![CDATA[<h1 id="Express-서버에서-정적-파일-제공-문제-해결하기"><a href="#Express-서버에서-정적-파일-제공-문제-해결하기" class="headerlink" title="Express 서버에서 정적 파일 제공 문제 해결하기"></a>Express 서버에서 정적 파일 제공 문제 해결하기</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 Express 서버에서 발생할 수 있는 정적 파일 제공 문제와 그 해결 방안에 대해 알아보겠습니다. 정적 파일 제공 문제는 주로 파일 경로 설정 오류, 파일 권한 문제, 캐싱 문제 등으로 인해 발생할 수 있습니다.</p><h2 id="정적-파일-제공-문제-개요"><a href="#정적-파일-제공-문제-개요" class="headerlink" title="정적 파일 제공 문제 개요"></a>정적 파일 제공 문제 개요</h2><p>Express 서버에서 정적 파일을 제공할 때, 파일이 제대로 제공되지 않거나, 파일 경로가 잘못 설정되어 있는 경우가 있습니다. 이러한 문제는 주로 파일 경로 설정 오류, 파일 권한 문제, 캐싱 문제 등으로 인해 발생합니다. 아래는 자주 발생하는 문제들입니다.</p><h3 id="1-파일을-찾을-수-없는-경우"><a href="#1-파일을-찾을-수-없는-경우" class="headerlink" title="1. 파일을 찾을 수 없는 경우"></a>1. 파일을 찾을 수 없는 경우</h3><pre><code class="highlight bash">Error: ENOENT: no such file or directory, <span class="built_in">stat</span> <span class="string">&#x27;/path/to/project/public/index.html&#x27;</span>    at Error (native)    ...</code></pre><h3 id="2-파일-권한-문제"><a href="#2-파일-권한-문제" class="headerlink" title="2. 파일 권한 문제"></a>2. 파일 권한 문제</h3><pre><code class="highlight bash">Error: EACCES: permission denied, open <span class="string">&#x27;/path/to/project/public/index.html&#x27;</span>    at Error (native)    ...</code></pre><h3 id="3-캐싱-문제"><a href="#3-캐싱-문제" class="headerlink" title="3. 캐싱 문제"></a>3. 캐싱 문제</h3><pre><code class="highlight bash">Error: File not updated due to caching    at /path/to/project/app.js:20:10    ...</code></pre><h2 id="해결-방법"><a href="#해결-방법" class="headerlink" title="해결 방법"></a>해결 방법</h2><p>정적 파일 제공 문제를 해결하기 위한 몇 가지 접근 방법을 살펴보겠습니다.</p><h3 id="1-정적-파일-경로-설정하기"><a href="#1-정적-파일-경로-설정하기" class="headerlink" title="1. 정적 파일 경로 설정하기"></a>1. 정적 파일 경로 설정하기</h3><p>Express 서버에서 정적 파일을 제공하기 위해 <code>express.static</code> 미들웨어를 사용하여 정적 파일 경로를 설정합니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);<span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);<span class="keyword">const</span> app = <span class="title function_">express</span>();app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;public&quot;</span>)));app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  res.<span class="title function_">sendFile</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;public&quot;</span>, <span class="string">&quot;index.html&quot;</span>));&#125;);app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Server running at http://localhost:3000&quot;</span>);&#125;);</code></pre><p>위 코드에서는 <code>express.static</code> 미들웨어를 사용하여 <code>public</code> 디렉토리의 정적 파일을 제공하고, 루트 경로에서 <code>index.html</code> 파일을 제공합니다.</p><h3 id="2-파일-권한-설정하기"><a href="#2-파일-권한-설정하기" class="headerlink" title="2. 파일 권한 설정하기"></a>2. 파일 권한 설정하기</h3><p>정적 파일에 대한 올바른 권한을 설정하여 파일 권한 문제를 해결합니다.</p><pre><code class="highlight bash"><span class="built_in">chmod</span> -R 755 /path/to/project/public</code></pre><p>위 명령어를 사용하여 <code>public</code> 디렉토리와 그 하위 파일 및 디렉토리에 대한 읽기 및 실행 권한을 설정합니다.</p><h3 id="3-캐싱-문제-해결하기"><a href="#3-캐싱-문제-해결하기" class="headerlink" title="3. 캐싱 문제 해결하기"></a>3. 캐싱 문제 해결하기</h3><p>정적 파일의 캐싱 문제를 해결하기 위해 캐시 제어 헤더를 설정합니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);<span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);<span class="keyword">const</span> app = <span class="title function_">express</span>();app.<span class="title function_">use</span>(  express.<span class="title function_">static</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;public&quot;</span>), &#123;    <span class="attr">maxAge</span>: <span class="string">&quot;1d&quot;</span>, <span class="comment">// 캐시 유효 기간 설정</span>  &#125;));app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  res.<span class="title function_">sendFile</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;public&quot;</span>, <span class="string">&quot;index.html&quot;</span>));&#125;);app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Server running at http://localhost:3000&quot;</span>);&#125;);</code></pre><p>위 코드에서는 <code>express.static</code> 미들웨어의 옵션으로 <code>maxAge</code>를 설정하여 캐시 유효 기간을 1일로 설정합니다.</p><h3 id="4-정적-파일-제공-우선순위-설정하기"><a href="#4-정적-파일-제공-우선순위-설정하기" class="headerlink" title="4. 정적 파일 제공 우선순위 설정하기"></a>4. 정적 파일 제공 우선순위 설정하기</h3><p>정적 파일 제공 우선순위를 설정하여 특정 경로에서 정적 파일을 우선적으로 제공할 수 있습니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);<span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);<span class="keyword">const</span> app = <span class="title function_">express</span>();<span class="comment">// 특정 경로에서 정적 파일 제공</span>app.<span class="title function_">use</span>(<span class="string">&quot;/static&quot;</span>, express.<span class="title function_">static</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;public&quot;</span>)));app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  res.<span class="title function_">sendFile</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;public&quot;</span>, <span class="string">&quot;index.html&quot;</span>));&#125;);app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Server running at http://localhost:3000&quot;</span>);&#125;);</code></pre><p>위 코드에서는 <code>/static</code> 경로에서 <code>public</code> 디렉토리의 정적 파일을 제공하도록 설정합니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>위의 방법들을 사용하여 정적 파일 제공 문제를 해결할 수 있습니다. <code>express.static</code> 미들웨어를 사용하여 정적 파일 경로를 설정하고, 파일 권한을 올바르게 설정하며, 캐시 제어 헤더를 설정하고, 정적 파일 제공 우선순위를 설정하여 Express 서버의 정적 파일 제공 문제를 해결해 보세요!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> Express </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Express 트러블슈팅[13] 로깅 및 디버깅 문제</title>
      <link href="/express/troubleshooting/13/"/>
      <url>/express/troubleshooting/13/</url>
      
        <content type="html"><![CDATA[<h1 id="Express-서버에서-로깅-및-디버깅-문제-해결하기"><a href="#Express-서버에서-로깅-및-디버깅-문제-해결하기" class="headerlink" title="Express 서버에서 로깅 및 디버깅 문제 해결하기"></a>Express 서버에서 로깅 및 디버깅 문제 해결하기</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 Express 서버에서 발생할 수 있는 로깅 및 디버깅 문제와 그 해결 방안에 대해 알아보겠습니다. 로깅과 디버깅은 애플리케이션의 문제를 진단하고 해결하는 데 중요한 역할을 합니다.</p><h2 id="로깅-및-디버깅-문제-개요"><a href="#로깅-및-디버깅-문제-개요" class="headerlink" title="로깅 및 디버깅 문제 개요"></a>로깅 및 디버깅 문제 개요</h2><p>Express 서버에서 로깅 및 디버깅 문제는 주로 로그가 제대로 기록되지 않거나, 디버깅 정보가 부족하여 문제를 진단하기 어려울 때 발생합니다. 아래는 자주 발생하는 문제들입니다.</p><h3 id="1-로그가-기록되지-않는-경우"><a href="#1-로그가-기록되지-않는-경우" class="headerlink" title="1. 로그가 기록되지 않는 경우"></a>1. 로그가 기록되지 않는 경우</h3><pre><code class="highlight bash">Error: No logs found    at /path/to/project/logger.js:10:8    ...</code></pre><h3 id="2-디버깅-정보가-부족한-경우"><a href="#2-디버깅-정보가-부족한-경우" class="headerlink" title="2. 디버깅 정보가 부족한 경우"></a>2. 디버깅 정보가 부족한 경우</h3><pre><code class="highlight bash">Error: Insufficient debugging information    at /path/to/project/app.js:20:10    ...</code></pre><h3 id="3-로그-파일이-너무-큰-경우"><a href="#3-로그-파일이-너무-큰-경우" class="headerlink" title="3. 로그 파일이 너무 큰 경우"></a>3. 로그 파일이 너무 큰 경우</h3><pre><code class="highlight bash">Error: Log file size exceeded    at /path/to/project/logger.js:15:12    ...</code></pre><h2 id="해결-방법"><a href="#해결-방법" class="headerlink" title="해결 방법"></a>해결 방법</h2><p>로깅 및 디버깅 문제를 해결하기 위한 몇 가지 접근 방법을 살펴보겠습니다.</p><h3 id="1-로깅-미들웨어-사용하기"><a href="#1-로깅-미들웨어-사용하기" class="headerlink" title="1. 로깅 미들웨어 사용하기"></a>1. 로깅 미들웨어 사용하기</h3><p>Express 서버에서 로깅을 간편하게 설정하기 위해 <code>morgan</code> 미들웨어를 사용할 수 있습니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);<span class="keyword">const</span> morgan = <span class="built_in">require</span>(<span class="string">&quot;morgan&quot;</span>);<span class="keyword">const</span> app = <span class="title function_">express</span>();app.<span class="title function_">use</span>(<span class="title function_">morgan</span>(<span class="string">&quot;combined&quot;</span>));app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  res.<span class="title function_">send</span>(<span class="string">&quot;Hello, World!&quot;</span>);&#125;);app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Server running at &lt;http://localhost:3000&gt;&quot;</span>);&#125;);</code></pre><p>위 코드에서는 <code>morgan</code> 미들웨어를 사용하여 HTTP 요청 로그를 기록합니다.</p><h3 id="2-디버깅-정보-추가하기"><a href="#2-디버깅-정보-추가하기" class="headerlink" title="2. 디버깅 정보 추가하기"></a>2. 디버깅 정보 추가하기</h3><p>디버깅 정보를 추가하여 문제를 진단하기 쉽게 만듭니다. <code>debug</code> 패키지를 사용하여 디버깅 정보를 추가할 수 있습니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);<span class="keyword">const</span> debug = <span class="built_in">require</span>(<span class="string">&quot;debug&quot;</span>)(<span class="string">&quot;app&quot;</span>);<span class="keyword">const</span> app = <span class="title function_">express</span>();app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;  <span class="title function_">debug</span>(<span class="string">`Request URL: <span class="subst">$&#123;req.url&#125;</span>`</span>);  <span class="title function_">next</span>();&#125;);app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  <span class="title function_">debug</span>(<span class="string">&quot;Handling GET / request&quot;</span>);  res.<span class="title function_">send</span>(<span class="string">&quot;Hello, World!&quot;</span>);&#125;);app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;  <span class="title function_">debug</span>(<span class="string">&quot;Server running at http://localhost:3000&quot;</span>);&#125;);</code></pre><p>위 코드에서는 <code>debug</code> 패키지를 사용하여 디버깅 정보를 추가합니다.</p><h3 id="3-로그-파일-관리하기"><a href="#3-로그-파일-관리하기" class="headerlink" title="3. 로그 파일 관리하기"></a>3. 로그 파일 관리하기</h3><p>로그 파일이 너무 커지지 않도록 관리합니다. <code>winston</code> 패키지를 사용하여 로그 파일을 관리할 수 있습니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);<span class="keyword">const</span> winston = <span class="built_in">require</span>(<span class="string">&quot;winston&quot;</span>);<span class="keyword">const</span> app = <span class="title function_">express</span>();<span class="keyword">const</span> logger = winston.<span class="title function_">createLogger</span>(&#123;  <span class="attr">level</span>: <span class="string">&quot;info&quot;</span>,  <span class="attr">format</span>: winston.<span class="property">format</span>.<span class="title function_">json</span>(),  <span class="attr">transports</span>: [    <span class="keyword">new</span> winston.<span class="property">transports</span>.<span class="title class_">File</span>(&#123; <span class="attr">filename</span>: <span class="string">&quot;error.log&quot;</span>, <span class="attr">level</span>: <span class="string">&quot;error&quot;</span> &#125;),    <span class="keyword">new</span> winston.<span class="property">transports</span>.<span class="title class_">File</span>(&#123; <span class="attr">filename</span>: <span class="string">&quot;combined.log&quot;</span> &#125;),  ],&#125;);<span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&quot;production&quot;</span>) &#123;  logger.<span class="title function_">add</span>(    <span class="keyword">new</span> winston.<span class="property">transports</span>.<span class="title class_">Console</span>(&#123;      <span class="attr">format</span>: winston.<span class="property">format</span>.<span class="title function_">simple</span>(),    &#125;)  );&#125;app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;  logger.<span class="title function_">info</span>(<span class="string">`Request URL: <span class="subst">$&#123;req.url&#125;</span>`</span>);  <span class="title function_">next</span>();&#125;);app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  logger.<span class="title function_">info</span>(<span class="string">&quot;Handling GET / request&quot;</span>);  res.<span class="title function_">send</span>(<span class="string">&quot;Hello, World!&quot;</span>);&#125;);app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;  logger.<span class="title function_">info</span>(<span class="string">&quot;Server running at http://localhost:3000&quot;</span>);&#125;);</code></pre><p>위 코드에서는 <code>winston</code> 패키지를 사용하여 로그 파일을 관리하고, 로그 파일이 너무 커지지 않도록 합니다.</p><h3 id="4-실시간-디버깅-도구-사용하기"><a href="#4-실시간-디버깅-도구-사용하기" class="headerlink" title="4. 실시간 디버깅 도구 사용하기"></a>4. 실시간 디버깅 도구 사용하기</h3><p>실시간 디버깅 도구를 사용하여 애플리케이션의 상태를 실시간으로 모니터링하고 문제를 진단할 수 있습니다. <code>nodemon</code> 패키지를 사용하여 애플리케이션을 실시간으로 모니터링할 수 있습니다.</p><pre><code class="highlight bash">npm install -g nodemonnodemon app.js</code></pre><p>위 명령어를 사용하여 <code>nodemon</code>을 설치하고, 애플리케이션을 실시간으로 모니터링할 수 있습니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>위의 방법들을 사용하여 로깅 및 디버깅 문제를 해결할 수 있습니다. <code>morgan</code> 미들웨어를 사용하여 로그를 기록하고, <code>debug</code> 패키지를 사용하여 디버깅 정보를 추가하며, <code>winston</code> 패키지를 사용하여 로그 파일을 관리하고, <code>nodemon</code>을 사용하여 실시간으로 애플리케이션을 모니터링하여 Express 서버의 로깅 및 디버깅 문제를 해결해 보세요!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> Express </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Express 트러블슈팅[12] 메모리 누수 문제</title>
      <link href="/express/troubleshooting/12/"/>
      <url>/express/troubleshooting/12/</url>
      
        <content type="html"><![CDATA[<h1 id="Express-서버에서-메모리-누수-문제-해결하기"><a href="#Express-서버에서-메모리-누수-문제-해결하기" class="headerlink" title="Express 서버에서 메모리 누수 문제 해결하기"></a>Express 서버에서 메모리 누수 문제 해결하기</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 Express 서버에서 발생할 수 있는 메모리 누수 문제와 그 해결 방안에 대해 알아보겠습니다. 메모리 누수는 애플리케이션이 사용한 메모리를 해제하지 않아 점점 더 많은 메모리를 소비하게 되는 문제입니다.</p><h2 id="메모리-누수-문제-개요"><a href="#메모리-누수-문제-개요" class="headerlink" title="메모리 누수 문제 개요"></a>메모리 누수 문제 개요</h2><p>Express 서버에서 메모리 누수는 주로 잘못된 변수 참조, 이벤트 리스너 누수, 비동기 작업의 잘못된 처리 등으로 인해 발생할 수 있습니다. 메모리 누수가 발생하면 서버의 성능이 저하되고, 결국 서버가 다운될 수 있습니다. 아래는 자주 발생하는 문제들입니다.</p><h3 id="1-메모리-사용량-증가"><a href="#1-메모리-사용량-증가" class="headerlink" title="1. 메모리 사용량 증가"></a>1. 메모리 사용량 증가</h3><pre><code class="highlight bash">Error: Out of memory    at process.memoryUsage (node:internal/process/per_thread:1:1)    ...</code></pre><h3 id="2-이벤트-리스너-누수-경고"><a href="#2-이벤트-리스너-누수-경고" class="headerlink" title="2. 이벤트 리스너 누수 경고"></a>2. 이벤트 리스너 누수 경고</h3><pre><code class="highlight bash">(node:12345) MaxListenersExceededWarning: Possible EventEmitter memory leak detected. 11 event listeners added. Use emitter.setMaxListeners() to increase <span class="built_in">limit</span>    at _addListener (events.js:256:17)    ...</code></pre><h3 id="3-비동기-작업의-잘못된-처리"><a href="#3-비동기-작업의-잘못된-처리" class="headerlink" title="3. 비동기 작업의 잘못된 처리"></a>3. 비동기 작업의 잘못된 처리</h3><pre><code class="highlight bash">Error: UnhandledPromiseRejectionWarning: Unhandled promise rejection    at process.emitWarning (node:internal/process/promises:1:1)    ...</code></pre><h2 id="해결-방법"><a href="#해결-방법" class="headerlink" title="해결 방법"></a>해결 방법</h2><p>메모리 누수를 해결하기 위한 몇 가지 접근 방법을 살펴보겠습니다.</p><h3 id="1-변수-참조-해제하기"><a href="#1-변수-참조-해제하기" class="headerlink" title="1. 변수 참조 해제하기"></a>1. 변수 참조 해제하기</h3><p>사용하지 않는 변수 참조를 해제하여 메모리 누수를 방지합니다.</p><pre><code class="highlight javascript"><span class="keyword">let</span> cache = [];<span class="keyword">function</span> <span class="title function_">addToCache</span>(<span class="params">data</span>) &#123;  cache.<span class="title function_">push</span>(data);  <span class="keyword">if</span> (cache.<span class="property">length</span> &gt; <span class="number">100</span>) &#123;    cache.<span class="title function_">shift</span>(); <span class="comment">// 오래된 항목 제거</span>  &#125;&#125;</code></pre><p>위 코드에서는 오래된 항목을 제거하여 메모리 누수를 방지합니다.</p><h3 id="2-이벤트-리스너-제거하기"><a href="#2-이벤트-리스너-제거하기" class="headerlink" title="2. 이벤트 리스너 제거하기"></a>2. 이벤트 리스너 제거하기</h3><p>사용하지 않는 이벤트 리스너를 제거하여 메모리 누수를 방지합니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> <span class="title class_">EventEmitter</span> = <span class="built_in">require</span>(<span class="string">&quot;events&quot;</span>);<span class="keyword">const</span> emitter = <span class="keyword">new</span> <span class="title class_">EventEmitter</span>();<span class="keyword">function</span> <span class="title function_">addListener</span>(<span class="params"></span>) &#123;  <span class="keyword">const</span> <span class="title function_">listener</span> = (<span class="params"></span>) =&gt; &#123;    <span class="comment">// 이벤트 처리</span>  &#125;;  emitter.<span class="title function_">on</span>(<span class="string">&quot;event&quot;</span>, listener);  <span class="comment">// 나중에 이벤트 리스너 제거</span>  emitter.<span class="title function_">removeListener</span>(<span class="string">&quot;event&quot;</span>, listener);&#125;</code></pre><p>위 코드에서는 이벤트 리스너를 나중에 제거하여 메모리 누수를 방지합니다.</p><h3 id="3-비동기-작업의-올바른-처리"><a href="#3-비동기-작업의-올바른-처리" class="headerlink" title="3. 비동기 작업의 올바른 처리"></a>3. 비동기 작업의 올바른 처리</h3><p>비동기 작업이 완료되었는지 확인하고, 필요하지 않은 경우 타임아웃을 해제하여 메모리 누수를 방지합니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);<span class="keyword">const</span> app = <span class="title function_">express</span>();app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  <span class="keyword">const</span> timeoutId = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;    res.<span class="title function_">send</span>(<span class="string">&quot;Hello, World!&quot;</span>);  &#125;, <span class="number">1000</span>);  req.<span class="title function_">on</span>(<span class="string">&quot;close&quot;</span>, <span class="function">() =&gt;</span> &#123;    <span class="built_in">clearTimeout</span>(timeoutId); <span class="comment">// 타임아웃 해제</span>  &#125;);&#125;);app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Server running at &lt;http://localhost:3000&gt;&quot;</span>);&#125;);</code></pre><p>위 코드에서는 요청이 종료되면 타임아웃을 해제하여 메모리 누수를 방지합니다.</p><h3 id="4-메모리-프로파일링-도구-사용하기"><a href="#4-메모리-프로파일링-도구-사용하기" class="headerlink" title="4. 메모리 프로파일링 도구 사용하기"></a>4. 메모리 프로파일링 도구 사용하기</h3><p>메모리 프로파일링 도구를 사용하여 메모리 누수를 진단하고 해결할 수 있습니다. Node.js에서는 <code>--inspect</code> 플래그를 사용하여 Chrome DevTools에서 메모리 프로파일링을 할 수 있습니다.</p><pre><code class="highlight bash">node --inspect app.js</code></pre><p>위 명령어를 사용하여 애플리케이션을 실행한 후, Chrome 브라우저에서 <code>chrome://inspect</code>로 이동하여 메모리 프로파일링을 수행할 수 있습니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>위의 방법들을 사용하여 메모리 누수 문제를 해결할 수 있습니다. 변수 참조를 해제하고, 이벤트 리스너를 제거하며, 비동기 작업을 올바르게 처리하고, 메모리 프로파일링 도구를 사용하여 Express 서버의 메모리 누수 문제를 해결해 보세요!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> Express </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Express 트러블슈팅[11] 미들웨어 비동기 처리 문제</title>
      <link href="/express/troubleshooting/11/"/>
      <url>/express/troubleshooting/11/</url>
      
        <content type="html"><![CDATA[<h1 id="Express-서버에서-미들웨어-비동기-처리-문제-해결하기"><a href="#Express-서버에서-미들웨어-비동기-처리-문제-해결하기" class="headerlink" title="Express 서버에서 미들웨어 비동기 처리 문제 해결하기"></a>Express 서버에서 미들웨어 비동기 처리 문제 해결하기</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 Express 서버에서 발생할 수 있는 미들웨어 비동기 처리 문제와 그 해결 방안에 대해 알아보겠습니다. 비동기 미들웨어는 비동기 작업을 수행할 때 주로 사용되며, 올바르게 처리되지 않으면 애플리케이션의 동작에 문제가 발생할 수 있습니다.</p><h2 id="미들웨어-비동기-처리-문제-개요"><a href="#미들웨어-비동기-처리-문제-개요" class="headerlink" title="미들웨어 비동기 처리 문제 개요"></a>미들웨어 비동기 처리 문제 개요</h2><p>Express 서버에서 비동기 미들웨어를 사용할 때, 비동기 작업이 완료되지 않거나, 오류가 발생해도 제대로 처리되지 않는 경우가 있습니다. 이러한 문제는 주로 비동기 함수에서 <code>next()</code>를 호출하지 않거나, 오류 처리가 제대로 이루어지지 않을 때 발생합니다. 아래는 자주 발생하는 문제들입니다.</p><h3 id="1-비동기-함수에서-next-호출-누락"><a href="#1-비동기-함수에서-next-호출-누락" class="headerlink" title="1. 비동기 함수에서 next() 호출 누락"></a>1. 비동기 함수에서 <code>next()</code> 호출 누락</h3><pre><code class="highlight javascript"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);<span class="keyword">const</span> app = <span class="title function_">express</span>();app.<span class="title function_">use</span>(<span class="title function_">async</span> (req, res, next) =&gt; &#123;  <span class="keyword">await</span> <span class="title function_">someAsyncFunction</span>();  <span class="comment">// next() 호출 누락</span>&#125;);app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  res.<span class="title function_">send</span>(<span class="string">&quot;Hello, World!&quot;</span>);&#125;);app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Server running at &lt;http://localhost:3000&gt;&quot;</span>);&#125;);</code></pre><h3 id="2-비동기-함수에서-오류-처리-누락"><a href="#2-비동기-함수에서-오류-처리-누락" class="headerlink" title="2. 비동기 함수에서 오류 처리 누락"></a>2. 비동기 함수에서 오류 처리 누락</h3><pre><code class="highlight javascript"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);<span class="keyword">const</span> app = <span class="title function_">express</span>();app.<span class="title function_">use</span>(<span class="title function_">async</span> (req, res, next) =&gt; &#123;  <span class="keyword">try</span> &#123;    <span class="keyword">await</span> <span class="title function_">someAsyncFunction</span>();    <span class="title function_">next</span>();  &#125; <span class="keyword">catch</span> (error) &#123;    <span class="comment">// 오류 처리 누락</span>  &#125;&#125;);app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  res.<span class="title function_">send</span>(<span class="string">&quot;Hello, World!&quot;</span>);&#125;);app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Server running at &lt;http://localhost:3000&gt;&quot;</span>);&#125;);</code></pre><h2 id="해결-방법"><a href="#해결-방법" class="headerlink" title="해결 방법"></a>해결 방법</h2><p>비동기 미들웨어에서 발생하는 문제를 해결하기 위한 몇 가지 접근 방법을 살펴보겠습니다.</p><h3 id="1-비동기-함수에서-next-호출하기"><a href="#1-비동기-함수에서-next-호출하기" class="headerlink" title="1. 비동기 함수에서 next() 호출하기"></a>1. 비동기 함수에서 <code>next()</code> 호출하기</h3><p>비동기 함수에서 작업이 완료된 후 반드시 <code>next()</code>를 호출하여 다음 미들웨어로 넘어가도록 합니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);<span class="keyword">const</span> app = <span class="title function_">express</span>();app.<span class="title function_">use</span>(<span class="title function_">async</span> (req, res, next) =&gt; &#123;  <span class="keyword">await</span> <span class="title function_">someAsyncFunction</span>();  <span class="title function_">next</span>(); <span class="comment">// next() 호출</span>&#125;);app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  res.<span class="title function_">send</span>(<span class="string">&quot;Hello, World!&quot;</span>);&#125;);app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Server running at &lt;http://localhost:3000&gt;&quot;</span>);&#125;);</code></pre><p>위 코드에서는 비동기 함수가 완료된 후 <code>next()</code>를 호출하여 다음 미들웨어로 넘어갑니다.</p><h3 id="2-비동기-함수에서-오류-처리하기"><a href="#2-비동기-함수에서-오류-처리하기" class="headerlink" title="2. 비동기 함수에서 오류 처리하기"></a>2. 비동기 함수에서 오류 처리하기</h3><p>비동기 함수에서 오류가 발생할 경우, <code>next(error)</code>를 호출하여 오류 처리 미들웨어로 전달합니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);<span class="keyword">const</span> app = <span class="title function_">express</span>();app.<span class="title function_">use</span>(<span class="title function_">async</span> (req, res, next) =&gt; &#123;  <span class="keyword">try</span> &#123;    <span class="keyword">await</span> <span class="title function_">someAsyncFunction</span>();    <span class="title function_">next</span>();  &#125; <span class="keyword">catch</span> (error) &#123;    <span class="title function_">next</span>(error); <span class="comment">// 오류 처리</span>  &#125;&#125;);app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  res.<span class="title function_">send</span>(<span class="string">&quot;Hello, World!&quot;</span>);&#125;);<span class="comment">// 오류 처리 미들웨어</span>app.<span class="title function_">use</span>(<span class="function">(<span class="params">err, req, res, next</span>) =&gt;</span> &#123;  res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&quot;Internal Server Error&quot;</span>);&#125;);app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Server running at &lt;http://localhost:3000&gt;&quot;</span>);&#125;);</code></pre><p>위 코드에서는 비동기 함수에서 오류가 발생할 경우 <code>next(error)</code>를 호출하여 오류 처리 미들웨어로 전달합니다.</p><h3 id="3-비동기-미들웨어를-처리하는-유틸리티-함수-사용하기"><a href="#3-비동기-미들웨어를-처리하는-유틸리티-함수-사용하기" class="headerlink" title="3. 비동기 미들웨어를 처리하는 유틸리티 함수 사용하기"></a>3. 비동기 미들웨어를 처리하는 유틸리티 함수 사용하기</h3><p>비동기 미들웨어를 처리하는 유틸리티 함수를 사용하여 코드의 가독성을 높이고, 오류 처리를 일관되게 할 수 있습니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);<span class="keyword">const</span> app = <span class="title function_">express</span>();<span class="keyword">const</span> <span class="title function_">asyncHandler</span> = (<span class="params">fn</span>) =&gt; <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;  <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="title function_">fn</span>(req, res, next)).<span class="title function_">catch</span>(next);&#125;;app.<span class="title function_">use</span>(  <span class="title function_">asyncHandler</span>(<span class="title function_">async</span> (req, res, next) =&gt; &#123;    <span class="keyword">await</span> <span class="title function_">someAsyncFunction</span>();    <span class="title function_">next</span>();  &#125;));app.<span class="title function_">get</span>(  <span class="string">&quot;/&quot;</span>,  <span class="title function_">asyncHandler</span>(<span class="title function_">async</span> (req, res) =&gt; &#123;    res.<span class="title function_">send</span>(<span class="string">&quot;Hello, World!&quot;</span>);  &#125;));<span class="comment">// 오류 처리 미들웨어</span>app.<span class="title function_">use</span>(<span class="function">(<span class="params">err, req, res, next</span>) =&gt;</span> &#123;  res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&quot;Internal Server Error&quot;</span>);&#125;);app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Server running at &lt;http://localhost:3000&gt;&quot;</span>);&#125;);</code></pre><p>위 코드에서는 <code>asyncHandler</code> 유틸리티 함수를 사용하여 비동기 미들웨어를 처리하고, 오류를 일관되게 처리합니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>위의 방법들을 사용하여 미들웨어 비동기 처리 문제를 해결할 수 있습니다. 비동기 함수에서 <code>next()</code>를 호출하고, 오류를 처리하며, 유틸리티 함수를 사용하여 비동기 미들웨어를 관리하여 Express 서버의 비동기 처리 문제를 해결해 보세요!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> Express </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 프로토타입 상속(Prototype Inheritance)</title>
      <link href="/javascript/special/12/"/>
      <url>/javascript/special/12/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-프로토타입-상속-Prototype-Inheritance"><a href="#JavaScript-프로토타입-상속-Prototype-Inheritance" class="headerlink" title="JavaScript 프로토타입 상속(Prototype Inheritance)"></a>JavaScript 프로토타입 상속(Prototype Inheritance)</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 JavaScript의 프로토타입 상속에 대해 알아보겠습니다. 프로토타입 상속은 JavaScript의 중요한 개념으로, 객체 간의 상속 관계를 설정하는 방법을 이해하는 데 도움이 됩니다.</p><h2 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h2><h3 id="프로토타입-상속이란"><a href="#프로토타입-상속이란" class="headerlink" title="프로토타입 상속이란?"></a>프로토타입 상속이란?</h3><p>JavaScript는 프로토타입 기반 언어로, 모든 객체는 다른 객체로부터 상속을 받을 수 있습니다. 프로토타입 상속은 객체의 속성과 메서드를 다른 객체로부터 상속받아 재사용하는 방법을 의미합니다.</p><h3 id="프로토타입-체인"><a href="#프로토타입-체인" class="headerlink" title="프로토타입 체인"></a>프로토타입 체인</h3><p>프로토타입 상속은 프로토타입 체인(prototype chain)을 통해 이루어집니다. 객체가 특정 속성이나 메서드를 찾을 때, 먼저 자신의 속성을 검색하고, 없으면 프로토타입 체인을 따라 상위 객체를 계속 검색합니다.</p><h2 id="활용"><a href="#활용" class="headerlink" title="활용"></a>활용</h2><h3 id="객체-간의-상속-관계-설정"><a href="#객체-간의-상속-관계-설정" class="headerlink" title="객체 간의 상속 관계 설정"></a>객체 간의 상속 관계 설정</h3><p>다음은 프로토타입 상속을 사용하여 객체 간의 상속 관계를 설정하는 예제입니다.</p><p><strong>예제 1: 기본적인 프로토타입 상속</strong></p><pre><code class="highlight javascript"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;  <span class="variable language_">this</span>.<span class="property">name</span> = name;&#125;<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHello</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello, my name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>);&#125;;<span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params">name, major</span>) &#123;  <span class="title class_">Person</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name);  <span class="variable language_">this</span>.<span class="property">major</span> = major;&#125;<span class="comment">// Student의 프로토타입을 Person의 인스턴스로 설정</span><span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>);<span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Student</span>;<span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayMajor</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`My major is <span class="subst">$&#123;<span class="variable language_">this</span>.major&#125;</span>`</span>);&#125;;<span class="keyword">const</span> student = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;John Doe&quot;</span>, <span class="string">&quot;Computer Science&quot;</span>);student.<span class="title function_">sayHello</span>(); <span class="comment">// Hello, my name is John Doe</span>student.<span class="title function_">sayMajor</span>(); <span class="comment">// My major is Computer Science</span></code></pre><p><strong>예제 2: 클래스 문법을 사용한 프로토타입 상속</strong></p><p>ES6에서는 <code>class</code> 키워드를 사용하여 프로토타입 상속을 더욱 간편하게 구현할 수 있습니다.</p><pre><code class="highlight javascript"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;    <span class="variable language_">this</span>.<span class="property">name</span> = name;  &#125;  <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello, my name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>);  &#125;&#125;<span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;  <span class="title function_">constructor</span>(<span class="params">name, major</span>) &#123;    <span class="variable language_">super</span>(name);    <span class="variable language_">this</span>.<span class="property">major</span> = major;  &#125;  <span class="title function_">sayMajor</span>(<span class="params"></span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`My major is <span class="subst">$&#123;<span class="variable language_">this</span>.major&#125;</span>`</span>);  &#125;&#125;<span class="keyword">const</span> student = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;Jane Doe&quot;</span>, <span class="string">&quot;Mathematics&quot;</span>);student.<span class="title function_">sayHello</span>(); <span class="comment">// Hello, my name is Jane Doe</span>student.<span class="title function_">sayMajor</span>(); <span class="comment">// My major is Mathematics</span></code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 JavaScript의 프로토타입 상속 개념과 활용 방법에 대해 알아보았습니다. 프로토타입 상속을 이해하면 객체 지향 프로그래밍 패러다임을 JavaScript에서 구현할 수 있습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> JS_필살기 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Express 트러블슈팅[10] SSL 인증서 문제</title>
      <link href="/express/troubleshooting/10/"/>
      <url>/express/troubleshooting/10/</url>
      
        <content type="html"><![CDATA[<h1 id="Express-서버에서-SSL-인증서-문제-해결하기"><a href="#Express-서버에서-SSL-인증서-문제-해결하기" class="headerlink" title="Express 서버에서 SSL 인증서 문제 해결하기"></a>Express 서버에서 SSL 인증서 문제 해결하기</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 Express 서버에서 발생할 수 있는 SSL 인증서 문제와 그 해결 방안에 대해 알아보겠습니다.<br>SSL 인증서는 HTTPS를 통해 보안을 강화하는 데 사용됩니다. SSL 인증서 문제는 주로 인증서 설치, 만료, 잘못된 경로 설정 등으로 인해 발생할 수 있습니다.</p><h2 id="SSL-인증서-문제-개요"><a href="#SSL-인증서-문제-개요" class="headerlink" title="SSL 인증서 문제 개요"></a>SSL 인증서 문제 개요</h2><p>SSL 인증서 문제는 주로 인증서가 제대로 설치되지 않았거나, 만료되었거나, 경로가 잘못 설정되었을 때 발생합니다.<br>아래는 자주 발생하는 문제들입니다.</p><h3 id="1-ERR-SSL-PROTOCOL-ERROR"><a href="#1-ERR-SSL-PROTOCOL-ERROR" class="headerlink" title="1. ERR_SSL_PROTOCOL_ERROR"></a>1. <code>ERR_SSL_PROTOCOL_ERROR</code></h3><pre><code class="highlight bash">Error: ERR_SSL_PROTOCOL_ERROR    at /path/to/project/server.js:34:10    ...</code></pre><h3 id="2-ERR-CERT-DATE-INVALID"><a href="#2-ERR-CERT-DATE-INVALID" class="headerlink" title="2. ERR_CERT_DATE_INVALID"></a>2. <code>ERR_CERT_DATE_INVALID</code></h3><pre><code class="highlight bash">Error: ERR_CERT_DATE_INVALID    at /path/to/project/server.js:34:10    ...</code></pre><h3 id="3-ERR-CERT-COMMON-NAME-INVALID"><a href="#3-ERR-CERT-COMMON-NAME-INVALID" class="headerlink" title="3. ERR_CERT_COMMON_NAME_INVALID"></a>3. <code>ERR_CERT_COMMON_NAME_INVALID</code></h3><pre><code class="highlight bash">Error: ERR_CERT_COMMON_NAME_INVALID    at /path/to/project/server.js:34:10    ...</code></pre><h2 id="해결-방법"><a href="#해결-방법" class="headerlink" title="해결 방법"></a>해결 방법</h2><p>SSL 인증서 문제를 해결하기 위한 몇 가지 접근 방법을 살펴보겠습니다.</p><h3 id="1-SSL-인증서-설치"><a href="#1-SSL-인증서-설치" class="headerlink" title="1. SSL 인증서 설치"></a>1. SSL 인증서 설치</h3><p>먼저 SSL 인증서가 올바르게 설치되었는지 확인합니다. Let’s Encrypt를 사용하여 무료 SSL 인증서를 설치하는 방법을 예제로 알아보겠습니다.</p><h3 id="Let’s-Encrypt를-사용한-SSL-인증서-설치"><a href="#Let’s-Encrypt를-사용한-SSL-인증서-설치" class="headerlink" title="Let’s Encrypt를 사용한 SSL 인증서 설치"></a>Let’s Encrypt를 사용한 SSL 인증서 설치</h3><ol><li><p><strong>Certbot 설치</strong></p><p>Certbot은 Let’s Encrypt에서 SSL 인증서를 발급받기 위해 사용되는 도구입니다. Certbot을 설치합니다.</p><pre><code class="highlight bash"><span class="built_in">sudo</span> apt-get update<span class="built_in">sudo</span> apt-get install certbot</code></pre></li><li><p><strong>SSL 인증서 발급</strong></p><p>Certbot을 사용하여 SSL 인증서를 발급받습니다.</p><pre><code class="highlight bash"><span class="built_in">sudo</span> certbot certonly --standalone -d yourdomain.com -d www.yourdomain.com</code></pre></li><li><p><strong>인증서 경로 확인</strong></p><p>발급된 SSL 인증서의 경로를 확인합니다. 일반적으로 <code>/etc/letsencrypt/live/yourdomain.com/fullchain.pem</code>와 <code>/etc/letsencrypt/live/yourdomain.com/privkey.pem</code> 경로에 저장됩니다.</p></li></ol><h3 id="2-Express-서버에서-SSL-설정"><a href="#2-Express-서버에서-SSL-설정" class="headerlink" title="2. Express 서버에서 SSL 설정"></a>2. Express 서버에서 SSL 설정</h3><p>SSL 인증서를 Express 서버에 설정합니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);<span class="keyword">const</span> https = <span class="built_in">require</span>(<span class="string">&quot;https&quot;</span>);<span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);<span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);<span class="keyword">const</span> app = <span class="title function_">express</span>();<span class="keyword">const</span> options = &#123;  <span class="attr">key</span>: fs.<span class="title function_">readFileSync</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;path/to/privkey.pem&quot;</span>)),  <span class="attr">cert</span>: fs.<span class="title function_">readFileSync</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;path/to/fullchain.pem&quot;</span>)),&#125;;app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  res.<span class="title function_">send</span>(<span class="string">&quot;Hello, Secure World!&quot;</span>);&#125;);https.<span class="title function_">createServer</span>(options, app).<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Secure server running at &lt;https://localhost:3000&gt;&quot;</span>);&#125;);</code></pre><p>위 코드에서는 SSL 인증서와 키 파일을 읽어와 HTTPS 서버를 설정합니다.</p><h3 id="3-인증서-갱신"><a href="#3-인증서-갱신" class="headerlink" title="3. 인증서 갱신"></a>3. 인증서 갱신</h3><p>SSL 인증서는 유효 기간이 있으며, 만료되기 전에 갱신해야 합니다. Let’s Encrypt 인증서를 갱신하는 방법을 설명합니다.</p><h3 id="Certbot을-사용한-인증서-갱신"><a href="#Certbot을-사용한-인증서-갱신" class="headerlink" title="Certbot을 사용한 인증서 갱신"></a>Certbot을 사용한 인증서 갱신</h3><pre><code class="highlight bash"><span class="built_in">sudo</span> certbot renew</code></pre><p>위 명령어를 사용하여 Certbot으로 발급받은 모든 인증서를 갱신합니다. 인증서 갱신을 자동화하려면 <code>cron</code> 작업을 설정할 수 있습니다.</p><pre><code class="highlight bash"><span class="built_in">echo</span> <span class="string">&quot;0 0 * * 0 sudo certbot renew &gt;&gt; /var/log/le-renew.log&quot;</span> | <span class="built_in">sudo</span> <span class="built_in">tee</span> -a /etc/crontab &gt; /dev/null</code></pre><p>위 명령어는 매주 일요일 자정에 인증서를 갱신하는 <code>cron</code> 작업을 설정합니다.</p><h3 id="4-인증서-경로-확인-및-설정"><a href="#4-인증서-경로-확인-및-설정" class="headerlink" title="4. 인증서 경로 확인 및 설정"></a>4. 인증서 경로 확인 및 설정</h3><p>인증서와 키 파일의 경로가 올바르게 설정되었는지 확인합니다. 잘못된 경로로 인해 인증서를 로드할 수 없는 경우 문제가 발생할 수 있습니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> options = &#123;  <span class="attr">key</span>: fs.<span class="title function_">readFileSync</span>(<span class="string">&quot;/etc/letsencrypt/live/yourdomain.com/privkey.pem&quot;</span>),  <span class="attr">cert</span>: fs.<span class="title function_">readFileSync</span>(<span class="string">&quot;/etc/letsencrypt/live/yourdomain.com/fullchain.pem&quot;</span>),&#125;;</code></pre><p>위 코드에서는 인증서와 키 파일의 경로가 올바르게 설정되었는지 확인합니다.</p><h3 id="5-인증서-도메인-이름-확인"><a href="#5-인증서-도메인-이름-확인" class="headerlink" title="5. 인증서 도메인 이름 확인"></a>5. 인증서 도메인 이름 확인</h3><p>인증서의 도메인 이름이 서버의 도메인 이름과 일치하는지 확인합니다. 일치하지 않으면 <code>ERR_CERT_COMMON_NAME_INVALID</code> 오류가 발생할 수 있습니다.</p><pre><code class="highlight bash">openssl x509 -<span class="keyword">in</span> /etc/letsencrypt/live/yourdomain.com/fullchain.pem -noout -text</code></pre><p>위 명령어를 사용하여 인증서의 도메인 이름을 확인합니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>위의 방법들을 사용하여 SSL 인증서 문제를 해결할 수 있습니다. SSL 인증서를 올바르게 설치하고, Express 서버에 설정하며, 인증서를 갱신하고, 경로와 도메인 이름을 확인하여 Express 서버의 SSL 인증서 문제를 해결해 보세요!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> Express </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Javascript 제너레이터 (Generators)</title>
      <link href="/javascript/detail/15/"/>
      <url>/javascript/detail/15/</url>
      
        <content type="html"><![CDATA[<h1 id="Javascript-제너레이터-Generators"><a href="#Javascript-제너레이터-Generators" class="headerlink" title="Javascript 제너레이터 (Generators)"></a>Javascript 제너레이터 (Generators)</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 JavaScript에서 제너레이터(Generators)에 대해 알아보겠습니다. 제너레이터는 이터레이터를 생성할 수 있는 특별한 함수로, <code>yield</code> 키워드를 사용하여 여러 값을 순차적으로 반환할 수 있습니다.</p><h2 id="제너레이터-함수-정의"><a href="#제너레이터-함수-정의" class="headerlink" title="제너레이터 함수 정의"></a>제너레이터 함수 정의</h2><p>제너레이터 함수는 <code>function*</code> 키워드를 사용하여 정의합니다:</p><pre><code class="highlight javascript"><span class="keyword">function</span>* <span class="title function_">generator</span>(<span class="params"></span>) &#123;  <span class="keyword">yield</span> <span class="number">1</span>;  <span class="keyword">yield</span> <span class="number">2</span>;  <span class="keyword">yield</span> <span class="number">3</span>;&#125;<span class="keyword">const</span> gen = <span class="title function_">generator</span>();<span class="variable language_">console</span>.<span class="title function_">log</span>(gen.<span class="title function_">next</span>()); <span class="comment">// 출력: &#123; value: 1, done: false &#125;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(gen.<span class="title function_">next</span>()); <span class="comment">// 출력: &#123; value: 2, done: false &#125;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(gen.<span class="title function_">next</span>()); <span class="comment">// 출력: &#123; value: 3, done: false &#125;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(gen.<span class="title function_">next</span>()); <span class="comment">// 출력: &#123; value: undefined, done: true &#125;</span></code></pre><h2 id="제너레이터와-for-of-루프"><a href="#제너레이터와-for-of-루프" class="headerlink" title="제너레이터와 for...of 루프"></a>제너레이터와 <code>for...of</code> 루프</h2><p>제너레이터는 <code>for...of</code> 루프를 사용하여 반복할 수 있습니다:</p><pre><code class="highlight javascript"><span class="keyword">function</span>* <span class="title function_">generator</span>(<span class="params"></span>) &#123;  <span class="keyword">yield</span> <span class="string">&quot;a&quot;</span>;  <span class="keyword">yield</span> <span class="string">&quot;b&quot;</span>;  <span class="keyword">yield</span> <span class="string">&quot;c&quot;</span>;&#125;<span class="keyword">for</span> (<span class="keyword">const</span> value <span class="keyword">of</span> <span class="title function_">generator</span>()) &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(value);&#125;<span class="comment">// 출력: a, b, c</span></code></pre><h2 id="제너레이터의-활용-예"><a href="#제너레이터의-활용-예" class="headerlink" title="제너레이터의 활용 예"></a>제너레이터의 활용 예</h2><p>제너레이터는 무한 수열을 생성하거나, 비동기 작업을 순차적으로 처리하는 데 사용할 수 있습니다:</p><pre><code class="highlight javascript"><span class="keyword">function</span>* <span class="title function_">fibonacci</span>(<span class="params"></span>) &#123;  <span class="keyword">let</span> [prev, curr] = [<span class="number">0</span>, <span class="number">1</span>];  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;    <span class="keyword">yield</span> curr;    [prev, curr] = [curr, prev + curr];  &#125;&#125;<span class="keyword">const</span> seq = <span class="title function_">fibonacci</span>();<span class="variable language_">console</span>.<span class="title function_">log</span>(seq.<span class="title function_">next</span>().<span class="property">value</span>); <span class="comment">// 출력: 1</span><span class="variable language_">console</span>.<span class="title function_">log</span>(seq.<span class="title function_">next</span>().<span class="property">value</span>); <span class="comment">// 출력: 1</span><span class="variable language_">console</span>.<span class="title function_">log</span>(seq.<span class="title function_">next</span>().<span class="property">value</span>); <span class="comment">// 출력: 2</span><span class="variable language_">console</span>.<span class="title function_">log</span>(seq.<span class="title function_">next</span>().<span class="property">value</span>); <span class="comment">// 출력: 3</span><span class="variable language_">console</span>.<span class="title function_">log</span>(seq.<span class="title function_">next</span>().<span class="property">value</span>); <span class="comment">// 출력: 5</span></code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 Javascript에서 제너레이터를 사용하는 방법에 대해 알아보았습니다. 제너레이터는 이터레이터를 생성할 수 있는 특별한 함수로, 여러 값을 순차적으로 반환할 수 있습니다. 다음 시간에는 프록시에 대해 알아보겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> JS_디테일 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Express 트러블슈팅[9] 라우팅 이슈</title>
      <link href="/express/troubleshooting/9/"/>
      <url>/express/troubleshooting/9/</url>
      
        <content type="html"><![CDATA[<h1 id="Express-서버에서-라우팅-문제-해결하기"><a href="#Express-서버에서-라우팅-문제-해결하기" class="headerlink" title="Express 서버에서 라우팅 문제 해결하기"></a>Express 서버에서 라우팅 문제 해결하기</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 Express 서버에서 발생할 수 있는 라우팅 문제와 그 해결 방안에 대해 알아보겠습니다. 라우팅 문제는 주로 잘못된 경로 설정, 동적 라우팅 충돌, 미들웨어 순서 문제 등으로 인해 발생할 수 있습니다.</p><h2 id="라우팅-문제-개요"><a href="#라우팅-문제-개요" class="headerlink" title="라우팅 문제 개요"></a>라우팅 문제 개요</h2><p>Express 서버에서 라우팅 문제는 주로 잘못된 경로 설정, 동적 라우팅 충돌, 미들웨어 순서 문제 등으로 인해 발생합니다. 아래는 자주 발생하는 문제들입니다.</p><h3 id="1-404-Not-Found-오류"><a href="#1-404-Not-Found-오류" class="headerlink" title="1. 404 Not Found 오류"></a>1. 404 Not Found 오류</h3><pre><code class="highlight bash">Error: Not Found    at /path/to/project/app.js:45:8    ...</code></pre><h3 id="2-동적-라우팅-충돌"><a href="#2-동적-라우팅-충돌" class="headerlink" title="2. 동적 라우팅 충돌"></a>2. 동적 라우팅 충돌</h3><pre><code class="highlight bash">Error: Route conflict    at /path/to/project/routes.js:23:8    ...</code></pre><h3 id="3-미들웨어-순서-문제"><a href="#3-미들웨어-순서-문제" class="headerlink" title="3. 미들웨어 순서 문제"></a>3. 미들웨어 순서 문제</h3><pre><code class="highlight bash">Error: Middleware order issue    at /path/to/project/middleware.js:15:8    ...</code></pre><h2 id="해결-방법"><a href="#해결-방법" class="headerlink" title="해결 방법"></a>해결 방법</h2><p>라우팅 문제를 해결하기 위한 몇 가지 접근 방법을 살펴보겠습니다.</p><h3 id="1-라우트-정의-순서-확인"><a href="#1-라우트-정의-순서-확인" class="headerlink" title="1. 라우트 정의 순서 확인"></a>1. 라우트 정의 순서 확인</h3><p>라우트 정의 순서는 Express 서버의 동작에 큰 영향을 미칩니다. 구체적인 라우트를 일반적인 라우트보다 먼저 정의해야 합니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);<span class="keyword">const</span> app = <span class="title function_">express</span>();app.<span class="title function_">get</span>(<span class="string">&quot;/users/:id&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  res.<span class="title function_">send</span>(<span class="string">`User with ID: <span class="subst">$&#123;req.params.id&#125;</span>`</span>);&#125;);app.<span class="title function_">get</span>(<span class="string">&quot;/users&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  res.<span class="title function_">send</span>(<span class="string">&quot;User list&quot;</span>);&#125;);app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  res.<span class="title function_">status</span>(<span class="number">404</span>).<span class="title function_">send</span>(<span class="string">&quot;Not Found&quot;</span>);&#125;);app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Server running at &lt;http://localhost:3000&gt;&quot;</span>);&#125;);</code></pre><p>위 코드에서는 <code>/users/:id</code> 라우트를 <code>/users</code> 라우트 위에 배치하여 동적 라우트가 먼저 매칭되도록 합니다.</p><h3 id="2-동적-라우트와-정적-라우트-분리"><a href="#2-동적-라우트와-정적-라우트-분리" class="headerlink" title="2. 동적 라우트와 정적 라우트 분리"></a>2. 동적 라우트와 정적 라우트 분리</h3><p>동적 라우트와 정적 라우트를 분리하여 충돌을 방지할 수 있습니다. 이를 통해 라우팅 충돌을 피할 수 있습니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);<span class="keyword">const</span> app = <span class="title function_">express</span>();<span class="keyword">const</span> userRouter = express.<span class="title class_">Router</span>();userRouter.<span class="title function_">get</span>(<span class="string">&quot;/:id&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  res.<span class="title function_">send</span>(<span class="string">`User with ID: <span class="subst">$&#123;req.params.id&#125;</span>`</span>);&#125;);userRouter.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  res.<span class="title function_">send</span>(<span class="string">&quot;User list&quot;</span>);&#125;);app.<span class="title function_">use</span>(<span class="string">&quot;/users&quot;</span>, userRouter);app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  res.<span class="title function_">status</span>(<span class="number">404</span>).<span class="title function_">send</span>(<span class="string">&quot;Not Found&quot;</span>);&#125;);app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Server running at &lt;http://localhost:3000&gt;&quot;</span>);&#125;);</code></pre><p>위 코드에서는 동적 라우트와 정적 라우트를 <code>userRouter</code>로 분리하여 충돌을 방지합니다.</p><h3 id="3-미들웨어-순서-확인"><a href="#3-미들웨어-순서-확인" class="headerlink" title="3. 미들웨어 순서 확인"></a>3. 미들웨어 순서 확인</h3><p>미들웨어는 순서대로 실행되기 때문에, 올바른 순서로 정의해야 합니다. 예를 들어, 인증 미들웨어는 모든 라우트보다 먼저 정의해야 합니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);<span class="keyword">const</span> app = <span class="title function_">express</span>();<span class="keyword">const</span> <span class="title function_">authMiddleware</span> = (<span class="params">req, res, next</span>) =&gt; &#123;  <span class="keyword">if</span> (req.<span class="property">headers</span>.<span class="property">authorization</span>) &#123;    <span class="title function_">next</span>();  &#125; <span class="keyword">else</span> &#123;    res.<span class="title function_">status</span>(<span class="number">401</span>).<span class="title function_">send</span>(<span class="string">&quot;Unauthorized&quot;</span>);  &#125;&#125;;app.<span class="title function_">use</span>(authMiddleware);app.<span class="title function_">get</span>(<span class="string">&quot;/protected&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  res.<span class="title function_">send</span>(<span class="string">&quot;Protected route accessed&quot;</span>);&#125;);app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  res.<span class="title function_">send</span>(<span class="string">&quot;Public route accessed&quot;</span>);&#125;);app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Server running at &lt;http://localhost:3000&gt;&quot;</span>);&#125;);</code></pre><p>위 코드에서는 인증 미들웨어를 모든 라우트보다 먼저 정의하여 모든 요청에 대해 인증을 처리합니다.</p><h3 id="4-라우트-파일-분리"><a href="#4-라우트-파일-분리" class="headerlink" title="4. 라우트 파일 분리"></a>4. 라우트 파일 분리</h3><p>라우트를 별도의 파일로 분리하여 관리할 수 있습니다. 이를 통해 코드의 가독성을 높이고 유지보수를 용이하게 할 수 있습니다.</p><pre><code class="highlight javascript"><span class="comment">// routes/userRoutes.js</span><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);<span class="keyword">const</span> router = express.<span class="title class_">Router</span>();router.<span class="title function_">get</span>(<span class="string">&quot;/:id&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  res.<span class="title function_">send</span>(<span class="string">`User with ID: <span class="subst">$&#123;req.params.id&#125;</span>`</span>);&#125;);router.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  res.<span class="title function_">send</span>(<span class="string">&quot;User list&quot;</span>);&#125;);<span class="variable language_">module</span>.<span class="property">exports</span> = router;<span class="comment">// app.js</span><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);<span class="keyword">const</span> userRoutes = <span class="built_in">require</span>(<span class="string">&quot;./routes/userRoutes&quot;</span>);<span class="keyword">const</span> app = <span class="title function_">express</span>();app.<span class="title function_">use</span>(<span class="string">&quot;/users&quot;</span>, userRoutes);app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  res.<span class="title function_">status</span>(<span class="number">404</span>).<span class="title function_">send</span>(<span class="string">&quot;Not Found&quot;</span>);&#125;);app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Server running at &lt;http://localhost:3000&gt;&quot;</span>);&#125;);</code></pre><p>위 코드에서는 <code>userRoutes</code>를 별도의 파일로 분리하여 라우트를 관리합니다.</p><h3 id="5-기본-경로-설정"><a href="#5-기본-경로-설정" class="headerlink" title="5. 기본 경로 설정"></a>5. 기본 경로 설정</h3><p>기본 경로를 설정하여 모든 경로에 대해 기본적으로 처리할 수 있도록 합니다. 이를 통해 404 Not Found 오류를 방지할 수 있습니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);<span class="keyword">const</span> app = <span class="title function_">express</span>();app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  res.<span class="title function_">send</span>(<span class="string">&quot;Welcome to the home page!&quot;</span>);&#125;);app.<span class="title function_">get</span>(<span class="string">&quot;/about&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  res.<span class="title function_">send</span>(<span class="string">&quot;About page&quot;</span>);&#125;);app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  res.<span class="title function_">status</span>(<span class="number">404</span>).<span class="title function_">send</span>(<span class="string">&quot;Not Found&quot;</span>);&#125;);app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Server running at &lt;http://localhost:3000&gt;&quot;</span>);&#125;);</code></pre><p>위 코드에서는 기본 경로를 설정하여 모든 경로에 대해 기본적으로 처리합니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>위의 방법들을 사용하여 라우팅 문제를 해결할 수 있습니다. 라우트 정의 순서를 확인하고, 동적 라우트와 정적 라우트를 분리하며, 미들웨어 순서를 올바르게 설정하고, 라우트를 별도의 파일로 분리하며, 기본 경로를 설정하여 Express 서버의 라우팅 문제를 해결해 보세요!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> Express </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Express 트러블슈팅[8] 세션 및 쿠키 관리 문제</title>
      <link href="/express/troubleshooting/8/"/>
      <url>/express/troubleshooting/8/</url>
      
        <content type="html"><![CDATA[<h1 id="Express-서버에서-세션-및-쿠키-관리-문제-해결하기"><a href="#Express-서버에서-세션-및-쿠키-관리-문제-해결하기" class="headerlink" title="Express 서버에서 세션 및 쿠키 관리 문제 해결하기"></a>Express 서버에서 세션 및 쿠키 관리 문제 해결하기</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 Express 서버에서 발생할 수 있는 세션 및 쿠키 관리 문제와 그 해결 방안에 대해 알아보겠습니다. 세션과 쿠키는 사용자 상태를 유지하고 인증을 처리하는 데 중요한 역할을 합니다.</p><h2 id="세션-및-쿠키-관리-문제-개요"><a href="#세션-및-쿠키-관리-문제-개요" class="headerlink" title="세션 및 쿠키 관리 문제 개요"></a>세션 및 쿠키 관리 문제 개요</h2><p>세션 및 쿠키 관리 문제는 주로 세션이 유지되지 않거나, 쿠키가 설정되지 않거나, 세션 데이터가 유실되는 경우 발생할 수 있습니다. 아래는 자주 발생하는 문제들입니다.</p><h3 id="1-세션이-유지되지-않는-경우"><a href="#1-세션이-유지되지-않는-경우" class="headerlink" title="1. 세션이 유지되지 않는 경우"></a>1. 세션이 유지되지 않는 경우</h3><pre><code class="highlight bash">Error: Session data is not saved    at /path/to/project/node_modules/express-session/index.js:289:7    ...</code></pre><h3 id="2-쿠키가-설정되지-않는-경우"><a href="#2-쿠키가-설정되지-않는-경우" class="headerlink" title="2. 쿠키가 설정되지 않는 경우"></a>2. 쿠키가 설정되지 않는 경우</h3><pre><code class="highlight bash">Error: Set-Cookie header is missing    at /path/to/project/node_modules/express/index.js:140:7    ...</code></pre><h3 id="3-세션-데이터가-유실되는-경우"><a href="#3-세션-데이터가-유실되는-경우" class="headerlink" title="3. 세션 데이터가 유실되는 경우"></a>3. 세션 데이터가 유실되는 경우</h3><pre><code class="highlight bash">Error: Session data is lost    at /path/to/project/node_modules/express-session/index.js:205:7    ...</code></pre><h2 id="1-express-session-미들웨어-사용하기"><a href="#1-express-session-미들웨어-사용하기" class="headerlink" title="1. express-session 미들웨어 사용하기"></a>1. express-session 미들웨어 사용하기</h2><p>Express 서버에서 세션을 관리하기 위해 가장 많이 사용되는 미들웨어는 <code>express-session</code>입니다. <code>express-session</code>을 사용하여 세션을 설정하고 관리할 수 있습니다.</p><h3 id="express-session-설치-및-설정"><a href="#express-session-설치-및-설정" class="headerlink" title="express-session 설치 및 설정"></a>express-session 설치 및 설정</h3><p>먼저, <code>express-session</code> 패키지를 설치합니다.</p><pre><code class="highlight bash">npm install express-session</code></pre><p>그 다음, Express 애플리케이션에 <code>express-session</code> 미들웨어를 추가합니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);<span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">&quot;express-session&quot;</span>);<span class="keyword">const</span> app = <span class="title function_">express</span>();app.<span class="title function_">use</span>(  <span class="title function_">session</span>(&#123;    <span class="attr">secret</span>: <span class="string">&quot;your-secret-key&quot;</span>, <span class="comment">// 세션 암호화에 사용할 비밀 키</span>    <span class="attr">resave</span>: <span class="literal">false</span>,    <span class="attr">saveUninitialized</span>: <span class="literal">true</span>,    <span class="attr">cookie</span>: &#123; <span class="attr">secure</span>: <span class="literal">false</span> &#125;, <span class="comment">// HTTPS를 사용하는 경우 true로 설정</span>  &#125;));app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  <span class="keyword">if</span> (!req.<span class="property">session</span>.<span class="property">views</span>) &#123;    req.<span class="property">session</span>.<span class="property">views</span> = <span class="number">1</span>;  &#125; <span class="keyword">else</span> &#123;    req.<span class="property">session</span>.<span class="property">views</span>++;  &#125;  res.<span class="title function_">send</span>(<span class="string">`Number of views: <span class="subst">$&#123;req.session.views&#125;</span>`</span>);&#125;);app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Server running at &lt;http://localhost:3000&gt;&quot;</span>);&#125;);</code></pre><p>위 코드에서는 <code>express-session</code>을 사용하여 세션을 설정하고, 사용자가 페이지를 방문할 때마다 세션의 뷰 카운트를 증가시킵니다.</p><h2 id="2-세션-저장소-설정"><a href="#2-세션-저장소-설정" class="headerlink" title="2. 세션 저장소 설정"></a>2. 세션 저장소 설정</h2><p>세션 데이터를 메모리가 아닌 외부 저장소에 저장하여 데이터 유실을 방지할 수 있습니다. <code>connect-mongo</code>를 사용하여 MongoDB에 세션을 저장할 수 있습니다.</p><h3 id="connect-mongo-설치-및-설정"><a href="#connect-mongo-설치-및-설정" class="headerlink" title="connect-mongo 설치 및 설정"></a>connect-mongo 설치 및 설정</h3><p>먼저, <code>connect-mongo</code> 패키지를 설치합니다.</p><pre><code class="highlight bash">npm install connect-mongo</code></pre><p>그 다음, <code>connect-mongo</code>를 사용하여 세션을 MongoDB에 저장하도록 설정합니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);<span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">&quot;express-session&quot;</span>);<span class="keyword">const</span> <span class="title class_">MongoStore</span> = <span class="built_in">require</span>(<span class="string">&quot;connect-mongo&quot;</span>);<span class="keyword">const</span> app = <span class="title function_">express</span>();app.<span class="title function_">use</span>(  <span class="title function_">session</span>(&#123;    <span class="attr">secret</span>: <span class="string">&quot;your-secret-key&quot;</span>,    <span class="attr">resave</span>: <span class="literal">false</span>,    <span class="attr">saveUninitialized</span>: <span class="literal">true</span>,    <span class="attr">store</span>: <span class="title class_">MongoStore</span>.<span class="title function_">create</span>(&#123;      <span class="attr">mongoUrl</span>: <span class="string">&quot;mongodb://localhost/session-db&quot;</span>,      <span class="attr">ttl</span>: <span class="number">14</span> * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span>, <span class="comment">// 세션의 생존 시간 (14일)</span>    &#125;),    <span class="attr">cookie</span>: &#123; <span class="attr">secure</span>: <span class="literal">false</span> &#125;,  &#125;));app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  <span class="keyword">if</span> (!req.<span class="property">session</span>.<span class="property">views</span>) &#123;    req.<span class="property">session</span>.<span class="property">views</span> = <span class="number">1</span>;  &#125; <span class="keyword">else</span> &#123;    req.<span class="property">session</span>.<span class="property">views</span>++;  &#125;  res.<span class="title function_">send</span>(<span class="string">`Number of views: <span class="subst">$&#123;req.session.views&#125;</span>`</span>);&#125;);app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Server running at &lt;http://localhost:3000&gt;&quot;</span>);&#125;);</code></pre><p>위 코드에서는 <code>connect-mongo</code>를 사용하여 세션 데이터를 MongoDB에 저장합니다.</p><h2 id="3-쿠키-설정-확인"><a href="#3-쿠키-설정-확인" class="headerlink" title="3. 쿠키 설정 확인"></a>3. 쿠키 설정 확인</h2><p>쿠키가 제대로 설정되지 않는 경우, 쿠키 설정을 확인해야 합니다. <code>cookie-parser</code> 미들웨어를 사용하여 쿠키를 관리할 수 있습니다.</p><h3 id="cookie-parser-설치-및-설정"><a href="#cookie-parser-설치-및-설정" class="headerlink" title="cookie-parser 설치 및 설정"></a>cookie-parser 설치 및 설정</h3><p>먼저, <code>cookie-parser</code> 패키지를 설치합니다.</p><pre><code class="highlight bash">npm install cookie-parser</code></pre><p>그 다음, Express 애플리케이션에 <code>cookie-parser</code> 미들웨어를 추가합니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);<span class="keyword">const</span> cookieParser = <span class="built_in">require</span>(<span class="string">&quot;cookie-parser&quot;</span>);<span class="keyword">const</span> app = <span class="title function_">express</span>();app.<span class="title function_">use</span>(<span class="title function_">cookieParser</span>(<span class="string">&quot;your-secret-key&quot;</span>));app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  res.<span class="title function_">cookie</span>(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;value&quot;</span>, &#123; <span class="attr">signed</span>: <span class="literal">true</span>, <span class="attr">httpOnly</span>: <span class="literal">true</span> &#125;);  res.<span class="title function_">send</span>(<span class="string">&quot;Cookie is set&quot;</span>);&#125;);app.<span class="title function_">get</span>(<span class="string">&quot;/get-cookie&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  <span class="keyword">const</span> cookies = req.<span class="property">signedCookies</span>;  res.<span class="title function_">json</span>(cookies);&#125;);app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Server running at &lt;http://localhost:3000&gt;&quot;</span>);&#125;);</code></pre><p>위 코드에서는 <code>cookie-parser</code>를 사용하여 쿠키를 설정하고, 서명된 쿠키를 클라이언트에 전송합니다.</p><h2 id="4-세션과-쿠키의-보안-설정"><a href="#4-세션과-쿠키의-보안-설정" class="headerlink" title="4. 세션과 쿠키의 보안 설정"></a>4. 세션과 쿠키의 보안 설정</h2><p>세션과 쿠키의 보안을 강화하여 사용자의 데이터를 안전하게 보호할 수 있습니다. <code>secure</code> 옵션을 사용하여 HTTPS 연결에서만 쿠키를 전송하고, <code>httpOnly</code> 옵션을 사용하여 JavaScript에서 쿠키에 접근하지 못하도록 설정할 수 있습니다.</p><h3 id="보안-설정-예제"><a href="#보안-설정-예제" class="headerlink" title="보안 설정 예제"></a>보안 설정 예제</h3><pre><code class="highlight javascript">app.<span class="title function_">use</span>(  <span class="title function_">session</span>(&#123;    <span class="attr">secret</span>: <span class="string">&quot;your-secret-key&quot;</span>,    <span class="attr">resave</span>: <span class="literal">false</span>,    <span class="attr">saveUninitialized</span>: <span class="literal">true</span>,    <span class="attr">cookie</span>: &#123;      <span class="attr">secure</span>: <span class="literal">true</span>, <span class="comment">// HTTPS에서만 쿠키 전송</span>      <span class="attr">httpOnly</span>: <span class="literal">true</span>, <span class="comment">// JavaScript에서 쿠키 접근 차단</span>      <span class="attr">maxAge</span>: <span class="number">60000</span>, <span class="comment">// 쿠키의 유효 기간 (1분)</span>    &#125;,  &#125;));</code></pre><p>위 코드에서는 <code>secure</code> 및 <code>httpOnly</code> 옵션을 사용하여 쿠키의 보안을 강화합니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>위의 방법들을 사용하여 세션 및 쿠키 관리 문제를 해결할 수 있습니다. <code>express-session</code> 및 <code>connect-mongo</code>를 사용하여 세션을 관리하고, <code>cookie-parser</code>를 사용하여 쿠키를 설정하며, 세션과 쿠키의 보안을 강화하여 Express 서버의 세션 및 쿠키 관리 문제를 해결해 보세요!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> Express </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Express 트러블슈팅[7] 파일 업로드 문제 해결하기</title>
      <link href="/express/troubleshooting/7/"/>
      <url>/express/troubleshooting/7/</url>
      
        <content type="html"><![CDATA[<h1 id="Express-서버에서-파일-업로드-문제-해결하기"><a href="#Express-서버에서-파일-업로드-문제-해결하기" class="headerlink" title="Express 서버에서 파일 업로드 문제 해결하기"></a>Express 서버에서 파일 업로드 문제 해결하기</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 Express 서버에서 파일 업로드 문제를 해결하는 방법에 대해 알아보겠습니다. 파일 업로드 문제는 주로 파일 크기 제한, 파일 형식 검증, 서버 설정 오류 등으로 인해 발생합니다.</p><h2 id="파일-업로드-문제-개요"><a href="#파일-업로드-문제-개요" class="headerlink" title="파일 업로드 문제 개요"></a>파일 업로드 문제 개요</h2><p>Express 서버에서 파일 업로드를 처리할 때 다양한 오류가 발생할 수 있습니다. 이러한 오류는 주로 파일 크기 제한, 파일 형식 검증, 서버 설정 오류 등으로 인해 발생합니다. 아래는 자주 발생하는 문제들입니다.</p><h3 id="1-LIMIT-FILE-SIZE-File-too-large"><a href="#1-LIMIT-FILE-SIZE-File-too-large" class="headerlink" title="1. LIMIT_FILE_SIZE: File too large"></a>1. <code>LIMIT_FILE_SIZE: File too large</code></h3><pre><code class="highlight bash">Error: LIMIT_FILE_SIZE: File too large    at /path/to/project/node_modules/multer/lib/make-error.js:17:13    ...</code></pre><h3 id="2-Unsupported-file-type"><a href="#2-Unsupported-file-type" class="headerlink" title="2. Unsupported file type"></a>2. <code>Unsupported file type</code></h3><pre><code class="highlight bash">Error: Unsupported file <span class="built_in">type</span>    at /path/to/project/file-upload.js:50:17    ...</code></pre><h2 id="Multer-설정-및-파일-업로드-에러-해결"><a href="#Multer-설정-및-파일-업로드-에러-해결" class="headerlink" title="Multer 설정 및 파일 업로드 에러 해결"></a>Multer 설정 및 파일 업로드 에러 해결</h2><p>Express 서버에서 파일 업로드를 처리하기 위해 가장 많이 사용되는 미들웨어는 <code>Multer</code>입니다. <code>Multer</code>를 사용하여 파일 업로드를 처리하고, 파일 크기 제한과 파일 형식 검증을 설정할 수 있습니다.</p><h3 id="Multer-설치-및-설정"><a href="#Multer-설치-및-설정" class="headerlink" title="Multer 설치 및 설정"></a>Multer 설치 및 설정</h3><p>먼저, <code>Multer</code> 패키지를 설치합니다.</p><pre><code class="highlight bash">npm install multer</code></pre><p>그 다음, Express 애플리케이션에 <code>Multer</code> 미들웨어를 추가합니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);<span class="keyword">const</span> multer = <span class="built_in">require</span>(<span class="string">&quot;multer&quot;</span>);<span class="keyword">const</span> app = <span class="title function_">express</span>();<span class="keyword">const</span> upload = <span class="title function_">multer</span>(&#123;  <span class="attr">dest</span>: <span class="string">&quot;uploads/&quot;</span>, <span class="comment">// 업로드된 파일이 저장될 디렉토리</span>  <span class="attr">limits</span>: &#123; <span class="attr">fileSize</span>: <span class="number">10</span> * <span class="number">1024</span> * <span class="number">1024</span> &#125;, <span class="comment">// 파일 크기 제한 (10MB)</span>&#125;);app.<span class="title function_">post</span>(<span class="string">&quot;/upload&quot;</span>, upload.<span class="title function_">single</span>(<span class="string">&quot;file&quot;</span>), <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  res.<span class="title function_">send</span>(<span class="string">&quot;File uploaded successfully&quot;</span>);&#125;);app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Server running at &lt;http://localhost:3000&gt;&quot;</span>);&#125;);</code></pre><p>위 코드에서는 <code>Multer</code>를 사용하여 파일을 업로드하고, 파일 크기 제한을 10MB로 설정합니다.</p><h2 id="파일-크기-제한-및-확장자-검증"><a href="#파일-크기-제한-및-확장자-검증" class="headerlink" title="파일 크기 제한 및 확장자 검증"></a>파일 크기 제한 및 확장자 검증</h2><p>파일 업로드 시 특정 파일 형식만 허용하도록 설정할 수 있습니다. 이를 통해 서버에 업로드되는 파일의 형식을 검증할 수 있습니다.</p><h3 id="파일-형식-검증-예제"><a href="#파일-형식-검증-예제" class="headerlink" title="파일 형식 검증 예제"></a>파일 형식 검증 예제</h3><pre><code class="highlight javascript"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);<span class="keyword">const</span> multer = <span class="built_in">require</span>(<span class="string">&quot;multer&quot;</span>);<span class="keyword">const</span> app = <span class="title function_">express</span>();<span class="keyword">const</span> <span class="title function_">fileFilter</span> = (<span class="params">req, file, cb</span>) =&gt; &#123;  <span class="keyword">const</span> allowedTypes = [<span class="string">&quot;image/jpeg&quot;</span>, <span class="string">&quot;image/png&quot;</span>, <span class="string">&quot;image/gif&quot;</span>];  <span class="keyword">if</span> (allowedTypes.<span class="title function_">includes</span>(file.<span class="property">mimetype</span>)) &#123;    <span class="title function_">cb</span>(<span class="literal">null</span>, <span class="literal">true</span>);  &#125; <span class="keyword">else</span> &#123;    <span class="title function_">cb</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Unsupported file type&quot;</span>), <span class="literal">false</span>);  &#125;&#125;;<span class="keyword">const</span> upload = <span class="title function_">multer</span>(&#123;  <span class="attr">dest</span>: <span class="string">&quot;uploads/&quot;</span>,  <span class="attr">limits</span>: &#123; <span class="attr">fileSize</span>: <span class="number">10</span> * <span class="number">1024</span> * <span class="number">1024</span> &#125;,  fileFilter,&#125;);app.<span class="title function_">post</span>(<span class="string">&quot;/upload&quot;</span>, upload.<span class="title function_">single</span>(<span class="string">&quot;file&quot;</span>), <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  res.<span class="title function_">send</span>(<span class="string">&quot;File uploaded successfully&quot;</span>);&#125;);app.<span class="title function_">use</span>(<span class="function">(<span class="params">err, req, res, next</span>) =&gt;</span> &#123;  <span class="keyword">if</span> (err) &#123;    res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">send</span>(err.<span class="property">message</span>);  &#125;&#125;);app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Server running at &lt;http://localhost:3000&gt;&quot;</span>);&#125;);</code></pre><p>위 코드에서는 <code>fileFilter</code> 함수를 사용하여 JPEG, PNG, GIF 파일 형식만 허용하도록 설정합니다.</p><h3 id="업로드-디렉토리-설정"><a href="#업로드-디렉토리-설정" class="headerlink" title="업로드 디렉토리 설정"></a>업로드 디렉토리 설정</h3><p>업로드된 파일이 저장될 디렉토리를 설정하고, 해당 디렉토리가 존재하는지 확인합니다. 디렉토리가 존재하지 않으면 파일 업로드가 실패할 수 있습니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);<span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);<span class="keyword">const</span> uploadDir = path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;uploads&quot;</span>);<span class="keyword">if</span> (!fs.<span class="title function_">existsSync</span>(uploadDir)) &#123;  fs.<span class="title function_">mkdirSync</span>(uploadDir);&#125;<span class="keyword">const</span> upload = <span class="title function_">multer</span>(&#123; <span class="attr">dest</span>: uploadDir &#125;);</code></pre><p>위 코드에서는 업로드 디렉토리가 존재하지 않으면 디렉토리를 생성합니다.</p><h3 id="클라이언트-측-설정-확인"><a href="#클라이언트-측-설정-확인" class="headerlink" title="클라이언트 측 설정 확인"></a>클라이언트 측 설정 확인</h3><p>클라이언트에서 서버로 파일 업로드 요청을 올바르게 보내는지 확인합니다. <code>Content-Type</code> 헤더와 <code>multipart/form-data</code> 형식이 올바르게 설정되어야 합니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>();formData.<span class="title function_">append</span>(<span class="string">&quot;file&quot;</span>, fileInput.<span class="property">files</span>[<span class="number">0</span>]);<span class="title function_">fetch</span>(<span class="string">&quot;&lt;http://localhost:3000/upload&gt;&quot;</span>, &#123;  <span class="attr">method</span>: <span class="string">&quot;POST&quot;</span>,  <span class="attr">body</span>: formData,&#125;)  .<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> response.<span class="title function_">text</span>())  .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(data))  .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;Error:&quot;</span>, error));</code></pre><p>위 코드에서는 클라이언트 측에서 파일을 업로드하는 예제를 보여줍니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>위의 방법들을 사용하여 파일 업로드 문제를 해결할 수 있습니다. <code>Multer</code> 미들웨어를 사용하고, 파일 크기 제한과 파일 형식 검증을 설정하며, 업로드 디렉토리를 확인하고, 클라이언트 측 설정을 점검하여 Express 서버의 파일 업로드 문제를 해결해 보세요!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> Express </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Express 트러블슈팅[6] JSON 파싱 오류</title>
      <link href="/express/troubleshooting/6/"/>
      <url>/express/troubleshooting/6/</url>
      
        <content type="html"><![CDATA[<h1 id="Express-서버에서-JSON-파싱-오류-해결하기"><a href="#Express-서버에서-JSON-파싱-오류-해결하기" class="headerlink" title="Express 서버에서 JSON 파싱 오류 해결하기"></a>Express 서버에서 JSON 파싱 오류 해결하기</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 Express 서버에서 발생할 수 있는 JSON 파싱 오류와 그 해결 방안에 대해 알아보겠습니다. JSON 파싱 오류는 클라이언트가 서버로 전송한 JSON 데이터가 올바르지 않거나, 서버에서 JSON 데이터를 제대로 처리하지 못할 때 발생합니다.</p><h2 id="JSON-파싱-오류-개요"><a href="#JSON-파싱-오류-개요" class="headerlink" title="JSON 파싱 오류 개요"></a>JSON 파싱 오류 개요</h2><p>Express 서버에서 JSON 데이터를 처리할 때, <code>SyntaxError: Unexpected token</code>과 같은 오류 메시지가 발생할 수 있습니다. 이는 클라이언트가 잘못된 JSON 데이터를 전송했거나, 서버에서 JSON 파싱 미들웨어가 제대로 설정되지 않았기 때문입니다. 아래는 자주 발생하는 오류 메시지들입니다.</p><h3 id="1-SyntaxError-Unexpected-token"><a href="#1-SyntaxError-Unexpected-token" class="headerlink" title="1. SyntaxError: Unexpected token"></a>1. <code>SyntaxError: Unexpected token</code></h3><pre><code class="highlight bash">SyntaxError: Unexpected token o <span class="keyword">in</span> JSON at position 1    at JSON.parse (&lt;anonymous&gt;)    at parse (path/to/express/lib/middleware/json.js:85:17)    at path/to/express/lib/router/index.js:635:15    ...</code></pre><h3 id="2-SyntaxError-Unexpected-end-of-JSON-input"><a href="#2-SyntaxError-Unexpected-end-of-JSON-input" class="headerlink" title="2. SyntaxError: Unexpected end of JSON input"></a>2. <code>SyntaxError: Unexpected end of JSON input</code></h3><pre><code class="highlight bash">SyntaxError: Unexpected end of JSON input    at JSON.parse (&lt;anonymous&gt;)    at parse (path/to/express/lib/middleware/json.js:85:17)    at path/to/express/lib/router/index.js:635:15    ...</code></pre><p>이러한 오류 메시지는 서버가 클라이언트로부터 전송된 JSON 데이터를 파싱할 때 발생합니다. 이제 이러한 문제를 해결하기 위한 몇 가지 접근 방법을 살펴보겠습니다.</p><h2 id="1-express-json-미들웨어-사용하기"><a href="#1-express-json-미들웨어-사용하기" class="headerlink" title="1. express.json() 미들웨어 사용하기"></a>1. <code>express.json()</code> 미들웨어 사용하기</h2><p>Express 서버에서 JSON 데이터를 제대로 처리하려면 <code>express.json()</code> 미들웨어를 사용하여 JSON 파싱을 설정해야 합니다.</p><h3 id="express-json-미들웨어-사용-예제"><a href="#express-json-미들웨어-사용-예제" class="headerlink" title="express.json() 미들웨어 사용 예제"></a><code>express.json()</code> 미들웨어 사용 예제</h3><pre><code class="highlight javascript"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);<span class="keyword">const</span> app = <span class="title function_">express</span>();app.<span class="title function_">use</span>(express.<span class="title function_">json</span>());app.<span class="title function_">post</span>(<span class="string">&quot;/data&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  res.<span class="title function_">send</span>(req.<span class="property">body</span>);&#125;);app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Server running at &lt;http://localhost:3000&gt;&quot;</span>);&#125;);</code></pre><p>위 코드에서는 <code>express.json()</code> 미들웨어를 사용하여 클라이언트가 전송한 JSON 데이터를 파싱합니다.</p><h2 id="2-JSON-데이터-유효성-검사"><a href="#2-JSON-데이터-유효성-검사" class="headerlink" title="2. JSON 데이터 유효성 검사"></a>2. JSON 데이터 유효성 검사</h2><p>클라이언트가 전송한 JSON 데이터가 올바른지 유효성을 검사합니다. 잘못된 JSON 데이터가 전송되면 파싱 오류가 발생할 수 있습니다.</p><h3 id="JSON-유효성-검사-예제"><a href="#JSON-유효성-검사-예제" class="headerlink" title="JSON 유효성 검사 예제"></a>JSON 유효성 검사 예제</h3><pre><code class="highlight javascript"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);<span class="keyword">const</span> app = <span class="title function_">express</span>();app.<span class="title function_">use</span>(express.<span class="title function_">json</span>());app.<span class="title function_">post</span>(<span class="string">&quot;/data&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  <span class="keyword">try</span> &#123;    <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(req.<span class="property">body</span>));    res.<span class="title function_">send</span>(req.<span class="property">body</span>);  &#125; <span class="keyword">catch</span> (error) &#123;    res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">send</span>(<span class="string">&quot;Invalid JSON data&quot;</span>);  &#125;&#125;);app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Server running at &lt;http://localhost:3000&gt;&quot;</span>);&#125;);</code></pre><p>위 코드에서는 JSON 데이터를 파싱하여 유효성을 검사하고, 잘못된 데이터가 전송되면 400 상태 코드와 함께 오류 메시지를 반환합니다.</p><h2 id="3-클라이언트-측-JSON-데이터-확인"><a href="#3-클라이언트-측-JSON-데이터-확인" class="headerlink" title="3. 클라이언트 측 JSON 데이터 확인"></a>3. 클라이언트 측 JSON 데이터 확인</h2><p>클라이언트에서 서버로 전송하는 JSON 데이터가 올바른지 확인합니다. 잘못된 JSON 데이터를 전송하면 파싱 오류가 발생할 수 있습니다.</p><h3 id="클라이언트-측-JSON-데이터-전송-예제"><a href="#클라이언트-측-JSON-데이터-전송-예제" class="headerlink" title="클라이언트 측 JSON 데이터 전송 예제"></a>클라이언트 측 JSON 데이터 전송 예제</h3><pre><code class="highlight javascript"><span class="title function_">fetch</span>(<span class="string">&quot;&lt;http://localhost:3000/data&gt;&quot;</span>, &#123;  <span class="attr">method</span>: <span class="string">&quot;POST&quot;</span>,  <span class="attr">headers</span>: &#123;    <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span>,  &#125;,  <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123; <span class="attr">key</span>: <span class="string">&quot;value&quot;</span> &#125;),&#125;)  .<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> response.<span class="title function_">json</span>())  .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(data))  .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;Error:&quot;</span>, error));</code></pre><p>위 코드에서는 클라이언트에서 올바른 JSON 데이터를 서버로 전송합니다.</p><h2 id="4-요청-본문-크기-제한-설정"><a href="#4-요청-본문-크기-제한-설정" class="headerlink" title="4. 요청 본문 크기 제한 설정"></a>4. 요청 본문 크기 제한 설정</h2><p>클라이언트가 전송하는 JSON 데이터의 크기가 너무 크면 파싱 오류가 발생할 수 있습니다. <code>express.json()</code> 미들웨어에서 요청 본문 크기 제한을 설정하여 이러한 문제를 해결할 수 있습니다.</p><h3 id="요청-본문-크기-제한-설정-예제"><a href="#요청-본문-크기-제한-설정-예제" class="headerlink" title="요청 본문 크기 제한 설정 예제"></a>요청 본문 크기 제한 설정 예제</h3><pre><code class="highlight javascript"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);<span class="keyword">const</span> app = <span class="title function_">express</span>();app.<span class="title function_">use</span>(express.<span class="title function_">json</span>(&#123; <span class="attr">limit</span>: <span class="string">&quot;10mb&quot;</span> &#125;));app.<span class="title function_">post</span>(<span class="string">&quot;/data&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  res.<span class="title function_">send</span>(req.<span class="property">body</span>);&#125;);app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Server running at &lt;http://localhost:3000&gt;&quot;</span>);&#125;);</code></pre><p>위 코드에서는 요청 본문 크기 제한을 10MB로 설정하여 클라이언트가 전송하는 데이터의 크기를 제한합니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>위의 방법 중 하나를 선택하여 JSON 파싱 오류를 해결할 수 있습니다. <code>express.json()</code> 미들웨어를 사용하고, JSON 데이터의 유효성을 검사하며, 클라이언트 측에서 올바른 JSON 데이터를 전송하고, 요청 본문 크기 제한을 설정하여 Express 서버의 JSON 파싱 오류를 해결해 보세요!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> Express </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Express 트러블슈팅[5] 미들웨어 순서 문제</title>
      <link href="/express/troubleshooting/5/"/>
      <url>/express/troubleshooting/5/</url>
      
        <content type="html"><![CDATA[<h1 id="Express-서버에서-미들웨어-순서-문제-해결하기"><a href="#Express-서버에서-미들웨어-순서-문제-해결하기" class="headerlink" title="Express 서버에서 미들웨어 순서 문제 해결하기"></a>Express 서버에서 미들웨어 순서 문제 해결하기</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 Express 서버에서 발생할 수 있는 미들웨어 순서 문제와 그 해결 방안에 대해 알아보겠습니다. 미들웨어는 요청(req)과 응답(res) 사이에서 실행되는 함수로, 그 순서에 따라 애플리케이션의 동작이 크게 달라질 수 있습니다.</p><h2 id="미들웨어-순서-문제-개요"><a href="#미들웨어-순서-문제-개요" class="headerlink" title="미들웨어 순서 문제 개요"></a>미들웨어 순서 문제 개요</h2><p>Express 애플리케이션에서 미들웨어는 순서대로 실행됩니다. 따라서 미들웨어의 순서가 잘못되면 의도하지 않은 동작이 발생할 수 있습니다. 아래는 미들웨어 순서로 인해 발생할 수 있는 일반적인 문제들입니다.</p><h3 id="1-인증-미들웨어가-실행되지-않는-경우"><a href="#1-인증-미들웨어가-실행되지-않는-경우" class="headerlink" title="1. 인증 미들웨어가 실행되지 않는 경우"></a>1. 인증 미들웨어가 실행되지 않는 경우</h3><pre><code class="highlight javascript"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);<span class="keyword">const</span> app = <span class="title function_">express</span>();app.<span class="title function_">use</span>(express.<span class="title function_">json</span>());app.<span class="title function_">post</span>(<span class="string">&quot;/protected&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  <span class="comment">// 인증 미들웨어가 없어서 모든 요청이 통과됨</span>  res.<span class="title function_">send</span>(<span class="string">&quot;Protected route accessed&quot;</span>);&#125;);<span class="comment">// 인증 미들웨어</span><span class="keyword">const</span> <span class="title function_">authMiddleware</span> = (<span class="params">req, res, next</span>) =&gt; &#123;  <span class="keyword">if</span> (req.<span class="property">headers</span>.<span class="property">authorization</span>) &#123;    <span class="title function_">next</span>();  &#125; <span class="keyword">else</span> &#123;    res.<span class="title function_">status</span>(<span class="number">401</span>).<span class="title function_">send</span>(<span class="string">&quot;Unauthorized&quot;</span>);  &#125;&#125;;app.<span class="title function_">use</span>(authMiddleware);app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Server running at &lt;http://localhost:3000&gt;&quot;</span>);&#125;);</code></pre><p>위 코드에서는 인증 미들웨어가 라우트 정의 후에 배치되어, 인증이 필요한 경로에 도달하지 못합니다.</p><h3 id="2-오류-처리-미들웨어가-작동하지-않는-경우"><a href="#2-오류-처리-미들웨어가-작동하지-않는-경우" class="headerlink" title="2. 오류 처리 미들웨어가 작동하지 않는 경우"></a>2. 오류 처리 미들웨어가 작동하지 않는 경우</h3><pre><code class="highlight javascript"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);<span class="keyword">const</span> app = <span class="title function_">express</span>();app.<span class="title function_">use</span>(express.<span class="title function_">json</span>());app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Something went wrong!&quot;</span>);&#125;);<span class="comment">// 오류 처리 미들웨어</span>app.<span class="title function_">use</span>(<span class="function">(<span class="params">err, req, res, next</span>) =&gt;</span> &#123;  res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&quot;Internal Server Error&quot;</span>);&#125;);app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Server running at &lt;http://localhost:3000&gt;&quot;</span>);&#125;);</code></pre><p>위 코드에서는 오류가 발생했을 때 오류 처리 미들웨어가 마지막에 정의되지 않아 작동하지 않습니다.</p><h2 id="해결-방법"><a href="#해결-방법" class="headerlink" title="해결 방법"></a>해결 방법</h2><p>올바른 미들웨어 순서를 설정하여 이러한 문제를 해결할 수 있습니다.</p><h3 id="1-올바른-미들웨어-순서-설정"><a href="#1-올바른-미들웨어-순서-설정" class="headerlink" title="1. 올바른 미들웨어 순서 설정"></a>1. 올바른 미들웨어 순서 설정</h3><p>인증 미들웨어와 같은 중요 미들웨어는 가능한 한 상위에 정의하여 모든 요청에 대해 적용되도록 합니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);<span class="keyword">const</span> app = <span class="title function_">express</span>();app.<span class="title function_">use</span>(express.<span class="title function_">json</span>());<span class="comment">// 인증 미들웨어</span><span class="keyword">const</span> <span class="title function_">authMiddleware</span> = (<span class="params">req, res, next</span>) =&gt; &#123;  <span class="keyword">if</span> (req.<span class="property">headers</span>.<span class="property">authorization</span>) &#123;    <span class="title function_">next</span>();  &#125; <span class="keyword">else</span> &#123;    res.<span class="title function_">status</span>(<span class="number">401</span>).<span class="title function_">send</span>(<span class="string">&quot;Unauthorized&quot;</span>);  &#125;&#125;;app.<span class="title function_">use</span>(authMiddleware);app.<span class="title function_">post</span>(<span class="string">&quot;/protected&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  res.<span class="title function_">send</span>(<span class="string">&quot;Protected route accessed&quot;</span>);&#125;);app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Server running at &lt;http://localhost:3000&gt;&quot;</span>);&#125;);</code></pre><p>위 코드에서는 인증 미들웨어를 상위에 배치하여 모든 경로에 대해 인증이 적용되도록 합니다.</p><h3 id="2-오류-처리-미들웨어-설정"><a href="#2-오류-처리-미들웨어-설정" class="headerlink" title="2. 오류 처리 미들웨어 설정"></a>2. 오류 처리 미들웨어 설정</h3><p>오류 처리 미들웨어는 가능한 한 마지막에 정의하여 모든 오류를 처리할 수 있도록 합니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);<span class="keyword">const</span> app = <span class="title function_">express</span>();app.<span class="title function_">use</span>(express.<span class="title function_">json</span>());app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Something went wrong!&quot;</span>);&#125;);<span class="comment">// 오류 처리 미들웨어</span>app.<span class="title function_">use</span>(<span class="function">(<span class="params">err, req, res, next</span>) =&gt;</span> &#123;  res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&quot;Internal Server Error&quot;</span>);&#125;);app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Server running at &lt;http://localhost:3000&gt;&quot;</span>);&#125;);</code></pre><p>위 코드에서는 오류 처리 미들웨어를 마지막에 배치하여 모든 오류를 처리하도록 합니다.</p><h3 id="3-라우트-정의-순서"><a href="#3-라우트-정의-순서" class="headerlink" title="3. 라우트 정의 순서"></a>3. 라우트 정의 순서</h3><p>라우트 정의도 순서에 따라 영향을 받을 수 있습니다. 일반적인 라우트는 구체적인 라우트보다 상위에 배치하여 의도하지 않은 라우트 매칭을 피할 수 있습니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);<span class="keyword">const</span> app = <span class="title function_">express</span>();app.<span class="title function_">use</span>(express.<span class="title function_">json</span>());app.<span class="title function_">get</span>(<span class="string">&quot;/users&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  res.<span class="title function_">send</span>(<span class="string">&quot;User list&quot;</span>);&#125;);app.<span class="title function_">get</span>(<span class="string">&quot;/users/:id&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  res.<span class="title function_">send</span>(<span class="string">`User with ID: <span class="subst">$&#123;req.params.id&#125;</span>`</span>);&#125;);app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  res.<span class="title function_">status</span>(<span class="number">404</span>).<span class="title function_">send</span>(<span class="string">&quot;Not Found&quot;</span>);&#125;);app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Server running at &lt;http://localhost:3000&gt;&quot;</span>);&#125;);</code></pre><p>위 코드에서는 <code>/users/:id</code> 라우트를 <code>/users</code> 라우트 아래에 배치하여 구체적인 라우트가 먼저 매칭되도록 합니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>위의 방법들을 사용하여 미들웨어 순서 문제를 해결할 수 있습니다. 미들웨어와 라우트의 순서를 올바르게 설정하여 Express 서버의 동작을 예상한 대로 유지해 보세요!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> Express </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Express 트러블슈팅[4] 데이터베이스 연결 실패</title>
      <link href="/express/troubleshooting/4/"/>
      <url>/express/troubleshooting/4/</url>
      
        <content type="html"><![CDATA[<h1 id="Express-서버에서-데이터베이스-연결-문제-해결하기"><a href="#Express-서버에서-데이터베이스-연결-문제-해결하기" class="headerlink" title="Express 서버에서 데이터베이스 연결 문제 해결하기"></a>Express 서버에서 데이터베이스 연결 문제 해결하기</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 Express 서버에서 발생할 수 있는 데이터베이스 연결 문제와 그 해결 방안에 대해 알아보겠습니다. 데이터베이스 연결 문제는 서버 애플리케이션에서 흔히 발생하는 문제 중 하나로, 다양한 원인이 있을 수 있습니다.</p><h2 id="데이터베이스-연결-문제-개요"><a href="#데이터베이스-연결-문제-개요" class="headerlink" title="데이터베이스 연결 문제 개요"></a>데이터베이스 연결 문제 개요</h2><p>Express 서버에서 데이터베이스에 연결할 때 여러 가지 오류가 발생할 수 있습니다. 이러한 오류는 데이터베이스 서버의 설정, 네트워크 문제, 애플리케이션 코드의 문제 등 다양한 원인으로 발생할 수 있습니다. 아래는 자주 발생하는 오류 메시지들입니다.</p><h3 id="1-ECONNREFUSED-Connection-refused"><a href="#1-ECONNREFUSED-Connection-refused" class="headerlink" title="1. ECONNREFUSED: Connection refused"></a>1. <code>ECONNREFUSED: Connection refused</code></h3><pre><code class="highlight bash">Error: connect ECONNREFUSED 127.0.0.1:27017    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1107:14)</code></pre><h3 id="2-ETIMEDOUT-Connection-timed-out"><a href="#2-ETIMEDOUT-Connection-timed-out" class="headerlink" title="2. ETIMEDOUT: Connection timed out"></a>2. <code>ETIMEDOUT: Connection timed out</code></h3><pre><code class="highlight bash">Error: connect ETIMEDOUT    at Connection.&lt;anonymous&gt; (/path/to/project/node_modules/mongodb/lib/connection/connect.js:348:21)    at Object.onceWrapper (events.js:317:30)    at emitOne (events.js:120:20)    at Connection.emit (events.js:210:7)</code></pre><h3 id="3-Authentication-failed"><a href="#3-Authentication-failed" class="headerlink" title="3. Authentication failed"></a>3. <code>Authentication failed</code></h3><pre><code class="highlight bash">MongoError: Authentication failed.    at /path/to/project/node_modules/mongodb-core/lib/connection/pool.js:581:63    at authenticateStragglers (/path/to/project/node_modules/mongodb-core/lib/connection/pool.js:504:16)    ...</code></pre><h2 id="1-데이터베이스-서버-상태-확인하기"><a href="#1-데이터베이스-서버-상태-확인하기" class="headerlink" title="1. 데이터베이스 서버 상태 확인하기"></a>1. 데이터베이스 서버 상태 확인하기</h2><p>먼저 데이터베이스 서버가 정상적으로 실행되고 있는지 확인합니다. 데이터베이스 서버가 실행 중인지, 네트워크 연결이 정상적인지 확인합니다.</p><h3 id="서버-상태-확인"><a href="#서버-상태-확인" class="headerlink" title="서버 상태 확인"></a>서버 상태 확인</h3><pre><code class="highlight bash">systemctl status mongod</code></pre><p>위 명령어는 MongoDB 서버의 상태를 확인합니다. 다른 데이터베이스 서버를 사용 중이라면 해당 서버의 상태 확인 명령어를 사용하세요.</p><h2 id="2-데이터베이스-연결-설정-확인하기"><a href="#2-데이터베이스-연결-설정-확인하기" class="headerlink" title="2. 데이터베이스 연결 설정 확인하기"></a>2. 데이터베이스 연결 설정 확인하기</h2><p>데이터베이스 연결 설정이 올바른지 확인합니다. 데이터베이스 URL, 포트, 인증 정보 등이 정확한지 확인하세요.</p><h3 id="MongoDB-연결-설정-예제"><a href="#MongoDB-연결-설정-예제" class="headerlink" title="MongoDB 연결 설정 예제"></a>MongoDB 연결 설정 예제</h3><pre><code class="highlight javascript"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&quot;mongoose&quot;</span>);mongoose  .<span class="title function_">connect</span>(<span class="string">&quot;mongodb://username:password@localhost:27017/mydatabase&quot;</span>, &#123;    <span class="attr">useNewUrlParser</span>: <span class="literal">true</span>,    <span class="attr">useUnifiedTopology</span>: <span class="literal">true</span>,  &#125;)  .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Database connection successful&quot;</span>);  &#125;)  .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;Database connection error:&quot;</span>, err);  &#125;);</code></pre><p>위 예제에서는 MongoDB에 연결하기 위한 설정을 보여줍니다. 사용 중인 데이터베이스에 맞게 설정을 조정하세요.</p><h2 id="3-네트워크-문제-해결하기"><a href="#3-네트워크-문제-해결하기" class="headerlink" title="3. 네트워크 문제 해결하기"></a>3. 네트워크 문제 해결하기</h2><p>데이터베이스 서버와 애플리케이션 서버 간의 네트워크 연결 상태를 확인합니다. 네트워크가 불안정하면 연결이 실패할 수 있습니다.</p><h3 id="네트워크-상태-확인"><a href="#네트워크-상태-확인" class="headerlink" title="네트워크 상태 확인"></a>네트워크 상태 확인</h3><pre><code class="highlight bash">ping database-server-ip</code></pre><p>네트워크 상태가 불안정하면 네트워크 장비를 점검하고, 네트워크 관리자에게 문의하여 문제를 해결합니다.</p><h2 id="4-데이터베이스-인증-정보-확인하기"><a href="#4-데이터베이스-인증-정보-확인하기" class="headerlink" title="4. 데이터베이스 인증 정보 확인하기"></a>4. 데이터베이스 인증 정보 확인하기</h2><p>인증 정보가 올바른지 확인합니다. 사용자 이름과 비밀번호가 정확한지, 데이터베이스에 접근할 수 있는 권한이 있는지 확인합니다.</p><h3 id="인증-정보-확인-예제"><a href="#인증-정보-확인-예제" class="headerlink" title="인증 정보 확인 예제"></a>인증 정보 확인 예제</h3><pre><code class="highlight javascript"><span class="keyword">const</span> &#123; <span class="title class_">MongoClient</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;mongodb&quot;</span>);<span class="keyword">const</span> uri = <span class="string">&quot;mongodb://username:password@localhost:27017/mydatabase&quot;</span>;<span class="title class_">MongoClient</span>.<span class="title function_">connect</span>(  uri,  &#123; <span class="attr">useNewUrlParser</span>: <span class="literal">true</span>, <span class="attr">useUnifiedTopology</span>: <span class="literal">true</span> &#125;,  <span class="function">(<span class="params">err, client</span>) =&gt;</span> &#123;    <span class="keyword">if</span> (err) &#123;      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;Authentication failed:&quot;</span>, err);      <span class="keyword">return</span>;    &#125;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Database connection successful&quot;</span>);    client.<span class="title function_">close</span>();  &#125;);</code></pre><p>위 예제에서는 MongoDB에 연결할 때 인증 정보를 사용합니다. 인증 정보가 올바른지 확인하세요.</p><h2 id="5-연결-재시도-로직-구현하기"><a href="#5-연결-재시도-로직-구현하기" class="headerlink" title="5. 연결 재시도 로직 구현하기"></a>5. 연결 재시도 로직 구현하기</h2><p>데이터베이스 연결이 실패할 경우, 일정 시간 후에 재시도하는 로직을 구현하여 안정성을 높일 수 있습니다.</p><h3 id="연결-재시도-예제"><a href="#연결-재시도-예제" class="headerlink" title="연결 재시도 예제"></a>연결 재시도 예제</h3><pre><code class="highlight javascript"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&quot;mongoose&quot;</span>);<span class="keyword">const</span> <span class="title function_">connectWithRetry</span> = (<span class="params"></span>) =&gt; &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Attempting to connect to the database...&quot;</span>);  mongoose    .<span class="title function_">connect</span>(<span class="string">&quot;mongodb://username:password@localhost:27017/mydatabase&quot;</span>, &#123;      <span class="attr">useNewUrlParser</span>: <span class="literal">true</span>,      <span class="attr">useUnifiedTopology</span>: <span class="literal">true</span>,    &#125;)    .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Database connection successful&quot;</span>);    &#125;)    .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;Database connection error:&quot;</span>, err);      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Retrying in 5 seconds...&quot;</span>);      <span class="built_in">setTimeout</span>(connectWithRetry, <span class="number">5000</span>);    &#125;);&#125;;<span class="title function_">connectWithRetry</span>();</code></pre><p>위 예제에서는 데이터베이스 연결이 실패할 경우 5초 후에 다시 시도하는 로직을 구현합니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>위의 방법 중 하나를 선택하여 데이터베이스 연결 문제를 해결할 수 있습니다. 데이터베이스 서버 상태를 확인하고, 연결 설정을 점검하며, 네트워크 문제를 해결하고, 인증 정보를 확인하여 Express 서버의 데이터베이스 연결 문제를 해결해 보세요!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> Express </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Express 트러블슈팅[3] CORS 에러</title>
      <link href="/express/troubleshooting/3/"/>
      <url>/express/troubleshooting/3/</url>
      
        <content type="html"><![CDATA[<h1 id="Express-CORS-에러"><a href="#Express-CORS-에러" class="headerlink" title="Express CORS 에러"></a>Express CORS 에러</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 Express 서버에서 발생하는 CORS(Cross-Origin Resource Sharing) 문제와 그 해결 방안에 대해 알아보겠습니다. CORS는 브라우저 보안 정책으로 인해 다른 출처의 리소스를 요청할 때 발생하는 문제입니다.</p><h2 id="CORS-문제-개요"><a href="#CORS-문제-개요" class="headerlink" title="CORS 문제 개요"></a>CORS 문제 개요</h2><p>CORS 문제는 주로 다른 출처에서 서버의 리소스를 요청할 때 발생합니다. 브라우저는 보안상의 이유로 다른 출처의 요청을 제한합니다. 아래와 같은 에러 메시지가 나타날 수 있습니다.</p><h3 id="1-Access-to-XMLHttpRequest-at-from-origin-has-been-blocked-by-CORS-policy"><a href="#1-Access-to-XMLHttpRequest-at-from-origin-has-been-blocked-by-CORS-policy" class="headerlink" title="1. Access to XMLHttpRequest at &#39;&lt;http://example.com&gt;&#39; from origin &#39;&lt;http://another.com&gt;&#39; has been blocked by CORS policy"></a>1. <code>Access to XMLHttpRequest at &#39;&lt;http://example.com&gt;&#39; from origin &#39;&lt;http://another.com&gt;&#39; has been blocked by CORS policy</code></h3><pre><code class="highlight bash">Access to XMLHttpRequest at <span class="string">&#x27;&lt;http://example.com&gt;&#x27;</span> from origin <span class="string">&#x27;&lt;http://another.com&gt;&#x27;</span> has been blocked by CORS policy: No <span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span> header is present on the requested resource.</code></pre><h3 id="2-CORS-policy-No-Access-Control-Allow-Origin-header"><a href="#2-CORS-policy-No-Access-Control-Allow-Origin-header" class="headerlink" title="2. CORS policy: No &#39;Access-Control-Allow-Origin&#39; header"></a>2. <code>CORS policy: No &#39;Access-Control-Allow-Origin&#39; header</code></h3><pre><code class="highlight bash">Access to fetch at <span class="string">&#x27;&lt;http://example.com&gt;&#x27;</span> from origin <span class="string">&#x27;&lt;http://another.com&gt;&#x27;</span> has been blocked by CORS policy: No <span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span> header is present on the requested resource.</code></pre><p>이러한 에러 메시지는 서버가 CORS 요청을 허용하지 않기 때문에 발생합니다. 이제 이러한 문제를 해결하기 위한 몇 가지 접근 방법을 살펴보겠습니다.</p><h2 id="1-cors-미들웨어-사용하기"><a href="#1-cors-미들웨어-사용하기" class="headerlink" title="1. cors 미들웨어 사용하기"></a>1. <code>cors</code> 미들웨어 사용하기</h2><p>Express 서버에서 <code>cors</code> 미들웨어를 사용하여 CORS 문제를 간단하게 해결할 수 있습니다. <code>cors</code> 미들웨어는 서버가 다른 출처의 요청을 허용하도록 설정합니다.</p><h3 id="cors-미들웨어-설치-및-사용"><a href="#cors-미들웨어-설치-및-사용" class="headerlink" title="cors 미들웨어 설치 및 사용"></a><code>cors</code> 미들웨어 설치 및 사용</h3><p>먼저, <code>cors</code> 패키지를 설치합니다.</p><pre><code class="highlight bash">npm install cors</code></pre><p>그 다음, Express 애플리케이션에 <code>cors</code> 미들웨어를 추가합니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);<span class="keyword">const</span> cors = <span class="built_in">require</span>(<span class="string">&quot;cors&quot;</span>);<span class="keyword">const</span> app = <span class="title function_">express</span>();app.<span class="title function_">use</span>(<span class="title function_">cors</span>());app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  res.<span class="title function_">send</span>(<span class="string">&quot;Hello, World!&quot;</span>);&#125;);app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Server running at &lt;http://localhost:3000&gt;&quot;</span>);&#125;);</code></pre><p>위 코드에서는 <code>cors</code> 미들웨어를 사용하여 모든 출처의 요청을 허용합니다.</p><h2 id="2-특정-출처만-허용하기"><a href="#2-특정-출처만-허용하기" class="headerlink" title="2. 특정 출처만 허용하기"></a>2. 특정 출처만 허용하기</h2><p>모든 출처를 허용하는 대신, 특정 출처만 허용하도록 설정할 수도 있습니다. 이는 보안을 강화하는 데 유용합니다.</p><h3 id="특정-출처-허용-예제"><a href="#특정-출처-허용-예제" class="headerlink" title="특정 출처 허용 예제"></a>특정 출처 허용 예제</h3><pre><code class="highlight javascript"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);<span class="keyword">const</span> cors = <span class="built_in">require</span>(<span class="string">&quot;cors&quot;</span>);<span class="keyword">const</span> app = <span class="title function_">express</span>();<span class="keyword">const</span> corsOptions = &#123;  <span class="attr">origin</span>: <span class="string">&quot;&lt;http://example.com&gt;&quot;</span>,&#125;;app.<span class="title function_">use</span>(<span class="title function_">cors</span>(corsOptions));app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  res.<span class="title function_">send</span>(<span class="string">&quot;Hello, World!&quot;</span>);&#125;);app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Server running at &lt;http://localhost:3000&gt;&quot;</span>);&#125;);</code></pre><p>위 코드에서는 <code>http://example.com</code> 출처의 요청만 허용합니다.</p><h2 id="3-HTTP-응답-헤더-설정하기"><a href="#3-HTTP-응답-헤더-설정하기" class="headerlink" title="3. HTTP 응답 헤더 설정하기"></a>3. HTTP 응답 헤더 설정하기</h2><p>직접 HTTP 응답 헤더를 설정하여 CORS 문제를 해결할 수도 있습니다. 이는 더 세밀한 제어가 필요할 때 유용합니다.</p><h3 id="응답-헤더-설정-예제"><a href="#응답-헤더-설정-예제" class="headerlink" title="응답 헤더 설정 예제"></a>응답 헤더 설정 예제</h3><pre><code class="highlight javascript"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);<span class="keyword">const</span> app = <span class="title function_">express</span>();app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;  res.<span class="title function_">header</span>(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;*&quot;</span>);  res.<span class="title function_">header</span>(    <span class="string">&quot;Access-Control-Allow-Headers&quot;</span>,    <span class="string">&quot;Origin, X-Requested-With, Content-Type, Accept&quot;</span>  );  <span class="title function_">next</span>();&#125;);app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  res.<span class="title function_">send</span>(<span class="string">&quot;Hello, World!&quot;</span>);&#125;);app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Server running at &lt;http://localhost:3000&gt;&quot;</span>);&#125;);</code></pre><p>위 코드에서는 모든 출처의 요청을 허용하도록 응답 헤더를 설정합니다.</p><h2 id="4-프록시-서버-사용하기"><a href="#4-프록시-서버-사용하기" class="headerlink" title="4. 프록시 서버 사용하기"></a>4. 프록시 서버 사용하기</h2><p>프록시 서버를 사용하여 CORS 문제를 우회할 수도 있습니다. 이는 클라이언트와 서버 사이에 프록시 서버를 두어 요청을 중계하는 방법입니다.</p><h3 id="프록시-서버-설정-예제"><a href="#프록시-서버-설정-예제" class="headerlink" title="프록시 서버 설정 예제"></a>프록시 서버 설정 예제</h3><p>프록시 서버를 설정하려면 <code>http-proxy-middleware</code> 패키지를 사용할 수 있습니다.</p><pre><code class="highlight bash">npm install http-proxy-middleware</code></pre><p>그 다음, 프록시 설정을 추가합니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);<span class="keyword">const</span> &#123; createProxyMiddleware &#125; = <span class="built_in">require</span>(<span class="string">&quot;http-proxy-middleware&quot;</span>);<span class="keyword">const</span> app = <span class="title function_">express</span>();app.<span class="title function_">use</span>(  <span class="string">&quot;/api&quot;</span>,  <span class="title function_">createProxyMiddleware</span>(&#123;    <span class="attr">target</span>: <span class="string">&quot;&lt;http://example.com&gt;&quot;</span>,    <span class="attr">changeOrigin</span>: <span class="literal">true</span>,  &#125;));app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Server running at &lt;http://localhost:3000&gt;&quot;</span>);&#125;);</code></pre><p>위 코드에서는 <code>/api</code> 경로의 요청을 <code>http://example.com</code>으로 프록시합니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>위의 방법 중 하나를 선택하여 CORS 문제를 해결할 수 있습니다. <code>cors</code> 미들웨어를 사용하거나, 특정 출처만 허용하고, 응답 헤더를 직접 설정하거나, 프록시 서버를 사용하여 Express 서버의 CORS 문제를 해결해 보세요!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> Express </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Express 트러블슈팅[2] 서버 요청 시간 초과</title>
      <link href="/express/troubleshooting/2/"/>
      <url>/express/troubleshooting/2/</url>
      
        <content type="html"><![CDATA[<h1 id="Express-서버-요청-시간-초과"><a href="#Express-서버-요청-시간-초과" class="headerlink" title="Express 서버 요청 시간 초과"></a>Express 서버 요청 시간 초과</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 Express 서버에서 발생하는 요청 시간 초과 문제와 그 해결 방안에 대해 알아보겠습니다.<br>요청 시간 초과는 서버가 클라이언트의 요청을 처리하는 데 너무 오래 걸리거나, 클라이언트가 서버의 응답을 기다리는 시간이 초과되었을 때 발생합니다. 이런 경우 아래와 같은 에러 메시지가 나타날 수 있습니다.</p><h3 id="1-ETIMEDOUT-Operation-timed-out"><a href="#1-ETIMEDOUT-Operation-timed-out" class="headerlink" title="1. ETIMEDOUT: Operation timed out"></a>1. <code>ETIMEDOUT: Operation timed out</code></h3><pre><code class="highlight bash">Error: ETIMEDOUT    at Timeout.&lt;anonymous&gt; (/path/to/project/node_modules/request/request.js:849:19)    at ontimeout (timers.js:365:14)    at tryOnTimeout (timers.js:237:5)    at Timer.listOnTimeout (timers.js:207:5)</code></pre><h3 id="2-ERR-CONNECTION-TIMED-OUT"><a href="#2-ERR-CONNECTION-TIMED-OUT" class="headerlink" title="2. ERR_CONNECTION_TIMED_OUT"></a>2. <code>ERR_CONNECTION_TIMED_OUT</code></h3><pre><code class="highlight bash">Error: ERR_CONNECTION_TIMED_OUT    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1107:14)</code></pre><p>이러한 에러 메시지는 서버나 네트워크의 문제로 인해 발생할 수 있습니다. 이제 이러한 문제를 해결하기 위한 몇 가지 접근 방법을 살펴보겠습니다.</p><h2 id="1-요청-시간-제한-설정하기"><a href="#1-요청-시간-제한-설정하기" class="headerlink" title="1. 요청 시간 제한 설정하기"></a>1. 요청 시간 제한 설정하기</h2><p>Express 서버에서 요청 시간 제한을 설정하여 너무 오래 걸리는 요청을 제한할 수 있습니다. <code>timeout</code> 미들웨어를 사용하여 요청 시간 제한을 설정할 수 있습니다.</p><h3 id="timeout-미들웨어-사용하기"><a href="#timeout-미들웨어-사용하기" class="headerlink" title="timeout 미들웨어 사용하기"></a><code>timeout</code> 미들웨어 사용하기</h3><pre><code class="highlight javascript"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);<span class="keyword">const</span> timeout = <span class="built_in">require</span>(<span class="string">&quot;connect-timeout&quot;</span>);<span class="keyword">const</span> app = <span class="title function_">express</span>();<span class="comment">// 요청 시간 제한 설정 (10초)</span>app.<span class="title function_">use</span>(<span class="title function_">timeout</span>(<span class="string">&quot;10s&quot;</span>));app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;  <span class="keyword">if</span> (!req.<span class="property">timedout</span>) <span class="title function_">next</span>();&#125;);app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;    res.<span class="title function_">send</span>(<span class="string">&quot;Hello, World!&quot;</span>);  &#125;, <span class="number">5000</span>); <span class="comment">// 5초 후 응답</span>&#125;);app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Server running at &lt;http://localhost:3000&gt;&quot;</span>);&#125;);</code></pre><p>위 코드에서는 <code>connect-timeout</code> 미들웨어를 사용하여 요청 시간 제한을 10초로 설정합니다. 요청이 10초를 초과하면 타임아웃 에러가 발생합니다.</p><h2 id="2-네트워크-문제-확인하기"><a href="#2-네트워크-문제-확인하기" class="headerlink" title="2. 네트워크 문제 확인하기"></a>2. 네트워크 문제 확인하기</h2><p>네트워크 문제로 인해 요청이 시간 초과될 수 있습니다. 서버와 클라이언트 간의 네트워크 상태를 점검하고, 네트워크가 안정적인지 확인합니다.</p><h3 id="네트워크-상태-확인"><a href="#네트워크-상태-확인" class="headerlink" title="네트워크 상태 확인"></a>네트워크 상태 확인</h3><pre><code class="highlight bash">ping www.example.com</code></pre><p>네트워크 상태가 불안정하면 네트워크 장비를 점검하고, 네트워크 관리자에게 문의하여 문제를 해결합니다.</p><h2 id="3-서버-성능-최적화하기"><a href="#3-서버-성능-최적화하기" class="headerlink" title="3. 서버 성능 최적화하기"></a>3. 서버 성능 최적화하기</h2><p>서버의 성능이 저하되면 요청이 시간 초과될 수 있습니다. 서버의 성능을 최적화하여 요청 처리 시간을 줄일 수 있습니다.</p><h3 id="데이터베이스-쿼리-최적화"><a href="#데이터베이스-쿼리-최적화" class="headerlink" title="데이터베이스 쿼리 최적화"></a>데이터베이스 쿼리 최적화</h3><p>서버에서 데이터를 처리할 때, 데이터베이스 쿼리가 오래 걸릴 수 있습니다. 쿼리를 최적화하여 성능을 개선합니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&quot;mongoose&quot;</span>);<span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);<span class="keyword">const</span> app = <span class="title function_">express</span>();mongoose.<span class="title function_">connect</span>(<span class="string">&quot;mongodb://localhost/test&quot;</span>, &#123; <span class="attr">useNewUrlParser</span>: <span class="literal">true</span> &#125;);<span class="keyword">const</span> <span class="title class_">Schema</span> = mongoose.<span class="property">Schema</span>;<span class="keyword">const</span> userSchema = <span class="keyword">new</span> <span class="title class_">Schema</span>(&#123; <span class="attr">name</span>: <span class="title class_">String</span>, <span class="attr">age</span>: <span class="title class_">Number</span> &#125;);<span class="keyword">const</span> <span class="title class_">User</span> = mongoose.<span class="title function_">model</span>(<span class="string">&quot;User&quot;</span>, userSchema);app.<span class="title function_">get</span>(<span class="string">&quot;/users&quot;</span>, <span class="title function_">async</span> (req, res) =&gt; &#123;  <span class="keyword">try</span> &#123;    <span class="keyword">const</span> users = <span class="keyword">await</span> <span class="title class_">User</span>.<span class="title function_">find</span>().<span class="title function_">lean</span>().<span class="title function_">exec</span>(); <span class="comment">// lean() 메서드를 사용하여 쿼리 성능 최적화</span>    res.<span class="title function_">json</span>(users);  &#125; <span class="keyword">catch</span> (error) &#123;    res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(error);  &#125;&#125;);app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Server running at &lt;http://localhost:3000&gt;&quot;</span>);&#125;);</code></pre><p>위 코드에서는 <code>lean()</code> 메서드를 사용하여 쿼리 성능을 최적화합니다.</p><h2 id="4-요청-처리-로직-분할하기"><a href="#4-요청-처리-로직-분할하기" class="headerlink" title="4. 요청 처리 로직 분할하기"></a>4. 요청 처리 로직 분할하기</h2><p>요청 처리 로직이 복잡하면 시간이 오래 걸릴 수 있습니다. 요청 처리 로직을 분할하여 각 단계를 비동기로 처리합니다.</p><h3 id="비동기-처리-예제"><a href="#비동기-처리-예제" class="headerlink" title="비동기 처리 예제"></a>비동기 처리 예제</h3><pre><code class="highlight javascript"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);<span class="keyword">const</span> app = <span class="title function_">express</span>();app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="title function_">async</span> (req, res) =&gt; &#123;  <span class="keyword">try</span> &#123;    <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="title function_">getData</span>();    <span class="keyword">const</span> processedData = <span class="keyword">await</span> <span class="title function_">processData</span>(data);    res.<span class="title function_">send</span>(processedData);  &#125; <span class="keyword">catch</span> (error) &#123;    res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(error);  &#125;&#125;);<span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getData</span>(<span class="params"></span>) &#123;  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;      <span class="title function_">resolve</span>(<span class="string">&quot;Data from DB&quot;</span>);    &#125;, <span class="number">2000</span>); <span class="comment">// 2초 후 데이터 반환</span>  &#125;);&#125;<span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">processData</span>(<span class="params">data</span>) &#123;  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;      <span class="title function_">resolve</span>(<span class="string">`Processed <span class="subst">$&#123;data&#125;</span>`</span>);    &#125;, <span class="number">2000</span>); <span class="comment">// 2초 후 데이터 처리</span>  &#125;);&#125;app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Server running at &lt;http://localhost:3000&gt;&quot;</span>);&#125;);</code></pre><p>위 코드에서는 <code>getData</code>와 <code>processData</code> 함수를 비동기로 처리하여 요청 처리 시간을 줄입니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>위의 방법 중 하나를 선택하여 요청 시간 초과 문제를 해결할 수 있습니다. 요청 시간 제한을 설정하거나, 네트워크 문제를 확인하고, 서버 성능을 최적화하여 Express 서버의 요청 시간 초과 문제를 해결해 보세요!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> Express </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Express 트러블슈팅[1] 서버 시작 시 포트 사용 중 오류</title>
      <link href="/express/troubleshooting/1/"/>
      <url>/express/troubleshooting/1/</url>
      
        <content type="html"><![CDATA[<h1 id="Express-트러블슈팅-1-서버-시작-시-포트-사용-중-오류"><a href="#Express-트러블슈팅-1-서버-시작-시-포트-사용-중-오류" class="headerlink" title="Express 트러블슈팅[1] 서버 시작 시 포트 사용 중 오류"></a>Express 트러블슈팅[1] 서버 시작 시 포트 사용 중 오류</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 Express 서버 시작 시 특정 포트가 이미 사용되고 있을 경우의 에러와, 그 해결 방안을 알아보겠습니다.<br>먼저, 서버가 시작되지 않을 때는 흔히 아래와 같은 에러 메시지들이 발생합니다.</p><h3 id="1-EADDRINUSE-address-already-in-use-3000"><a href="#1-EADDRINUSE-address-already-in-use-3000" class="headerlink" title="1. EADDRINUSE: address already in use :::3000"></a>1. <code>EADDRINUSE: address already in use :::3000</code></h3><pre><code class="highlight bash">Error: listen EADDRINUSE: address already <span class="keyword">in</span> use :::3000    at Server.setupListenHandle [as _listen2] (net.js:1258:14)    at listenInCluster (net.js:1306:12)    at Server.listen (net.js:1394:7)    ...</code></pre><h3 id="2-EADDRINUSE-address-already-in-use-0-0-0-0-3000"><a href="#2-EADDRINUSE-address-already-in-use-0-0-0-0-3000" class="headerlink" title="2. EADDRINUSE: address already in use 0.0.0.0:3000"></a>2. <code>EADDRINUSE: address already in use 0.0.0.0:3000</code></h3><pre><code class="highlight bash">Error: listen EADDRINUSE: address already <span class="keyword">in</span> use 0.0.0.0:3000    at Object._errnoException (util.js:992:11)    at _exceptionWithHostPort (util.js:1014:20)    at Server.setupListenHandle [as _listen2] (net.js:1355:14)    at listenInCluster (net.js:1396:12)    at doListen (net.js:1505:7)    ...</code></pre><h3 id="3-EACCES-permission-denied"><a href="#3-EACCES-permission-denied" class="headerlink" title="3. EACCES: permission denied"></a>3. <code>EACCES: permission denied</code></h3><pre><code class="highlight bash">Error: listen EACCES: permission denied 0.0.0.0:80    at Server.setupListenHandle [as _listen2] (net.js:1260:14)    at listenInCluster (net.js:1306:12)    at Server.listen (net.js:1394:7)    ...</code></pre><h3 id="4-EADDRNOTAVAIL-address-not-available"><a href="#4-EADDRNOTAVAIL-address-not-available" class="headerlink" title="4. EADDRNOTAVAIL: address not available"></a>4. <code>EADDRNOTAVAIL: address not available</code></h3><pre><code class="highlight bash">Error: listen EADDRNOTAVAIL: address not available 192.168.1.100:3000    at Server.setupListenHandle [as _listen2] (net.js:1258:14)    at listenInCluster (net.js:1306:12)    at Server.listen (net.js:1394:7)    ...</code></pre><h3 id="5-ERR-HTTP-HEADERS-SENT-Cannot-set-headers-after-they-are-sent-to-the-client"><a href="#5-ERR-HTTP-HEADERS-SENT-Cannot-set-headers-after-they-are-sent-to-the-client" class="headerlink" title="5. ERR_HTTP_HEADERS_SENT: Cannot set headers after they are sent to the client"></a>5. <code>ERR_HTTP_HEADERS_SENT: Cannot set headers after they are sent to the client</code></h3><pre><code class="highlight bash">Error [ERR_HTTP_HEADERS_SENT]: Cannot <span class="built_in">set</span> headers after they are sent to the client    at ServerResponse.setHeader (_http_outgoing.js:470:11)    at ServerResponse.header (/path/to/project/node_modules/express/lib/response.js:767:10)    at ServerResponse.send (/path/to/project/node_modules/express/lib/response.js:170:12)    at ServerResponse.json (/path/to/project/node_modules/express/lib/response.js:267:15)    ...</code></pre><p>위의 예시들은 특히 <code>EADDRINUSE</code>와 같은 에러 메시지는 포트가 이미 사용 중이라는 의미로, 이 경우 해당 포트를 사용하는 프로세스를 종료하거나 다른 포트를 사용하는 것이 도움이 됩니다. <code>EACCES</code>는 권한 문제로, 일반적으로 1024 이하의 포트를 사용하려 할 때 발생할 수 있으며, 관리자 권한으로 실행하거나 다른 포트를 사용하는 것이 필요합니다.<br>그러면 몇 가지 접근 방법을 같이 알아보겠습니다.</p><h2 id="1-포트가-사용-중인-프로세스-종료하기"><a href="#1-포트가-사용-중인-프로세스-종료하기" class="headerlink" title="1. 포트가 사용 중인 프로세스 종료하기"></a>1. 포트가 사용 중인 프로세스 종료하기</h2><p>포트를 사용 중인 프로세스를 찾아서 종료합니다. 아래는 Unix 기반 시스템(macOS, Linux)에서 사용하는 방법입니다.</p><h3 id="포트-사용-중인-프로세스-찾기"><a href="#포트-사용-중인-프로세스-찾기" class="headerlink" title="포트 사용 중인 프로세스 찾기"></a>포트 사용 중인 프로세스 찾기</h3><pre><code class="highlight bash">lsof -i :3000</code></pre><h3 id="프로세스-종료하기"><a href="#프로세스-종료하기" class="headerlink" title="프로세스 종료하기"></a>프로세스 종료하기</h3><pre><code class="highlight bash"><span class="built_in">kill</span> -9 &lt;PID&gt;</code></pre><h2 id="2-다른-포트-사용하기"><a href="#2-다른-포트-사용하기" class="headerlink" title="2. 다른 포트 사용하기"></a>2. 다른 포트 사용하기</h2><p>Express 서버가 사용 중인 포트를 변경하여 충돌을 피할 수 있습니다. <code>app.js</code> 파일에서 포트 번호를 변경합니다:</p><pre><code class="highlight javascript"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);<span class="keyword">const</span> app = <span class="title function_">express</span>();<span class="keyword">const</span> port = <span class="number">3001</span>; <span class="comment">// 다른 포트 번호로 변경</span>app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  res.<span class="title function_">send</span>(<span class="string">&quot;Hello World&quot;</span>);&#125;);app.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Server running at http://localhost:<span class="subst">$&#123;port&#125;</span>`</span>);&#125;);</code></pre><h2 id="3-포트가-사용-중인-프로세스-자동-종료하기"><a href="#3-포트가-사용-중인-프로세스-자동-종료하기" class="headerlink" title="3. 포트가 사용 중인 프로세스 자동 종료하기"></a>3. 포트가 사용 중인 프로세스 자동 종료하기</h2><p>Node.js에서 특정 포트가 사용 중인 경우 해당 프로세스를 자동으로 종료하고 서버를 시작할 수도 있습니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);<span class="keyword">const</span> net = <span class="built_in">require</span>(<span class="string">&quot;net&quot;</span>);<span class="keyword">const</span> exec = <span class="built_in">require</span>(<span class="string">&quot;child_process&quot;</span>).<span class="property">exec</span>;<span class="keyword">const</span> port = <span class="number">3000</span>;<span class="keyword">const</span> app = <span class="title function_">express</span>();app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  res.<span class="title function_">send</span>(<span class="string">&quot;Hello World&quot;</span>);&#125;);<span class="keyword">const</span> server = net.<span class="title function_">createServer</span>();server.<span class="title function_">once</span>(<span class="string">&quot;error&quot;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;  <span class="keyword">if</span> (err.<span class="property">code</span> === <span class="string">&quot;EADDRINUSE&quot;</span>) &#123;    <span class="title function_">exec</span>(<span class="string">`lsof -i :<span class="subst">$&#123;port&#125;</span> -t | xargs kill -9`</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;      <span class="keyword">if</span> (err) &#123;        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;Failed to kill process using the port:&quot;</span>, err);      &#125; <span class="keyword">else</span> &#123;        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Killed process using port <span class="subst">$&#123;port&#125;</span>`</span>);        <span class="title function_">startExpressServer</span>();      &#125;    &#125;);  &#125; <span class="keyword">else</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;Server error:&quot;</span>, err);  &#125;&#125;);server.<span class="title function_">once</span>(<span class="string">&quot;listening&quot;</span>, <span class="function">() =&gt;</span> &#123;  server.<span class="title function_">close</span>();  <span class="title function_">startExpressServer</span>();&#125;);server.<span class="title function_">listen</span>(port);<span class="keyword">function</span> <span class="title function_">startExpressServer</span>(<span class="params"></span>) &#123;  app.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Server running at http://localhost:<span class="subst">$&#123;port&#125;</span>`</span>);  &#125;);&#125;</code></pre><p>위의 코드는 포트가 사용 중인 경우 해당 프로세스를 자동으로 종료하고 Express 서버를 시작합니다.</p><h2 id="4-포트-충돌-여부-확인-후-동적-포트-할당"><a href="#4-포트-충돌-여부-확인-후-동적-포트-할당" class="headerlink" title="4. 포트 충돌 여부 확인 후 동적 포트 할당"></a>4. 포트 충돌 여부 확인 후 동적 포트 할당</h2><p>포트가 사용 중인 경우 다른 포트를 동적으로 할당하여 서버를 시작할 수도 있습니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);<span class="keyword">const</span> portfinder = <span class="built_in">require</span>(<span class="string">&quot;portfinder&quot;</span>);<span class="keyword">const</span> app = <span class="title function_">express</span>();app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  res.<span class="title function_">send</span>(<span class="string">&quot;Hello World&quot;</span>);&#125;);portfinder.<span class="property">basePort</span> = <span class="number">3000</span>; <span class="comment">// 기본 포트 설정</span>portfinder.<span class="property">highestPort</span> = <span class="number">3100</span>; <span class="comment">// 최대 포트 설정</span>portfinder.<span class="title function_">getPort</span>(<span class="function">(<span class="params">err, port</span>) =&gt;</span> &#123;  <span class="keyword">if</span> (err) &#123;    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;Error finding available port:&quot;</span>, err);    <span class="keyword">return</span>;  &#125;  app.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Server running at http://localhost:<span class="subst">$&#123;port&#125;</span>`</span>);  &#125;);&#125;);</code></pre><p>이 코드는 주어진 범위 내에서 사용 가능한 포트를 찾아 Express 서버를 시작합니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>위의 방법 중 하나를 선택하여 문제를 해결할 수 있습니다. 사용 중인 포트를 종료하거나 다른 포트를 사용하여 Express 서버를 시작해 보세요!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> Express </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>파일 스트리밍의 개념과 Node.js에서 구현하기</title>
      <link href="/web/essential/21/"/>
      <url>/web/essential/21/</url>
      
        <content type="html"><![CDATA[<h1 id="파일-스트리밍의-개념과-Node-js에서-구현하기"><a href="#파일-스트리밍의-개념과-Node-js에서-구현하기" class="headerlink" title="파일 스트리밍의 개념과 Node.js에서 구현하기"></a>파일 스트리밍의 개념과 Node.js에서 구현하기</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 파일 스트리밍의 개념과 원리에 대해 알아보고, Node.js에서 파일 스트리밍을 구현하는 방법을 실습해보겠습니다. 파일 스트리밍은 대용량 파일 전송 및 처리에 유용한 기술입니다.</p><h2 id="파일-스트리밍의-개념"><a href="#파일-스트리밍의-개념" class="headerlink" title="파일 스트리밍의 개념"></a>파일 스트리밍의 개념</h2><h3 id="파일-스트리밍이란"><a href="#파일-스트리밍이란" class="headerlink" title="파일 스트리밍이란?"></a>파일 스트리밍이란?</h3><p>파일 스트리밍(File Streaming)은 파일의 전체 내용을 한 번에 전송하는 대신, 작은 조각으로 나누어 순차적으로 전송하는 기술입니다. 이를 통해 대용량 파일을 효율적으로 전송하고, 메모리 사용을 최적화할 수 있습니다.</p><h3 id="파일-스트리밍의-필요성"><a href="#파일-스트리밍의-필요성" class="headerlink" title="파일 스트리밍의 필요성"></a>파일 스트리밍의 필요성</h3><ol><li><strong>대용량 파일 전송</strong>: 대용량 파일을 전송할 때, 메모리 부담을 줄이고 전송 속도를 최적화할 수 있습니다.</li><li><strong>메모리 사용 최적화</strong>: 파일의 일부분만 메모리에 로드하여 메모리 사용을 최소화할 수 있습니다.</li><li><strong>실시간 데이터 처리</strong>: 스트리밍을 통해 실시간으로 데이터를 처리하고 사용자에게 제공할 수 있습니다.</li><li><strong>효율적인 리소스 관리</strong>: 리소스를 효율적으로 관리하여 서버 성능을 향상시킬 수 있습니다.</li></ol><h3 id="파일-스트리밍의-주요-기술"><a href="#파일-스트리밍의-주요-기술" class="headerlink" title="파일 스트리밍의 주요 기술"></a>파일 스트리밍의 주요 기술</h3><ol><li><strong>HTTP Range Requests</strong>: 클라이언트가 파일의 특정 부분만 요청하여 스트리밍을 구현합니다.</li><li><strong>Node.js 스트림 API</strong>: Node.js에서 제공하는 스트림 API를 사용하여 파일을 효율적으로 전송하고 처리합니다.</li></ol><h2 id="준비하기"><a href="#준비하기" class="headerlink" title="준비하기"></a>준비하기</h2><p>먼저 필요한 패키지를 설치합니다:</p><pre><code class="highlight bash">npm init -ynpm install express</code></pre><h2 id="서버-설정"><a href="#서버-설정" class="headerlink" title="서버 설정"></a>서버 설정</h2><p>다음은 필요한 모듈을 가져오고 서버를 설정하는 코드입니다. 자세한 부분은 뒤에서 알아보겠습니다.</p><pre><code class="highlight javascript"><span class="comment">// server.js</span><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);<span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);<span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);<span class="keyword">const</span> app = <span class="title function_">express</span>();<span class="keyword">const</span> port = <span class="number">3000</span>;<span class="comment">// 정적 파일 제공</span>app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&quot;public&quot;</span>));<span class="comment">// 파일 스트리밍 엔드포인트</span>app.<span class="title function_">get</span>(<span class="string">&quot;/video&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  <span class="keyword">const</span> videoPath = path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;videos&quot;</span>, <span class="string">&quot;sample.mp4&quot;</span>);  <span class="keyword">const</span> stat = fs.<span class="title function_">statSync</span>(videoPath);  <span class="keyword">const</span> fileSize = stat.<span class="property">size</span>;  <span class="keyword">const</span> range = req.<span class="property">headers</span>.<span class="property">range</span>;  <span class="keyword">if</span> (range) &#123;    <span class="keyword">const</span> parts = range.<span class="title function_">replace</span>(<span class="regexp">/bytes=/</span>, <span class="string">&quot;&quot;</span>).<span class="title function_">split</span>(<span class="string">&quot;-&quot;</span>);    <span class="keyword">const</span> start = <span class="built_in">parseInt</span>(parts[<span class="number">0</span>], <span class="number">10</span>);    <span class="keyword">const</span> end = parts[<span class="number">1</span>] ? <span class="built_in">parseInt</span>(parts[<span class="number">1</span>], <span class="number">10</span>) : fileSize - <span class="number">1</span>;    <span class="keyword">const</span> chunksize = end - start + <span class="number">1</span>;    <span class="keyword">const</span> file = fs.<span class="title function_">createReadStream</span>(videoPath, &#123; start, end &#125;);    <span class="keyword">const</span> head = &#123;      <span class="string">&quot;Content-Range&quot;</span>: <span class="string">`bytes <span class="subst">$&#123;start&#125;</span>-<span class="subst">$&#123;end&#125;</span>/<span class="subst">$&#123;fileSize&#125;</span>`</span>,      <span class="string">&quot;Accept-Ranges&quot;</span>: <span class="string">&quot;bytes&quot;</span>,      <span class="string">&quot;Content-Length&quot;</span>: chunksize,      <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;video/mp4&quot;</span>,    &#125;;    res.<span class="title function_">writeHead</span>(<span class="number">206</span>, head);    file.<span class="title function_">pipe</span>(res);  &#125; <span class="keyword">else</span> &#123;    <span class="keyword">const</span> head = &#123;      <span class="string">&quot;Content-Length&quot;</span>: fileSize,      <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;video/mp4&quot;</span>,    &#125;;    res.<span class="title function_">writeHead</span>(<span class="number">200</span>, head);    fs.<span class="title function_">createReadStream</span>(videoPath).<span class="title function_">pipe</span>(res);  &#125;&#125;);<span class="comment">// 서버 시작</span>app.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Server is running on http://localhost:<span class="subst">$&#123;port&#125;</span>`</span>);&#125;);</code></pre><h2 id="클라이언트-설정"><a href="#클라이언트-설정" class="headerlink" title="클라이언트 설정"></a>클라이언트 설정</h2><p>클라이언트 측 코드를 작성하여 비디오 파일을 스트리밍합니다. <code>public/index.html</code> 파일을 생성합니다.</p><pre><code class="highlight html"><span class="comment">&lt;!-- public/index.html --&gt;</span><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">head</span>&gt;</span>    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span>    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span>    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Video Streaming<span class="tag">&lt;/<span class="name">title</span>&gt;</span>  <span class="tag">&lt;/<span class="name">head</span>&gt;</span>  <span class="tag">&lt;<span class="name">body</span>&gt;</span>    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Video Streaming<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>    <span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">&quot;videoPlayer&quot;</span> <span class="attr">width</span>=<span class="string">&quot;600&quot;</span> <span class="attr">controls</span>&gt;</span>      <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;/video&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/mp4&quot;</span> /&gt;</span>      Your browser does not support the video tag.    <span class="tag">&lt;/<span class="name">video</span>&gt;</span>  <span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></code></pre><h2 id="설정-설명"><a href="#설정-설명" class="headerlink" title="설정 설명"></a>설정 설명</h2><p>Node.js에서 파일 스트리밍을 설정하는 방법을 설명합니다.</p><ol><li><p><strong>파일 스트리밍 엔드포인트</strong>:</p><pre><code class="highlight javascript">app.<span class="title function_">get</span>(<span class="string">&quot;/video&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  <span class="keyword">const</span> videoPath = path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;videos&quot;</span>, <span class="string">&quot;sample.mp4&quot;</span>);  <span class="keyword">const</span> stat = fs.<span class="title function_">statSync</span>(videoPath);  <span class="keyword">const</span> fileSize = stat.<span class="property">size</span>;  <span class="keyword">const</span> range = req.<span class="property">headers</span>.<span class="property">range</span>;  <span class="keyword">if</span> (range) &#123;    <span class="keyword">const</span> parts = range.<span class="title function_">replace</span>(<span class="regexp">/bytes=/</span>, <span class="string">&quot;&quot;</span>).<span class="title function_">split</span>(<span class="string">&quot;-&quot;</span>);    <span class="keyword">const</span> start = <span class="built_in">parseInt</span>(parts[<span class="number">0</span>], <span class="number">10</span>);    <span class="keyword">const</span> end = parts[<span class="number">1</span>] ? <span class="built_in">parseInt</span>(parts[<span class="number">1</span>], <span class="number">10</span>) : fileSize - <span class="number">1</span>;    <span class="keyword">const</span> chunksize = end - start + <span class="number">1</span>;    <span class="keyword">const</span> file = fs.<span class="title function_">createReadStream</span>(videoPath, &#123; start, end &#125;);    <span class="keyword">const</span> head = &#123;      <span class="string">&quot;Content-Range&quot;</span>: <span class="string">`bytes <span class="subst">$&#123;start&#125;</span>-<span class="subst">$&#123;end&#125;</span>/<span class="subst">$&#123;fileSize&#125;</span>`</span>,      <span class="string">&quot;Accept-Ranges&quot;</span>: <span class="string">&quot;bytes&quot;</span>,      <span class="string">&quot;Content-Length&quot;</span>: chunksize,      <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;video/mp4&quot;</span>,    &#125;;    res.<span class="title function_">writeHead</span>(<span class="number">206</span>, head);    file.<span class="title function_">pipe</span>(res);  &#125; <span class="keyword">else</span> &#123;    <span class="keyword">const</span> head = &#123;      <span class="string">&quot;Content-Length&quot;</span>: fileSize,      <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;video/mp4&quot;</span>,    &#125;;    res.<span class="title function_">writeHead</span>(<span class="number">200</span>, head);    fs.<span class="title function_">createReadStream</span>(videoPath).<span class="title function_">pipe</span>(res);  &#125;&#125;);</code></pre><p>HTTP Range Requests를 사용하여 파일의 특정 부분만 클라이언트로 전송합니다. <code>range</code> 헤더가 포함된 요청을 처리하여, 해당 부분만 읽어 스트리밍합니다.</p></li><li><p><strong>클라이언트 설정</strong>:</p><pre><code class="highlight html"><span class="comment">&lt;!-- public/index.html --&gt;</span><span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">&quot;videoPlayer&quot;</span> <span class="attr">width</span>=<span class="string">&quot;600&quot;</span> <span class="attr">controls</span>&gt;</span>  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;/video&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/mp4&quot;</span> /&gt;</span>  Your browser does not support the video tag.<span class="tag">&lt;/<span class="name">video</span>&gt;</span></code></pre><p>클라이언트 측에서는 <code>&lt;video&gt;</code> 태그를 사용하여 서버에서 스트리밍된 비디오 파일을 재생합니다.</p></li></ol><h2 id="테스트"><a href="#테스트" class="headerlink" title="테스트"></a>테스트</h2><p>이렇게 하면 Node.js에서 파일 스트리밍을 설정할 수 있습니다. 이 코드를 실행하기 전에 <code>server.js</code> 파일을 실행하여 서버를 시작하세요.</p><pre><code class="highlight bash">node server.js</code></pre><p>서버가 성공적으로 실행되면, 브라우저에서 <code>http://localhost:3000</code>을 열어 비디오 스트리밍 애플리케이션을 테스트할 수 있습니다.</p><h3 id="테스트-방법"><a href="#테스트-방법" class="headerlink" title="테스트 방법"></a>테스트 방법</h3><ol><li><strong>서버 실행</strong>: <code>node server.js</code> 명령어를 사용하여 서버를 실행합니다.</li><li><strong>브라우저에서 열기</strong>: 브라우저에서 <code>http://localhost:3000</code>을 열어 클라이언트 페이지에 접근합니다.</li><li><strong>비디오 스트리밍</strong>: 비디오 플레이어에서 비디오를 재생하여 스트리밍이 정상적으로 작동하는지 확인합니다.</li></ol><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 파일 스트리밍의 개념과 필요성을 이해하고, Node.js에서 파일 스트리밍을 구현하는 방법을 알아보았습니다. 이를 바탕으로 대용량 파일을 효율적으로 전송하고 처리할 수 있는 웹 애플리케이션을 개발해보세요!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> web_필수 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Rust 모듈 시스템</title>
      <link href="/rust/basic/8/"/>
      <url>/rust/basic/8/</url>
      
        <content type="html"><![CDATA[<h1 id="Rust-모듈-시스템"><a href="#Rust-모듈-시스템" class="headerlink" title="Rust 모듈 시스템"></a>Rust 모듈 시스템</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 Rust의 모듈 시스템에 대해 알아보겠습니다.<br>모듈 시스템은 코드를 조직화하고 재사용 가능한 컴포넌트로 나누는 데 사용되는 중요한 기능입니다.</p><h2 id="모듈-시스템의-구성-요소"><a href="#모듈-시스템의-구성-요소" class="headerlink" title="모듈 시스템의 구성 요소"></a>모듈 시스템의 구성 요소</h2><p>Rust의 모듈 시스템은 다음과 같은 요소들로 구성됩니다:</p><ul><li><strong>패키지(Package)</strong>: 하나 이상의 크레이트를 포함하는 번들</li><li><strong>크레이트(Crate)</strong>: 바이너리 또는 라이브러리</li><li><strong>모듈(Module)</strong>: 코드를 조직화하는 방법</li><li><strong>경로(Path)</strong>: 모듈, 함수, 구조체 등의 위치를 나타내는 방법</li></ul><h2 id="기본-모듈-구조"><a href="#기본-모듈-구조" class="headerlink" title="기본 모듈 구조"></a>기본 모듈 구조</h2><h3 id="모듈-정의"><a href="#모듈-정의" class="headerlink" title="모듈 정의"></a>모듈 정의</h3><pre><code class="highlight rust"><span class="comment">// src/lib.rs 또는 src/main.rs</span><span class="keyword">mod</span> front_of_house &#123;    <span class="keyword">mod</span> hosting &#123;        <span class="keyword">fn</span> <span class="title function_">add_to_waitlist</span>() &#123;&#125;        <span class="keyword">fn</span> <span class="title function_">seat_at_table</span>() &#123;&#125;    &#125;        <span class="keyword">mod</span> serving &#123;        <span class="keyword">fn</span> <span class="title function_">take_order</span>() &#123;&#125;        <span class="keyword">fn</span> <span class="title function_">serve_order</span>() &#123;&#125;        <span class="keyword">fn</span> <span class="title function_">take_payment</span>() &#123;&#125;    &#125;&#125;<span class="keyword">fn</span> <span class="title function_">main</span>() &#123;    <span class="comment">// 모듈 사용</span>&#125;</code></pre><h3 id="모듈-트리-구조"><a href="#모듈-트리-구조" class="headerlink" title="모듈 트리 구조"></a>모듈 트리 구조</h3><pre><code class="highlight plaintext">crate └── front_of_house     ├── hosting     │   ├── add_to_waitlist     │   └── seat_at_table     └── serving         ├── take_order         ├── serve_order         └── take_payment</code></pre><h2 id="경로-Path-를-사용한-모듈-참조"><a href="#경로-Path-를-사용한-모듈-참조" class="headerlink" title="경로(Path)를 사용한 모듈 참조"></a>경로(Path)를 사용한 모듈 참조</h2><h3 id="절대-경로와-상대-경로"><a href="#절대-경로와-상대-경로" class="headerlink" title="절대 경로와 상대 경로"></a>절대 경로와 상대 경로</h3><pre><code class="highlight rust"><span class="keyword">mod</span> front_of_house &#123;    <span class="keyword">pub</span> <span class="keyword">mod</span> hosting &#123;        <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">add_to_waitlist</span>() &#123;            <span class="built_in">println!</span>(<span class="string">&quot;웨이팅 리스트에 추가됨&quot;</span>);        &#125;    &#125;&#125;<span class="keyword">fn</span> <span class="title function_">main</span>() &#123;    <span class="comment">// 절대 경로 사용</span>    crate::front_of_house::hosting::<span class="title function_ invoke__">add_to_waitlist</span>();        <span class="comment">// 상대 경로 사용</span>    front_of_house::hosting::<span class="title function_ invoke__">add_to_waitlist</span>();&#125;</code></pre><h3 id="pub-키워드로-공개하기"><a href="#pub-키워드로-공개하기" class="headerlink" title="pub 키워드로 공개하기"></a>pub 키워드로 공개하기</h3><pre><code class="highlight rust"><span class="keyword">mod</span> front_of_house &#123;    <span class="keyword">pub</span> <span class="keyword">mod</span> hosting &#123;        <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">add_to_waitlist</span>() &#123;            <span class="built_in">println!</span>(<span class="string">&quot;웨이팅 리스트에 추가됨&quot;</span>);        &#125;                <span class="keyword">fn</span> <span class="title function_">private_function</span>() &#123;            <span class="built_in">println!</span>(<span class="string">&quot;내부 함수&quot;</span>);        &#125;    &#125;&#125;<span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">eat_at_restaurant</span>() &#123;    <span class="comment">// 공개된 함수 호출 가능</span>    front_of_house::hosting::<span class="title function_ invoke__">add_to_waitlist</span>();        <span class="comment">// 비공개 함수 호출 불가</span>    <span class="comment">// front_of_house::hosting::private_function(); // 에러!</span>&#125;</code></pre><h2 id="super-키워드"><a href="#super-키워드" class="headerlink" title="super 키워드"></a>super 키워드</h2><pre><code class="highlight rust"><span class="keyword">mod</span> front_of_house &#123;    <span class="keyword">pub</span> <span class="keyword">mod</span> hosting &#123;        <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">add_to_waitlist</span>() &#123;            <span class="built_in">println!</span>(<span class="string">&quot;웨이팅 리스트에 추가됨&quot;</span>);        &#125;    &#125;&#125;<span class="keyword">mod</span> back_of_house &#123;    <span class="keyword">pub</span> <span class="keyword">struct</span> <span class="title class_">Breakfast</span> &#123;        <span class="keyword">pub</span> toast: <span class="type">String</span>,        seasonal_fruit: <span class="type">String</span>,    &#125;        <span class="keyword">impl</span> <span class="title class_">Breakfast</span> &#123;        <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">summer</span>(toast: &amp;<span class="type">str</span>) <span class="punctuation">-&gt;</span> Breakfast &#123;            Breakfast &#123;                toast: <span class="type">String</span>::<span class="title function_ invoke__">from</span>(toast),                seasonal_fruit: <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;딸기&quot;</span>),            &#125;        &#125;    &#125;        <span class="keyword">fn</span> <span class="title function_">cook_order</span>() &#123;        <span class="comment">// 부모 모듈의 함수 호출</span>        super::front_of_house::hosting::<span class="title function_ invoke__">add_to_waitlist</span>();    &#125;&#125;</code></pre><h2 id="use-키워드"><a href="#use-키워드" class="headerlink" title="use 키워드"></a>use 키워드</h2><h3 id="기본-use-사용"><a href="#기본-use-사용" class="headerlink" title="기본 use 사용"></a>기본 use 사용</h3><pre><code class="highlight rust"><span class="keyword">use</span> std::collections::HashMap;<span class="keyword">mod</span> front_of_house &#123;    <span class="keyword">pub</span> <span class="keyword">mod</span> hosting &#123;        <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">add_to_waitlist</span>() &#123;            <span class="built_in">println!</span>(<span class="string">&quot;웨이팅 리스트에 추가됨&quot;</span>);        &#125;    &#125;&#125;<span class="keyword">use</span> front_of_house::hosting;<span class="keyword">fn</span> <span class="title function_">main</span>() &#123;    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">map</span> = HashMap::<span class="title function_ invoke__">new</span>();    map.<span class="title function_ invoke__">insert</span>(<span class="number">1</span>, <span class="string">&quot;값&quot;</span>);        hosting::<span class="title function_ invoke__">add_to_waitlist</span>();&#125;</code></pre><h3 id="별칭-사용"><a href="#별칭-사용" class="headerlink" title="별칭 사용"></a>별칭 사용</h3><pre><code class="highlight rust"><span class="keyword">use</span> std::collections::HashMap <span class="keyword">as</span> Map;<span class="keyword">use</span> std::io::<span class="type">Result</span> <span class="keyword">as</span> IoResult;<span class="keyword">fn</span> <span class="title function_">main</span>() &#123;    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">hash_map</span> = Map::<span class="title function_ invoke__">new</span>();    hash_map.<span class="title function_ invoke__">insert</span>(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;value&quot;</span>);&#125;</code></pre><h3 id="여러-항목-가져오기"><a href="#여러-항목-가져오기" class="headerlink" title="여러 항목 가져오기"></a>여러 항목 가져오기</h3><pre><code class="highlight rust"><span class="keyword">use</span> std::collections::&#123;HashMap, HashSet&#125;;<span class="keyword">use</span> std::io::&#123;<span class="keyword">self</span>, Write&#125;;<span class="keyword">fn</span> <span class="title function_">main</span>() &#123;    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">map</span> = HashMap::<span class="title function_ invoke__">new</span>();    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">set</span> = HashSet::<span class="title function_ invoke__">new</span>();        <span class="built_in">println!</span>(<span class="string">&quot;Hello, world!&quot;</span>);    io::<span class="title function_ invoke__">stdout</span>().<span class="title function_ invoke__">flush</span>().<span class="title function_ invoke__">unwrap</span>();&#125;</code></pre><h3 id="모든-공개-항목-가져오기"><a href="#모든-공개-항목-가져오기" class="headerlink" title="모든 공개 항목 가져오기"></a>모든 공개 항목 가져오기</h3><pre><code class="highlight rust"><span class="keyword">use</span> std::collections::*;<span class="keyword">fn</span> <span class="title function_">main</span>() &#123;    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">map</span> = HashMap::<span class="title function_ invoke__">new</span>();    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">set</span> = HashSet::<span class="title function_ invoke__">new</span>();    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">vec</span> = <span class="type">Vec</span>::<span class="title function_ invoke__">new</span>();&#125;</code></pre><h2 id="파일로-모듈-분리"><a href="#파일로-모듈-분리" class="headerlink" title="파일로 모듈 분리"></a>파일로 모듈 분리</h2><h3 id="기본-파일-구조"><a href="#기본-파일-구조" class="headerlink" title="기본 파일 구조"></a>기본 파일 구조</h3><pre><code class="highlight plaintext">src/├── main.rs├── lib.rs└── front_of_house/    ├── mod.rs    ├── hosting.rs    └── serving.rs</code></pre><h3 id="src-lib-rs"><a href="#src-lib-rs" class="headerlink" title="src&#x2F;lib.rs"></a>src&#x2F;lib.rs</h3><pre><code class="highlight rust"><span class="keyword">mod</span> front_of_house;<span class="keyword">pub</span> <span class="keyword">use</span> crate::front_of_house::hosting;<span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">eat_at_restaurant</span>() &#123;    hosting::<span class="title function_ invoke__">add_to_waitlist</span>();    hosting::<span class="title function_ invoke__">seat_at_table</span>();&#125;</code></pre><h3 id="src-front-of-house-mod-rs"><a href="#src-front-of-house-mod-rs" class="headerlink" title="src&#x2F;front_of_house&#x2F;mod.rs"></a>src&#x2F;front_of_house&#x2F;mod.rs</h3><pre><code class="highlight rust"><span class="keyword">pub</span> <span class="keyword">mod</span> hosting;<span class="keyword">pub</span> <span class="keyword">mod</span> serving;</code></pre><h3 id="src-front-of-house-hosting-rs"><a href="#src-front-of-house-hosting-rs" class="headerlink" title="src&#x2F;front_of_house&#x2F;hosting.rs"></a>src&#x2F;front_of_house&#x2F;hosting.rs</h3><pre><code class="highlight rust"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">add_to_waitlist</span>() &#123;    <span class="built_in">println!</span>(<span class="string">&quot;웨이팅 리스트에 추가됨&quot;</span>);&#125;<span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">seat_at_table</span>() &#123;    <span class="built_in">println!</span>(<span class="string">&quot;테이블에 앉음&quot;</span>);&#125;</code></pre><h3 id="src-front-of-house-serving-rs"><a href="#src-front-of-house-serving-rs" class="headerlink" title="src&#x2F;front_of_house&#x2F;serving.rs"></a>src&#x2F;front_of_house&#x2F;serving.rs</h3><pre><code class="highlight rust"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">take_order</span>() &#123;    <span class="built_in">println!</span>(<span class="string">&quot;주문 받음&quot;</span>);&#125;<span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">serve_order</span>() &#123;    <span class="built_in">println!</span>(<span class="string">&quot;주문 서빙&quot;</span>);&#125;<span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">take_payment</span>() &#123;    <span class="built_in">println!</span>(<span class="string">&quot;결제 처리&quot;</span>);&#125;</code></pre><h2 id="크레이트와-패키지"><a href="#크레이트와-패키지" class="headerlink" title="크레이트와 패키지"></a>크레이트와 패키지</h2><h3 id="Cargo-toml-설정"><a href="#Cargo-toml-설정" class="headerlink" title="Cargo.toml 설정"></a>Cargo.toml 설정</h3><pre><code class="highlight toml"><span class="section">[package]</span><span class="attr">name</span> = <span class="string">&quot;restaurant&quot;</span><span class="attr">version</span> = <span class="string">&quot;0.1.0&quot;</span><span class="attr">edition</span> = <span class="string">&quot;2021&quot;</span><span class="section">[dependencies]</span><span class="attr">serde</span> = <span class="string">&quot;1.0&quot;</span><span class="attr">rand</span> = <span class="string">&quot;0.8&quot;</span><span class="section">[dev-dependencies]</span><span class="attr">tokio-test</span> = <span class="string">&quot;0.4&quot;</span></code></pre><h3 id="외부-크레이트-사용"><a href="#외부-크레이트-사용" class="headerlink" title="외부 크레이트 사용"></a>외부 크레이트 사용</h3><pre><code class="highlight rust"><span class="keyword">use</span> rand::Rng;<span class="keyword">use</span> serde::&#123;Deserialize, Serialize&#125;;<span class="meta">#[derive(Serialize, Deserialize, Debug)]</span><span class="keyword">struct</span> <span class="title class_">Person</span> &#123;    name: <span class="type">String</span>,    age: <span class="type">u32</span>,&#125;<span class="keyword">fn</span> <span class="title function_">main</span>() &#123;    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">rng</span> = rand::<span class="title function_ invoke__">thread_rng</span>();    <span class="keyword">let</span> <span class="variable">number</span> = rng.<span class="title function_ invoke__">gen_range</span>(<span class="number">1</span>..=<span class="number">100</span>);    <span class="built_in">println!</span>(<span class="string">&quot;랜덤 숫자: &#123;&#125;&quot;</span>, number);        <span class="keyword">let</span> <span class="variable">person</span> = Person &#123;        name: <span class="string">&quot;홍길동&quot;</span>.<span class="title function_ invoke__">to_string</span>(),        age: <span class="number">30</span>,    &#125;;        <span class="keyword">let</span> <span class="variable">json</span> = serde_json::<span class="title function_ invoke__">to_string</span>(&amp;person).<span class="title function_ invoke__">unwrap</span>();    <span class="built_in">println!</span>(<span class="string">&quot;JSON: &#123;&#125;&quot;</span>, json);&#125;</code></pre><h2 id="실습-예제-도서관-관리-시스템"><a href="#실습-예제-도서관-관리-시스템" class="headerlink" title="실습 예제: 도서관 관리 시스템"></a>실습 예제: 도서관 관리 시스템</h2><h3 id="프로젝트-구조"><a href="#프로젝트-구조" class="headerlink" title="프로젝트 구조"></a>프로젝트 구조</h3><pre><code class="highlight plaintext">src/├── main.rs├── lib.rs├── book/│   ├── mod.rs│   └── book.rs├── member/│   ├── mod.rs│   └── member.rs└── library/    ├── mod.rs    └── library.rs</code></pre><h3 id="src-lib-rs-1"><a href="#src-lib-rs-1" class="headerlink" title="src&#x2F;lib.rs"></a>src&#x2F;lib.rs</h3><pre><code class="highlight rust"><span class="keyword">pub</span> <span class="keyword">mod</span> book;<span class="keyword">pub</span> <span class="keyword">mod</span> member;<span class="keyword">pub</span> <span class="keyword">mod</span> library;<span class="keyword">pub</span> <span class="keyword">use</span> book::Book;<span class="keyword">pub</span> <span class="keyword">use</span> member::Member;<span class="keyword">pub</span> <span class="keyword">use</span> library::Library;</code></pre><h3 id="src-book-mod-rs"><a href="#src-book-mod-rs" class="headerlink" title="src&#x2F;book&#x2F;mod.rs"></a>src&#x2F;book&#x2F;mod.rs</h3><pre><code class="highlight rust"><span class="keyword">pub</span> <span class="keyword">mod</span> book;<span class="keyword">pub</span> <span class="keyword">use</span> book::Book;</code></pre><h3 id="src-book-book-rs"><a href="#src-book-book-rs" class="headerlink" title="src&#x2F;book&#x2F;book.rs"></a>src&#x2F;book&#x2F;book.rs</h3><pre><code class="highlight rust"><span class="meta">#[derive(Debug, Clone)]</span><span class="keyword">pub</span> <span class="keyword">struct</span> <span class="title class_">Book</span> &#123;    <span class="keyword">pub</span> id: <span class="type">u32</span>,    <span class="keyword">pub</span> title: <span class="type">String</span>,    <span class="keyword">pub</span> author: <span class="type">String</span>,    <span class="keyword">pub</span> isbn: <span class="type">String</span>,    <span class="keyword">pub</span> available: <span class="type">bool</span>,&#125;<span class="keyword">impl</span> <span class="title class_">Book</span> &#123;    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">new</span>(id: <span class="type">u32</span>, title: <span class="type">String</span>, author: <span class="type">String</span>, isbn: <span class="type">String</span>) <span class="punctuation">-&gt;</span> <span class="keyword">Self</span> &#123;        Book &#123;            id,            title,            author,            isbn,            available: <span class="literal">true</span>,        &#125;    &#125;        <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">borrow_book</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;(), <span class="type">String</span>&gt; &#123;        <span class="keyword">if</span> <span class="keyword">self</span>.available &#123;            <span class="keyword">self</span>.available = <span class="literal">false</span>;            <span class="title function_ invoke__">Ok</span>(())        &#125; <span class="keyword">else</span> &#123;            <span class="title function_ invoke__">Err</span>(<span class="string">&quot;책이 이미 대출 중입니다&quot;</span>.<span class="title function_ invoke__">to_string</span>())        &#125;    &#125;        <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">return_book</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123;        <span class="keyword">self</span>.available = <span class="literal">true</span>;    &#125;&#125;</code></pre><h3 id="src-member-mod-rs"><a href="#src-member-mod-rs" class="headerlink" title="src&#x2F;member&#x2F;mod.rs"></a>src&#x2F;member&#x2F;mod.rs</h3><pre><code class="highlight rust"><span class="keyword">pub</span> <span class="keyword">mod</span> member;<span class="keyword">pub</span> <span class="keyword">use</span> member::Member;</code></pre><h3 id="src-member-member-rs"><a href="#src-member-member-rs" class="headerlink" title="src&#x2F;member&#x2F;member.rs"></a>src&#x2F;member&#x2F;member.rs</h3><pre><code class="highlight rust"><span class="meta">#[derive(Debug, Clone)]</span><span class="keyword">pub</span> <span class="keyword">struct</span> <span class="title class_">Member</span> &#123;    <span class="keyword">pub</span> id: <span class="type">u32</span>,    <span class="keyword">pub</span> name: <span class="type">String</span>,    <span class="keyword">pub</span> email: <span class="type">String</span>,    <span class="keyword">pub</span> borrowed_books: <span class="type">Vec</span>&lt;<span class="type">u32</span>&gt;,&#125;<span class="keyword">impl</span> <span class="title class_">Member</span> &#123;    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">new</span>(id: <span class="type">u32</span>, name: <span class="type">String</span>, email: <span class="type">String</span>) <span class="punctuation">-&gt;</span> <span class="keyword">Self</span> &#123;        Member &#123;            id,            name,            email,            borrowed_books: <span class="type">Vec</span>::<span class="title function_ invoke__">new</span>(),        &#125;    &#125;        <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">borrow_book</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, book_id: <span class="type">u32</span>) &#123;        <span class="keyword">self</span>.borrowed_books.<span class="title function_ invoke__">push</span>(book_id);    &#125;        <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">return_book</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, book_id: <span class="type">u32</span>) &#123;        <span class="keyword">self</span>.borrowed_books.<span class="title function_ invoke__">retain</span>(|&amp;id| id != book_id);    &#125;&#125;</code></pre><h3 id="src-library-mod-rs"><a href="#src-library-mod-rs" class="headerlink" title="src&#x2F;library&#x2F;mod.rs"></a>src&#x2F;library&#x2F;mod.rs</h3><pre><code class="highlight rust"><span class="keyword">pub</span> <span class="keyword">mod</span> library;<span class="keyword">pub</span> <span class="keyword">use</span> library::Library;</code></pre><h3 id="src-library-library-rs"><a href="#src-library-library-rs" class="headerlink" title="src&#x2F;library&#x2F;library.rs"></a>src&#x2F;library&#x2F;library.rs</h3><pre><code class="highlight rust"><span class="keyword">use</span> std::collections::HashMap;<span class="keyword">use</span> crate::book::Book;<span class="keyword">use</span> crate::member::Member;<span class="keyword">pub</span> <span class="keyword">struct</span> <span class="title class_">Library</span> &#123;    books: HashMap&lt;<span class="type">u32</span>, Book&gt;,    members: HashMap&lt;<span class="type">u32</span>, Member&gt;,&#125;<span class="keyword">impl</span> <span class="title class_">Library</span> &#123;    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">new</span>() <span class="punctuation">-&gt;</span> <span class="keyword">Self</span> &#123;        Library &#123;            books: HashMap::<span class="title function_ invoke__">new</span>(),            members: HashMap::<span class="title function_ invoke__">new</span>(),        &#125;    &#125;        <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">add_book</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, book: Book) &#123;        <span class="keyword">self</span>.books.<span class="title function_ invoke__">insert</span>(book.id, book);    &#125;        <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">add_member</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, member: Member) &#123;        <span class="keyword">self</span>.members.<span class="title function_ invoke__">insert</span>(member.id, member);    &#125;        <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">borrow_book</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, member_id: <span class="type">u32</span>, book_id: <span class="type">u32</span>) <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;(), <span class="type">String</span>&gt; &#123;        <span class="keyword">let</span> <span class="variable">book</span> = <span class="keyword">self</span>.books.<span class="title function_ invoke__">get_mut</span>(&amp;book_id)            .<span class="title function_ invoke__">ok_or</span>(<span class="string">&quot;책을 찾을 수 없습니다&quot;</span>)?;                <span class="keyword">let</span> <span class="variable">member</span> = <span class="keyword">self</span>.members.<span class="title function_ invoke__">get_mut</span>(&amp;member_id)            .<span class="title function_ invoke__">ok_or</span>(<span class="string">&quot;회원을 찾을 수 없습니다&quot;</span>)?;                book.<span class="title function_ invoke__">borrow_book</span>()?;        member.<span class="title function_ invoke__">borrow_book</span>(book_id);                <span class="title function_ invoke__">Ok</span>(())    &#125;        <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">return_book</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, member_id: <span class="type">u32</span>, book_id: <span class="type">u32</span>) <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;(), <span class="type">String</span>&gt; &#123;        <span class="keyword">let</span> <span class="variable">book</span> = <span class="keyword">self</span>.books.<span class="title function_ invoke__">get_mut</span>(&amp;book_id)            .<span class="title function_ invoke__">ok_or</span>(<span class="string">&quot;책을 찾을 수 없습니다&quot;</span>)?;                <span class="keyword">let</span> <span class="variable">member</span> = <span class="keyword">self</span>.members.<span class="title function_ invoke__">get_mut</span>(&amp;member_id)            .<span class="title function_ invoke__">ok_or</span>(<span class="string">&quot;회원을 찾을 수 없습니다&quot;</span>)?;                book.<span class="title function_ invoke__">return_book</span>();        member.<span class="title function_ invoke__">return_book</span>(book_id);                <span class="title function_ invoke__">Ok</span>(())    &#125;        <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">list_available_books</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">Vec</span>&lt;&amp;Book&gt; &#123;        <span class="keyword">self</span>.books.<span class="title function_ invoke__">values</span>()            .<span class="title function_ invoke__">filter</span>(|book| book.available)            .<span class="title function_ invoke__">collect</span>()    &#125;        <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">list_members</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">Vec</span>&lt;&amp;Member&gt; &#123;        <span class="keyword">self</span>.members.<span class="title function_ invoke__">values</span>().<span class="title function_ invoke__">collect</span>()    &#125;&#125;</code></pre><h3 id="src-main-rs"><a href="#src-main-rs" class="headerlink" title="src&#x2F;main.rs"></a>src&#x2F;main.rs</h3><pre><code class="highlight rust"><span class="keyword">use</span> restaurant::&#123;Book, Member, Library&#125;;<span class="keyword">fn</span> <span class="title function_">main</span>() &#123;    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">library</span> = Library::<span class="title function_ invoke__">new</span>();        <span class="comment">// 책 추가</span>    <span class="keyword">let</span> <span class="variable">book1</span> = Book::<span class="title function_ invoke__">new</span>(<span class="number">1</span>, <span class="string">&quot;Rust Programming&quot;</span>.<span class="title function_ invoke__">to_string</span>(), <span class="string">&quot;Steve Klabnik&quot;</span>.<span class="title function_ invoke__">to_string</span>(), <span class="string">&quot;978-1593278282&quot;</span>.<span class="title function_ invoke__">to_string</span>());    <span class="keyword">let</span> <span class="variable">book2</span> = Book::<span class="title function_ invoke__">new</span>(<span class="number">2</span>, <span class="string">&quot;JavaScript Guide&quot;</span>.<span class="title function_ invoke__">to_string</span>(), <span class="string">&quot;David Flanagan&quot;</span>.<span class="title function_ invoke__">to_string</span>(), <span class="string">&quot;978-1491952023&quot;</span>.<span class="title function_ invoke__">to_string</span>());        library.<span class="title function_ invoke__">add_book</span>(book1);    library.<span class="title function_ invoke__">add_book</span>(book2);        <span class="comment">// 회원 추가</span>    <span class="keyword">let</span> <span class="variable">member1</span> = Member::<span class="title function_ invoke__">new</span>(<span class="number">1</span>, <span class="string">&quot;김철수&quot;</span>.<span class="title function_ invoke__">to_string</span>(), <span class="string">&quot;kim@email.com&quot;</span>.<span class="title function_ invoke__">to_string</span>());    <span class="keyword">let</span> <span class="variable">member2</span> = Member::<span class="title function_ invoke__">new</span>(<span class="number">2</span>, <span class="string">&quot;이영희&quot;</span>.<span class="title function_ invoke__">to_string</span>(), <span class="string">&quot;lee@email.com&quot;</span>.<span class="title function_ invoke__">to_string</span>());        library.<span class="title function_ invoke__">add_member</span>(member1);    library.<span class="title function_ invoke__">add_member</span>(member2);        <span class="comment">// 책 대출</span>    <span class="keyword">match</span> library.<span class="title function_ invoke__">borrow_book</span>(<span class="number">1</span>, <span class="number">1</span>) &#123;        <span class="title function_ invoke__">Ok</span>(()) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;책 대출 성공&quot;</span>),        <span class="title function_ invoke__">Err</span>(e) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;대출 실패: &#123;&#125;&quot;</span>, e),    &#125;        <span class="comment">// 이용 가능한 책 목록</span>    <span class="built_in">println!</span>(<span class="string">&quot;=== 이용 가능한 책 ===&quot;</span>);    <span class="keyword">for</span> <span class="variable">book</span> <span class="keyword">in</span> library.<span class="title function_ invoke__">list_available_books</span>() &#123;        <span class="built_in">println!</span>(<span class="string">&quot;ID: &#123;&#125;, 제목: &#123;&#125;, 저자: &#123;&#125;&quot;</span>, book.id, book.title, book.author);    &#125;        <span class="comment">// 회원 목록</span>    <span class="built_in">println!</span>(<span class="string">&quot;=== 회원 목록 ===&quot;</span>);    <span class="keyword">for</span> <span class="variable">member</span> <span class="keyword">in</span> library.<span class="title function_ invoke__">list_members</span>() &#123;        <span class="built_in">println!</span>(<span class="string">&quot;ID: &#123;&#125;, 이름: &#123;&#125;, 대출 중인 책: &#123;:?&#125;&quot;</span>,                  member.id, member.name, member.borrowed_books);    &#125;        <span class="comment">// 책 반납</span>    <span class="keyword">match</span> library.<span class="title function_ invoke__">return_book</span>(<span class="number">1</span>, <span class="number">1</span>) &#123;        <span class="title function_ invoke__">Ok</span>(()) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;책 반납 성공&quot;</span>),        <span class="title function_ invoke__">Err</span>(e) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;반납 실패: &#123;&#125;&quot;</span>, e),    &#125;&#125;</code></pre><h2 id="모듈-시스템-모범-사례"><a href="#모듈-시스템-모범-사례" class="headerlink" title="모듈 시스템 모범 사례"></a>모듈 시스템 모범 사례</h2><h3 id="1-적절한-가시성-설정"><a href="#1-적절한-가시성-설정" class="headerlink" title="1. 적절한 가시성 설정"></a>1. 적절한 가시성 설정</h3><pre><code class="highlight rust"><span class="keyword">mod</span> utils &#123;    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">public_function</span>() &#123;        <span class="title function_ invoke__">private_function</span>();    &#125;        <span class="keyword">fn</span> <span class="title function_">private_function</span>() &#123;        <span class="comment">// 모듈 내부에서만 사용</span>    &#125;&#125;</code></pre><h3 id="2-논리적-그룹화"><a href="#2-논리적-그룹화" class="headerlink" title="2. 논리적 그룹화"></a>2. 논리적 그룹화</h3><pre><code class="highlight rust"><span class="keyword">mod</span> database &#123;    <span class="keyword">pub</span> <span class="keyword">mod</span> connection;    <span class="keyword">pub</span> <span class="keyword">mod</span> queries;    <span class="keyword">pub</span> <span class="keyword">mod</span> models;&#125;<span class="keyword">mod</span> api &#123;    <span class="keyword">pub</span> <span class="keyword">mod</span> routes;    <span class="keyword">pub</span> <span class="keyword">mod</span> handlers;    <span class="keyword">pub</span> <span class="keyword">mod</span> middleware;&#125;</code></pre><h3 id="3-재수출-Re-export-활용"><a href="#3-재수출-Re-export-활용" class="headerlink" title="3. 재수출(Re-export) 활용"></a>3. 재수출(Re-export) 활용</h3><pre><code class="highlight rust"><span class="comment">// lib.rs</span><span class="keyword">mod</span> internal_module;<span class="keyword">pub</span> <span class="keyword">use</span> internal_module::PublicStruct;<span class="keyword">pub</span> <span class="keyword">use</span> internal_module::public_function;</code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 Rust의 모듈 시스템에 대해 알아보았습니다. 모듈 시스템을 잘 활용하면 코드를 체계적으로 구성하고,<br>재사용성을 높이며, 유지보수를 쉽게 할 수 있습니다. 큰 프로젝트일수록 모듈 시스템의 중요성이 더욱 커지므로,<br>처음부터 좋은 구조를 설계하는 것이 중요합니다.</p><p>지금까지 Rust 기본기 시리즈를 통해 Rust의 핵심 개념들을 다뤄보았습니다. 이제 여러분은 Rust로 안전하고 효율적인 프로그램을 작성할 수 있는 기초를 갖추게 되었습니다!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> Rust_기본기 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Rust 컬렉션 (Vector, HashMap, HashSet)</title>
      <link href="/rust/basic/7/"/>
      <url>/rust/basic/7/</url>
      
        <content type="html"><![CDATA[<h1 id="Rust-컬렉션-Vector-HashMap-HashSet"><a href="#Rust-컬렉션-Vector-HashMap-HashSet" class="headerlink" title="Rust 컬렉션 (Vector, HashMap, HashSet)"></a>Rust 컬렉션 (Vector, HashMap, HashSet)</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 Rust의 컬렉션에 대해 알아보겠습니다.<br>컬렉션은 여러 데이터를 효율적으로 저장하고 관리하는 데 사용되는 자료구조입니다.</p><h2 id="Vector-동적-배열"><a href="#Vector-동적-배열" class="headerlink" title="Vector (동적 배열)"></a>Vector (동적 배열)</h2><p>Vector는 동적으로 크기가 변할 수 있는 배열입니다. 마치 크기가 조절되는 서랍과 같습니다.</p><h3 id="기본-Vector-생성과-사용"><a href="#기본-Vector-생성과-사용" class="headerlink" title="기본 Vector 생성과 사용"></a>기본 Vector 생성과 사용</h3><pre><code class="highlight rust"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;    <span class="comment">// 빈 벡터 생성</span>    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">v</span>: <span class="type">Vec</span>&lt;<span class="type">i32</span>&gt; = <span class="type">Vec</span>::<span class="title function_ invoke__">new</span>();        <span class="comment">// vec! 매크로로 초기값과 함께 생성</span>    <span class="keyword">let</span> <span class="variable">v2</span> = <span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];        <span class="comment">// 요소 추가</span>    v.<span class="title function_ invoke__">push</span>(<span class="number">5</span>);    v.<span class="title function_ invoke__">push</span>(<span class="number">6</span>);    v.<span class="title function_ invoke__">push</span>(<span class="number">7</span>);    v.<span class="title function_ invoke__">push</span>(<span class="number">8</span>);        <span class="built_in">println!</span>(<span class="string">&quot;벡터 v: &#123;:?&#125;&quot;</span>, v);    <span class="built_in">println!</span>(<span class="string">&quot;벡터 v2: &#123;:?&#125;&quot;</span>, v2);&#125;</code></pre><h3 id="Vector-요소-접근"><a href="#Vector-요소-접근" class="headerlink" title="Vector 요소 접근"></a>Vector 요소 접근</h3><pre><code class="highlight rust"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;    <span class="keyword">let</span> <span class="variable">v</span> = <span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];        <span class="comment">// 인덱스로 직접 접근 (패닉 가능)</span>    <span class="keyword">let</span> <span class="variable">third</span>: &amp;<span class="type">i32</span> = &amp;v[<span class="number">2</span>];    <span class="built_in">println!</span>(<span class="string">&quot;세 번째 요소: &#123;&#125;&quot;</span>, third);        <span class="comment">// get 메서드 사용 (안전한 접근)</span>    <span class="keyword">match</span> v.<span class="title function_ invoke__">get</span>(<span class="number">2</span>) &#123;        <span class="title function_ invoke__">Some</span>(third) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;세 번째 요소: &#123;&#125;&quot;</span>, third),        <span class="literal">None</span> =&gt; <span class="built_in">println!</span>(<span class="string">&quot;세 번째 요소가 없습니다&quot;</span>),    &#125;        <span class="comment">// 범위를 벗어난 접근</span>    <span class="keyword">match</span> v.<span class="title function_ invoke__">get</span>(<span class="number">100</span>) &#123;        <span class="title function_ invoke__">Some</span>(value) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;값: &#123;&#125;&quot;</span>, value),        <span class="literal">None</span> =&gt; <span class="built_in">println!</span>(<span class="string">&quot;인덱스가 범위를 벗어났습니다&quot;</span>),    &#125;&#125;</code></pre><h3 id="Vector-반복"><a href="#Vector-반복" class="headerlink" title="Vector 반복"></a>Vector 반복</h3><pre><code class="highlight rust"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;    <span class="keyword">let</span> <span class="variable">v</span> = <span class="built_in">vec!</span>[<span class="number">100</span>, <span class="number">32</span>, <span class="number">57</span>];        <span class="comment">// 불변 참조로 반복</span>    <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> &amp;v &#123;        <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, i);    &#125;        <span class="comment">// 가변 참조로 반복하여 수정</span>    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">v2</span> = <span class="built_in">vec!</span>[<span class="number">100</span>, <span class="number">32</span>, <span class="number">57</span>];    <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> &amp;<span class="keyword">mut</span> v2 &#123;        *i += <span class="number">50</span>;    &#125;    <span class="built_in">println!</span>(<span class="string">&quot;수정된 벡터: &#123;:?&#125;&quot;</span>, v2);        <span class="comment">// 소유권을 가져와서 반복</span>    <span class="keyword">let</span> <span class="variable">v3</span> = <span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];    <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> v3 &#123;        <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, i);    &#125;    <span class="comment">// v3는 더 이상 사용할 수 없음</span>&#125;</code></pre><h3 id="다양한-타입을-저장하는-Vector"><a href="#다양한-타입을-저장하는-Vector" class="headerlink" title="다양한 타입을 저장하는 Vector"></a>다양한 타입을 저장하는 Vector</h3><pre><code class="highlight rust"><span class="keyword">enum</span> <span class="title class_">SpreadsheetCell</span> &#123;    <span class="title function_ invoke__">Int</span>(<span class="type">i32</span>),    <span class="title function_ invoke__">Float</span>(<span class="type">f64</span>),    <span class="title function_ invoke__">Text</span>(<span class="type">String</span>),&#125;<span class="keyword">fn</span> <span class="title function_">main</span>() &#123;    <span class="keyword">let</span> <span class="variable">row</span> = <span class="built_in">vec!</span>[        SpreadsheetCell::<span class="title function_ invoke__">Int</span>(<span class="number">3</span>),        SpreadsheetCell::<span class="title function_ invoke__">Text</span>(<span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;blue&quot;</span>)),        SpreadsheetCell::<span class="title function_ invoke__">Float</span>(<span class="number">10.12</span>),    ];        <span class="keyword">for</span> <span class="variable">cell</span> <span class="keyword">in</span> &amp;row &#123;        <span class="keyword">match</span> cell &#123;            SpreadsheetCell::<span class="title function_ invoke__">Int</span>(i) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;정수: &#123;&#125;&quot;</span>, i),            SpreadsheetCell::<span class="title function_ invoke__">Float</span>(f) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;실수: &#123;&#125;&quot;</span>, f),            SpreadsheetCell::<span class="title function_ invoke__">Text</span>(s) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;문자열: &#123;&#125;&quot;</span>, s),        &#125;    &#125;&#125;</code></pre><h2 id="HashMap-해시맵"><a href="#HashMap-해시맵" class="headerlink" title="HashMap (해시맵)"></a>HashMap (해시맵)</h2><p>HashMap은 키-값 쌍을 저장하는 컬렉션입니다. 마치 사전과 같아서 키를 통해 값을 빠르게 찾을 수 있습니다.</p><h3 id="기본-HashMap-생성과-사용"><a href="#기본-HashMap-생성과-사용" class="headerlink" title="기본 HashMap 생성과 사용"></a>기본 HashMap 생성과 사용</h3><pre><code class="highlight rust"><span class="keyword">use</span> std::collections::HashMap;<span class="keyword">fn</span> <span class="title function_">main</span>() &#123;    <span class="comment">// 빈 해시맵 생성</span>    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">scores</span> = HashMap::<span class="title function_ invoke__">new</span>();        <span class="comment">// 키-값 쌍 삽입</span>    scores.<span class="title function_ invoke__">insert</span>(<span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Blue&quot;</span>), <span class="number">10</span>);    scores.<span class="title function_ invoke__">insert</span>(<span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Yellow&quot;</span>), <span class="number">50</span>);        <span class="built_in">println!</span>(<span class="string">&quot;점수: &#123;:?&#125;&quot;</span>, scores);        <span class="comment">// 벡터로부터 해시맵 생성</span>    <span class="keyword">let</span> <span class="variable">teams</span> = <span class="built_in">vec!</span>[<span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Blue&quot;</span>), <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Yellow&quot;</span>)];    <span class="keyword">let</span> <span class="variable">initial_scores</span> = <span class="built_in">vec!</span>[<span class="number">10</span>, <span class="number">50</span>];        <span class="keyword">let</span> <span class="variable">scores2</span>: HashMap&lt;_, _&gt; = teams.<span class="title function_ invoke__">iter</span>()        .<span class="title function_ invoke__">zip</span>(initial_scores.<span class="title function_ invoke__">iter</span>())        .<span class="title function_ invoke__">collect</span>();        <span class="built_in">println!</span>(<span class="string">&quot;점수2: &#123;:?&#125;&quot;</span>, scores2);&#125;</code></pre><h3 id="HashMap-값-접근"><a href="#HashMap-값-접근" class="headerlink" title="HashMap 값 접근"></a>HashMap 값 접근</h3><pre><code class="highlight rust"><span class="keyword">use</span> std::collections::HashMap;<span class="keyword">fn</span> <span class="title function_">main</span>() &#123;    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">scores</span> = HashMap::<span class="title function_ invoke__">new</span>();        scores.<span class="title function_ invoke__">insert</span>(<span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Blue&quot;</span>), <span class="number">10</span>);    scores.<span class="title function_ invoke__">insert</span>(<span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Yellow&quot;</span>), <span class="number">50</span>);        <span class="comment">// get 메서드로 값 접근</span>    <span class="keyword">let</span> <span class="variable">team_name</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Blue&quot;</span>);    <span class="keyword">let</span> <span class="variable">score</span> = scores.<span class="title function_ invoke__">get</span>(&amp;team_name);        <span class="keyword">match</span> score &#123;        <span class="title function_ invoke__">Some</span>(s) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;Blue 팀 점수: &#123;&#125;&quot;</span>, s),        <span class="literal">None</span> =&gt; <span class="built_in">println!</span>(<span class="string">&quot;Blue 팀을 찾을 수 없습니다&quot;</span>),    &#125;        <span class="comment">// 반복을 통한 모든 키-값 출력</span>    <span class="keyword">for</span> (key, value) <span class="keyword">in</span> &amp;scores &#123;        <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;: &#123;&#125;&quot;</span>, key, value);    &#125;&#125;</code></pre><h3 id="HashMap-업데이트"><a href="#HashMap-업데이트" class="headerlink" title="HashMap 업데이트"></a>HashMap 업데이트</h3><pre><code class="highlight rust"><span class="keyword">use</span> std::collections::HashMap;<span class="keyword">fn</span> <span class="title function_">main</span>() &#123;    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">scores</span> = HashMap::<span class="title function_ invoke__">new</span>();        <span class="comment">// 기본 삽입</span>    scores.<span class="title function_ invoke__">insert</span>(<span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Blue&quot;</span>), <span class="number">10</span>);    scores.<span class="title function_ invoke__">insert</span>(<span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Blue&quot;</span>), <span class="number">25</span>); <span class="comment">// 덮어쓰기</span>        <span class="built_in">println!</span>(<span class="string">&quot;덮어쓰기 후: &#123;:?&#125;&quot;</span>, scores);        <span class="comment">// 키가 없을 때만 삽입</span>    scores.<span class="title function_ invoke__">entry</span>(<span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Yellow&quot;</span>)).<span class="title function_ invoke__">or_insert</span>(<span class="number">50</span>);    scores.<span class="title function_ invoke__">entry</span>(<span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Blue&quot;</span>)).<span class="title function_ invoke__">or_insert</span>(<span class="number">50</span>); <span class="comment">// 이미 있으므로 무시</span>        <span class="built_in">println!</span>(<span class="string">&quot;조건부 삽입 후: &#123;:?&#125;&quot;</span>, scores);        <span class="comment">// 기존 값을 기반으로 업데이트</span>    <span class="keyword">let</span> <span class="variable">text</span> = <span class="string">&quot;hello world wonderful world&quot;</span>;    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">map</span> = HashMap::<span class="title function_ invoke__">new</span>();        <span class="keyword">for</span> <span class="variable">word</span> <span class="keyword">in</span> text.<span class="title function_ invoke__">split_whitespace</span>() &#123;        <span class="keyword">let</span> <span class="variable">count</span> = map.<span class="title function_ invoke__">entry</span>(word).<span class="title function_ invoke__">or_insert</span>(<span class="number">0</span>);        *count += <span class="number">1</span>;    &#125;        <span class="built_in">println!</span>(<span class="string">&quot;단어 카운트: &#123;:?&#125;&quot;</span>, map);&#125;</code></pre><h2 id="HashSet-해시셋"><a href="#HashSet-해시셋" class="headerlink" title="HashSet (해시셋)"></a>HashSet (해시셋)</h2><p>HashSet은 중복을 허용하지 않는 값들의 집합입니다. 마치 고유한 아이템들만 담는 상자와 같습니다.</p><h3 id="기본-HashSet-사용"><a href="#기본-HashSet-사용" class="headerlink" title="기본 HashSet 사용"></a>기본 HashSet 사용</h3><pre><code class="highlight rust"><span class="keyword">use</span> std::collections::HashSet;<span class="keyword">fn</span> <span class="title function_">main</span>() &#123;    <span class="comment">// 빈 해시셋 생성</span>    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">books</span> = HashSet::<span class="title function_ invoke__">new</span>();        <span class="comment">// 값 추가</span>    books.<span class="title function_ invoke__">insert</span>(<span class="string">&quot;Rust Programming&quot;</span>);    books.<span class="title function_ invoke__">insert</span>(<span class="string">&quot;JavaScript Guide&quot;</span>);    books.<span class="title function_ invoke__">insert</span>(<span class="string">&quot;Python Basics&quot;</span>);    books.<span class="title function_ invoke__">insert</span>(<span class="string">&quot;Rust Programming&quot;</span>); <span class="comment">// 중복, 추가되지 않음</span>        <span class="built_in">println!</span>(<span class="string">&quot;책 목록: &#123;:?&#125;&quot;</span>, books);    <span class="built_in">println!</span>(<span class="string">&quot;책 개수: &#123;&#125;&quot;</span>, books.<span class="title function_ invoke__">len</span>());        <span class="comment">// 값 존재 확인</span>    <span class="keyword">if</span> books.<span class="title function_ invoke__">contains</span>(<span class="string">&quot;Rust Programming&quot;</span>) &#123;        <span class="built_in">println!</span>(<span class="string">&quot;Rust Programming 책이 있습니다&quot;</span>);    &#125;        <span class="comment">// 반복</span>    <span class="keyword">for</span> <span class="variable">book</span> <span class="keyword">in</span> &amp;books &#123;        <span class="built_in">println!</span>(<span class="string">&quot;책: &#123;&#125;&quot;</span>, book);    &#125;&#125;</code></pre><h3 id="HashSet-집합-연산"><a href="#HashSet-집합-연산" class="headerlink" title="HashSet 집합 연산"></a>HashSet 집합 연산</h3><pre><code class="highlight rust"><span class="keyword">use</span> std::collections::HashSet;<span class="keyword">fn</span> <span class="title function_">main</span>() &#123;    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">set_a</span>: HashSet&lt;<span class="type">i32</span>&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].<span class="title function_ invoke__">iter</span>().<span class="title function_ invoke__">cloned</span>().<span class="title function_ invoke__">collect</span>();    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">set_b</span>: HashSet&lt;<span class="type">i32</span>&gt; = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>].<span class="title function_ invoke__">iter</span>().<span class="title function_ invoke__">cloned</span>().<span class="title function_ invoke__">collect</span>();        <span class="comment">// 합집합</span>    <span class="keyword">let</span> <span class="variable">union</span>: HashSet&lt;_&gt; = set_a.<span class="title function_ invoke__">union</span>(&amp;set_b).<span class="title function_ invoke__">cloned</span>().<span class="title function_ invoke__">collect</span>();    <span class="built_in">println!</span>(<span class="string">&quot;합집합: &#123;:?&#125;&quot;</span>, <span class="keyword">union</span>);        <span class="comment">// 교집합</span>    <span class="keyword">let</span> <span class="variable">intersection</span>: HashSet&lt;_&gt; = set_a.<span class="title function_ invoke__">intersection</span>(&amp;set_b).<span class="title function_ invoke__">cloned</span>().<span class="title function_ invoke__">collect</span>();    <span class="built_in">println!</span>(<span class="string">&quot;교집합: &#123;:?&#125;&quot;</span>, intersection);        <span class="comment">// 차집합</span>    <span class="keyword">let</span> <span class="variable">difference</span>: HashSet&lt;_&gt; = set_a.<span class="title function_ invoke__">difference</span>(&amp;set_b).<span class="title function_ invoke__">cloned</span>().<span class="title function_ invoke__">collect</span>();    <span class="built_in">println!</span>(<span class="string">&quot;차집합 (A - B): &#123;:?&#125;&quot;</span>, difference);        <span class="comment">// 대칭차집합</span>    <span class="keyword">let</span> <span class="variable">symmetric_difference</span>: HashSet&lt;_&gt; = set_a.<span class="title function_ invoke__">symmetric_difference</span>(&amp;set_b).<span class="title function_ invoke__">cloned</span>().<span class="title function_ invoke__">collect</span>();    <span class="built_in">println!</span>(<span class="string">&quot;대칭차집합: &#123;:?&#125;&quot;</span>, symmetric_difference);&#125;</code></pre><h2 id="실습-예제-학생-성적-관리-시스템"><a href="#실습-예제-학생-성적-관리-시스템" class="headerlink" title="실습 예제: 학생 성적 관리 시스템"></a>실습 예제: 학생 성적 관리 시스템</h2><pre><code class="highlight rust"><span class="keyword">use</span> std::collections::&#123;HashMap, HashSet&#125;;<span class="meta">#[derive(Debug, Clone)]</span><span class="keyword">struct</span> <span class="title class_">Student</span> &#123;    id: <span class="type">u32</span>,    name: <span class="type">String</span>,    grades: <span class="type">Vec</span>&lt;<span class="type">f64</span>&gt;,&#125;<span class="keyword">struct</span> <span class="title class_">GradeManager</span> &#123;    students: HashMap&lt;<span class="type">u32</span>, Student&gt;,    subjects: HashSet&lt;<span class="type">String</span>&gt;,&#125;<span class="keyword">impl</span> <span class="title class_">GradeManager</span> &#123;    <span class="keyword">fn</span> <span class="title function_">new</span>() <span class="punctuation">-&gt;</span> <span class="keyword">Self</span> &#123;        GradeManager &#123;            students: HashMap::<span class="title function_ invoke__">new</span>(),            subjects: HashSet::<span class="title function_ invoke__">new</span>(),        &#125;    &#125;        <span class="keyword">fn</span> <span class="title function_">add_student</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, id: <span class="type">u32</span>, name: <span class="type">String</span>) &#123;        <span class="keyword">let</span> <span class="variable">student</span> = Student &#123;            id,            name,            grades: <span class="type">Vec</span>::<span class="title function_ invoke__">new</span>(),        &#125;;        <span class="keyword">self</span>.students.<span class="title function_ invoke__">insert</span>(id, student);    &#125;        <span class="keyword">fn</span> <span class="title function_">add_subject</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, subject: <span class="type">String</span>) &#123;        <span class="keyword">self</span>.subjects.<span class="title function_ invoke__">insert</span>(subject);    &#125;        <span class="keyword">fn</span> <span class="title function_">add_grade</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, student_id: <span class="type">u32</span>, grade: <span class="type">f64</span>) <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;(), <span class="type">String</span>&gt; &#123;        <span class="keyword">match</span> <span class="keyword">self</span>.students.<span class="title function_ invoke__">get_mut</span>(&amp;student_id) &#123;            <span class="title function_ invoke__">Some</span>(student) =&gt; &#123;                student.grades.<span class="title function_ invoke__">push</span>(grade);                <span class="title function_ invoke__">Ok</span>(())            &#125;            <span class="literal">None</span> =&gt; <span class="title function_ invoke__">Err</span>(<span class="built_in">format!</span>(<span class="string">&quot;학생 ID &#123;&#125;를 찾을 수 없습니다&quot;</span>, student_id)),        &#125;    &#125;        <span class="keyword">fn</span> <span class="title function_">get_average</span>(&amp;<span class="keyword">self</span>, student_id: <span class="type">u32</span>) <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;<span class="type">f64</span>, <span class="type">String</span>&gt; &#123;        <span class="keyword">match</span> <span class="keyword">self</span>.students.<span class="title function_ invoke__">get</span>(&amp;student_id) &#123;            <span class="title function_ invoke__">Some</span>(student) =&gt; &#123;                <span class="keyword">if</span> student.grades.<span class="title function_ invoke__">is_empty</span>() &#123;                    <span class="keyword">return</span> <span class="title function_ invoke__">Err</span>(<span class="string">&quot;성적이 없습니다&quot;</span>.<span class="title function_ invoke__">to_string</span>());                &#125;                <span class="keyword">let</span> <span class="variable">sum</span>: <span class="type">f64</span> = student.grades.<span class="title function_ invoke__">iter</span>().<span class="title function_ invoke__">sum</span>();                <span class="title function_ invoke__">Ok</span>(sum / student.grades.<span class="title function_ invoke__">len</span>() <span class="keyword">as</span> <span class="type">f64</span>)            &#125;            <span class="literal">None</span> =&gt; <span class="title function_ invoke__">Err</span>(<span class="built_in">format!</span>(<span class="string">&quot;학생 ID &#123;&#125;를 찾을 수 없습니다&quot;</span>, student_id)),        &#125;    &#125;        <span class="keyword">fn</span> <span class="title function_">get_class_average</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">f64</span> &#123;        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">total_sum</span> = <span class="number">0.0</span>;        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">total_count</span> = <span class="number">0</span>;                <span class="keyword">for</span> <span class="variable">student</span> <span class="keyword">in</span> <span class="keyword">self</span>.students.<span class="title function_ invoke__">values</span>() &#123;            total_sum += student.grades.<span class="title function_ invoke__">iter</span>().sum::&lt;<span class="type">f64</span>&gt;();            total_count += student.grades.<span class="title function_ invoke__">len</span>();        &#125;                <span class="keyword">if</span> total_count == <span class="number">0</span> &#123;            <span class="number">0.0</span>        &#125; <span class="keyword">else</span> &#123;            total_sum / total_count <span class="keyword">as</span> <span class="type">f64</span>        &#125;    &#125;        <span class="keyword">fn</span> <span class="title function_">get_top_students</span>(&amp;<span class="keyword">self</span>, n: <span class="type">usize</span>) <span class="punctuation">-&gt;</span> <span class="type">Vec</span>&lt;(<span class="type">u32</span>, <span class="type">String</span>, <span class="type">f64</span>)&gt; &#123;        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">student_averages</span> = <span class="type">Vec</span>::<span class="title function_ invoke__">new</span>();                <span class="keyword">for</span> <span class="variable">student</span> <span class="keyword">in</span> <span class="keyword">self</span>.students.<span class="title function_ invoke__">values</span>() &#123;            <span class="keyword">if</span> !student.grades.<span class="title function_ invoke__">is_empty</span>() &#123;                <span class="keyword">let</span> <span class="variable">avg</span> = student.grades.<span class="title function_ invoke__">iter</span>().sum::&lt;<span class="type">f64</span>&gt;() / student.grades.<span class="title function_ invoke__">len</span>() <span class="keyword">as</span> <span class="type">f64</span>;                student_averages.<span class="title function_ invoke__">push</span>((student.id, student.name.<span class="title function_ invoke__">clone</span>(), avg));            &#125;        &#125;                student_averages.<span class="title function_ invoke__">sort_by</span>(|a, b| b.<span class="number">2</span>.<span class="title function_ invoke__">partial_cmp</span>(&amp;a.<span class="number">2</span>).<span class="title function_ invoke__">unwrap</span>());        student_averages.<span class="title function_ invoke__">truncate</span>(n);        student_averages    &#125;        <span class="keyword">fn</span> <span class="title function_">list_students</span>(&amp;<span class="keyword">self</span>) &#123;        <span class="built_in">println!</span>(<span class="string">&quot;=== 학생 목록 ===&quot;</span>);        <span class="keyword">for</span> <span class="variable">student</span> <span class="keyword">in</span> <span class="keyword">self</span>.students.<span class="title function_ invoke__">values</span>() &#123;            <span class="built_in">println!</span>(<span class="string">&quot;ID: &#123;&#125;, 이름: &#123;&#125;, 성적: &#123;:?&#125;&quot;</span>,                      student.id, student.name, student.grades);        &#125;    &#125;&#125;<span class="keyword">fn</span> <span class="title function_">main</span>() &#123;    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">grade_manager</span> = GradeManager::<span class="title function_ invoke__">new</span>();        <span class="comment">// 학생 추가</span>    grade_manager.<span class="title function_ invoke__">add_student</span>(<span class="number">1</span>, <span class="string">&quot;김철수&quot;</span>.<span class="title function_ invoke__">to_string</span>());    grade_manager.<span class="title function_ invoke__">add_student</span>(<span class="number">2</span>, <span class="string">&quot;이영희&quot;</span>.<span class="title function_ invoke__">to_string</span>());    grade_manager.<span class="title function_ invoke__">add_student</span>(<span class="number">3</span>, <span class="string">&quot;박민수&quot;</span>.<span class="title function_ invoke__">to_string</span>());        <span class="comment">// 과목 추가</span>    grade_manager.<span class="title function_ invoke__">add_subject</span>(<span class="string">&quot;수학&quot;</span>.<span class="title function_ invoke__">to_string</span>());    grade_manager.<span class="title function_ invoke__">add_subject</span>(<span class="string">&quot;영어&quot;</span>.<span class="title function_ invoke__">to_string</span>());    grade_manager.<span class="title function_ invoke__">add_subject</span>(<span class="string">&quot;과학&quot;</span>.<span class="title function_ invoke__">to_string</span>());        <span class="comment">// 성적 추가</span>    <span class="keyword">let</span> <span class="variable">_</span> = grade_manager.<span class="title function_ invoke__">add_grade</span>(<span class="number">1</span>, <span class="number">85.0</span>);    <span class="keyword">let</span> <span class="variable">_</span> = grade_manager.<span class="title function_ invoke__">add_grade</span>(<span class="number">1</span>, <span class="number">90.0</span>);    <span class="keyword">let</span> <span class="variable">_</span> = grade_manager.<span class="title function_ invoke__">add_grade</span>(<span class="number">1</span>, <span class="number">78.0</span>);        <span class="keyword">let</span> <span class="variable">_</span> = grade_manager.<span class="title function_ invoke__">add_grade</span>(<span class="number">2</span>, <span class="number">92.0</span>);    <span class="keyword">let</span> <span class="variable">_</span> = grade_manager.<span class="title function_ invoke__">add_grade</span>(<span class="number">2</span>, <span class="number">88.0</span>);    <span class="keyword">let</span> <span class="variable">_</span> = grade_manager.<span class="title function_ invoke__">add_grade</span>(<span class="number">2</span>, <span class="number">95.0</span>);        <span class="keyword">let</span> <span class="variable">_</span> = grade_manager.<span class="title function_ invoke__">add_grade</span>(<span class="number">3</span>, <span class="number">76.0</span>);    <span class="keyword">let</span> <span class="variable">_</span> = grade_manager.<span class="title function_ invoke__">add_grade</span>(<span class="number">3</span>, <span class="number">82.0</span>);    <span class="keyword">let</span> <span class="variable">_</span> = grade_manager.<span class="title function_ invoke__">add_grade</span>(<span class="number">3</span>, <span class="number">79.0</span>);        <span class="comment">// 학생 목록 출력</span>    grade_manager.<span class="title function_ invoke__">list_students</span>();        <span class="comment">// 개별 학생 평균</span>    <span class="keyword">for</span> <span class="variable">student_id</span> <span class="keyword">in</span> <span class="number">1</span>..=<span class="number">3</span> &#123;        <span class="keyword">match</span> grade_manager.<span class="title function_ invoke__">get_average</span>(student_id) &#123;            <span class="title function_ invoke__">Ok</span>(avg) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;학생 ID &#123;&#125;: 평균 &#123;:.2&#125;&quot;</span>, student_id, avg),            <span class="title function_ invoke__">Err</span>(e) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;에러: &#123;&#125;&quot;</span>, e),        &#125;    &#125;        <span class="comment">// 전체 평균</span>    <span class="built_in">println!</span>(<span class="string">&quot;전체 평균: &#123;:.2&#125;&quot;</span>, grade_manager.<span class="title function_ invoke__">get_class_average</span>());        <span class="comment">// 상위 학생들</span>    <span class="built_in">println!</span>(<span class="string">&quot;=== 상위 2명 ===&quot;</span>);    <span class="keyword">for</span> (id, name, avg) <span class="keyword">in</span> grade_manager.<span class="title function_ invoke__">get_top_students</span>(<span class="number">2</span>) &#123;        <span class="built_in">println!</span>(<span class="string">&quot;ID: &#123;&#125;, 이름: &#123;&#125;, 평균: &#123;:.2&#125;&quot;</span>, id, name, avg);    &#125;&#125;</code></pre><h2 id="컬렉션-활용-팁"><a href="#컬렉션-활용-팁" class="headerlink" title="컬렉션 활용 팁"></a>컬렉션 활용 팁</h2><h3 id="1-적절한-컬렉션-선택"><a href="#1-적절한-컬렉션-선택" class="headerlink" title="1. 적절한 컬렉션 선택"></a>1. 적절한 컬렉션 선택</h3><pre><code class="highlight rust"><span class="comment">// 순서가 중요하고 중복 허용: Vec</span><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">list</span> = <span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];<span class="comment">// 키-값 매핑: HashMap</span><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">mapping</span> = std::collections::HashMap::<span class="title function_ invoke__">new</span>();mapping.<span class="title function_ invoke__">insert</span>(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;value&quot;</span>);<span class="comment">// 중복 없는 고유값: HashSet</span><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">unique_values</span> = std::collections::HashSet::<span class="title function_ invoke__">new</span>();unique_values.<span class="title function_ invoke__">insert</span>(<span class="number">1</span>);unique_values.<span class="title function_ invoke__">insert</span>(<span class="number">2</span>);</code></pre><h3 id="2-메모리-효율성-고려"><a href="#2-메모리-효율성-고려" class="headerlink" title="2. 메모리 효율성 고려"></a>2. 메모리 효율성 고려</h3><pre><code class="highlight rust"><span class="comment">// 예상 크기를 알 때 미리 할당</span><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">vec</span> = <span class="type">Vec</span>::<span class="title function_ invoke__">with_capacity</span>(<span class="number">1000</span>);<span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">map</span> = std::collections::HashMap::<span class="title function_ invoke__">with_capacity</span>(<span class="number">100</span>);</code></pre><h3 id="3-반복자-활용"><a href="#3-반복자-활용" class="headerlink" title="3. 반복자 활용"></a>3. 반복자 활용</h3><pre><code class="highlight rust"><span class="keyword">let</span> <span class="variable">numbers</span> = <span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];<span class="comment">// 필터링과 변환</span><span class="keyword">let</span> <span class="variable">even_squares</span>: <span class="type">Vec</span>&lt;<span class="type">i32</span>&gt; = numbers    .<span class="title function_ invoke__">iter</span>()    .<span class="title function_ invoke__">filter</span>(|&amp;x| x % <span class="number">2</span> == <span class="number">0</span>)    .<span class="title function_ invoke__">map</span>(|x| x * x)    .<span class="title function_ invoke__">collect</span>();<span class="built_in">println!</span>(<span class="string">&quot;짝수의 제곱: &#123;:?&#125;&quot;</span>, even_squares);</code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 Rust의 주요 컬렉션인 Vector, HashMap, HashSet에 대해 알아보았습니다. 각각의 컬렉션은 서로 다른 특성과 용도를 가지고 있으므로,<br>상황에 맞게 적절한 컬렉션을 선택하는 것이 중요합니다. 컬렉션을 잘 활용하면 효율적이고 안전한 데이터 관리가 가능합니다.<br>다음 시간에는 Rust의 모듈 시스템에 대해 알아보겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> Rust_기본기 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Javascript 심볼 (Symbols)</title>
      <link href="/javascript/detail/14/"/>
      <url>/javascript/detail/14/</url>
      
        <content type="html"><![CDATA[<h1 id="Javascript-심볼-Symbols"><a href="#Javascript-심볼-Symbols" class="headerlink" title="Javascript 심볼 (Symbols)"></a>Javascript 심볼 (Symbols)</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 JavaScript에서 심볼(Symbols)에 대해 알아보겠습니다. 심볼은 고유하고 변경 불가능한 데이터 타입으로, 주로 객체의 키로 사용됩니다.</p><h2 id="심볼-생성"><a href="#심볼-생성" class="headerlink" title="심볼 생성"></a>심볼 생성</h2><p>심볼은 <code>Symbol</code> 함수를 사용하여 생성합니다:</p><pre><code class="highlight javascript"><span class="keyword">const</span> sym1 = <span class="title class_">Symbol</span>();<span class="keyword">const</span> sym2 = <span class="title class_">Symbol</span>(<span class="string">&quot;description&quot;</span>);<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> sym1); <span class="comment">// 출력: symbol</span><span class="variable language_">console</span>.<span class="title function_">log</span>(sym2.<span class="title function_">toString</span>()); <span class="comment">// 출력: Symbol(description)</span></code></pre><h2 id="객체의-키로서의-심볼"><a href="#객체의-키로서의-심볼" class="headerlink" title="객체의 키로서의 심볼"></a>객체의 키로서의 심볼</h2><p>심볼은 객체의 키로 사용할 수 있습니다:</p><pre><code class="highlight javascript"><span class="keyword">const</span> sym = <span class="title class_">Symbol</span>(<span class="string">&quot;key&quot;</span>);<span class="keyword">const</span> obj = &#123;  [sym]: <span class="string">&quot;value&quot;</span>,&#125;;<span class="variable language_">console</span>.<span class="title function_">log</span>(obj[sym]); <span class="comment">// 출력: value</span></code></pre><h2 id="심볼의-유일성"><a href="#심볼의-유일성" class="headerlink" title="심볼의 유일성"></a>심볼의 유일성</h2><p>각 심볼은 고유하며, 동일한 설명을 가진 심볼이라도 서로 다릅니다:</p><pre><code class="highlight javascript"><span class="keyword">const</span> sym1 = <span class="title class_">Symbol</span>(<span class="string">&quot;desc&quot;</span>);<span class="keyword">const</span> sym2 = <span class="title class_">Symbol</span>(<span class="string">&quot;desc&quot;</span>);<span class="variable language_">console</span>.<span class="title function_">log</span>(sym1 === sym2); <span class="comment">// 출력: false</span></code></pre><h2 id="전역-심볼-레지스트리"><a href="#전역-심볼-레지스트리" class="headerlink" title="전역 심볼 레지스트리"></a>전역 심볼 레지스트리</h2><p><code>Symbol.for</code>를 사용하여 전역 심볼 레지스트리에서 심볼을 검색하거나 생성할 수 있습니다:</p><pre><code class="highlight javascript"><span class="keyword">const</span> globalSym1 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&quot;key&quot;</span>);<span class="keyword">const</span> globalSym2 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&quot;key&quot;</span>);<span class="variable language_">console</span>.<span class="title function_">log</span>(globalSym1 === globalSym2); <span class="comment">// 출력: true</span></code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 Javascript에서 심볼을 사용하는 방법에 대해 알아보았습니다. 심볼은 고유하고 변경 불가능한 데이터 타입으로, 주로 객체의 키로 사용됩니다. 다음 시간에는 제너레이터에 대해 알아보겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> JS_디테일 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Rust 에러 처리</title>
      <link href="/rust/basic/6/"/>
      <url>/rust/basic/6/</url>
      
        <content type="html"><![CDATA[<h1 id="Rust-에러-처리"><a href="#Rust-에러-처리" class="headerlink" title="Rust 에러 처리"></a>Rust 에러 처리</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 Rust의 에러 처리 방법에 대해 알아보겠습니다.<br>Rust는 안전하고 명시적인 에러 처리를 통해 프로그램의 안정성을 높이는 독특한 접근 방식을 취합니다.</p><h2 id="Rust의-에러-처리-철학"><a href="#Rust의-에러-처리-철학" class="headerlink" title="Rust의 에러 처리 철학"></a>Rust의 에러 처리 철학</h2><p>Rust에서는 에러를 두 가지 카테고리로 분류합니다:</p><ol><li><strong>복구 가능한 에러</strong>: 파일을 찾을 수 없는 경우 등</li><li><strong>복구 불가능한 에러</strong>: 배열의 범위를 벗어난 접근 등</li></ol><p>다른 언어의 예외(Exception) 메커니즘과 달리, Rust는 <code>Result&lt;T, E&gt;</code> 타입과 <code>panic!</code> 매크로를 사용합니다.</p><h2 id="복구-불가능한-에러-panic"><a href="#복구-불가능한-에러-panic" class="headerlink" title="복구 불가능한 에러: panic!"></a>복구 불가능한 에러: panic!</h2><p><code>panic!</code>은 프로그램을 즉시 종료시키는 매크로입니다. 마치 비상 정지 버튼과 같습니다.</p><h3 id="기본-panic-사용"><a href="#기본-panic-사용" class="headerlink" title="기본 panic! 사용"></a>기본 panic! 사용</h3><pre><code class="highlight rust"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;    <span class="built_in">panic!</span>(<span class="string">&quot;크래시가 발생했습니다!&quot;</span>);&#125;</code></pre><h3 id="배열-범위-초과로-인한-panic"><a href="#배열-범위-초과로-인한-panic" class="headerlink" title="배열 범위 초과로 인한 panic!"></a>배열 범위 초과로 인한 panic!</h3><pre><code class="highlight rust"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;    <span class="keyword">let</span> <span class="variable">v</span> = <span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];    v[<span class="number">99</span>]; <span class="comment">// 패닉 발생! 인덱스 99는 존재하지 않음</span>&#125;</code></pre><h3 id="안전한-배열-접근"><a href="#안전한-배열-접근" class="headerlink" title="안전한 배열 접근"></a>안전한 배열 접근</h3><pre><code class="highlight rust"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;    <span class="keyword">let</span> <span class="variable">v</span> = <span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];        <span class="comment">// 안전한 방법 1: get 메서드 사용</span>    <span class="keyword">match</span> v.<span class="title function_ invoke__">get</span>(<span class="number">99</span>) &#123;        <span class="title function_ invoke__">Some</span>(value) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;값: &#123;&#125;&quot;</span>, value),        <span class="literal">None</span> =&gt; <span class="built_in">println!</span>(<span class="string">&quot;인덱스가 범위를 벗어났습니다&quot;</span>),    &#125;        <span class="comment">// 안전한 방법 2: 조건 확인</span>    <span class="keyword">if</span> <span class="number">99</span> &lt; v.<span class="title function_ invoke__">len</span>() &#123;        <span class="built_in">println!</span>(<span class="string">&quot;값: &#123;&#125;&quot;</span>, v[<span class="number">99</span>]);    &#125; <span class="keyword">else</span> &#123;        <span class="built_in">println!</span>(<span class="string">&quot;인덱스가 범위를 벗어났습니다&quot;</span>);    &#125;&#125;</code></pre><h2 id="복구-가능한-에러-Result"><a href="#복구-가능한-에러-Result" class="headerlink" title="복구 가능한 에러: Result&lt;T, E&gt;"></a>복구 가능한 에러: Result&lt;T, E&gt;</h2><p><code>Result</code>는 성공(<code>Ok</code>)과 실패(<code>Err</code>) 두 가지 상태를 가질 수 있는 열거형입니다.</p><pre><code class="highlight rust"><span class="keyword">enum</span> <span class="title class_">Result</span>&lt;T, E&gt; &#123;    <span class="title function_ invoke__">Ok</span>(T),    <span class="title function_ invoke__">Err</span>(E),&#125;</code></pre><h3 id="파일-읽기-예제"><a href="#파일-읽기-예제" class="headerlink" title="파일 읽기 예제"></a>파일 읽기 예제</h3><pre><code class="highlight rust"><span class="keyword">use</span> std::fs::File;<span class="keyword">use</span> std::io::ErrorKind;<span class="keyword">fn</span> <span class="title function_">main</span>() &#123;    <span class="keyword">let</span> <span class="variable">f</span> = File::<span class="title function_ invoke__">open</span>(<span class="string">&quot;hello.txt&quot;</span>);        <span class="keyword">let</span> <span class="variable">f</span> = <span class="keyword">match</span> f &#123;        <span class="title function_ invoke__">Ok</span>(file) =&gt; file,        <span class="title function_ invoke__">Err</span>(error) =&gt; &#123;            <span class="built_in">panic!</span>(<span class="string">&quot;파일 열기 실패: &#123;:?&#125;&quot;</span>, error);        &#125;    &#125;;&#125;</code></pre><h3 id="에러-종류별-처리"><a href="#에러-종류별-처리" class="headerlink" title="에러 종류별 처리"></a>에러 종류별 처리</h3><pre><code class="highlight rust"><span class="keyword">use</span> std::fs::File;<span class="keyword">use</span> std::io::ErrorKind;<span class="keyword">fn</span> <span class="title function_">main</span>() &#123;    <span class="keyword">let</span> <span class="variable">f</span> = File::<span class="title function_ invoke__">open</span>(<span class="string">&quot;hello.txt&quot;</span>);        <span class="keyword">let</span> <span class="variable">f</span> = <span class="keyword">match</span> f &#123;        <span class="title function_ invoke__">Ok</span>(file) =&gt; file,        <span class="title function_ invoke__">Err</span>(error) =&gt; <span class="keyword">match</span> error.<span class="title function_ invoke__">kind</span>() &#123;            ErrorKind::NotFound =&gt; <span class="keyword">match</span> File::<span class="title function_ invoke__">create</span>(<span class="string">&quot;hello.txt&quot;</span>) &#123;                <span class="title function_ invoke__">Ok</span>(fc) =&gt; fc,                <span class="title function_ invoke__">Err</span>(e) =&gt; <span class="built_in">panic!</span>(<span class="string">&quot;파일 생성 실패: &#123;:?&#125;&quot;</span>, e),            &#125;,            other_error =&gt; <span class="built_in">panic!</span>(<span class="string">&quot;파일 열기 실패: &#123;:?&#125;&quot;</span>, other_error),        &#125;,    &#125;;&#125;</code></pre><h3 id="unwrap과-expect"><a href="#unwrap과-expect" class="headerlink" title="unwrap과 expect"></a>unwrap과 expect</h3><h4 id="unwrap-사용"><a href="#unwrap-사용" class="headerlink" title="unwrap 사용"></a>unwrap 사용</h4><pre><code class="highlight rust"><span class="keyword">use</span> std::fs::File;<span class="keyword">fn</span> <span class="title function_">main</span>() &#123;    <span class="keyword">let</span> <span class="variable">f</span> = File::<span class="title function_ invoke__">open</span>(<span class="string">&quot;hello.txt&quot;</span>).<span class="title function_ invoke__">unwrap</span>(); <span class="comment">// 에러 시 패닉</span>&#125;</code></pre><h4 id="expect-사용-더-명확한-에러-메시지"><a href="#expect-사용-더-명확한-에러-메시지" class="headerlink" title="expect 사용 (더 명확한 에러 메시지)"></a>expect 사용 (더 명확한 에러 메시지)</h4><pre><code class="highlight rust"><span class="keyword">use</span> std::fs::File;<span class="keyword">fn</span> <span class="title function_">main</span>() &#123;    <span class="keyword">let</span> <span class="variable">f</span> = File::<span class="title function_ invoke__">open</span>(<span class="string">&quot;hello.txt&quot;</span>).<span class="title function_ invoke__">expect</span>(<span class="string">&quot;hello.txt 파일을 열 수 없습니다&quot;</span>);&#125;</code></pre><h2 id="에러-전파"><a href="#에러-전파" class="headerlink" title="에러 전파"></a>에러 전파</h2><p>함수에서 에러를 호출자에게 전파할 수 있습니다:</p><h3 id="기본-에러-전파"><a href="#기본-에러-전파" class="headerlink" title="기본 에러 전파"></a>기본 에러 전파</h3><pre><code class="highlight rust"><span class="keyword">use</span> std::fs::File;<span class="keyword">use</span> std::io;<span class="keyword">use</span> std::io::Read;<span class="keyword">fn</span> <span class="title function_">read_username_from_file</span>() <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;<span class="type">String</span>, io::Error&gt; &#123;    <span class="keyword">let</span> <span class="variable">f</span> = File::<span class="title function_ invoke__">open</span>(<span class="string">&quot;hello.txt&quot;</span>);        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">f</span> = <span class="keyword">match</span> f &#123;        <span class="title function_ invoke__">Ok</span>(file) =&gt; file,        <span class="title function_ invoke__">Err</span>(e) =&gt; <span class="keyword">return</span> <span class="title function_ invoke__">Err</span>(e),    &#125;;        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">new</span>();        <span class="keyword">match</span> f.<span class="title function_ invoke__">read_to_string</span>(&amp;<span class="keyword">mut</span> s) &#123;        <span class="title function_ invoke__">Ok</span>(_) =&gt; <span class="title function_ invoke__">Ok</span>(s),        <span class="title function_ invoke__">Err</span>(e) =&gt; <span class="title function_ invoke__">Err</span>(e),    &#125;&#125;<span class="keyword">fn</span> <span class="title function_">main</span>() &#123;    <span class="keyword">match</span> <span class="title function_ invoke__">read_username_from_file</span>() &#123;        <span class="title function_ invoke__">Ok</span>(username) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;사용자 이름: &#123;&#125;&quot;</span>, username),        <span class="title function_ invoke__">Err</span>(e) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;에러: &#123;&#125;&quot;</span>, e),    &#125;&#125;</code></pre><h3 id="연산자를-사용한-에러-전파"><a href="#연산자를-사용한-에러-전파" class="headerlink" title="? 연산자를 사용한 에러 전파"></a>? 연산자를 사용한 에러 전파</h3><pre><code class="highlight rust"><span class="keyword">use</span> std::fs::File;<span class="keyword">use</span> std::io;<span class="keyword">use</span> std::io::Read;<span class="keyword">fn</span> <span class="title function_">read_username_from_file</span>() <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;<span class="type">String</span>, io::Error&gt; &#123;    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">f</span> = File::<span class="title function_ invoke__">open</span>(<span class="string">&quot;hello.txt&quot;</span>)?; <span class="comment">// ? 연산자로 에러 전파</span>    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">new</span>();    f.<span class="title function_ invoke__">read_to_string</span>(&amp;<span class="keyword">mut</span> s)?;    <span class="title function_ invoke__">Ok</span>(s)&#125;<span class="comment">// 더 간단한 버전</span><span class="keyword">fn</span> <span class="title function_">read_username_from_file_short</span>() <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;<span class="type">String</span>, io::Error&gt; &#123;    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">new</span>();    File::<span class="title function_ invoke__">open</span>(<span class="string">&quot;hello.txt&quot;</span>)?.<span class="title function_ invoke__">read_to_string</span>(&amp;<span class="keyword">mut</span> s)?;    <span class="title function_ invoke__">Ok</span>(s)&#125;<span class="comment">// 가장 간단한 버전</span><span class="keyword">fn</span> <span class="title function_">read_username_from_file_shortest</span>() <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;<span class="type">String</span>, io::Error&gt; &#123;    std::fs::<span class="title function_ invoke__">read_to_string</span>(<span class="string">&quot;hello.txt&quot;</span>)&#125;</code></pre><h3 id="Option에서-사용"><a href="#Option에서-사용" class="headerlink" title="Option에서 ? 사용"></a>Option에서 ? 사용</h3><pre><code class="highlight rust"><span class="keyword">fn</span> <span class="title function_">last_char_of_first_line</span>(text: &amp;<span class="type">str</span>) <span class="punctuation">-&gt;</span> <span class="type">Option</span>&lt;<span class="type">char</span>&gt; &#123;    text.<span class="title function_ invoke__">lines</span>().<span class="title function_ invoke__">next</span>()?.<span class="title function_ invoke__">chars</span>().<span class="title function_ invoke__">last</span>()&#125;<span class="keyword">fn</span> <span class="title function_">main</span>() &#123;    <span class="keyword">let</span> <span class="variable">text</span> = <span class="string">&quot;Hello\nWorld&quot;</span>;    <span class="keyword">match</span> <span class="title function_ invoke__">last_char_of_first_line</span>(text) &#123;        <span class="title function_ invoke__">Some</span>(ch) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;마지막 문자: &#123;&#125;&quot;</span>, ch),        <span class="literal">None</span> =&gt; <span class="built_in">println!</span>(<span class="string">&quot;문자를 찾을 수 없습니다&quot;</span>),    &#125;&#125;</code></pre><h2 id="커스텀-에러-타입"><a href="#커스텀-에러-타입" class="headerlink" title="커스텀 에러 타입"></a>커스텀 에러 타입</h2><h3 id="간단한-커스텀-에러"><a href="#간단한-커스텀-에러" class="headerlink" title="간단한 커스텀 에러"></a>간단한 커스텀 에러</h3><pre><code class="highlight rust"><span class="keyword">use</span> std::fmt;<span class="meta">#[derive(Debug)]</span><span class="keyword">enum</span> <span class="title class_">MathError</span> &#123;    DivisionByZero,    NegativeSquareRoot,&#125;<span class="keyword">impl</span> <span class="title class_">fmt</span>::Display <span class="keyword">for</span> <span class="title class_">MathError</span> &#123;    <span class="keyword">fn</span> <span class="title function_">fmt</span>(&amp;<span class="keyword">self</span>, f: &amp;<span class="keyword">mut</span> fmt::Formatter) <span class="punctuation">-&gt;</span> fmt::<span class="type">Result</span> &#123;        <span class="keyword">match</span> <span class="keyword">self</span> &#123;            MathError::DivisionByZero =&gt; <span class="built_in">write!</span>(f, <span class="string">&quot;0으로 나눌 수 없습니다&quot;</span>),            MathError::NegativeSquareRoot =&gt; <span class="built_in">write!</span>(f, <span class="string">&quot;음수의 제곱근을 계산할 수 없습니다&quot;</span>),        &#125;    &#125;&#125;<span class="keyword">impl</span> <span class="title class_">std</span>::error::Error <span class="keyword">for</span> <span class="title class_">MathError</span> &#123;&#125;<span class="keyword">fn</span> <span class="title function_">divide</span>(a: <span class="type">f64</span>, b: <span class="type">f64</span>) <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;<span class="type">f64</span>, MathError&gt; &#123;    <span class="keyword">if</span> b == <span class="number">0.0</span> &#123;        <span class="title function_ invoke__">Err</span>(MathError::DivisionByZero)    &#125; <span class="keyword">else</span> &#123;        <span class="title function_ invoke__">Ok</span>(a / b)    &#125;&#125;<span class="keyword">fn</span> <span class="title function_">sqrt</span>(x: <span class="type">f64</span>) <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;<span class="type">f64</span>, MathError&gt; &#123;    <span class="keyword">if</span> x &lt; <span class="number">0.0</span> &#123;        <span class="title function_ invoke__">Err</span>(MathError::NegativeSquareRoot)    &#125; <span class="keyword">else</span> &#123;        <span class="title function_ invoke__">Ok</span>(x.<span class="title function_ invoke__">sqrt</span>())    &#125;&#125;<span class="keyword">fn</span> <span class="title function_">main</span>() &#123;    <span class="built_in">println!</span>(<span class="string">&quot;&#123;:?&#125;&quot;</span>, <span class="title function_ invoke__">divide</span>(<span class="number">10.0</span>, <span class="number">2.0</span>));    <span class="built_in">println!</span>(<span class="string">&quot;&#123;:?&#125;&quot;</span>, <span class="title function_ invoke__">divide</span>(<span class="number">10.0</span>, <span class="number">0.0</span>));    <span class="built_in">println!</span>(<span class="string">&quot;&#123;:?&#125;&quot;</span>, <span class="title function_ invoke__">sqrt</span>(<span class="number">16.0</span>));    <span class="built_in">println!</span>(<span class="string">&quot;&#123;:?&#125;&quot;</span>, <span class="title function_ invoke__">sqrt</span>(-<span class="number">4.0</span>));&#125;</code></pre><h3 id="여러-에러-타입을-처리하는-방법"><a href="#여러-에러-타입을-처리하는-방법" class="headerlink" title="여러 에러 타입을 처리하는 방법"></a>여러 에러 타입을 처리하는 방법</h3><pre><code class="highlight rust"><span class="keyword">use</span> std::fs::File;<span class="keyword">use</span> std::io;<span class="keyword">use</span> std::num::ParseIntError;<span class="keyword">fn</span> <span class="title function_">read_and_parse_number</span>(filename: &amp;<span class="type">str</span>) <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;<span class="type">i32</span>, <span class="type">Box</span>&lt;<span class="keyword">dyn</span> std::error::Error&gt;&gt; &#123;    <span class="keyword">let</span> <span class="variable">contents</span> = std::fs::<span class="title function_ invoke__">read_to_string</span>(filename)?;    <span class="keyword">let</span> <span class="variable">number</span>: <span class="type">i32</span> = contents.<span class="title function_ invoke__">trim</span>().<span class="title function_ invoke__">parse</span>()?;    <span class="title function_ invoke__">Ok</span>(number)&#125;<span class="keyword">fn</span> <span class="title function_">main</span>() &#123;    <span class="keyword">match</span> <span class="title function_ invoke__">read_and_parse_number</span>(<span class="string">&quot;number.txt&quot;</span>) &#123;        <span class="title function_ invoke__">Ok</span>(num) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;숫자: &#123;&#125;&quot;</span>, num),        <span class="title function_ invoke__">Err</span>(e) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;에러: &#123;&#125;&quot;</span>, e),    &#125;&#125;</code></pre><h2 id="실습-예제-계산기-에러-처리"><a href="#실습-예제-계산기-에러-처리" class="headerlink" title="실습 예제: 계산기 에러 처리"></a>실습 예제: 계산기 에러 처리</h2><pre><code class="highlight rust"><span class="keyword">use</span> std::fmt;<span class="meta">#[derive(Debug, PartialEq)]</span><span class="keyword">enum</span> <span class="title class_">CalculatorError</span> &#123;    DivisionByZero,    InvalidOperation,    ParseError,&#125;<span class="keyword">impl</span> <span class="title class_">fmt</span>::Display <span class="keyword">for</span> <span class="title class_">CalculatorError</span> &#123;    <span class="keyword">fn</span> <span class="title function_">fmt</span>(&amp;<span class="keyword">self</span>, f: &amp;<span class="keyword">mut</span> fmt::Formatter) <span class="punctuation">-&gt;</span> fmt::<span class="type">Result</span> &#123;        <span class="keyword">match</span> <span class="keyword">self</span> &#123;            CalculatorError::DivisionByZero =&gt; <span class="built_in">write!</span>(f, <span class="string">&quot;0으로 나눌 수 없습니다&quot;</span>),            CalculatorError::InvalidOperation =&gt; <span class="built_in">write!</span>(f, <span class="string">&quot;잘못된 연산입니다&quot;</span>),            CalculatorError::ParseError =&gt; <span class="built_in">write!</span>(f, <span class="string">&quot;숫자 파싱 오류&quot;</span>),        &#125;    &#125;&#125;<span class="keyword">impl</span> <span class="title class_">std</span>::error::Error <span class="keyword">for</span> <span class="title class_">CalculatorError</span> &#123;&#125;<span class="keyword">struct</span> <span class="title class_">Calculator</span>;<span class="keyword">impl</span> <span class="title class_">Calculator</span> &#123;    <span class="keyword">fn</span> <span class="title function_">new</span>() <span class="punctuation">-&gt;</span> <span class="keyword">Self</span> &#123;        Calculator    &#125;        <span class="keyword">fn</span> <span class="title function_">calculate</span>(&amp;<span class="keyword">self</span>, expression: &amp;<span class="type">str</span>) <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;<span class="type">f64</span>, CalculatorError&gt; &#123;        <span class="keyword">let</span> <span class="variable">parts</span>: <span class="type">Vec</span>&lt;&amp;<span class="type">str</span>&gt; = expression.<span class="title function_ invoke__">split_whitespace</span>().<span class="title function_ invoke__">collect</span>();                <span class="keyword">if</span> parts.<span class="title function_ invoke__">len</span>() != <span class="number">3</span> &#123;            <span class="keyword">return</span> <span class="title function_ invoke__">Err</span>(CalculatorError::InvalidOperation);        &#125;                <span class="keyword">let</span> <span class="variable">left</span>: <span class="type">f64</span> = parts[<span class="number">0</span>].<span class="title function_ invoke__">parse</span>()            .<span class="title function_ invoke__">map_err</span>(|_| CalculatorError::ParseError)?;        <span class="keyword">let</span> <span class="variable">operator</span> = parts[<span class="number">1</span>];        <span class="keyword">let</span> <span class="variable">right</span>: <span class="type">f64</span> = parts[<span class="number">2</span>].<span class="title function_ invoke__">parse</span>()            .<span class="title function_ invoke__">map_err</span>(|_| CalculatorError::ParseError)?;                <span class="keyword">match</span> operator &#123;            <span class="string">&quot;+&quot;</span> =&gt; <span class="title function_ invoke__">Ok</span>(left + right),            <span class="string">&quot;-&quot;</span> =&gt; <span class="title function_ invoke__">Ok</span>(left - right),            <span class="string">&quot;*&quot;</span> =&gt; <span class="title function_ invoke__">Ok</span>(left * right),            <span class="string">&quot;/&quot;</span> =&gt; &#123;                <span class="keyword">if</span> right == <span class="number">0.0</span> &#123;                    <span class="title function_ invoke__">Err</span>(CalculatorError::DivisionByZero)                &#125; <span class="keyword">else</span> &#123;                    <span class="title function_ invoke__">Ok</span>(left / right)                &#125;            &#125;            _ =&gt; <span class="title function_ invoke__">Err</span>(CalculatorError::InvalidOperation),        &#125;    &#125;&#125;<span class="keyword">fn</span> <span class="title function_">main</span>() &#123;    <span class="keyword">let</span> <span class="variable">calc</span> = Calculator::<span class="title function_ invoke__">new</span>();        <span class="keyword">let</span> <span class="variable">expressions</span> = <span class="built_in">vec!</span>[        <span class="string">&quot;10 + 5&quot;</span>,        <span class="string">&quot;20 - 8&quot;</span>,        <span class="string">&quot;6 * 7&quot;</span>,        <span class="string">&quot;15 / 3&quot;</span>,        <span class="string">&quot;10 / 0&quot;</span>,        <span class="string">&quot;abc + 5&quot;</span>,        <span class="string">&quot;10 % 3&quot;</span>,    ];        <span class="keyword">for</span> <span class="variable">expr</span> <span class="keyword">in</span> expressions &#123;        <span class="keyword">match</span> calc.<span class="title function_ invoke__">calculate</span>(expr) &#123;            <span class="title function_ invoke__">Ok</span>(result) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125; = &#123;&#125;&quot;</span>, expr, result),            <span class="title function_ invoke__">Err</span>(e) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;: 에러 - &#123;&#125;&quot;</span>, expr, e),        &#125;    &#125;&#125;</code></pre><h2 id="에러-처리-모범-사례"><a href="#에러-처리-모범-사례" class="headerlink" title="에러 처리 모범 사례"></a>에러 처리 모범 사례</h2><h3 id="1-적절한-에러-타입-선택"><a href="#1-적절한-에러-타입-선택" class="headerlink" title="1. 적절한 에러 타입 선택"></a>1. 적절한 에러 타입 선택</h3><pre><code class="highlight rust"><span class="comment">// 나쁜 예</span><span class="keyword">fn</span> <span class="title function_">risky_function</span>() <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;<span class="type">String</span>, <span class="type">String</span>&gt; &#123;    <span class="comment">// 문자열 에러는 구체적이지 않음</span>    <span class="title function_ invoke__">Err</span>(<span class="string">&quot;뭔가 잘못됐어요&quot;</span>.<span class="title function_ invoke__">to_string</span>())&#125;<span class="comment">// 좋은 예</span><span class="keyword">fn</span> <span class="title function_">risky_function</span>() <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;<span class="type">String</span>, MyError&gt; &#123;    <span class="comment">// 구체적인 에러 타입 사용</span>    <span class="title function_ invoke__">Err</span>(MyError::SpecificProblem)&#125;</code></pre><h3 id="2-에러-컨텍스트-제공"><a href="#2-에러-컨텍스트-제공" class="headerlink" title="2. 에러 컨텍스트 제공"></a>2. 에러 컨텍스트 제공</h3><pre><code class="highlight rust"><span class="keyword">use</span> std::fs::File;<span class="keyword">fn</span> <span class="title function_">read_config</span>() <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;<span class="type">String</span>, <span class="type">Box</span>&lt;<span class="keyword">dyn</span> std::error::Error&gt;&gt; &#123;    <span class="keyword">let</span> <span class="variable">content</span> = std::fs::<span class="title function_ invoke__">read_to_string</span>(<span class="string">&quot;config.txt&quot;</span>)        .<span class="title function_ invoke__">map_err</span>(|e| <span class="built_in">format!</span>(<span class="string">&quot;설정 파일 읽기 실패: &#123;&#125;&quot;</span>, e))?;    <span class="title function_ invoke__">Ok</span>(content)&#125;</code></pre><h3 id="3-조기-반환-활용"><a href="#3-조기-반환-활용" class="headerlink" title="3. 조기 반환 활용"></a>3. 조기 반환 활용</h3><pre><code class="highlight rust"><span class="keyword">fn</span> <span class="title function_">validate_user_input</span>(input: &amp;<span class="type">str</span>) <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;<span class="type">i32</span>, &amp;<span class="symbol">&#x27;static</span> <span class="type">str</span>&gt; &#123;    <span class="keyword">if</span> input.<span class="title function_ invoke__">is_empty</span>() &#123;        <span class="keyword">return</span> <span class="title function_ invoke__">Err</span>(<span class="string">&quot;입력이 비어있습니다&quot;</span>);    &#125;        <span class="keyword">let</span> <span class="variable">number</span>: <span class="type">i32</span> = input.<span class="title function_ invoke__">parse</span>()        .<span class="title function_ invoke__">map_err</span>(|_| <span class="string">&quot;유효한 숫자가 아닙니다&quot;</span>)?;        <span class="keyword">if</span> number &lt; <span class="number">0</span> &#123;        <span class="keyword">return</span> <span class="title function_ invoke__">Err</span>(<span class="string">&quot;음수는 허용되지 않습니다&quot;</span>);    &#125;        <span class="title function_ invoke__">Ok</span>(number)&#125;</code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 Rust의 에러 처리 방법에 대해 알아보았습니다. Rust의 에러 처리는 다른 언어와 달리 컴파일 시점에 에러 처리를 강제하여 더 안전한 프로그램을 만들 수 있게 합니다.<br><code>Result</code> 타입과 <code>?</code> 연산자를 적절히 활용하면 깔끔하고 안전한 에러 처리 코드를 작성할 수 있습니다.<br>다음 시간에는 Rust의 컬렉션에 대해 알아보겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> Rust_기본기 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript Third-Party 라이브러리 타입 정의 문제 해결</title>
      <link href="/typescript/troubleshooting/8/"/>
      <url>/typescript/troubleshooting/8/</url>
      
        <content type="html"><![CDATA[<h1 id="TypeScript-Third-Party-라이브러리-타입-정의-문제-해결"><a href="#TypeScript-Third-Party-라이브러리-타입-정의-문제-해결" class="headerlink" title="TypeScript Third-Party 라이브러리 타입 정의 문제 해결"></a>TypeScript Third-Party 라이브러리 타입 정의 문제 해결</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 TypeScript 프로젝트에서 Third-Party 라이브러리를 사용할 때 발생할 수 있는 타입 정의 문제와 이를 해결하는 방법에 대해 알아보겠습니다.<br>많은 JavaScript 라이브러리들은 TypeScript를 지원하지 않거나, 타입 정의 파일이 불완전할 수 있습니다.<br>이러한 경우 타입 정의 문제를 해결하여 프로젝트의 안정성과 가독성을 높일 수 있습니다.</p><h2 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h2><h3 id="Third-Party-라이브러리와-타입-정의"><a href="#Third-Party-라이브러리와-타입-정의" class="headerlink" title="Third-Party 라이브러리와 타입 정의"></a>Third-Party 라이브러리와 타입 정의</h3><p>TypeScript는 정적 타입 검사를 제공하여 코드의 품질을 높이고, 런타임 오류를 줄이는 데 도움을 줍니다.<br>하지만, Third-Party 라이브러리가 TypeScript를 지원하지 않거나, 제공된 타입 정의 파일이 불완전할 경우, 타입 관련 문제를 해결하기 위해 추가적인 작업이 필요합니다.</p><h3 id="타입-정의-파일이란"><a href="#타입-정의-파일이란" class="headerlink" title="타입 정의 파일이란?"></a>타입 정의 파일이란?</h3><p>타입 정의 파일(<code>.d.ts</code>)은 JavaScript 라이브러리의 타입 정보를 TypeScript에게 알려주는 파일입니다.<br>이를 통해 TypeScript는 해당 라이브러리의 함수, 클래스, 객체 등의 타입을 이해하고 타입 검사를 수행할 수 있습니다.</p><h2 id="문제-상황과-해결-방법"><a href="#문제-상황과-해결-방법" class="headerlink" title="문제 상황과 해결 방법"></a>문제 상황과 해결 방법</h2><h3 id="문제-1-타입-정의-파일이-없는-라이브러리"><a href="#문제-1-타입-정의-파일이-없는-라이브러리" class="headerlink" title="문제 1: 타입 정의 파일이 없는 라이브러리"></a>문제 1: 타입 정의 파일이 없는 라이브러리</h3><h4 id="문제-설명"><a href="#문제-설명" class="headerlink" title="문제 설명"></a>문제 설명</h4><p>어떤 Third-Party 라이브러리는 공식적으로 TypeScript를 지원하지 않아서 타입 정의 파일이 제공되지 않을 수 있습니다.</p><h4 id="해결-방법"><a href="#해결-방법" class="headerlink" title="해결 방법"></a>해결 방법</h4><p>이 경우, TypeScript의 <code>@types</code> 레포지토리에서 해당 라이브러리의 타입 정의 파일을 찾아 설치할 수 있습니다.</p><pre><code class="highlight bash">npm install @types/some-library --save-dev</code></pre><p>만약, <code>@types</code> 레포지토리에서도 타입 정의 파일을 찾을 수 없다면, 타입 정의 파일을 직접 작성해야 합니다.</p><h4 id="예제"><a href="#예제" class="headerlink" title="예제"></a>예제</h4><pre><code class="highlight typescript"><span class="comment">// example-library.d.ts</span><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&quot;example-library&quot;</span> &#123;  <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">exampleFunction</span>(<span class="params"><span class="attr">param</span>: <span class="built_in">string</span></span>): <span class="built_in">void</span>;&#125;<span class="comment">// 사용 예제</span><span class="keyword">import</span> &#123; exampleFunction &#125; <span class="keyword">from</span> <span class="string">&quot;example-library&quot;</span>;<span class="title function_">exampleFunction</span>(<span class="string">&quot;Hello, World!&quot;</span>);</code></pre><h3 id="문제-2-불완전한-타입-정의-파일"><a href="#문제-2-불완전한-타입-정의-파일" class="headerlink" title="문제 2: 불완전한 타입 정의 파일"></a>문제 2: 불완전한 타입 정의 파일</h3><h4 id="문제-설명-1"><a href="#문제-설명-1" class="headerlink" title="문제 설명"></a>문제 설명</h4><p>일부 라이브러리는 타입 정의 파일을 제공하지만, 그 정의가 불완전하거나 최신 버전과 호환되지 않을 수 있습니다.</p><h4 id="해결-방법-1"><a href="#해결-방법-1" class="headerlink" title="해결 방법"></a>해결 방법</h4><p>이 경우, 타입 정의를 보완하거나 수정하기 위해 프로젝트 내에서 타입 선언을 다시 정의할 수 있습니다.</p><h4 id="예제-1"><a href="#예제-1" class="headerlink" title="예제"></a>예제</h4><pre><code class="highlight typescript"><span class="comment">// 불완전한 타입 정의 파일</span><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&quot;example-library&quot;</span> &#123;  <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">exampleFunction</span>(<span class="params"><span class="attr">param</span>: <span class="built_in">string</span></span>): <span class="built_in">void</span>;&#125;<span class="comment">// 타입 보완</span><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&quot;example-library&quot;</span> &#123;  <span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">ExampleOptions</span> &#123;    <span class="attr">option1</span>: <span class="built_in">string</span>;    <span class="attr">option2</span>: <span class="built_in">number</span>;  &#125;  <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">exampleFunction</span>(<span class="params"></span><span class="params">    <span class="attr">param</span>: <span class="built_in">string</span>,</span><span class="params">    options?: <span class="title class_">ExampleOptions</span></span><span class="params">  </span>): <span class="built_in">void</span>;&#125;<span class="comment">// 사용 예제</span><span class="keyword">import</span> &#123; exampleFunction, <span class="title class_">ExampleOptions</span> &#125; <span class="keyword">from</span> <span class="string">&quot;example-library&quot;</span>;<span class="keyword">const</span> <span class="attr">options</span>: <span class="title class_">ExampleOptions</span> = &#123; <span class="attr">option1</span>: <span class="string">&quot;test&quot;</span>, <span class="attr">option2</span>: <span class="number">123</span> &#125;;<span class="title function_">exampleFunction</span>(<span class="string">&quot;Hello, World!&quot;</span>, options);</code></pre><h3 id="문제-3-타입-충돌-문제"><a href="#문제-3-타입-충돌-문제" class="headerlink" title="문제 3: 타입 충돌 문제"></a>문제 3: 타입 충돌 문제</h3><h4 id="문제-설명-2"><a href="#문제-설명-2" class="headerlink" title="문제 설명"></a>문제 설명</h4><p>여러 라이브러리를 사용하는 경우, 동일한 이름의 타입이나 인터페이스가 정의되어 타입 충돌이 발생할 수 있습니다.</p><h4 id="해결-방법-2"><a href="#해결-방법-2" class="headerlink" title="해결 방법"></a>해결 방법</h4><p>타입 충돌 문제를 해결하기 위해, 네임스페이스를 사용하여 타입 정의를 구분할 수 있습니다.</p><h4 id="예제-2"><a href="#예제-2" class="headerlink" title="예제"></a>예제</h4><pre><code class="highlight typescript"><span class="comment">// 타입 충돌 문제 해결</span><span class="keyword">declare</span> <span class="keyword">namespace</span> <span class="title class_">LibraryA</span> &#123;  <span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">User</span> &#123;    <span class="attr">name</span>: <span class="built_in">string</span>;    <span class="attr">age</span>: <span class="built_in">number</span>;  &#125;&#125;<span class="keyword">declare</span> <span class="keyword">namespace</span> <span class="title class_">LibraryB</span> &#123;  <span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">User</span> &#123;    <span class="attr">username</span>: <span class="built_in">string</span>;    <span class="attr">email</span>: <span class="built_in">string</span>;  &#125;&#125;<span class="comment">// 사용 예제</span><span class="keyword">const</span> <span class="attr">userA</span>: <span class="title class_">LibraryA</span>.<span class="property">User</span> = &#123; <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;;<span class="keyword">const</span> <span class="attr">userB</span>: <span class="title class_">LibraryB</span>.<span class="property">User</span> = &#123; <span class="attr">username</span>: <span class="string">&quot;johndoe&quot;</span>, <span class="attr">email</span>: <span class="string">&quot;john@example.com&quot;</span> &#125;;<span class="variable language_">console</span>.<span class="title function_">log</span>(userA);<span class="variable language_">console</span>.<span class="title function_">log</span>(userB);</code></pre><h2 id="실습-예제"><a href="#실습-예제" class="headerlink" title="실습 예제"></a>실습 예제</h2><h3 id="라이브러리-설치-및-타입-정의-추가"><a href="#라이브러리-설치-및-타입-정의-추가" class="headerlink" title="라이브러리 설치 및 타입 정의 추가"></a>라이브러리 설치 및 타입 정의 추가</h3><p>프로젝트에서 <code>example-library</code>라는 가상의 라이브러리를 사용한다고 가정하고, 타입 정의 파일을 작성해보겠습니다.</p><pre><code class="highlight bash">npm install example-library</code></pre><p><strong>example-library.d.ts</strong></p><pre><code class="highlight typescript"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&quot;example-library&quot;</span> &#123;  <span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">ExampleOptions</span> &#123;    <span class="attr">option1</span>: <span class="built_in">string</span>;    <span class="attr">option2</span>: <span class="built_in">number</span>;  &#125;  <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">exampleFunction</span>(<span class="params"></span><span class="params">    <span class="attr">param</span>: <span class="built_in">string</span>,</span><span class="params">    options?: <span class="title class_">ExampleOptions</span></span><span class="params">  </span>): <span class="built_in">void</span>;&#125;</code></pre><p><strong>사용 예제</strong></p><pre><code class="highlight typescript"><span class="comment">// src/index.ts</span><span class="keyword">import</span> &#123; exampleFunction, <span class="title class_">ExampleOptions</span> &#125; <span class="keyword">from</span> <span class="string">&quot;example-library&quot;</span>;<span class="keyword">const</span> <span class="attr">options</span>: <span class="title class_">ExampleOptions</span> = &#123; <span class="attr">option1</span>: <span class="string">&quot;test&quot;</span>, <span class="attr">option2</span>: <span class="number">123</span> &#125;;<span class="title function_">exampleFunction</span>(<span class="string">&quot;Hello, World!&quot;</span>, options);</code></pre><p><strong>빌드 및 실행</strong></p><pre><code class="highlight bash">tscnode dist/index.js</code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 TypeScript 프로젝트에서 Third-Party 라이브러리를 사용할 때 발생할 수 있는 타입 정의 문제와 이를 해결하는 방법에 대해 알아보았습니다.<br>이를 통해 라이브러리의 타입 정의를 명확히 하고, 안정적인 코드를 작성할 수 있습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> TS_트러블슈팅 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Rust 구조체와 열거형</title>
      <link href="/rust/basic/5/"/>
      <url>/rust/basic/5/</url>
      
        <content type="html"><![CDATA[<h1 id="Rust-구조체와-열거형"><a href="#Rust-구조체와-열거형" class="headerlink" title="Rust 구조체와 열거형"></a>Rust 구조체와 열거형</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 Rust의 구조체(Struct)와 열거형(Enum)에 대해 알아보겠습니다.<br>구조체와 열거형은 데이터를 구조화하고 관련된 데이터를 그룹화하는 데 사용되는 중요한 도구입니다.</p><h2 id="구조체-Struct"><a href="#구조체-Struct" class="headerlink" title="구조체(Struct)"></a>구조체(Struct)</h2><p>구조체는 여러 관련된 값들을 하나의 의미있는 그룹으로 묶는 방법입니다. 마치 양식서에 여러 항목을 채우는 것과 같습니다.</p><h3 id="기본-구조체-정의와-사용"><a href="#기본-구조체-정의와-사용" class="headerlink" title="기본 구조체 정의와 사용"></a>기본 구조체 정의와 사용</h3><pre><code class="highlight rust"><span class="keyword">struct</span> <span class="title class_">User</span> &#123;    username: <span class="type">String</span>,    email: <span class="type">String</span>,    sign_in_count: <span class="type">u64</span>,    active: <span class="type">bool</span>,&#125;<span class="keyword">fn</span> <span class="title function_">main</span>() &#123;    <span class="keyword">let</span> <span class="variable">user1</span> = User &#123;        email: <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;someone@example.com&quot;</span>),        username: <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;someusername123&quot;</span>),        active: <span class="literal">true</span>,        sign_in_count: <span class="number">1</span>,    &#125;;        <span class="built_in">println!</span>(<span class="string">&quot;사용자 이름: &#123;&#125;&quot;</span>, user1.username);    <span class="built_in">println!</span>(<span class="string">&quot;이메일: &#123;&#125;&quot;</span>, user1.email);&#125;</code></pre><h3 id="가변-구조체"><a href="#가변-구조체" class="headerlink" title="가변 구조체"></a>가변 구조체</h3><p>구조체의 필드를 수정하려면 전체 인스턴스가 가변이어야 합니다:</p><pre><code class="highlight rust"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">user1</span> = User &#123;        email: <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;someone@example.com&quot;</span>),        username: <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;someusername123&quot;</span>),        active: <span class="literal">true</span>,        sign_in_count: <span class="number">1</span>,    &#125;;        user1.email = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;anotheremail@example.com&quot;</span>);    user1.sign_in_count += <span class="number">1</span>;        <span class="built_in">println!</span>(<span class="string">&quot;새 이메일: &#123;&#125;&quot;</span>, user1.email);    <span class="built_in">println!</span>(<span class="string">&quot;로그인 횟수: &#123;&#125;&quot;</span>, user1.sign_in_count);&#125;</code></pre><h3 id="구조체-생성-함수"><a href="#구조체-생성-함수" class="headerlink" title="구조체 생성 함수"></a>구조체 생성 함수</h3><pre><code class="highlight rust"><span class="keyword">fn</span> <span class="title function_">build_user</span>(email: <span class="type">String</span>, username: <span class="type">String</span>) <span class="punctuation">-&gt;</span> User &#123;    User &#123;        email,          <span class="comment">// 필드 이름과 매개변수 이름이 같으면 축약 가능</span>        username,       <span class="comment">// username: username과 동일</span>        active: <span class="literal">true</span>,        sign_in_count: <span class="number">1</span>,    &#125;&#125;<span class="keyword">fn</span> <span class="title function_">main</span>() &#123;    <span class="keyword">let</span> <span class="variable">user1</span> = <span class="title function_ invoke__">build_user</span>(        <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;someone@example.com&quot;</span>),        <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;someusername123&quot;</span>),    );        <span class="built_in">println!</span>(<span class="string">&quot;사용자: &#123;&#125;&quot;</span>, user1.username);&#125;</code></pre><h3 id="구조체-업데이트-문법"><a href="#구조체-업데이트-문법" class="headerlink" title="구조체 업데이트 문법"></a>구조체 업데이트 문법</h3><p>기존 구조체의 일부 필드만 변경하여 새로운 구조체를 만들 수 있습니다:</p><pre><code class="highlight rust"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;    <span class="keyword">let</span> <span class="variable">user1</span> = User &#123;        email: <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;someone@example.com&quot;</span>),        username: <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;someusername123&quot;</span>),        active: <span class="literal">true</span>,        sign_in_count: <span class="number">1</span>,    &#125;;        <span class="keyword">let</span> <span class="variable">user2</span> = User &#123;        email: <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;another@example.com&quot;</span>),        username: <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;anotherusername567&quot;</span>),        ..user1  <span class="comment">// 나머지 필드는 user1과 동일</span>    &#125;;        <span class="comment">// user1은 더 이상 사용 불가 (String 필드가 이동됨)</span>    <span class="built_in">println!</span>(<span class="string">&quot;user2 활성: &#123;&#125;&quot;</span>, user2.active);&#125;</code></pre><h3 id="튜플-구조체"><a href="#튜플-구조체" class="headerlink" title="튜플 구조체"></a>튜플 구조체</h3><p>필드 이름 없이 타입만 있는 구조체입니다:</p><pre><code class="highlight rust"><span class="keyword">struct</span> <span class="title class_">Color</span>(<span class="type">i32</span>, <span class="type">i32</span>, <span class="type">i32</span>);<span class="keyword">struct</span> <span class="title class_">Point</span>(<span class="type">i32</span>, <span class="type">i32</span>, <span class="type">i32</span>);<span class="keyword">fn</span> <span class="title function_">main</span>() &#123;    <span class="keyword">let</span> <span class="variable">black</span> = <span class="title function_ invoke__">Color</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);    <span class="keyword">let</span> <span class="variable">origin</span> = <span class="title function_ invoke__">Point</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);        <span class="built_in">println!</span>(<span class="string">&quot;검은색: (&#123;&#125;, &#123;&#125;, &#123;&#125;)&quot;</span>, black.<span class="number">0</span>, black.<span class="number">1</span>, black.<span class="number">2</span>);    <span class="built_in">println!</span>(<span class="string">&quot;원점: (&#123;&#125;, &#123;&#125;, &#123;&#125;)&quot;</span>, origin.<span class="number">0</span>, origin.<span class="number">1</span>, origin.<span class="number">2</span>);&#125;</code></pre><h3 id="메서드-구현"><a href="#메서드-구현" class="headerlink" title="메서드 구현"></a>메서드 구현</h3><p>구조체에 메서드를 추가할 수 있습니다:</p><pre><code class="highlight rust"><span class="keyword">struct</span> <span class="title class_">Rectangle</span> &#123;    width: <span class="type">u32</span>,    height: <span class="type">u32</span>,&#125;<span class="keyword">impl</span> <span class="title class_">Rectangle</span> &#123;    <span class="comment">// 메서드 (첫 번째 매개변수가 &amp;self)</span>    <span class="keyword">fn</span> <span class="title function_">area</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">u32</span> &#123;        <span class="keyword">self</span>.width * <span class="keyword">self</span>.height    &#125;        <span class="keyword">fn</span> <span class="title function_">can_hold</span>(&amp;<span class="keyword">self</span>, other: &amp;Rectangle) <span class="punctuation">-&gt;</span> <span class="type">bool</span> &#123;        <span class="keyword">self</span>.width &gt; other.width &amp;&amp; <span class="keyword">self</span>.height &gt; other.height    &#125;        <span class="comment">// 연관 함수 (첫 번째 매개변수가 self가 아님)</span>    <span class="keyword">fn</span> <span class="title function_">square</span>(size: <span class="type">u32</span>) <span class="punctuation">-&gt;</span> Rectangle &#123;        Rectangle &#123;            width: size,            height: size,        &#125;    &#125;&#125;<span class="keyword">fn</span> <span class="title function_">main</span>() &#123;    <span class="keyword">let</span> <span class="variable">rect1</span> = Rectangle &#123;        width: <span class="number">30</span>,        height: <span class="number">50</span>,    &#125;;        <span class="keyword">let</span> <span class="variable">rect2</span> = Rectangle &#123;        width: <span class="number">10</span>,        height: <span class="number">40</span>,    &#125;;        <span class="keyword">let</span> <span class="variable">square</span> = Rectangle::<span class="title function_ invoke__">square</span>(<span class="number">25</span>);        <span class="built_in">println!</span>(<span class="string">&quot;rect1의 면적: &#123;&#125;&quot;</span>, rect1.<span class="title function_ invoke__">area</span>());    <span class="built_in">println!</span>(<span class="string">&quot;rect1이 rect2를 포함할 수 있는가? &#123;&#125;&quot;</span>, rect1.<span class="title function_ invoke__">can_hold</span>(&amp;rect2));    <span class="built_in">println!</span>(<span class="string">&quot;정사각형의 면적: &#123;&#125;&quot;</span>, square.<span class="title function_ invoke__">area</span>());&#125;</code></pre><h2 id="열거형-Enum"><a href="#열거형-Enum" class="headerlink" title="열거형(Enum)"></a>열거형(Enum)</h2><p>열거형은 여러 변형(variant) 중 하나의 값을 가질 수 있는 타입입니다. 마치 선택지가 있는 설문조사와 같습니다.</p><h3 id="기본-열거형"><a href="#기본-열거형" class="headerlink" title="기본 열거형"></a>기본 열거형</h3><pre><code class="highlight rust"><span class="keyword">enum</span> <span class="title class_">IpAddrKind</span> &#123;    V4,    V6,&#125;<span class="keyword">fn</span> <span class="title function_">main</span>() &#123;    <span class="keyword">let</span> <span class="variable">four</span> = IpAddrKind::V4;    <span class="keyword">let</span> <span class="variable">six</span> = IpAddrKind::V6;        <span class="title function_ invoke__">route</span>(four);    <span class="title function_ invoke__">route</span>(six);&#125;<span class="keyword">fn</span> <span class="title function_">route</span>(ip_kind: IpAddrKind) &#123;    <span class="keyword">match</span> ip_kind &#123;        IpAddrKind::V4 =&gt; <span class="built_in">println!</span>(<span class="string">&quot;IPv4 주소&quot;</span>),        IpAddrKind::V6 =&gt; <span class="built_in">println!</span>(<span class="string">&quot;IPv6 주소&quot;</span>),    &#125;&#125;</code></pre><h3 id="데이터를-포함하는-열거형"><a href="#데이터를-포함하는-열거형" class="headerlink" title="데이터를 포함하는 열거형"></a>데이터를 포함하는 열거형</h3><pre><code class="highlight rust"><span class="keyword">enum</span> <span class="title class_">IpAddr</span> &#123;    <span class="title function_ invoke__">V4</span>(<span class="type">u8</span>, <span class="type">u8</span>, <span class="type">u8</span>, <span class="type">u8</span>),    <span class="title function_ invoke__">V6</span>(<span class="type">String</span>),&#125;<span class="keyword">fn</span> <span class="title function_">main</span>() &#123;    <span class="keyword">let</span> <span class="variable">home</span> = IpAddr::<span class="title function_ invoke__">V4</span>(<span class="number">127</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>);    <span class="keyword">let</span> <span class="variable">loopback</span> = IpAddr::<span class="title function_ invoke__">V6</span>(<span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;::1&quot;</span>));        <span class="keyword">match</span> home &#123;        IpAddr::<span class="title function_ invoke__">V4</span>(a, b, c, d) =&gt; &#123;            <span class="built_in">println!</span>(<span class="string">&quot;IPv4 주소: &#123;&#125;.&#123;&#125;.&#123;&#125;.&#123;&#125;&quot;</span>, a, b, c, d);        &#125;        IpAddr::<span class="title function_ invoke__">V6</span>(addr) =&gt; &#123;            <span class="built_in">println!</span>(<span class="string">&quot;IPv6 주소: &#123;&#125;&quot;</span>, addr);        &#125;    &#125;&#125;</code></pre><h3 id="다양한-타입을-포함하는-열거형"><a href="#다양한-타입을-포함하는-열거형" class="headerlink" title="다양한 타입을 포함하는 열거형"></a>다양한 타입을 포함하는 열거형</h3><pre><code class="highlight rust"><span class="keyword">enum</span> <span class="title class_">Message</span> &#123;    Quit,    Move &#123; x: <span class="type">i32</span>, y: <span class="type">i32</span> &#125;,    <span class="title function_ invoke__">Write</span>(<span class="type">String</span>),    <span class="title function_ invoke__">ChangeColor</span>(<span class="type">i32</span>, <span class="type">i32</span>, <span class="type">i32</span>),&#125;<span class="keyword">impl</span> <span class="title class_">Message</span> &#123;    <span class="keyword">fn</span> <span class="title function_">call</span>(&amp;<span class="keyword">self</span>) &#123;        <span class="keyword">match</span> <span class="keyword">self</span> &#123;            Message::Quit =&gt; <span class="built_in">println!</span>(<span class="string">&quot;종료&quot;</span>),            Message::Move &#123; x, y &#125; =&gt; <span class="built_in">println!</span>(<span class="string">&quot;이동: (&#123;&#125;, &#123;&#125;)&quot;</span>, x, y),            Message::<span class="title function_ invoke__">Write</span>(text) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;메시지: &#123;&#125;&quot;</span>, text),            Message::<span class="title function_ invoke__">ChangeColor</span>(r, g, b) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;색상 변경: (&#123;&#125;, &#123;&#125;, &#123;&#125;)&quot;</span>, r, g, b),        &#125;    &#125;&#125;<span class="keyword">fn</span> <span class="title function_">main</span>() &#123;    <span class="keyword">let</span> <span class="variable">msg1</span> = Message::Quit;    <span class="keyword">let</span> <span class="variable">msg2</span> = Message::Move &#123; x: <span class="number">10</span>, y: <span class="number">20</span> &#125;;    <span class="keyword">let</span> <span class="variable">msg3</span> = Message::<span class="title function_ invoke__">Write</span>(<span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;안녕하세요&quot;</span>));    <span class="keyword">let</span> <span class="variable">msg4</span> = Message::<span class="title function_ invoke__">ChangeColor</span>(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>);        msg1.<span class="title function_ invoke__">call</span>();    msg2.<span class="title function_ invoke__">call</span>();    msg3.<span class="title function_ invoke__">call</span>();    msg4.<span class="title function_ invoke__">call</span>();&#125;</code></pre><h3 id="Option-열거형"><a href="#Option-열거형" class="headerlink" title="Option 열거형"></a>Option 열거형</h3><p>Rust에서는 null 값 대신 <code>Option</code> 열거형을 사용합니다:</p><pre><code class="highlight rust"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;    <span class="keyword">let</span> <span class="variable">some_number</span> = <span class="title function_ invoke__">Some</span>(<span class="number">5</span>);    <span class="keyword">let</span> <span class="variable">some_string</span> = <span class="title function_ invoke__">Some</span>(<span class="string">&quot;문자열&quot;</span>);    <span class="keyword">let</span> <span class="variable">absent_number</span>: <span class="type">Option</span>&lt;<span class="type">i32</span>&gt; = <span class="literal">None</span>;        <span class="comment">// Option 값을 안전하게 처리</span>    <span class="keyword">match</span> some_number &#123;        <span class="title function_ invoke__">Some</span>(value) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;값이 있습니다: &#123;&#125;&quot;</span>, value),        <span class="literal">None</span> =&gt; <span class="built_in">println!</span>(<span class="string">&quot;값이 없습니다&quot;</span>),    &#125;        <span class="comment">// if let 사용</span>    <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>(value) = some_string &#123;        <span class="built_in">println!</span>(<span class="string">&quot;문자열 값: &#123;&#125;&quot;</span>, value);    &#125;        <span class="comment">// unwrap_or 사용</span>    <span class="keyword">let</span> <span class="variable">number</span> = absent_number.<span class="title function_ invoke__">unwrap_or</span>(<span class="number">0</span>);    <span class="built_in">println!</span>(<span class="string">&quot;기본값 적용: &#123;&#125;&quot;</span>, number);&#125;</code></pre><h2 id="패턴-매칭"><a href="#패턴-매칭" class="headerlink" title="패턴 매칭"></a>패턴 매칭</h2><h3 id="match-표현식"><a href="#match-표현식" class="headerlink" title="match 표현식"></a>match 표현식</h3><pre><code class="highlight rust"><span class="keyword">enum</span> <span class="title class_">Coin</span> &#123;    Penny,    Nickel,    Dime,    Quarter,&#125;<span class="keyword">fn</span> <span class="title function_">value_in_cents</span>(coin: Coin) <span class="punctuation">-&gt;</span> <span class="type">u8</span> &#123;    <span class="keyword">match</span> coin &#123;        Coin::Penny =&gt; &#123;            <span class="built_in">println!</span>(<span class="string">&quot;1센트 동전!&quot;</span>);            <span class="number">1</span>        &#125;        Coin::Nickel =&gt; <span class="number">5</span>,        Coin::Dime =&gt; <span class="number">10</span>,        Coin::Quarter =&gt; <span class="number">25</span>,    &#125;&#125;<span class="keyword">fn</span> <span class="title function_">main</span>() &#123;    <span class="keyword">let</span> <span class="variable">coin</span> = Coin::Penny;    <span class="built_in">println!</span>(<span class="string">&quot;동전 값: &#123;&#125;센트&quot;</span>, <span class="title function_ invoke__">value_in_cents</span>(coin));&#125;</code></pre><h3 id="if-let-제어-흐름"><a href="#if-let-제어-흐름" class="headerlink" title="if let 제어 흐름"></a>if let 제어 흐름</h3><pre><code class="highlight rust"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;    <span class="keyword">let</span> <span class="variable">some_u8_value</span> = <span class="title function_ invoke__">Some</span>(<span class="number">0u8</span>);        <span class="comment">// match 사용</span>    <span class="keyword">match</span> some_u8_value &#123;        <span class="title function_ invoke__">Some</span>(<span class="number">3</span>) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;3입니다&quot;</span>),        _ =&gt; (),    &#125;        <span class="comment">// if let 사용 (더 간단)</span>    <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>(<span class="number">3</span>) = some_u8_value &#123;        <span class="built_in">println!</span>(<span class="string">&quot;3입니다&quot;</span>);    &#125;        <span class="comment">// while let 사용</span>    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">stack</span> = <span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];    <span class="keyword">while</span> <span class="keyword">let</span> <span class="variable">Some</span>(top) = stack.<span class="title function_ invoke__">pop</span>() &#123;        <span class="built_in">println!</span>(<span class="string">&quot;스택에서 제거: &#123;&#125;&quot;</span>, top);    &#125;&#125;</code></pre><h2 id="실습-예제-게임-캐릭터-시스템"><a href="#실습-예제-게임-캐릭터-시스템" class="headerlink" title="실습 예제: 게임 캐릭터 시스템"></a>실습 예제: 게임 캐릭터 시스템</h2><pre><code class="highlight rust"><span class="comment">// 캐릭터 클래스</span><span class="meta">#[derive(Debug)]</span><span class="keyword">enum</span> <span class="title class_">CharacterClass</span> &#123;    Warrior,    Mage,    Archer,    Rogue,&#125;<span class="comment">// 아이템 타입</span><span class="meta">#[derive(Debug)]</span><span class="keyword">enum</span> <span class="title class_">Item</span> &#123;    Weapon &#123; name: <span class="type">String</span>, damage: <span class="type">u32</span> &#125;,    Armor &#123; name: <span class="type">String</span>, defense: <span class="type">u32</span> &#125;,    Potion &#123; name: <span class="type">String</span>, heal_amount: <span class="type">u32</span> &#125;,&#125;<span class="comment">// 캐릭터 구조체</span><span class="meta">#[derive(Debug)]</span><span class="keyword">struct</span> <span class="title class_">Character</span> &#123;    name: <span class="type">String</span>,    class: CharacterClass,    level: <span class="type">u32</span>,    hp: <span class="type">u32</span>,    mp: <span class="type">u32</span>,    inventory: <span class="type">Vec</span>&lt;Item&gt;,&#125;<span class="keyword">impl</span> <span class="title class_">Character</span> &#123;    <span class="keyword">fn</span> <span class="title function_">new</span>(name: <span class="type">String</span>, class: CharacterClass) <span class="punctuation">-&gt;</span> Character &#123;        <span class="keyword">let</span> (base_hp, base_mp) = <span class="keyword">match</span> class &#123;            CharacterClass::Warrior =&gt; (<span class="number">100</span>, <span class="number">30</span>),            CharacterClass::Mage =&gt; (<span class="number">70</span>, <span class="number">100</span>),            CharacterClass::Archer =&gt; (<span class="number">80</span>, <span class="number">50</span>),            CharacterClass::Rogue =&gt; (<span class="number">90</span>, <span class="number">40</span>),        &#125;;                Character &#123;            name,            class,            level: <span class="number">1</span>,            hp: base_hp,            mp: base_mp,            inventory: <span class="type">Vec</span>::<span class="title function_ invoke__">new</span>(),        &#125;    &#125;        <span class="keyword">fn</span> <span class="title function_">add_item</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, item: Item) &#123;        <span class="keyword">self</span>.inventory.<span class="title function_ invoke__">push</span>(item);    &#125;        <span class="keyword">fn</span> <span class="title function_">use_item</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, item_name: &amp;<span class="type">str</span>) <span class="punctuation">-&gt;</span> <span class="type">Option</span>&lt;<span class="type">String</span>&gt; &#123;        <span class="keyword">for</span> (i, item) <span class="keyword">in</span> <span class="keyword">self</span>.inventory.<span class="title function_ invoke__">iter</span>().<span class="title function_ invoke__">enumerate</span>() &#123;            <span class="keyword">match</span> item &#123;                Item::Potion &#123; name, heal_amount &#125; <span class="keyword">if</span> name == item_name =&gt; &#123;                    <span class="keyword">self</span>.hp = (<span class="keyword">self</span>.hp + heal_amount).<span class="title function_ invoke__">min</span>(<span class="keyword">self</span>.<span class="title function_ invoke__">max_hp</span>());                    <span class="keyword">let</span> <span class="variable">used_item</span> = <span class="keyword">self</span>.inventory.<span class="title function_ invoke__">remove</span>(i);                    <span class="keyword">return</span> <span class="title function_ invoke__">Some</span>(<span class="built_in">format!</span>(<span class="string">&quot;&#123;&#125;을(를) 사용하여 &#123;&#125;만큼 회복했습니다&quot;</span>, name, heal_amount));                &#125;                _ =&gt; <span class="keyword">continue</span>,            &#125;        &#125;        <span class="literal">None</span>    &#125;        <span class="keyword">fn</span> <span class="title function_">max_hp</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">u32</span> &#123;        <span class="keyword">match</span> <span class="keyword">self</span>.class &#123;            CharacterClass::Warrior =&gt; <span class="number">100</span> + (<span class="keyword">self</span>.level - <span class="number">1</span>) * <span class="number">10</span>,            CharacterClass::Mage =&gt; <span class="number">70</span> + (<span class="keyword">self</span>.level - <span class="number">1</span>) * <span class="number">5</span>,            CharacterClass::Archer =&gt; <span class="number">80</span> + (<span class="keyword">self</span>.level - <span class="number">1</span>) * <span class="number">7</span>,            CharacterClass::Rogue =&gt; <span class="number">90</span> + (<span class="keyword">self</span>.level - <span class="number">1</span>) * <span class="number">8</span>,        &#125;    &#125;&#125;<span class="keyword">fn</span> <span class="title function_">main</span>() &#123;    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">character</span> = Character::<span class="title function_ invoke__">new</span>(<span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;홍길동&quot;</span>), CharacterClass::Warrior);        <span class="built_in">println!</span>(<span class="string">&quot;캐릭터 정보: &#123;:?&#125;&quot;</span>, character);        <span class="comment">// 아이템 추가</span>    character.<span class="title function_ invoke__">add_item</span>(Item::Weapon &#123;         name: <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;강철 검&quot;</span>),         damage: <span class="number">50</span>     &#125;);    character.<span class="title function_ invoke__">add_item</span>(Item::Potion &#123;         name: <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;체력 물약&quot;</span>),         heal_amount: <span class="number">30</span>     &#125;);        <span class="comment">// 아이템 사용</span>    <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>(message) = character.<span class="title function_ invoke__">use_item</span>(<span class="string">&quot;체력 물약&quot;</span>) &#123;        <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, message);    &#125;        <span class="built_in">println!</span>(<span class="string">&quot;최종 캐릭터 정보: &#123;:?&#125;&quot;</span>, character);&#125;</code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 Rust의 구조체와 열거형에 대해 알아보았습니다. 구조체는 관련된 데이터를 그룹화하고, 열거형은 여러 선택지 중 하나를 표현하는 데 사용됩니다.<br>특히 Rust의 패턴 매칭 시스템은 안전하고 강력한 데이터 처리를 가능하게 합니다.<br>다음 시간에는 Rust의 에러 처리 방법에 대해 알아보겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> Rust_기본기 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Rust 함수와 제어문</title>
      <link href="/rust/basic/4/"/>
      <url>/rust/basic/4/</url>
      
        <content type="html"><![CDATA[<h1 id="Rust-함수와-제어문"><a href="#Rust-함수와-제어문" class="headerlink" title="Rust 함수와 제어문"></a>Rust 함수와 제어문</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 Rust의 함수와 제어문에 대해 알아보겠습니다.<br>함수와 제어문은 프로그래밍의 기본 구성 요소로, 코드의 재사용성과 흐름 제어를 담당합니다.</p><h2 id="함수-Functions"><a href="#함수-Functions" class="headerlink" title="함수(Functions)"></a>함수(Functions)</h2><h3 id="기본-함수-선언"><a href="#기본-함수-선언" class="headerlink" title="기본 함수 선언"></a>기본 함수 선언</h3><p>Rust에서 함수는 <code>fn</code> 키워드로 선언합니다:</p><pre><code class="highlight rust"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;    <span class="built_in">println!</span>(<span class="string">&quot;Hello, world!&quot;</span>);    <span class="title function_ invoke__">greet</span>();&#125;<span class="keyword">fn</span> <span class="title function_">greet</span>() &#123;    <span class="built_in">println!</span>(<span class="string">&quot;안녕하세요!&quot;</span>);&#125;</code></pre><h3 id="매개변수가-있는-함수"><a href="#매개변수가-있는-함수" class="headerlink" title="매개변수가 있는 함수"></a>매개변수가 있는 함수</h3><p>함수에 매개변수를 전달할 때는 반드시 타입을 명시해야 합니다:</p><pre><code class="highlight rust"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;    <span class="title function_ invoke__">introduce</span>(<span class="string">&quot;김철수&quot;</span>, <span class="number">25</span>);    <span class="keyword">let</span> <span class="variable">result</span> = <span class="title function_ invoke__">add</span>(<span class="number">5</span>, <span class="number">10</span>);    <span class="built_in">println!</span>(<span class="string">&quot;5 + 10 = &#123;&#125;&quot;</span>, result);&#125;<span class="keyword">fn</span> <span class="title function_">introduce</span>(name: &amp;<span class="type">str</span>, age: <span class="type">i32</span>) &#123;    <span class="built_in">println!</span>(<span class="string">&quot;안녕하세요, 저는 &#123;&#125;이고 &#123;&#125;살입니다.&quot;</span>, name, age);&#125;<span class="keyword">fn</span> <span class="title function_">add</span>(x: <span class="type">i32</span>, y: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;    x + y  <span class="comment">// 세미콜론 없이 반환</span>&#125;</code></pre><h3 id="반환값"><a href="#반환값" class="headerlink" title="반환값"></a>반환값</h3><p>함수의 반환값은 화살표(<code>-&gt;</code>)로 표시하며, 마지막 표현식이 반환값이 됩니다:</p><pre><code class="highlight rust"><span class="keyword">fn</span> <span class="title function_">multiply</span>(x: <span class="type">i32</span>, y: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;    x * y  <span class="comment">// 세미콜론이 없으면 반환값</span>&#125;<span class="keyword">fn</span> <span class="title function_">divide</span>(x: <span class="type">f64</span>, y: <span class="type">f64</span>) <span class="punctuation">-&gt;</span> <span class="type">f64</span> &#123;    <span class="keyword">if</span> y != <span class="number">0.0</span> &#123;        x / y    &#125; <span class="keyword">else</span> &#123;        <span class="number">0.0</span>    &#125;&#125;<span class="comment">// 명시적 반환</span><span class="keyword">fn</span> <span class="title function_">subtract</span>(x: <span class="type">i32</span>, y: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;    <span class="keyword">return</span> x - y;  <span class="comment">// return 키워드 사용</span>&#125;</code></pre><h3 id="표현식-vs-구문"><a href="#표현식-vs-구문" class="headerlink" title="표현식 vs 구문"></a>표현식 vs 구문</h3><p>Rust에서는 표현식(Expression)과 구문(Statement)을 구분합니다:</p><pre><code class="highlight rust"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;    <span class="keyword">let</span> <span class="variable">x</span> = <span class="number">5</span>;  <span class="comment">// 구문 (Statement)</span>        <span class="keyword">let</span> <span class="variable">y</span> = &#123;        <span class="keyword">let</span> <span class="variable">x</span> = <span class="number">3</span>;        x + <span class="number">1</span>  <span class="comment">// 표현식 (Expression), 4를 반환</span>    &#125;;        <span class="built_in">println!</span>(<span class="string">&quot;y의 값: &#123;&#125;&quot;</span>, y);  <span class="comment">// 4</span>&#125;</code></pre><h2 id="조건문-if-else"><a href="#조건문-if-else" class="headerlink" title="조건문 (if&#x2F;else)"></a>조건문 (if&#x2F;else)</h2><h3 id="기본-if-문"><a href="#기본-if-문" class="headerlink" title="기본 if 문"></a>기본 if 문</h3><pre><code class="highlight rust"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;    <span class="keyword">let</span> <span class="variable">number</span> = <span class="number">7</span>;        <span class="keyword">if</span> number &lt; <span class="number">5</span> &#123;        <span class="built_in">println!</span>(<span class="string">&quot;조건이 참입니다&quot;</span>);    &#125; <span class="keyword">else</span> &#123;        <span class="built_in">println!</span>(<span class="string">&quot;조건이 거짓입니다&quot;</span>);    &#125;&#125;</code></pre><h3 id="else-if-문"><a href="#else-if-문" class="headerlink" title="else if 문"></a>else if 문</h3><pre><code class="highlight rust"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;    <span class="keyword">let</span> <span class="variable">number</span> = <span class="number">6</span>;        <span class="keyword">if</span> number % <span class="number">4</span> == <span class="number">0</span> &#123;        <span class="built_in">println!</span>(<span class="string">&quot;4로 나누어떨어집니다&quot;</span>);    &#125; <span class="keyword">else</span> <span class="keyword">if</span> number % <span class="number">3</span> == <span class="number">0</span> &#123;        <span class="built_in">println!</span>(<span class="string">&quot;3으로 나누어떨어집니다&quot;</span>);    &#125; <span class="keyword">else</span> <span class="keyword">if</span> number % <span class="number">2</span> == <span class="number">0</span> &#123;        <span class="built_in">println!</span>(<span class="string">&quot;2로 나누어떨어집니다&quot;</span>);    &#125; <span class="keyword">else</span> &#123;        <span class="built_in">println!</span>(<span class="string">&quot;4, 3, 2로 나누어떨어지지 않습니다&quot;</span>);    &#125;&#125;</code></pre><h3 id="if를-표현식으로-사용"><a href="#if를-표현식으로-사용" class="headerlink" title="if를 표현식으로 사용"></a>if를 표현식으로 사용</h3><pre><code class="highlight rust"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;    <span class="keyword">let</span> <span class="variable">condition</span> = <span class="literal">true</span>;    <span class="keyword">let</span> <span class="variable">number</span> = <span class="keyword">if</span> condition &#123; <span class="number">5</span> &#125; <span class="keyword">else</span> &#123; <span class="number">6</span> &#125;;        <span class="built_in">println!</span>(<span class="string">&quot;number의 값: &#123;&#125;&quot;</span>, number);        <span class="comment">// 함수에서도 사용 가능</span>    <span class="keyword">let</span> <span class="variable">result</span> = <span class="title function_ invoke__">get_max</span>(<span class="number">10</span>, <span class="number">20</span>);    <span class="built_in">println!</span>(<span class="string">&quot;최대값: &#123;&#125;&quot;</span>, result);&#125;<span class="keyword">fn</span> <span class="title function_">get_max</span>(a: <span class="type">i32</span>, b: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;    <span class="keyword">if</span> a &gt; b &#123; a &#125; <span class="keyword">else</span> &#123; b &#125;&#125;</code></pre><h2 id="반복문-Loops"><a href="#반복문-Loops" class="headerlink" title="반복문 (Loops)"></a>반복문 (Loops)</h2><h3 id="loop-문"><a href="#loop-문" class="headerlink" title="loop 문"></a>loop 문</h3><p><code>loop</code>는 무한 반복을 실행합니다:</p><pre><code class="highlight rust"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">counter</span> = <span class="number">0</span>;        <span class="keyword">loop</span> &#123;        counter += <span class="number">1</span>;        <span class="built_in">println!</span>(<span class="string">&quot;counter: &#123;&#125;&quot;</span>, counter);                <span class="keyword">if</span> counter == <span class="number">5</span> &#123;            <span class="keyword">break</span>;  <span class="comment">// 반복 종료</span>        &#125;    &#125;&#125;</code></pre><h3 id="loop에서-값-반환"><a href="#loop에서-값-반환" class="headerlink" title="loop에서 값 반환"></a>loop에서 값 반환</h3><p><code>loop</code>에서 <code>break</code>와 함께 값을 반환할 수 있습니다:</p><pre><code class="highlight rust"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">counter</span> = <span class="number">0</span>;        <span class="keyword">let</span> <span class="variable">result</span> = <span class="keyword">loop</span> &#123;        counter += <span class="number">1</span>;                <span class="keyword">if</span> counter == <span class="number">10</span> &#123;            <span class="keyword">break</span> counter * <span class="number">2</span>;  <span class="comment">// 20을 반환</span>        &#125;    &#125;;        <span class="built_in">println!</span>(<span class="string">&quot;결과: &#123;&#125;&quot;</span>, result);&#125;</code></pre><h3 id="while-문"><a href="#while-문" class="headerlink" title="while 문"></a>while 문</h3><p>조건이 참인 동안 반복합니다:</p><pre><code class="highlight rust"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">number</span> = <span class="number">3</span>;        <span class="keyword">while</span> number != <span class="number">0</span> &#123;        <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;!&quot;</span>, number);        number -= <span class="number">1</span>;    &#125;        <span class="built_in">println!</span>(<span class="string">&quot;발사!&quot;</span>);&#125;</code></pre><h3 id="for-문"><a href="#for-문" class="headerlink" title="for 문"></a>for 문</h3><p>컬렉션의 각 요소에 대해 반복합니다:</p><pre><code class="highlight rust"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;    <span class="keyword">let</span> <span class="variable">a</span> = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>];        <span class="comment">// 배열 요소 반복</span>    <span class="keyword">for</span> <span class="variable">element</span> <span class="keyword">in</span> a.<span class="title function_ invoke__">iter</span>() &#123;        <span class="built_in">println!</span>(<span class="string">&quot;값: &#123;&#125;&quot;</span>, element);    &#125;        <span class="comment">// 범위 반복</span>    <span class="keyword">for</span> <span class="variable">number</span> <span class="keyword">in</span> <span class="number">1</span>..<span class="number">4</span> &#123;        <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;!&quot;</span>, number);    &#125;        <span class="comment">// 역순 반복</span>    <span class="keyword">for</span> <span class="variable">number</span> <span class="keyword">in</span> (<span class="number">1</span>..<span class="number">4</span>).<span class="title function_ invoke__">rev</span>() &#123;        <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;!&quot;</span>, number);    &#125;&#125;</code></pre><h2 id="match-문"><a href="#match-문" class="headerlink" title="match 문"></a>match 문</h2><p><code>match</code>는 패턴 매칭을 위한 강력한 제어 구조입니다:</p><pre><code class="highlight rust"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;    <span class="keyword">let</span> <span class="variable">number</span> = <span class="number">3</span>;        <span class="keyword">match</span> number &#123;        <span class="number">1</span> =&gt; <span class="built_in">println!</span>(<span class="string">&quot;하나&quot;</span>),        <span class="number">2</span> =&gt; <span class="built_in">println!</span>(<span class="string">&quot;둘&quot;</span>),        <span class="number">3</span> =&gt; <span class="built_in">println!</span>(<span class="string">&quot;셋&quot;</span>),        _ =&gt; <span class="built_in">println!</span>(<span class="string">&quot;그 외&quot;</span>),  <span class="comment">// 기본 경우</span>    &#125;        <span class="comment">// 여러 값 매칭</span>    <span class="keyword">match</span> number &#123;        <span class="number">1</span> | <span class="number">2</span> =&gt; <span class="built_in">println!</span>(<span class="string">&quot;하나 또는 둘&quot;</span>),        <span class="number">3</span>..=<span class="number">5</span> =&gt; <span class="built_in">println!</span>(<span class="string">&quot;3부터 5까지&quot;</span>),        _ =&gt; <span class="built_in">println!</span>(<span class="string">&quot;그 외&quot;</span>),    &#125;&#125;</code></pre><h3 id="match로-값-반환"><a href="#match로-값-반환" class="headerlink" title="match로 값 반환"></a>match로 값 반환</h3><pre><code class="highlight rust"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;    <span class="keyword">let</span> <span class="variable">number</span> = <span class="number">2</span>;        <span class="keyword">let</span> <span class="variable">description</span> = <span class="keyword">match</span> number &#123;        <span class="number">1</span> =&gt; <span class="string">&quot;하나&quot;</span>,        <span class="number">2</span> =&gt; <span class="string">&quot;둘&quot;</span>,        <span class="number">3</span> =&gt; <span class="string">&quot;셋&quot;</span>,        _ =&gt; <span class="string">&quot;그 외&quot;</span>,    &#125;;        <span class="built_in">println!</span>(<span class="string">&quot;숫자 설명: &#123;&#125;&quot;</span>, description);&#125;</code></pre><h2 id="실습-간단한-계산기"><a href="#실습-간단한-계산기" class="headerlink" title="실습: 간단한 계산기"></a>실습: 간단한 계산기</h2><p>다음은 함수와 제어문을 활용한 간단한 계산기 예제입니다:</p><pre><code class="highlight rust"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;    <span class="keyword">let</span> <span class="variable">result1</span> = <span class="title function_ invoke__">calculate</span>(<span class="string">&#x27;+&#x27;</span>, <span class="number">10.0</span>, <span class="number">5.0</span>);    <span class="keyword">let</span> <span class="variable">result2</span> = <span class="title function_ invoke__">calculate</span>(<span class="string">&#x27;-&#x27;</span>, <span class="number">10.0</span>, <span class="number">5.0</span>);    <span class="keyword">let</span> <span class="variable">result3</span> = <span class="title function_ invoke__">calculate</span>(<span class="string">&#x27;*&#x27;</span>, <span class="number">10.0</span>, <span class="number">5.0</span>);    <span class="keyword">let</span> <span class="variable">result4</span> = <span class="title function_ invoke__">calculate</span>(<span class="string">&#x27;/&#x27;</span>, <span class="number">10.0</span>, <span class="number">5.0</span>);        <span class="built_in">println!</span>(<span class="string">&quot;10 + 5 = &#123;&#125;&quot;</span>, result1);    <span class="built_in">println!</span>(<span class="string">&quot;10 - 5 = &#123;&#125;&quot;</span>, result2);    <span class="built_in">println!</span>(<span class="string">&quot;10 * 5 = &#123;&#125;&quot;</span>, result3);    <span class="built_in">println!</span>(<span class="string">&quot;10 / 5 = &#123;&#125;&quot;</span>, result4);        <span class="comment">// 성적 등급 계산</span>    <span class="keyword">let</span> <span class="variable">score</span> = <span class="number">85</span>;    <span class="keyword">let</span> <span class="variable">grade</span> = <span class="title function_ invoke__">get_grade</span>(score);    <span class="built_in">println!</span>(<span class="string">&quot;점수 &#123;&#125;점의 등급: &#123;&#125;&quot;</span>, score, grade);        <span class="comment">// 팩토리얼 계산</span>    <span class="keyword">let</span> <span class="variable">n</span> = <span class="number">5</span>;    <span class="keyword">let</span> <span class="variable">factorial</span> = <span class="title function_ invoke__">calculate_factorial</span>(n);    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;! = &#123;&#125;&quot;</span>, n, factorial);&#125;<span class="keyword">fn</span> <span class="title function_">calculate</span>(operator: <span class="type">char</span>, a: <span class="type">f64</span>, b: <span class="type">f64</span>) <span class="punctuation">-&gt;</span> <span class="type">f64</span> &#123;    <span class="keyword">match</span> operator &#123;        <span class="string">&#x27;+&#x27;</span> =&gt; a + b,        <span class="string">&#x27;-&#x27;</span> =&gt; a - b,        <span class="string">&#x27;*&#x27;</span> =&gt; a * b,        <span class="string">&#x27;/&#x27;</span> =&gt; &#123;            <span class="keyword">if</span> b != <span class="number">0.0</span> &#123;                a / b            &#125; <span class="keyword">else</span> &#123;                <span class="built_in">println!</span>(<span class="string">&quot;0으로 나눌 수 없습니다!&quot;</span>);                <span class="number">0.0</span>            &#125;        &#125;        _ =&gt; &#123;            <span class="built_in">println!</span>(<span class="string">&quot;지원하지 않는 연산자입니다: &#123;&#125;&quot;</span>, operator);            <span class="number">0.0</span>        &#125;    &#125;&#125;<span class="keyword">fn</span> <span class="title function_">get_grade</span>(score: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">char</span> &#123;    <span class="keyword">if</span> score &gt;= <span class="number">90</span> &#123;        <span class="string">&#x27;A&#x27;</span>    &#125; <span class="keyword">else</span> <span class="keyword">if</span> score &gt;= <span class="number">80</span> &#123;        <span class="string">&#x27;B&#x27;</span>    &#125; <span class="keyword">else</span> <span class="keyword">if</span> score &gt;= <span class="number">70</span> &#123;        <span class="string">&#x27;C&#x27;</span>    &#125; <span class="keyword">else</span> <span class="keyword">if</span> score &gt;= <span class="number">60</span> &#123;        <span class="string">&#x27;D&#x27;</span>    &#125; <span class="keyword">else</span> &#123;        <span class="string">&#x27;F&#x27;</span>    &#125;&#125;<span class="keyword">fn</span> <span class="title function_">calculate_factorial</span>(n: <span class="type">u32</span>) <span class="punctuation">-&gt;</span> <span class="type">u32</span> &#123;    <span class="keyword">if</span> n &lt;= <span class="number">1</span> &#123;        <span class="number">1</span>    &#125; <span class="keyword">else</span> &#123;        n * <span class="title function_ invoke__">calculate_factorial</span>(n - <span class="number">1</span>)    &#125;&#125;</code></pre><h2 id="퀴즈-함수와-제어문-활용"><a href="#퀴즈-함수와-제어문-활용" class="headerlink" title="퀴즈: 함수와 제어문 활용"></a>퀴즈: 함수와 제어문 활용</h2><p>다음 문제를 해결해보세요:</p><ol><li>1부터 n까지의 합을 계산하는 함수를 작성하세요.</li><li>주어진 숫자가 짝수인지 홀수인지 판단하는 함수를 작성하세요.</li><li>구구단을 출력하는 함수를 작성하세요.</li></ol><details><summary>정답</summary><pre><code class="highlight rust"><span class="comment">// 1. 1부터 n까지의 합</span><span class="keyword">fn</span> <span class="title function_">sum_to_n</span>(n: <span class="type">u32</span>) <span class="punctuation">-&gt;</span> <span class="type">u32</span> &#123;    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">sum</span> = <span class="number">0</span>;    <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">1</span>..=n &#123;        sum += i;    &#125;    sum&#125;<span class="comment">// 2. 짝수/홀수 판단</span><span class="keyword">fn</span> <span class="title function_">is_even</span>(number: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">bool</span> &#123;    number % <span class="number">2</span> == <span class="number">0</span>&#125;<span class="comment">// 3. 구구단 출력</span><span class="keyword">fn</span> <span class="title function_">print_multiplication_table</span>(n: <span class="type">u32</span>) &#123;    <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">1</span>..=<span class="number">9</span> &#123;        <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125; × &#123;&#125; = &#123;&#125;&quot;</span>, n, i, n * i);    &#125;&#125;<span class="keyword">fn</span> <span class="title function_">main</span>() &#123;    <span class="built_in">println!</span>(<span class="string">&quot;1부터 10까지의 합: &#123;&#125;&quot;</span>, <span class="title function_ invoke__">sum_to_n</span>(<span class="number">10</span>));    <span class="built_in">println!</span>(<span class="string">&quot;8은 짝수인가? &#123;&#125;&quot;</span>, <span class="title function_ invoke__">is_even</span>(<span class="number">8</span>));    <span class="built_in">println!</span>(<span class="string">&quot;7은 짝수인가? &#123;&#125;&quot;</span>, <span class="title function_ invoke__">is_even</span>(<span class="number">7</span>));    <span class="built_in">println!</span>(<span class="string">&quot;3단:&quot;</span>);    <span class="title function_ invoke__">print_multiplication_table</span>(<span class="number">3</span>);&#125;</code></pre></details><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 Rust의 함수와 제어문에 대해 알아보았습니다. 함수는 코드의 재사용성을 높이고, 제어문은 프로그램의 흐름을 제어하는 중요한 도구입니다.<br>특히 Rust의 <code>match</code> 문은 다른 언어의 switch 문보다 훨씬 강력한 패턴 매칭 기능을 제공합니다.<br>다음 시간에는 구조체와 열거형에 대해 알아보겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> Rust_기본기 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Rust 소유권(Ownership) 개념</title>
      <link href="/rust/basic/3/"/>
      <url>/rust/basic/3/</url>
      
        <content type="html"><![CDATA[<h1 id="Rust-소유권-Ownership-개념"><a href="#Rust-소유권-Ownership-개념" class="headerlink" title="Rust 소유권(Ownership) 개념"></a>Rust 소유권(Ownership) 개념</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 Rust의 가장 중요한 핵심 개념인 소유권(Ownership)에 대해 알아보겠습니다.<br>소유권은 Rust가 다른 언어와 구별되는 가장 독특한 특징이며, 메모리 안전성을 보장하는 핵심 메커니즘입니다.</p><h2 id="소유권이란"><a href="#소유권이란" class="headerlink" title="소유권이란?"></a>소유권이란?</h2><p>소유권(Ownership)은 Rust가 메모리를 관리하는 방식입니다. 다른 언어들과 달리 Rust는 가비지 컬렉터도 없고, 수동으로 메모리를 관리할 필요도 없습니다.<br>대신 컴파일러가 소유권 규칙을 검사하여 메모리 안전성을 보장합니다.</p><p>마치 도서관에서 책을 빌리는 것과 같습니다. 한 번에 한 사람만 책을 소유할 수 있고, 책을 다 읽으면 반납해야 합니다.</p><h2 id="소유권-규칙"><a href="#소유권-규칙" class="headerlink" title="소유권 규칙"></a>소유권 규칙</h2><p>Rust의 소유권은 다음 세 가지 규칙을 따릅니다:</p><ol><li><strong>Rust의 각 값은 소유자(owner)를 가집니다.</strong></li><li><strong>한 번에 하나의 소유자만 존재할 수 있습니다.</strong></li><li><strong>소유자가 스코프를 벗어나면 값이 버려집니다.</strong></li></ol><h2 id="스코프-Scope"><a href="#스코프-Scope" class="headerlink" title="스코프(Scope)"></a>스코프(Scope)</h2><p>스코프는 변수가 유효한 범위를 말합니다:</p><pre><code class="highlight rust">&#123;                      <span class="comment">// s는 아직 유효하지 않음</span>    <span class="keyword">let</span> <span class="variable">s</span> = <span class="string">&quot;hello&quot;</span>;   <span class="comment">// s가 유효해짐</span>        <span class="comment">// s를 사용할 수 있음</span>    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, s);&#125;                      <span class="comment">// s가 스코프를 벗어남, 더 이상 유효하지 않음</span></code></pre><h2 id="이동-Move"><a href="#이동-Move" class="headerlink" title="이동(Move)"></a>이동(Move)</h2><p>Rust에서는 값의 소유권이 한 변수에서 다른 변수로 이동할 수 있습니다:</p><pre><code class="highlight rust"><span class="keyword">let</span> <span class="variable">s1</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>);<span class="keyword">let</span> <span class="variable">s2</span> = s1;  <span class="comment">// s1의 소유권이 s2로 이동</span><span class="comment">// println!(&quot;&#123;&#125;&quot;, s1);  // 오류! s1은 더 이상 유효하지 않음</span><span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, s2);     <span class="comment">// 정상 작동</span></code></pre><h3 id="스택-vs-힙"><a href="#스택-vs-힙" class="headerlink" title="스택 vs 힙"></a>스택 vs 힙</h3><p>데이터가 저장되는 위치에 따라 소유권 동작이 다릅니다:</p><h4 id="스택-데이터-복사"><a href="#스택-데이터-복사" class="headerlink" title="스택 데이터 (복사)"></a>스택 데이터 (복사)</h4><p>크기가 알려진 데이터는 스택에 저장되고, 복사됩니다:</p><pre><code class="highlight rust"><span class="keyword">let</span> <span class="variable">x</span> = <span class="number">5</span>;<span class="keyword">let</span> <span class="variable">y</span> = x;  <span class="comment">// x의 값이 y로 복사됨</span><span class="built_in">println!</span>(<span class="string">&quot;x = &#123;&#125;, y = &#123;&#125;&quot;</span>, x, y);  <span class="comment">// 둘 다 사용 가능</span></code></pre><h4 id="힙-데이터-이동"><a href="#힙-데이터-이동" class="headerlink" title="힙 데이터 (이동)"></a>힙 데이터 (이동)</h4><p>크기가 가변적인 데이터는 힙에 저장되고, 소유권이 이동합니다:</p><pre><code class="highlight rust"><span class="keyword">let</span> <span class="variable">s1</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>);<span class="keyword">let</span> <span class="variable">s2</span> = s1;  <span class="comment">// s1의 소유권이 s2로 이동</span><span class="comment">// s1은 더 이상 사용할 수 없음</span></code></pre><h2 id="클론-Clone"><a href="#클론-Clone" class="headerlink" title="클론(Clone)"></a>클론(Clone)</h2><p>값을 복사하고 싶다면 <code>clone()</code> 메서드를 사용합니다:</p><pre><code class="highlight rust"><span class="keyword">let</span> <span class="variable">s1</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>);<span class="keyword">let</span> <span class="variable">s2</span> = s1.<span class="title function_ invoke__">clone</span>();  <span class="comment">// s1의 값을 복사</span><span class="built_in">println!</span>(<span class="string">&quot;s1 = &#123;&#125;, s2 = &#123;&#125;&quot;</span>, s1, s2);  <span class="comment">// 둘 다 사용 가능</span></code></pre><h2 id="함수와-소유권"><a href="#함수와-소유권" class="headerlink" title="함수와 소유권"></a>함수와 소유권</h2><p>함수에 값을 전달할 때도 소유권이 이동합니다:</p><pre><code class="highlight rust"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;    <span class="keyword">let</span> <span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>);    <span class="title function_ invoke__">takes_ownership</span>(s);  <span class="comment">// s의 소유권이 함수로 이동</span>        <span class="comment">// println!(&quot;&#123;&#125;&quot;, s);  // 오류! s는 더 이상 유효하지 않음</span>        <span class="keyword">let</span> <span class="variable">x</span> = <span class="number">5</span>;    <span class="title function_ invoke__">makes_copy</span>(x);  <span class="comment">// x는 복사되어 전달</span>        <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, x);  <span class="comment">// 정상 작동</span>&#125;<span class="keyword">fn</span> <span class="title function_">takes_ownership</span>(some_string: <span class="type">String</span>) &#123;    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, some_string);&#125;  <span class="comment">// some_string이 스코프를 벗어남, 메모리 해제</span><span class="keyword">fn</span> <span class="title function_">makes_copy</span>(some_integer: <span class="type">i32</span>) &#123;    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, some_integer);&#125;  <span class="comment">// some_integer가 스코프를 벗어남, 아무 일도 일어나지 않음</span></code></pre><h2 id="반환-값과-소유권"><a href="#반환-값과-소유권" class="headerlink" title="반환 값과 소유권"></a>반환 값과 소유권</h2><p>함수의 반환 값도 소유권을 이동시킵니다:</p><pre><code class="highlight rust"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;    <span class="keyword">let</span> <span class="variable">s1</span> = <span class="title function_ invoke__">gives_ownership</span>();         <span class="comment">// gives_ownership이 반환값의 소유권을 s1에게 이동</span>    <span class="keyword">let</span> <span class="variable">s2</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>);     <span class="comment">// s2가 스코프에 들어옴</span>    <span class="keyword">let</span> <span class="variable">s3</span> = <span class="title function_ invoke__">takes_and_gives_back</span>(s2);  <span class="comment">// s2의 소유권이 함수로 이동되고, 반환값이 s3로 이동</span>&#125;<span class="keyword">fn</span> <span class="title function_">gives_ownership</span>() <span class="punctuation">-&gt;</span> <span class="type">String</span> &#123;    <span class="keyword">let</span> <span class="variable">some_string</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>);    some_string  <span class="comment">// 반환값이 호출자에게 이동</span>&#125;<span class="keyword">fn</span> <span class="title function_">takes_and_gives_back</span>(a_string: <span class="type">String</span>) <span class="punctuation">-&gt;</span> <span class="type">String</span> &#123;    a_string  <span class="comment">// 매개변수가 그대로 반환</span>&#125;</code></pre><h2 id="참조-Reference-와-빌림-Borrowing"><a href="#참조-Reference-와-빌림-Borrowing" class="headerlink" title="참조(Reference)와 빌림(Borrowing)"></a>참조(Reference)와 빌림(Borrowing)</h2><p>소유권을 이동하지 않고 값을 사용하려면 참조를 사용합니다:</p><pre><code class="highlight rust"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;    <span class="keyword">let</span> <span class="variable">s1</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>);    <span class="keyword">let</span> <span class="variable">len</span> = <span class="title function_ invoke__">calculate_length</span>(&amp;s1);  <span class="comment">// s1의 참조를 전달</span>        <span class="built_in">println!</span>(<span class="string">&quot;&#x27;&#123;&#125;&#x27; 의 길이는 &#123;&#125;입니다.&quot;</span>, s1, len);  <span class="comment">// s1 사용 가능</span>&#125;<span class="keyword">fn</span> <span class="title function_">calculate_length</span>(s: &amp;<span class="type">String</span>) <span class="punctuation">-&gt;</span> <span class="type">usize</span> &#123;    s.<span class="title function_ invoke__">len</span>()&#125;  <span class="comment">// s는 참조이므로 소유권이 없음, 메모리 해제되지 않음</span></code></pre><h3 id="가변-참조"><a href="#가변-참조" class="headerlink" title="가변 참조"></a>가변 참조</h3><p>값을 수정하려면 가변 참조를 사용합니다:</p><pre><code class="highlight rust"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>);    <span class="title function_ invoke__">change</span>(&amp;<span class="keyword">mut</span> s);  <span class="comment">// 가변 참조 전달</span>    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, s);  <span class="comment">// &quot;hello, world&quot;</span>&#125;<span class="keyword">fn</span> <span class="title function_">change</span>(some_string: &amp;<span class="keyword">mut</span> <span class="type">String</span>) &#123;    some_string.<span class="title function_ invoke__">push_str</span>(<span class="string">&quot;, world&quot;</span>);&#125;</code></pre><h3 id="참조의-규칙"><a href="#참조의-규칙" class="headerlink" title="참조의 규칙"></a>참조의 규칙</h3><ol><li><strong>한 번에 하나의 가변 참조만 가질 수 있습니다.</strong></li><li><strong>가변 참조가 있으면 불변 참조는 가질 수 없습니다.</strong></li><li><strong>참조는 항상 유효해야 합니다.</strong></li></ol><pre><code class="highlight rust"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>);<span class="keyword">let</span> <span class="variable">r1</span> = &amp;s;      <span class="comment">// 문제 없음</span><span class="keyword">let</span> <span class="variable">r2</span> = &amp;s;      <span class="comment">// 문제 없음</span><span class="keyword">let</span> <span class="variable">r3</span> = &amp;<span class="keyword">mut</span> s;  <span class="comment">// 오류! 불변 참조가 있는 상태에서 가변 참조 생성</span></code></pre><h2 id="슬라이스-Slice"><a href="#슬라이스-Slice" class="headerlink" title="슬라이스(Slice)"></a>슬라이스(Slice)</h2><p>슬라이스는 컬렉션의 일부를 참조하는 방법입니다:</p><pre><code class="highlight rust"><span class="keyword">let</span> <span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello world&quot;</span>);<span class="keyword">let</span> <span class="variable">hello</span> = &amp;s[<span class="number">0</span>..<span class="number">5</span>];   <span class="comment">// &quot;hello&quot;</span><span class="keyword">let</span> <span class="variable">world</span> = &amp;s[<span class="number">6</span>..<span class="number">11</span>];  <span class="comment">// &quot;world&quot;</span><span class="keyword">let</span> <span class="variable">whole</span> = &amp;s[..];     <span class="comment">// &quot;hello world&quot;</span></code></pre><h3 id="문자열-슬라이스"><a href="#문자열-슬라이스" class="headerlink" title="문자열 슬라이스"></a>문자열 슬라이스</h3><p>문자열 슬라이스는 문자열의 일부를 참조합니다:</p><pre><code class="highlight rust"><span class="keyword">fn</span> <span class="title function_">first_word</span>(s: &amp;<span class="type">String</span>) <span class="punctuation">-&gt;</span> &amp;<span class="type">str</span> &#123;    <span class="keyword">let</span> <span class="variable">bytes</span> = s.<span class="title function_ invoke__">as_bytes</span>();        <span class="keyword">for</span> (i, &amp;item) <span class="keyword">in</span> bytes.<span class="title function_ invoke__">iter</span>().<span class="title function_ invoke__">enumerate</span>() &#123;        <span class="keyword">if</span> item == <span class="string">b&#x27; &#x27;</span> &#123;            <span class="keyword">return</span> &amp;s[<span class="number">0</span>..i];        &#125;    &#125;        &amp;s[..]&#125;<span class="keyword">fn</span> <span class="title function_">main</span>() &#123;    <span class="keyword">let</span> <span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello world&quot;</span>);    <span class="keyword">let</span> <span class="variable">word</span> = <span class="title function_ invoke__">first_word</span>(&amp;s);    <span class="built_in">println!</span>(<span class="string">&quot;첫 번째 단어: &#123;&#125;&quot;</span>, word);  <span class="comment">// &quot;hello&quot;</span>&#125;</code></pre><h2 id="실습-예제"><a href="#실습-예제" class="headerlink" title="실습 예제"></a>실습 예제</h2><p>다음은 소유권을 활용한 간단한 예제입니다:</p><pre><code class="highlight rust"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;    <span class="comment">// 문자열 생성</span>    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">text</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Rust&quot;</span>);        <span class="comment">// 소유권 이동</span>    <span class="keyword">let</span> <span class="variable">moved_text</span> = text;    <span class="comment">// println!(&quot;&#123;&#125;&quot;, text);  // 오류! text는 더 이상 유효하지 않음</span>        <span class="comment">// 참조 사용</span>    <span class="keyword">let</span> <span class="variable">len</span> = <span class="title function_ invoke__">get_length</span>(&amp;moved_text);    <span class="built_in">println!</span>(<span class="string">&quot;&#x27;&#123;&#125;&#x27; 의 길이: &#123;&#125;&quot;</span>, moved_text, len);        <span class="comment">// 가변 참조로 수정</span>    <span class="title function_ invoke__">add_suffix</span>(&amp;<span class="keyword">mut</span> moved_text);    <span class="built_in">println!</span>(<span class="string">&quot;수정된 문자열: &#123;&#125;&quot;</span>, moved_text);        <span class="comment">// 슬라이스 사용</span>    <span class="keyword">let</span> <span class="variable">first_part</span> = &amp;moved_text[<span class="number">0</span>..<span class="number">4</span>];    <span class="built_in">println!</span>(<span class="string">&quot;첫 번째 부분: &#123;&#125;&quot;</span>, first_part);&#125;<span class="keyword">fn</span> <span class="title function_">get_length</span>(s: &amp;<span class="type">String</span>) <span class="punctuation">-&gt;</span> <span class="type">usize</span> &#123;    s.<span class="title function_ invoke__">len</span>()&#125;<span class="keyword">fn</span> <span class="title function_">add_suffix</span>(s: &amp;<span class="keyword">mut</span> <span class="type">String</span>) &#123;    s.<span class="title function_ invoke__">push_str</span>(<span class="string">&quot; Programming&quot;</span>);&#125;</code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 Rust의 핵심 개념인 소유권에 대해 알아보았습니다. 소유권은 처음에는 복잡하게 느껴질 수 있지만,<br>메모리 안전성을 보장하고 성능을 최적화하는 Rust의 핵심 메커니즘입니다.<br>소유권을 잘 이해하면 안전하고 효율적인 Rust 프로그램을 작성할 수 있습니다.<br>다음 시간에는 함수와 제어문에 대해 알아보겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> Rust_기본기 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Rust 변수와 데이터 타입</title>
      <link href="/rust/basic/2/"/>
      <url>/rust/basic/2/</url>
      
        <content type="html"><![CDATA[<h1 id="Rust-변수와-데이터-타입"><a href="#Rust-변수와-데이터-타입" class="headerlink" title="Rust 변수와 데이터 타입"></a>Rust 변수와 데이터 타입</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 Rust의 변수와 데이터 타입에 대해 알아보겠습니다.<br>Rust의 변수는 다른 언어와 조금 다른 특성을 가지고 있어서, 처음에는 헷갈릴 수 있지만 이해하면 매우 강력한 기능입니다.</p><h2 id="변수-선언"><a href="#변수-선언" class="headerlink" title="변수 선언"></a>변수 선언</h2><h3 id="기본-변수-선언"><a href="#기본-변수-선언" class="headerlink" title="기본 변수 선언"></a>기본 변수 선언</h3><p>Rust에서 변수를 선언할 때는 <code>let</code> 키워드를 사용합니다:</p><pre><code class="highlight rust"><span class="keyword">let</span> <span class="variable">x</span> = <span class="number">5</span>;<span class="built_in">println!</span>(<span class="string">&quot;x의 값은: &#123;&#125;&quot;</span>, x);</code></pre><h3 id="불변성-Immutability"><a href="#불변성-Immutability" class="headerlink" title="불변성 (Immutability)"></a>불변성 (Immutability)</h3><p>Rust의 변수는 기본적으로 불변(immutable)입니다. 마치 한 번 잠근 금고와 같아서, 값을 변경할 수 없습니다:</p><pre><code class="highlight rust"><span class="keyword">let</span> <span class="variable">x</span> = <span class="number">5</span>;x = <span class="number">6</span>; <span class="comment">// 오류! 불변 변수의 값을 변경할 수 없습니다.</span></code></pre><h3 id="가변-변수-Mutable-Variables"><a href="#가변-변수-Mutable-Variables" class="headerlink" title="가변 변수 (Mutable Variables)"></a>가변 변수 (Mutable Variables)</h3><p>값을 변경하고 싶다면 <code>mut</code> 키워드를 사용합니다:</p><pre><code class="highlight rust"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">y</span> = <span class="number">5</span>;<span class="built_in">println!</span>(<span class="string">&quot;y의 값은: &#123;&#125;&quot;</span>, y);y = <span class="number">6</span>;<span class="built_in">println!</span>(<span class="string">&quot;y의 새로운 값은: &#123;&#125;&quot;</span>, y);</code></pre><h3 id="변수-shadowing"><a href="#변수-shadowing" class="headerlink" title="변수 shadowing"></a>변수 shadowing</h3><p>Rust에서는 같은 이름의 변수를 다시 선언할 수 있습니다. 이를 shadowing이라고 합니다:</p><pre><code class="highlight rust"><span class="keyword">let</span> <span class="variable">x</span> = <span class="number">5</span>;<span class="keyword">let</span> <span class="variable">x</span> = x + <span class="number">1</span>; <span class="comment">// 새로운 x 변수</span><span class="keyword">let</span> <span class="variable">x</span> = x * <span class="number">2</span>; <span class="comment">// 또 다른 새로운 x 변수</span><span class="built_in">println!</span>(<span class="string">&quot;x의 값은: &#123;&#125;&quot;</span>, x); <span class="comment">// 12</span></code></pre><h2 id="데이터-타입"><a href="#데이터-타입" class="headerlink" title="데이터 타입"></a>데이터 타입</h2><p>Rust는 정적 타입 언어로, 모든 변수의 타입이 컴파일 시에 결정됩니다.</p><h3 id="스칼라-타입-Scalar-Types"><a href="#스칼라-타입-Scalar-Types" class="headerlink" title="스칼라 타입 (Scalar Types)"></a>스칼라 타입 (Scalar Types)</h3><h4 id="정수-Integer"><a href="#정수-Integer" class="headerlink" title="정수 (Integer)"></a>정수 (Integer)</h4><p>정수 타입은 부호 있는 정수(i)와 부호 없는 정수(u)로 나뉩니다:</p><pre><code class="highlight rust"><span class="keyword">let</span> <span class="variable">a</span>: <span class="type">i32</span> = <span class="number">42</span>;        <span class="comment">// 32비트 부호 있는 정수</span><span class="keyword">let</span> <span class="variable">b</span>: <span class="type">u32</span> = <span class="number">42</span>;        <span class="comment">// 32비트 부호 없는 정수</span><span class="keyword">let</span> <span class="variable">c</span>: <span class="type">i64</span> = <span class="number">42</span>;        <span class="comment">// 64비트 부호 있는 정수</span><span class="keyword">let</span> <span class="variable">d</span>: <span class="type">u64</span> = <span class="number">42</span>;        <span class="comment">// 64비트 부호 없는 정수</span></code></pre><p>기본 정수 타입은 <code>i32</code>입니다.</p><h4 id="부동소수점-Floating-Point"><a href="#부동소수점-Floating-Point" class="headerlink" title="부동소수점 (Floating Point)"></a>부동소수점 (Floating Point)</h4><p>부동소수점 타입은 <code>f32</code>와 <code>f64</code>가 있습니다:</p><pre><code class="highlight rust"><span class="keyword">let</span> <span class="variable">x</span>: <span class="type">f32</span> = <span class="number">3.14</span>;      <span class="comment">// 32비트 부동소수점</span><span class="keyword">let</span> <span class="variable">y</span>: <span class="type">f64</span> = <span class="number">3.14159</span>;   <span class="comment">// 64비트 부동소수점 (기본값)</span></code></pre><h4 id="불린-Boolean"><a href="#불린-Boolean" class="headerlink" title="불린 (Boolean)"></a>불린 (Boolean)</h4><p>불린 타입은 <code>true</code> 또는 <code>false</code> 값을 가집니다:</p><pre><code class="highlight rust"><span class="keyword">let</span> <span class="variable">t</span> = <span class="literal">true</span>;<span class="keyword">let</span> <span class="variable">f</span>: <span class="type">bool</span> = <span class="literal">false</span>;</code></pre><h4 id="문자-Character"><a href="#문자-Character" class="headerlink" title="문자 (Character)"></a>문자 (Character)</h4><p>문자 타입은 유니코드 문자를 저장합니다:</p><pre><code class="highlight rust"><span class="keyword">let</span> <span class="variable">c</span> = <span class="string">&#x27;z&#x27;</span>;<span class="keyword">let</span> <span class="variable">z</span> = <span class="string">&#x27;ℤ&#x27;</span>;<span class="keyword">let</span> <span class="variable">heart_eyed_cat</span> = &#x27;😻&#x27;;</code></pre><h3 id="복합-타입-Compound-Types"><a href="#복합-타입-Compound-Types" class="headerlink" title="복합 타입 (Compound Types)"></a>복합 타입 (Compound Types)</h3><h4 id="튜플-Tuple"><a href="#튜플-Tuple" class="headerlink" title="튜플 (Tuple)"></a>튜플 (Tuple)</h4><p>튜플은 여러 타입의 값을 하나로 묶는 방법입니다. 마치 서로 다른 물건들을 하나의 상자에 담는 것과 같습니다:</p><pre><code class="highlight rust"><span class="keyword">let</span> <span class="variable">tup</span>: (<span class="type">i32</span>, <span class="type">f64</span>, <span class="type">u8</span>) = (<span class="number">500</span>, <span class="number">6.4</span>, <span class="number">1</span>);<span class="keyword">let</span> (x, y, z) = tup; <span class="comment">// 구조 분해</span><span class="built_in">println!</span>(<span class="string">&quot;y의 값은: &#123;&#125;&quot;</span>, y);<span class="comment">// 인덱스로 접근</span><span class="keyword">let</span> <span class="variable">first</span> = tup.<span class="number">0</span>;<span class="keyword">let</span> <span class="variable">second</span> = tup.<span class="number">1</span>;<span class="keyword">let</span> <span class="variable">third</span> = tup.<span class="number">2</span>;</code></pre><h4 id="배열-Array"><a href="#배열-Array" class="headerlink" title="배열 (Array)"></a>배열 (Array)</h4><p>배열은 같은 타입의 여러 값을 저장합니다. 배열의 크기는 고정되어 있습니다:</p><pre><code class="highlight rust"><span class="keyword">let</span> <span class="variable">arr</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];<span class="keyword">let</span> <span class="variable">months</span> = [<span class="string">&quot;January&quot;</span>, <span class="string">&quot;February&quot;</span>, <span class="string">&quot;March&quot;</span>, <span class="string">&quot;April&quot;</span>, <span class="string">&quot;May&quot;</span>];<span class="comment">// 타입과 크기 명시</span><span class="keyword">let</span> <span class="variable">arr</span>: [<span class="type">i32</span>; <span class="number">5</span>] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];<span class="comment">// 같은 값으로 초기화</span><span class="keyword">let</span> <span class="variable">arr</span> = [<span class="number">3</span>; <span class="number">5</span>]; <span class="comment">// [3, 3, 3, 3, 3]</span><span class="comment">// 배열 요소 접근</span><span class="keyword">let</span> <span class="variable">first</span> = arr[<span class="number">0</span>];<span class="keyword">let</span> <span class="variable">second</span> = arr[<span class="number">1</span>];</code></pre><h2 id="상수-Constants"><a href="#상수-Constants" class="headerlink" title="상수 (Constants)"></a>상수 (Constants)</h2><p>상수는 <code>const</code> 키워드로 선언하며, 항상 타입을 명시해야 합니다:</p><pre><code class="highlight rust"><span class="keyword">const</span> MAX_POINTS: <span class="type">u32</span> = <span class="number">100_000</span>;</code></pre><p>상수는 변수와 다르게 다음과 같은 특징이 있습니다:</p><ul><li>항상 불변입니다 (<code>mut</code> 사용 불가)</li><li>전역 스코프를 포함한 모든 스코프에서 선언 가능</li><li>컴파일 타임에 계산되는 값만 설정 가능</li></ul><h2 id="타입-추론과-명시적-타입-선언"><a href="#타입-추론과-명시적-타입-선언" class="headerlink" title="타입 추론과 명시적 타입 선언"></a>타입 추론과 명시적 타입 선언</h2><p>Rust는 타입 추론을 지원하므로, 많은 경우 타입을 명시하지 않아도 됩니다:</p><pre><code class="highlight rust"><span class="keyword">let</span> <span class="variable">x</span> = <span class="number">5</span>;          <span class="comment">// i32로 추론</span><span class="keyword">let</span> <span class="variable">y</span> = <span class="number">3.14</span>;       <span class="comment">// f64로 추론</span><span class="keyword">let</span> <span class="variable">z</span> = <span class="string">&quot;hello&quot;</span>;    <span class="comment">// &amp;str로 추론</span></code></pre><p>하지만 명시적으로 타입을 지정할 수도 있습니다:</p><pre><code class="highlight rust"><span class="keyword">let</span> <span class="variable">x</span>: <span class="type">i64</span> = <span class="number">5</span>;<span class="keyword">let</span> <span class="variable">y</span>: <span class="type">f32</span> = <span class="number">3.14</span>;<span class="keyword">let</span> <span class="variable">z</span>: <span class="type">String</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>);</code></pre><h2 id="실습-예제"><a href="#실습-예제" class="headerlink" title="실습 예제"></a>실습 예제</h2><p>다음은 다양한 데이터 타입을 사용한 예제입니다:</p><pre><code class="highlight rust"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;    <span class="comment">// 정수</span>    <span class="keyword">let</span> <span class="variable">age</span>: <span class="type">u8</span> = <span class="number">25</span>;    <span class="keyword">let</span> <span class="variable">score</span>: <span class="type">i32</span> = <span class="number">95</span>;        <span class="comment">// 부동소수점</span>    <span class="keyword">let</span> <span class="variable">height</span>: <span class="type">f64</span> = <span class="number">175.5</span>;        <span class="comment">// 불린</span>    <span class="keyword">let</span> <span class="variable">is_student</span>: <span class="type">bool</span> = <span class="literal">true</span>;        <span class="comment">// 문자</span>    <span class="keyword">let</span> <span class="variable">grade</span>: <span class="type">char</span> = <span class="string">&#x27;A&#x27;</span>;        <span class="comment">// 튜플</span>    <span class="keyword">let</span> <span class="variable">person</span>: (<span class="type">String</span>, <span class="type">u8</span>, <span class="type">f64</span>) = (<span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;김철수&quot;</span>), <span class="number">25</span>, <span class="number">175.5</span>);        <span class="comment">// 배열</span>    <span class="keyword">let</span> <span class="variable">grades</span>: [<span class="type">i32</span>; <span class="number">5</span>] = [<span class="number">85</span>, <span class="number">90</span>, <span class="number">78</span>, <span class="number">92</span>, <span class="number">88</span>];        <span class="comment">// 출력</span>    <span class="built_in">println!</span>(<span class="string">&quot;나이: &#123;&#125;&quot;</span>, age);    <span class="built_in">println!</span>(<span class="string">&quot;점수: &#123;&#125;&quot;</span>, score);    <span class="built_in">println!</span>(<span class="string">&quot;키: &#123;&#125;&quot;</span>, height);    <span class="built_in">println!</span>(<span class="string">&quot;학생 여부: &#123;&#125;&quot;</span>, is_student);    <span class="built_in">println!</span>(<span class="string">&quot;성적: &#123;&#125;&quot;</span>, grade);    <span class="built_in">println!</span>(<span class="string">&quot;이름: &#123;&#125;, 나이: &#123;&#125;, 키: &#123;&#125;&quot;</span>, person.<span class="number">0</span>, person.<span class="number">1</span>, person.<span class="number">2</span>);    <span class="built_in">println!</span>(<span class="string">&quot;첫 번째 성적: &#123;&#125;&quot;</span>, grades[<span class="number">0</span>]);&#125;</code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 Rust의 변수와 다양한 데이터 타입에 대해 알아보았습니다. Rust의 불변성과 타입 시스템은 처음에는 제약처럼 느껴질 수 있지만,<br>실제로는 많은 버그를 사전에 방지하고 코드를 더 안전하게 만들어줍니다.<br>다음 시간에는 Rust의 핵심 개념인 소유권(Ownership)에 대해 알아보겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> Rust_기본기 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Rust 설치 및 설정</title>
      <link href="/rust/basic/1/"/>
      <url>/rust/basic/1/</url>
      
        <content type="html"><![CDATA[<h1 id="Rust-설치-및-설정"><a href="#Rust-설치-및-설정" class="headerlink" title="Rust 설치 및 설정"></a>Rust 설치 및 설정</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 Rust를 설치하고 설정하는 방법에 대해 알아보겠습니다.<br>Rust는 메모리 안전성과 성능을 보장하는 시스템 프로그래밍 언어로, 최근 매우 인기가 높아지고 있습니다.</p><h2 id="Rust란-무엇인가"><a href="#Rust란-무엇인가" class="headerlink" title="Rust란 무엇인가?"></a>Rust란 무엇인가?</h2><p>Rust는 Mozilla에서 개발한 시스템 프로그래밍 언어로, 메모리 안전성과 속도를 모두 잡은 언어입니다.<br>C&#x2F;C++의 성능을 유지하면서도 메모리 누수나 버퍼 오버플로우 같은 문제를 컴파일 시점에서 방지합니다.<br>마치 자동차의 안전벨트와 같아서, 개발자가 실수하기 전에 미리 위험을 차단해 줍니다.</p><h2 id="Rust-설치"><a href="#Rust-설치" class="headerlink" title="Rust 설치"></a>Rust 설치</h2><h3 id="1-rustup-설치-권장"><a href="#1-rustup-설치-권장" class="headerlink" title="1. rustup 설치 (권장)"></a>1. rustup 설치 (권장)</h3><p>Rust를 설치하는 가장 쉬운 방법은 rustup을 사용하는 것입니다. rustup은 Rust의 공식 설치 도구로, 버전 관리와 도구 체인 관리를 도와줍니다.</p><h4 id="Linux-및-macOS"><a href="#Linux-및-macOS" class="headerlink" title="Linux 및 macOS"></a>Linux 및 macOS</h4><p>터미널에서 다음 명령어를 실행합니다:</p><pre><code class="highlight bash">curl --proto <span class="string">&#x27;=https&#x27;</span> --tlsv1.2 -sSf https://sh.rustup.rs | sh</code></pre><h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h4><p>Windows 사용자는 <a href="https://rustup.rs/">rustup.rs</a>에서 설치 프로그램을 다운로드하여 설치할 수 있습니다.</p><h3 id="2-설치-확인"><a href="#2-설치-확인" class="headerlink" title="2. 설치 확인"></a>2. 설치 확인</h3><p>설치가 완료되면 터미널을 다시 열고 다음 명령어로 설치를 확인합니다:</p><pre><code class="highlight bash">rustc --versioncargo --version</code></pre><p>정상적으로 설치되었다면 다음과 같은 출력을 볼 수 있습니다:</p><pre><code class="highlight bash">rustc 1.75.0 (82e1608df 2023-12-21)cargo 1.75.0 (1d8b05cdd 2023-11-20)</code></pre><h3 id="3-개발-환경-구성"><a href="#3-개발-환경-구성" class="headerlink" title="3. 개발 환경 구성"></a>3. 개발 환경 구성</h3><p>Rust는 <code>cargo</code>라는 패키지 관리자와 빌드 도구를 함께 제공합니다. cargo는 마치 JavaScript의 npm이나 Python의 pip와 같은 역할을 합니다.</p><h2 id="첫-번째-Rust-프로그램"><a href="#첫-번째-Rust-프로그램" class="headerlink" title="첫 번째 Rust 프로그램"></a>첫 번째 Rust 프로그램</h2><h3 id="1-새-프로젝트-생성"><a href="#1-새-프로젝트-생성" class="headerlink" title="1. 새 프로젝트 생성"></a>1. 새 프로젝트 생성</h3><p>다음 명령어로 새로운 Rust 프로젝트를 생성합니다:</p><pre><code class="highlight bash">cargo new hello_rust<span class="built_in">cd</span> hello_rust</code></pre><h3 id="2-프로젝트-구조-확인"><a href="#2-프로젝트-구조-확인" class="headerlink" title="2. 프로젝트 구조 확인"></a>2. 프로젝트 구조 확인</h3><p>생성된 프로젝트 구조는 다음과 같습니다:</p><pre><code class="highlight plaintext">hello_rust/├── Cargo.toml└── src/    └── main.rs</code></pre><ul><li><code>Cargo.toml</code>: 프로젝트의 메타데이터와 의존성을 관리하는 파일</li><li><code>src/main.rs</code>: 메인 소스 코드 파일</li></ul><h3 id="3-코드-확인"><a href="#3-코드-확인" class="headerlink" title="3. 코드 확인"></a>3. 코드 확인</h3><p><code>src/main.rs</code> 파일을 열어보면 다음과 같은 코드가 있습니다:</p><pre><code class="highlight rust"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;    <span class="built_in">println!</span>(<span class="string">&quot;Hello, world!&quot;</span>);&#125;</code></pre><p>이 코드는 간단한 “Hello, world!” 메시지를 출력하는 프로그램입니다.</p><h3 id="4-프로그램-실행"><a href="#4-프로그램-실행" class="headerlink" title="4. 프로그램 실행"></a>4. 프로그램 실행</h3><p>다음 명령어로 프로그램을 실행할 수 있습니다:</p><pre><code class="highlight bash">cargo run</code></pre><p>실행 결과:</p><pre><code class="highlight bash">   Compiling hello_rust v0.1.0 (/path/to/hello_rust)    Finished dev [unoptimized + debuginfo] target(s) <span class="keyword">in</span> 0.75s     Running `target/debug/hello_rust`Hello, world!</code></pre><h2 id="유용한-Rust-도구들"><a href="#유용한-Rust-도구들" class="headerlink" title="유용한 Rust 도구들"></a>유용한 Rust 도구들</h2><h3 id="1-rustfmt-코드-포맷터"><a href="#1-rustfmt-코드-포맷터" class="headerlink" title="1. rustfmt (코드 포맷터)"></a>1. rustfmt (코드 포맷터)</h3><p>코드를 일관된 스타일로 정렬해주는 도구입니다:</p><pre><code class="highlight bash">cargo <span class="built_in">fmt</span></code></pre><h3 id="2-clippy-린터"><a href="#2-clippy-린터" class="headerlink" title="2. clippy (린터)"></a>2. clippy (린터)</h3><p>코드의 잠재적인 문제를 찾아주는 도구입니다:</p><pre><code class="highlight bash">cargo clippy</code></pre><h3 id="3-cargo-check"><a href="#3-cargo-check" class="headerlink" title="3. cargo check"></a>3. cargo check</h3><p>컴파일 오류만 확인하고 실행 파일을 생성하지 않는 빠른 검사 도구입니다:</p><pre><code class="highlight bash">cargo check</code></pre><h2 id="에디터-설정"><a href="#에디터-설정" class="headerlink" title="에디터 설정"></a>에디터 설정</h2><h3 id="VS-Code"><a href="#VS-Code" class="headerlink" title="VS Code"></a>VS Code</h3><p>VS Code를 사용한다면 다음 확장 프로그램을 설치하는 것을 권장합니다:</p><ul><li><strong>rust-analyzer</strong>: Rust 언어 지원 (자동 완성, 오류 검사 등)</li><li><strong>CodeLLDB</strong>: 디버깅 지원</li></ul><h3 id="기타-에디터"><a href="#기타-에디터" class="headerlink" title="기타 에디터"></a>기타 에디터</h3><ul><li><strong>IntelliJ IDEA</strong>: IntelliJ Rust 플러그인</li><li><strong>Vim&#x2F;Neovim</strong>: rust.vim 플러그인</li><li><strong>Emacs</strong>: rust-mode</li></ul><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 Rust를 설치하고 첫 번째 프로그램을 만들어보았습니다. Rust는 처음에는 다소 어렵게 느껴질 수 있지만,<br>한 번 익숙해지면 매우 안전하고 빠른 프로그램을 작성할 수 있습니다.<br>다음 시간에는 Rust의 기본 문법과 변수에 대해 알아보겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> Rust_기본기 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 정규 표현식(Regular Expressions)</title>
      <link href="/javascript/special/11/"/>
      <url>/javascript/special/11/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-정규-표현식-Regular-Expressions"><a href="#JavaScript-정규-표현식-Regular-Expressions" class="headerlink" title="JavaScript 정규 표현식(Regular Expressions)"></a>JavaScript 정규 표현식(Regular Expressions)</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 JavaScript에서 정규 표현식을 사용하여 문자열을 검색하고 치환하는 방법을 배워보겠습니다. 정규 표현식은 문자열 패턴을 정의하고, 이를 기반으로 다양한 문자열 조작을 할 수 있게 해주는 강력한 도구입니다.</p><h2 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h2><h3 id="정규-표현식이란"><a href="#정규-표현식이란" class="headerlink" title="정규 표현식이란?"></a>정규 표현식이란?</h3><p>정규 표현식(Regular Expressions, RegExp)은 문자열에서 특정 패턴을 찾거나 대체하는 데 사용되는 도구입니다. 정규 표현식을 사용하면 복잡한 문자열 검색과 치환 작업을 간편하게 수행할 수 있습니다. 정규 표현식은 다양한 프로그래밍 언어에서 지원되며, JavaScript에서도 강력한 기능을 제공합니다.</p><h3 id="정규-표현식의-기본-문법"><a href="#정규-표현식의-기본-문법" class="headerlink" title="정규 표현식의 기본 문법"></a>정규 표현식의 기본 문법</h3><ul><li><strong>문자 클래스</strong>: <code>[]</code> 안에 문자를 나열하여 특정 문자들을 매칭합니다.<ul><li>예: <code>[abc]</code>는 <code>a</code>, <code>b</code>, <code>c</code> 중 하나를 매칭합니다.</li></ul></li><li><strong>범위</strong>: 문자 클래스 안에서 <code>-</code>를 사용하여 범위를 지정할 수 있습니다.<ul><li>예: <code>[a-z]</code>는 소문자 알파벳을 매칭합니다.</li></ul></li><li><strong>반복</strong>: 특정 패턴이 반복되는 횟수를 지정할 수 있습니다.<ul><li>예: <code>a*</code>는 <code>a</code>가 0번 이상 반복되는 것을 매칭합니다.</li></ul></li><li><strong>특수 문자</strong>: <code>\</code>로 시작하는 문자들은 특별한 의미를 가집니다.<ul><li>예: <code>\d</code>는 숫자를 매칭합니다.</li></ul></li></ul><h2 id="정식-사용법"><a href="#정식-사용법" class="headerlink" title="정식 사용법"></a>정식 사용법</h2><h3 id="정규-표현식-생성"><a href="#정규-표현식-생성" class="headerlink" title="정규 표현식 생성"></a>정규 표현식 생성</h3><p>JavaScript에서 정규 표현식을 만드는 방법은 두 가지가 있습니다:</p><ol><li><strong>리터럴 방식</strong>:<pre><code class="highlight javascript"><span class="keyword">const</span> regex = <span class="regexp">/pattern/</span>flags;</code></pre></li><li><strong>RegExp 객체 생성자 사용</strong>:<pre><code class="highlight javascript"><span class="keyword">const</span> regex = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;pattern&quot;</span>, <span class="string">&quot;flags&quot;</span>);</code></pre></li></ol><h3 id="주요-메서드"><a href="#주요-메서드" class="headerlink" title="주요 메서드"></a>주요 메서드</h3><ul><li><strong><code>test</code></strong>: 문자열이 정규 표현식과 일치하는지 확인합니다.<pre><code class="highlight javascript"><span class="keyword">const</span> regex = <span class="regexp">/hello/</span>;<span class="variable language_">console</span>.<span class="title function_">log</span>(regex.<span class="title function_">test</span>(<span class="string">&quot;hello world&quot;</span>)); <span class="comment">// true</span></code></pre></li><li><strong><code>exec</code></strong>: 일치하는 문자열을 배열로 반환합니다.<pre><code class="highlight javascript"><span class="keyword">const</span> regex = <span class="regexp">/hello/</span>;<span class="variable language_">console</span>.<span class="title function_">log</span>(regex.<span class="title function_">exec</span>(<span class="string">&quot;hello world&quot;</span>)); <span class="comment">// [&quot;hello&quot;]</span></code></pre></li><li><strong><code>match</code></strong>: 문자열에서 정규 표현식과 일치하는 모든 결과를 배열로 반환합니다.<pre><code class="highlight javascript"><span class="keyword">const</span> text = <span class="string">&quot;hello world, hello universe&quot;</span>;<span class="keyword">const</span> regex = <span class="regexp">/hello/g</span>;<span class="variable language_">console</span>.<span class="title function_">log</span>(text.<span class="title function_">match</span>(regex)); <span class="comment">// [&quot;hello&quot;, &quot;hello&quot;]</span></code></pre></li><li><strong><code>replace</code></strong>: 문자열에서 정규 표현식과 일치하는 부분을 다른 문자열로 대체합니다.<pre><code class="highlight javascript"><span class="keyword">const</span> text = <span class="string">&quot;hello world&quot;</span>;<span class="keyword">const</span> regex = <span class="regexp">/world/</span>;<span class="variable language_">console</span>.<span class="title function_">log</span>(text.<span class="title function_">replace</span>(regex, <span class="string">&quot;universe&quot;</span>)); <span class="comment">// &quot;hello universe&quot;</span></code></pre></li><li><strong><code>split</code></strong>: 문자열을 정규 표현식을 기준으로 분할합니다.<pre><code class="highlight javascript"><span class="keyword">const</span> text = <span class="string">&quot;apple, banana, cherry&quot;</span>;<span class="keyword">const</span> regex = <span class="regexp">/,\s*/</span>;<span class="variable language_">console</span>.<span class="title function_">log</span>(text.<span class="title function_">split</span>(regex)); <span class="comment">// [&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;]</span></code></pre></li></ul><h2 id="활용-예제"><a href="#활용-예제" class="headerlink" title="활용 예제"></a>활용 예제</h2><h3 id="문자열-검색과-치환을-위한-정규-표현식-활용"><a href="#문자열-검색과-치환을-위한-정규-표현식-활용" class="headerlink" title="문자열 검색과 치환을 위한 정규 표현식 활용"></a>문자열 검색과 치환을 위한 정규 표현식 활용</h3><p><strong>예제 1: 문자열 검색</strong></p><pre><code class="highlight javascript"><span class="keyword">const</span> text = <span class="string">&quot;The quick brown fox jumps over the lazy dog&quot;</span>;<span class="keyword">const</span> regex = <span class="regexp">/quick/</span>;<span class="keyword">const</span> result = regex.<span class="title function_">test</span>(text);<span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// true</span></code></pre><p><strong>예제 2: 문자열 치환</strong></p><pre><code class="highlight javascript"><span class="keyword">const</span> text = <span class="string">&quot;The quick brown fox jumps over the lazy dog&quot;</span>;<span class="keyword">const</span> regex = <span class="regexp">/quick/</span>;<span class="keyword">const</span> result = text.<span class="title function_">replace</span>(regex, <span class="string">&quot;slow&quot;</span>);<span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// The slow brown fox jumps over the lazy dog</span></code></pre><p><strong>예제 3: 문자열 분할</strong></p><pre><code class="highlight javascript"><span class="keyword">const</span> text = <span class="string">&quot;apple, banana, cherry&quot;</span>;<span class="keyword">const</span> regex = <span class="regexp">/,\s*/</span>;<span class="keyword">const</span> result = text.<span class="title function_">split</span>(regex);<span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// [&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;]</span></code></pre><p><strong>예제 4: 복잡한 패턴 매칭</strong></p><pre><code class="highlight javascript"><span class="keyword">const</span> text = <span class="string">&quot;The quick brown fox jumps over the lazy dog&quot;</span>;<span class="keyword">const</span> regex = <span class="regexp">/(\w+)\s(\w+)/g</span>;<span class="keyword">const</span> result = text.<span class="title function_">match</span>(regex);<span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// [&quot;The quick&quot;, &quot;brown fox&quot;, &quot;jumps over&quot;, &quot;the lazy&quot;]</span></code></pre><p><strong>예제 5: 이메일 주소 유효성 검사</strong></p><pre><code class="highlight javascript"><span class="keyword">const</span> email = <span class="string">&quot;test@example.com&quot;</span>;<span class="keyword">const</span> regex = <span class="regexp">/^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]&#123;2,&#125;$/</span>;<span class="keyword">const</span> result = regex.<span class="title function_">test</span>(email);<span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// true</span></code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 정규 표현식의 기본 개념과 다양한 활용 방법에 대해 알아보았습니다. 정규 표현식을 사용하면 문자열 조작을 더욱 효율적으로 할 수 있으며, 복잡한 패턴 매칭 작업을 간편하게 수행할 수 있습니다. 정규 표현식을 통해 문자열 검색과 치환을 쉽게 수행해보세요!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> JS_필살기 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NestJS 고급 주제 - 테스팅</title>
      <link href="/nestjs/special/2/"/>
      <url>/nestjs/special/2/</url>
      
        <content type="html"><![CDATA[<h1 id="NestJS-고급-주제-테스팅"><a href="#NestJS-고급-주제-테스팅" class="headerlink" title="NestJS 고급 주제 - 테스팅"></a>NestJS 고급 주제 - 테스팅</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 NestJS에서 테스팅을 하는 방법에 대해 알아보겠습니다.</p><h2 id="테스팅-설정"><a href="#테스팅-설정" class="headerlink" title="테스팅 설정"></a>테스팅 설정</h2><p>NestJS는 Jest를 기본 테스트 프레임워크로 사용합니다:</p><pre><code class="highlight bash">npm install --save-dev @nestjs/testing</code></pre><h2 id="단위-테스트-Unit-Test"><a href="#단위-테스트-Unit-Test" class="headerlink" title="단위 테스트 (Unit Test)"></a>단위 테스트 (Unit Test)</h2><pre><code class="highlight typescript"><span class="comment">// users.service.spec.ts</span><span class="keyword">import</span> &#123; <span class="title class_">Test</span>, <span class="title class_">TestingModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/testing&#x27;</span>;<span class="keyword">import</span> &#123; <span class="title class_">UsersService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./users.service&#x27;</span>;<span class="keyword">import</span> &#123; getRepositoryToken &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/typeorm&#x27;</span>;<span class="keyword">import</span> &#123; <span class="title class_">User</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./user.entity&#x27;</span>;<span class="title function_">describe</span>(<span class="string">&#x27;UsersService&#x27;</span>, <span class="function">() =&gt;</span> &#123;  <span class="keyword">let</span> <span class="attr">service</span>: <span class="title class_">UsersService</span>;  <span class="keyword">let</span> <span class="attr">mockRepository</span>: <span class="built_in">any</span>;  <span class="title function_">beforeEach</span>(<span class="title function_">async</span> () =&gt; &#123;    mockRepository = &#123;      <span class="attr">find</span>: jest.<span class="title function_">fn</span>(),      <span class="attr">findOne</span>: jest.<span class="title function_">fn</span>(),      <span class="attr">create</span>: jest.<span class="title function_">fn</span>(),      <span class="attr">save</span>: jest.<span class="title function_">fn</span>(),      <span class="attr">delete</span>: jest.<span class="title function_">fn</span>(),    &#125;;    <span class="keyword">const</span> <span class="attr">module</span>: <span class="title class_">TestingModule</span> = <span class="keyword">await</span> <span class="title class_">Test</span>.<span class="title function_">createTestingModule</span>(&#123;      <span class="attr">providers</span>: [        <span class="title class_">UsersService</span>,        &#123;          <span class="attr">provide</span>: <span class="title function_">getRepositoryToken</span>(<span class="title class_">User</span>),          <span class="attr">useValue</span>: mockRepository,        &#125;,      ],    &#125;).<span class="title function_">compile</span>();    service = <span class="variable language_">module</span>.<span class="property">get</span>&lt;<span class="title class_">UsersService</span>&gt;(<span class="title class_">UsersService</span>);  &#125;);  <span class="title function_">it</span>(<span class="string">&#x27;should be defined&#x27;</span>, <span class="function">() =&gt;</span> &#123;    <span class="title function_">expect</span>(service).<span class="title function_">toBeDefined</span>();  &#125;);  <span class="title function_">describe</span>(<span class="string">&#x27;findAll&#x27;</span>, <span class="function">() =&gt;</span> &#123;    <span class="title function_">it</span>(<span class="string">&#x27;should return an array of users&#x27;</span>, <span class="title function_">async</span> () =&gt; &#123;      <span class="keyword">const</span> users = [&#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;Test User&#x27;</span> &#125;];      mockRepository.<span class="property">find</span>.<span class="title function_">mockReturnValue</span>(users);      <span class="keyword">const</span> result = <span class="keyword">await</span> service.<span class="title function_">findAll</span>();      <span class="title function_">expect</span>(result).<span class="title function_">toBe</span>(users);      <span class="title function_">expect</span>(mockRepository.<span class="property">find</span>).<span class="title function_">toHaveBeenCalled</span>();    &#125;);  &#125;);  <span class="title function_">describe</span>(<span class="string">&#x27;findOne&#x27;</span>, <span class="function">() =&gt;</span> &#123;    <span class="title function_">it</span>(<span class="string">&#x27;should return a user&#x27;</span>, <span class="title function_">async</span> () =&gt; &#123;      <span class="keyword">const</span> user = &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;Test User&#x27;</span> &#125;;      mockRepository.<span class="property">findOne</span>.<span class="title function_">mockReturnValue</span>(user);      <span class="keyword">const</span> result = <span class="keyword">await</span> service.<span class="title function_">findOne</span>(<span class="number">1</span>);      <span class="title function_">expect</span>(result).<span class="title function_">toBe</span>(user);      <span class="title function_">expect</span>(mockRepository.<span class="property">findOne</span>).<span class="title function_">toHaveBeenCalledWith</span>(&#123; <span class="attr">where</span>: &#123; <span class="attr">id</span>: <span class="number">1</span> &#125; &#125;);    &#125;);  &#125;);&#125;);</code></pre><h2 id="통합-테스트-Integration-Test"><a href="#통합-테스트-Integration-Test" class="headerlink" title="통합 테스트 (Integration Test)"></a>통합 테스트 (Integration Test)</h2><pre><code class="highlight typescript"><span class="comment">// users.controller.spec.ts</span><span class="keyword">import</span> &#123; <span class="title class_">Test</span>, <span class="title class_">TestingModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/testing&#x27;</span>;<span class="keyword">import</span> &#123; <span class="title class_">UsersController</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./users.controller&#x27;</span>;<span class="keyword">import</span> &#123; <span class="title class_">UsersService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./users.service&#x27;</span>;<span class="title function_">describe</span>(<span class="string">&#x27;UsersController&#x27;</span>, <span class="function">() =&gt;</span> &#123;  <span class="keyword">let</span> <span class="attr">controller</span>: <span class="title class_">UsersController</span>;  <span class="keyword">let</span> <span class="attr">mockUsersService</span>: <span class="built_in">any</span>;  <span class="title function_">beforeEach</span>(<span class="title function_">async</span> () =&gt; &#123;    mockUsersService = &#123;      <span class="attr">findAll</span>: jest.<span class="title function_">fn</span>(<span class="function">() =&gt;</span> []),      <span class="attr">findOne</span>: jest.<span class="title function_">fn</span>(<span class="function">() =&gt;</span> (&#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;Test User&#x27;</span> &#125;)),      <span class="attr">create</span>: jest.<span class="title function_">fn</span>(<span class="function">(<span class="params">dto</span>) =&gt;</span> (&#123; <span class="attr">id</span>: <span class="number">1</span>, ...dto &#125;)),      <span class="attr">remove</span>: jest.<span class="title function_">fn</span>(),    &#125;;    <span class="keyword">const</span> <span class="attr">module</span>: <span class="title class_">TestingModule</span> = <span class="keyword">await</span> <span class="title class_">Test</span>.<span class="title function_">createTestingModule</span>(&#123;      <span class="attr">controllers</span>: [<span class="title class_">UsersController</span>],      <span class="attr">providers</span>: [        &#123;          <span class="attr">provide</span>: <span class="title class_">UsersService</span>,          <span class="attr">useValue</span>: mockUsersService,        &#125;,      ],    &#125;).<span class="title function_">compile</span>();    controller = <span class="variable language_">module</span>.<span class="property">get</span>&lt;<span class="title class_">UsersController</span>&gt;(<span class="title class_">UsersController</span>);  &#125;);  <span class="title function_">it</span>(<span class="string">&#x27;should be defined&#x27;</span>, <span class="function">() =&gt;</span> &#123;    <span class="title function_">expect</span>(controller).<span class="title function_">toBeDefined</span>();  &#125;);  <span class="title function_">describe</span>(<span class="string">&#x27;findAll&#x27;</span>, <span class="function">() =&gt;</span> &#123;    <span class="title function_">it</span>(<span class="string">&#x27;should return an array of users&#x27;</span>, <span class="title function_">async</span> () =&gt; &#123;      <span class="keyword">const</span> result = <span class="keyword">await</span> controller.<span class="title function_">findAll</span>();      <span class="title function_">expect</span>(result).<span class="title function_">toEqual</span>([]);      <span class="title function_">expect</span>(mockUsersService.<span class="property">findAll</span>).<span class="title function_">toHaveBeenCalled</span>();    &#125;);  &#125;);  <span class="title function_">describe</span>(<span class="string">&#x27;create&#x27;</span>, <span class="function">() =&gt;</span> &#123;    <span class="title function_">it</span>(<span class="string">&#x27;should create a user&#x27;</span>, <span class="title function_">async</span> () =&gt; &#123;      <span class="keyword">const</span> createUserDto = &#123; <span class="attr">name</span>: <span class="string">&#x27;Test User&#x27;</span>, <span class="attr">email</span>: <span class="string">&#x27;test@example.com&#x27;</span> &#125;;      <span class="keyword">const</span> result = <span class="keyword">await</span> controller.<span class="title function_">create</span>(createUserDto);            <span class="title function_">expect</span>(result).<span class="title function_">toEqual</span>(&#123; <span class="attr">id</span>: <span class="number">1</span>, ...createUserDto &#125;);      <span class="title function_">expect</span>(mockUsersService.<span class="property">create</span>).<span class="title function_">toHaveBeenCalledWith</span>(createUserDto);    &#125;);  &#125;);&#125;);</code></pre><h2 id="E2E-테스트-End-to-End-Test"><a href="#E2E-테스트-End-to-End-Test" class="headerlink" title="E2E 테스트 (End-to-End Test)"></a>E2E 테스트 (End-to-End Test)</h2><pre><code class="highlight typescript"><span class="comment">// app.e2e-spec.ts</span><span class="keyword">import</span> &#123; <span class="title class_">Test</span>, <span class="title class_">TestingModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/testing&#x27;</span>;<span class="keyword">import</span> &#123; <span class="title class_">INestApplication</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;<span class="keyword">import</span> * <span class="keyword">as</span> request <span class="keyword">from</span> <span class="string">&#x27;supertest&#x27;</span>;<span class="keyword">import</span> &#123; <span class="title class_">AppModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./../src/app.module&#x27;</span>;<span class="title function_">describe</span>(<span class="string">&#x27;AppController (e2e)&#x27;</span>, <span class="function">() =&gt;</span> &#123;  <span class="keyword">let</span> <span class="attr">app</span>: <span class="title class_">INestApplication</span>;  <span class="title function_">beforeEach</span>(<span class="title function_">async</span> () =&gt; &#123;    <span class="keyword">const</span> <span class="attr">moduleFixture</span>: <span class="title class_">TestingModule</span> = <span class="keyword">await</span> <span class="title class_">Test</span>.<span class="title function_">createTestingModule</span>(&#123;      <span class="attr">imports</span>: [<span class="title class_">AppModule</span>],    &#125;).<span class="title function_">compile</span>();    app = moduleFixture.<span class="title function_">createNestApplication</span>();    <span class="keyword">await</span> app.<span class="title function_">init</span>();  &#125;);  <span class="title function_">it</span>(<span class="string">&#x27;/ (GET)&#x27;</span>, <span class="function">() =&gt;</span> &#123;    <span class="keyword">return</span> <span class="title function_">request</span>(app.<span class="title function_">getHttpServer</span>())      .<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>)      .<span class="title function_">expect</span>(<span class="number">200</span>)      .<span class="title function_">expect</span>(<span class="string">&#x27;Hello World!&#x27;</span>);  &#125;);  <span class="title function_">it</span>(<span class="string">&#x27;/users (GET)&#x27;</span>, <span class="function">() =&gt;</span> &#123;    <span class="keyword">return</span> <span class="title function_">request</span>(app.<span class="title function_">getHttpServer</span>())      .<span class="title function_">get</span>(<span class="string">&#x27;/users&#x27;</span>)      .<span class="title function_">expect</span>(<span class="number">200</span>)      .<span class="title function_">expect</span>([]);  &#125;);  <span class="title function_">it</span>(<span class="string">&#x27;/users (POST)&#x27;</span>, <span class="function">() =&gt;</span> &#123;    <span class="keyword">const</span> createUserDto = &#123; <span class="attr">name</span>: <span class="string">&#x27;Test User&#x27;</span>, <span class="attr">email</span>: <span class="string">&#x27;test@example.com&#x27;</span> &#125;;        <span class="keyword">return</span> <span class="title function_">request</span>(app.<span class="title function_">getHttpServer</span>())      .<span class="title function_">post</span>(<span class="string">&#x27;/users&#x27;</span>)      .<span class="title function_">send</span>(createUserDto)      .<span class="title function_">expect</span>(<span class="number">201</span>)      .<span class="title function_">expect</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;        <span class="title function_">expect</span>(res.<span class="property">body</span>).<span class="title function_">toMatchObject</span>(createUserDto);      &#125;);  &#125;);  <span class="title function_">afterAll</span>(<span class="title function_">async</span> () =&gt; &#123;    <span class="keyword">await</span> app.<span class="title function_">close</span>();  &#125;);&#125;);</code></pre><h2 id="테스트-실행"><a href="#테스트-실행" class="headerlink" title="테스트 실행"></a>테스트 실행</h2><pre><code class="highlight bash"><span class="comment"># 단위 테스트</span>npm run <span class="built_in">test</span><span class="comment"># 테스트 커버리지</span>npm run <span class="built_in">test</span>:cov<span class="comment"># E2E 테스트</span>npm run <span class="built_in">test</span>:e2e<span class="comment"># 테스트 감시 모드</span>npm run <span class="built_in">test</span>:watch</code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>테스팅은 안정적인 애플리케이션 개발의 핵심입니다. 단위 테스트, 통합 테스트, E2E 테스트를 적절히 조합하여 코드의 품질을 보장할 수 있습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> NestJS_고급 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NestJS 트러블슈팅[2] 순환 의존성 문제</title>
      <link href="/nestjs/troubleshooting/2/"/>
      <url>/nestjs/troubleshooting/2/</url>
      
        <content type="html"><![CDATA[<h1 id="NestJS-트러블슈팅-2-순환-의존성-문제"><a href="#NestJS-트러블슈팅-2-순환-의존성-문제" class="headerlink" title="NestJS 트러블슈팅[2] 순환 의존성 문제"></a>NestJS 트러블슈팅[2] 순환 의존성 문제</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 NestJS에서 자주 발생하는 순환 의존성 문제와 그 해결 방법에 대해 알아보겠습니다.</p><h2 id="순환-의존성이란"><a href="#순환-의존성이란" class="headerlink" title="순환 의존성이란?"></a>순환 의존성이란?</h2><p>순환 의존성은 두 개 이상의 모듈이나 서비스가 서로를 참조하는 상황입니다. 이는 마치 두 사람이 동시에 서로의 도움을 기다리는 상황과 같습니다.</p><h2 id="오류-예시"><a href="#오류-예시" class="headerlink" title="오류 예시"></a>오류 예시</h2><pre><code class="highlight plaintext">Error: Nest cannot create the UsersModule instance.The module at index [0] of the UsersModule &quot;imports&quot; array is undefined.</code></pre><h2 id="문제-상황"><a href="#문제-상황" class="headerlink" title="문제 상황"></a>문제 상황</h2><pre><code class="highlight typescript"><span class="comment">// users.service.ts</span><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;<span class="keyword">import</span> &#123; <span class="title class_">PostsService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../posts/posts.service&#x27;</span>;<span class="meta">@Injectable</span>()<span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UsersService</span> &#123;  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="attr">postsService</span>: <span class="title class_">PostsService</span></span>) &#123;&#125;&#125;</code></pre><pre><code class="highlight typescript"><span class="comment">// posts.service.ts</span><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;<span class="keyword">import</span> &#123; <span class="title class_">UsersService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../users/users.service&#x27;</span>;<span class="meta">@Injectable</span>()<span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">PostsService</span> &#123;  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="attr">usersService</span>: <span class="title class_">UsersService</span></span>) &#123;&#125;&#125;</code></pre><h2 id="해결-방법-1-forwardRef-사용"><a href="#해결-방법-1-forwardRef-사용" class="headerlink" title="해결 방법 1: forwardRef 사용"></a>해결 방법 1: forwardRef 사용</h2><pre><code class="highlight typescript"><span class="comment">// users.service.ts</span><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span>, forwardRef, <span class="title class_">Inject</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;<span class="keyword">import</span> &#123; <span class="title class_">PostsService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../posts/posts.service&#x27;</span>;<span class="meta">@Injectable</span>()<span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UsersService</span> &#123;  <span class="title function_">constructor</span>(<span class="params"></span><span class="params">    <span class="meta">@Inject</span>(forwardRef(() =&gt; PostsService))</span><span class="params">    <span class="keyword">private</span> <span class="attr">postsService</span>: <span class="title class_">PostsService</span>,</span><span class="params">  </span>) &#123;&#125;&#125;</code></pre><pre><code class="highlight typescript"><span class="comment">// posts.service.ts</span><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span>, forwardRef, <span class="title class_">Inject</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;<span class="keyword">import</span> &#123; <span class="title class_">UsersService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../users/users.service&#x27;</span>;<span class="meta">@Injectable</span>()<span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">PostsService</span> &#123;  <span class="title function_">constructor</span>(<span class="params"></span><span class="params">    <span class="meta">@Inject</span>(forwardRef(() =&gt; UsersService))</span><span class="params">    <span class="keyword">private</span> <span class="attr">usersService</span>: <span class="title class_">UsersService</span>,</span><span class="params">  </span>) &#123;&#125;&#125;</code></pre><h2 id="해결-방법-2-공통-서비스-분리"><a href="#해결-방법-2-공통-서비스-분리" class="headerlink" title="해결 방법 2: 공통 서비스 분리"></a>해결 방법 2: 공통 서비스 분리</h2><pre><code class="highlight typescript"><span class="comment">// shared.service.ts</span><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;<span class="meta">@Injectable</span>()<span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">SharedService</span> &#123;  <span class="comment">// 공통 로직</span>  <span class="title function_">getUserPostCount</span>(<span class="attr">userId</span>: <span class="built_in">number</span>): <span class="built_in">number</span> &#123;    <span class="comment">// 구현</span>  &#125;&#125;</code></pre><pre><code class="highlight typescript"><span class="comment">// users.service.ts</span><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;<span class="keyword">import</span> &#123; <span class="title class_">SharedService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../shared/shared.service&#x27;</span>;<span class="meta">@Injectable</span>()<span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UsersService</span> &#123;  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="attr">sharedService</span>: <span class="title class_">SharedService</span></span>) &#123;&#125;&#125;</code></pre><h2 id="해결-방법-3-이벤트-기반-아키텍처"><a href="#해결-방법-3-이벤트-기반-아키텍처" class="headerlink" title="해결 방법 3: 이벤트 기반 아키텍처"></a>해결 방법 3: 이벤트 기반 아키텍처</h2><pre><code class="highlight typescript"><span class="comment">// users.service.ts</span><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;<span class="keyword">import</span> &#123; <span class="title class_">EventEmitter2</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/event-emitter&#x27;</span>;<span class="meta">@Injectable</span>()<span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UsersService</span> &#123;  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="attr">eventEmitter</span>: <span class="title class_">EventEmitter2</span></span>) &#123;&#125;  <span class="keyword">async</span> <span class="title function_">createUser</span>(<span class="params"><span class="attr">userData</span>: <span class="built_in">any</span></span>) &#123;    <span class="keyword">const</span> user = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">create</span>(userData);    <span class="variable language_">this</span>.<span class="property">eventEmitter</span>.<span class="title function_">emit</span>(<span class="string">&#x27;user.created&#x27;</span>, user);    <span class="keyword">return</span> user;  &#125;&#125;</code></pre><pre><code class="highlight typescript"><span class="comment">// posts.service.ts</span><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;<span class="keyword">import</span> &#123; <span class="title class_">OnEvent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/event-emitter&#x27;</span>;<span class="meta">@Injectable</span>()<span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">PostsService</span> &#123;  <span class="meta">@OnEvent</span>(<span class="string">&#x27;user.created&#x27;</span>)  <span class="title function_">handleUserCreated</span>(<span class="params"><span class="attr">user</span>: <span class="built_in">any</span></span>) &#123;    <span class="comment">// 사용자 생성 후 처리</span>  &#125;&#125;</code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>순환 의존성 문제는 애플리케이션 설계를 재고해볼 좋은 기회입니다. forwardRef를 사용하거나 공통 서비스 분리, 이벤트 기반 아키텍처를 통해 해결할 수 있습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> NestJS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NestJS 인증과 권한 부여 (JWT)</title>
      <link href="/nestjs/basic/8/"/>
      <url>/nestjs/basic/8/</url>
      
        <content type="html"><![CDATA[<h1 id="NestJS-인증과-권한-부여-JWT"><a href="#NestJS-인증과-권한-부여-JWT" class="headerlink" title="NestJS 인증과 권한 부여 (JWT)"></a>NestJS 인증과 권한 부여 (JWT)</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 NestJS에서 JWT를 사용한 인증과 권한 부여 시스템을 구축하는 방법에 대해 알아보겠습니다.</p><h2 id="JWT-설치"><a href="#JWT-설치" class="headerlink" title="JWT 설치"></a>JWT 설치</h2><pre><code class="highlight bash">npm install @nestjs/jwt @nestjs/passport passport passport-local passport-jwtnpm install -D @types/passport-local @types/passport-jwt</code></pre><h2 id="JWT-모듈-설정"><a href="#JWT-모듈-설정" class="headerlink" title="JWT 모듈 설정"></a>JWT 모듈 설정</h2><pre><code class="highlight typescript"><span class="comment">// auth.module.ts</span><span class="keyword">import</span> &#123; <span class="title class_">Module</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;<span class="keyword">import</span> &#123; <span class="title class_">JwtModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/jwt&#x27;</span>;<span class="keyword">import</span> &#123; <span class="title class_">PassportModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/passport&#x27;</span>;<span class="keyword">import</span> &#123; <span class="title class_">AuthService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./auth.service&#x27;</span>;<span class="keyword">import</span> &#123; <span class="title class_">AuthController</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./auth.controller&#x27;</span>;<span class="keyword">import</span> &#123; <span class="title class_">JwtStrategy</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./jwt.strategy&#x27;</span>;<span class="keyword">import</span> &#123; <span class="title class_">UsersModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../users/users.module&#x27;</span>;<span class="meta">@Module</span>(&#123;  <span class="attr">imports</span>: [    <span class="title class_">UsersModule</span>,    <span class="title class_">PassportModule</span>,    <span class="title class_">JwtModule</span>.<span class="title function_">register</span>(&#123;      <span class="attr">secret</span>: <span class="string">&#x27;your-secret-key&#x27;</span>,      <span class="attr">signOptions</span>: &#123; <span class="attr">expiresIn</span>: <span class="string">&#x27;1h&#x27;</span> &#125;,    &#125;),  ],  <span class="attr">providers</span>: [<span class="title class_">AuthService</span>, <span class="title class_">JwtStrategy</span>],  <span class="attr">controllers</span>: [<span class="title class_">AuthController</span>],&#125;)<span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AuthModule</span> &#123;&#125;</code></pre><h2 id="인증-서비스"><a href="#인증-서비스" class="headerlink" title="인증 서비스"></a>인증 서비스</h2><pre><code class="highlight typescript"><span class="comment">// auth.service.ts</span><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;<span class="keyword">import</span> &#123; <span class="title class_">JwtService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/jwt&#x27;</span>;<span class="keyword">import</span> &#123; <span class="title class_">UsersService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../users/users.service&#x27;</span>;<span class="keyword">import</span> * <span class="keyword">as</span> bcrypt <span class="keyword">from</span> <span class="string">&#x27;bcrypt&#x27;</span>;<span class="meta">@Injectable</span>()<span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AuthService</span> &#123;  <span class="title function_">constructor</span>(<span class="params"></span><span class="params">    <span class="keyword">private</span> <span class="attr">usersService</span>: <span class="title class_">UsersService</span>,</span><span class="params">    <span class="keyword">private</span> <span class="attr">jwtService</span>: <span class="title class_">JwtService</span>,</span><span class="params">  </span>) &#123;&#125;  <span class="keyword">async</span> <span class="title function_">validateUser</span>(<span class="attr">email</span>: <span class="built_in">string</span>, <span class="attr">password</span>: <span class="built_in">string</span>): <span class="title class_">Promise</span>&lt;<span class="built_in">any</span>&gt; &#123;    <span class="keyword">const</span> user = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">usersService</span>.<span class="title function_">findByEmail</span>(email);    <span class="keyword">if</span> (user &amp;&amp; <span class="keyword">await</span> bcrypt.<span class="title function_">compare</span>(password, user.<span class="property">password</span>)) &#123;      <span class="keyword">const</span> &#123; password, ...result &#125; = user;      <span class="keyword">return</span> result;    &#125;    <span class="keyword">return</span> <span class="literal">null</span>;  &#125;  <span class="keyword">async</span> <span class="title function_">login</span>(<span class="params"><span class="attr">user</span>: <span class="built_in">any</span></span>) &#123;    <span class="keyword">const</span> payload = &#123; <span class="attr">email</span>: user.<span class="property">email</span>, <span class="attr">sub</span>: user.<span class="property">id</span> &#125;;    <span class="keyword">return</span> &#123;      <span class="attr">access_token</span>: <span class="variable language_">this</span>.<span class="property">jwtService</span>.<span class="title function_">sign</span>(payload),    &#125;;  &#125;  <span class="keyword">async</span> <span class="title function_">register</span>(<span class="params"><span class="attr">userData</span>: <span class="built_in">any</span></span>) &#123;    <span class="keyword">const</span> hashedPassword = <span class="keyword">await</span> bcrypt.<span class="title function_">hash</span>(userData.<span class="property">password</span>, <span class="number">10</span>);    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">usersService</span>.<span class="title function_">create</span>(&#123;      ...userData,      <span class="attr">password</span>: hashedPassword,    &#125;);  &#125;&#125;</code></pre><h2 id="JWT-전략"><a href="#JWT-전략" class="headerlink" title="JWT 전략"></a>JWT 전략</h2><pre><code class="highlight typescript"><span class="comment">// jwt.strategy.ts</span><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;<span class="keyword">import</span> &#123; <span class="title class_">PassportStrategy</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/passport&#x27;</span>;<span class="keyword">import</span> &#123; <span class="title class_">ExtractJwt</span>, <span class="title class_">Strategy</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;passport-jwt&#x27;</span>;<span class="meta">@Injectable</span>()<span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">JwtStrategy</span> <span class="keyword">extends</span> <span class="title class_ inherited__">PassportStrategy</span>(<span class="title class_">Strategy</span>) &#123;  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;    <span class="variable language_">super</span>(&#123;      <span class="attr">jwtFromRequest</span>: <span class="title class_">ExtractJwt</span>.<span class="title function_">fromAuthHeaderAsBearerToken</span>(),      <span class="attr">ignoreExpiration</span>: <span class="literal">false</span>,      <span class="attr">secretOrKey</span>: <span class="string">&#x27;your-secret-key&#x27;</span>,    &#125;);  &#125;  <span class="keyword">async</span> <span class="title function_">validate</span>(<span class="params"><span class="attr">payload</span>: <span class="built_in">any</span></span>) &#123;    <span class="keyword">return</span> &#123; <span class="attr">userId</span>: payload.<span class="property">sub</span>, <span class="attr">email</span>: payload.<span class="property">email</span> &#125;;  &#125;&#125;</code></pre><h2 id="인증-컨트롤러"><a href="#인증-컨트롤러" class="headerlink" title="인증 컨트롤러"></a>인증 컨트롤러</h2><pre><code class="highlight typescript"><span class="comment">// auth.controller.ts</span><span class="keyword">import</span> &#123; <span class="title class_">Controller</span>, <span class="title class_">Post</span>, <span class="title class_">Body</span>, <span class="title class_">UseGuards</span>, <span class="title class_">Request</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;<span class="keyword">import</span> &#123; <span class="title class_">AuthService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./auth.service&#x27;</span>;<span class="keyword">import</span> &#123; <span class="title class_">JwtAuthGuard</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./jwt-auth.guard&#x27;</span>;<span class="meta">@Controller</span>(<span class="string">&#x27;auth&#x27;</span>)<span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AuthController</span> &#123;  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="attr">authService</span>: <span class="title class_">AuthService</span></span>) &#123;&#125;  <span class="meta">@Post</span>(<span class="string">&#x27;login&#x27;</span>)  <span class="keyword">async</span> <span class="title function_">login</span>(<span class="params"><span class="meta">@Body</span>() <span class="attr">loginDto</span>: <span class="built_in">any</span></span>) &#123;    <span class="keyword">const</span> user = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">authService</span>.<span class="title function_">validateUser</span>(      loginDto.<span class="property">email</span>,      loginDto.<span class="property">password</span>    );    <span class="keyword">if</span> (!user) &#123;      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnauthorizedException</span>();    &#125;    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">authService</span>.<span class="title function_">login</span>(user);  &#125;  <span class="meta">@Post</span>(<span class="string">&#x27;register&#x27;</span>)  <span class="keyword">async</span> <span class="title function_">register</span>(<span class="params"><span class="meta">@Body</span>() <span class="attr">registerDto</span>: <span class="built_in">any</span></span>) &#123;    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">authService</span>.<span class="title function_">register</span>(registerDto);  &#125;  <span class="meta">@UseGuards</span>(<span class="title class_">JwtAuthGuard</span>)  <span class="meta">@Get</span>(<span class="string">&#x27;profile&#x27;</span>)  <span class="title function_">getProfile</span>(<span class="params"><span class="meta">@Request</span>() req</span>) &#123;    <span class="keyword">return</span> req.<span class="property">user</span>;  &#125;&#125;</code></pre><h2 id="JWT-가드"><a href="#JWT-가드" class="headerlink" title="JWT 가드"></a>JWT 가드</h2><pre><code class="highlight typescript"><span class="comment">// jwt-auth.guard.ts</span><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;<span class="keyword">import</span> &#123; <span class="title class_">AuthGuard</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/passport&#x27;</span>;<span class="meta">@Injectable</span>()<span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">JwtAuthGuard</span> <span class="keyword">extends</span> <span class="title class_ inherited__">AuthGuard</span>(<span class="string">&#x27;jwt&#x27;</span>) &#123;&#125;</code></pre><h2 id="가드-적용"><a href="#가드-적용" class="headerlink" title="가드 적용"></a>가드 적용</h2><pre><code class="highlight typescript"><span class="comment">// users.controller.ts</span><span class="keyword">import</span> &#123; <span class="title class_">Controller</span>, <span class="title class_">Get</span>, <span class="title class_">UseGuards</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;<span class="keyword">import</span> &#123; <span class="title class_">JwtAuthGuard</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../auth/jwt-auth.guard&#x27;</span>;<span class="meta">@Controller</span>(<span class="string">&#x27;users&#x27;</span>)<span class="meta">@UseGuards</span>(<span class="title class_">JwtAuthGuard</span>)<span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UsersController</span> &#123;  <span class="meta">@Get</span>()  <span class="title function_">findAll</span>(<span class="params"></span>) &#123;    <span class="keyword">return</span> <span class="string">&#x27;This action returns all users&#x27;</span>;  &#125;&#125;</code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>JWT를 사용한 인증 시스템은 확장 가능하고 보안성이 뛰어난 방법입니다. 가드와 전략을 적절히 활용하면 안전한 API를 구축할 수 있습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> NestJS_기본기 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NestJS 데이터베이스 통합 (TypeORM)</title>
      <link href="/nestjs/basic/7/"/>
      <url>/nestjs/basic/7/</url>
      
        <content type="html"><![CDATA[<h1 id="NestJS-데이터베이스-통합-TypeORM"><a href="#NestJS-데이터베이스-통합-TypeORM" class="headerlink" title="NestJS 데이터베이스 통합 (TypeORM)"></a>NestJS 데이터베이스 통합 (TypeORM)</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 NestJS에서 TypeORM을 사용하여 데이터베이스와 통합하는 방법에 대해 알아보겠습니다.</p><h2 id="TypeORM-설치"><a href="#TypeORM-설치" class="headerlink" title="TypeORM 설치"></a>TypeORM 설치</h2><pre><code class="highlight bash">npm install @nestjs/typeorm typeorm mysql2</code></pre><h2 id="데이터베이스-설정"><a href="#데이터베이스-설정" class="headerlink" title="데이터베이스 설정"></a>데이터베이스 설정</h2><pre><code class="highlight typescript"><span class="comment">// app.module.ts</span><span class="keyword">import</span> &#123; <span class="title class_">Module</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;<span class="keyword">import</span> &#123; <span class="title class_">TypeOrmModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/typeorm&#x27;</span>;<span class="meta">@Module</span>(&#123;  <span class="attr">imports</span>: [    <span class="title class_">TypeOrmModule</span>.<span class="title function_">forRoot</span>(&#123;      <span class="attr">type</span>: <span class="string">&#x27;mysql&#x27;</span>,      <span class="attr">host</span>: <span class="string">&#x27;localhost&#x27;</span>,      <span class="attr">port</span>: <span class="number">3306</span>,      <span class="attr">username</span>: <span class="string">&#x27;root&#x27;</span>,      <span class="attr">password</span>: <span class="string">&#x27;password&#x27;</span>,      <span class="attr">database</span>: <span class="string">&#x27;test&#x27;</span>,      <span class="attr">entities</span>: [__dirname + <span class="string">&#x27;/**/*.entity&#123;.ts,.js&#125;&#x27;</span>],      <span class="attr">synchronize</span>: <span class="literal">true</span>,    &#125;),  ],&#125;)<span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppModule</span> &#123;&#125;</code></pre><h2 id="엔티티-정의"><a href="#엔티티-정의" class="headerlink" title="엔티티 정의"></a>엔티티 정의</h2><pre><code class="highlight typescript"><span class="comment">// user.entity.ts</span><span class="keyword">import</span> &#123; <span class="title class_">Entity</span>, <span class="title class_">PrimaryGeneratedColumn</span>, <span class="title class_">Column</span>, <span class="title class_">CreateDateColumn</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;typeorm&#x27;</span>;<span class="meta">@Entity</span>()<span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;  <span class="meta">@PrimaryGeneratedColumn</span>()  <span class="attr">id</span>: <span class="built_in">number</span>;  <span class="meta">@Column</span>()  <span class="attr">name</span>: <span class="built_in">string</span>;  <span class="meta">@Column</span>(&#123; <span class="attr">unique</span>: <span class="literal">true</span> &#125;)  <span class="attr">email</span>: <span class="built_in">string</span>;  <span class="meta">@CreateDateColumn</span>()  <span class="attr">createdAt</span>: <span class="title class_">Date</span>;&#125;</code></pre><h2 id="서비스에서-엔티티-사용"><a href="#서비스에서-엔티티-사용" class="headerlink" title="서비스에서 엔티티 사용"></a>서비스에서 엔티티 사용</h2><pre><code class="highlight typescript"><span class="comment">// users.service.ts</span><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;<span class="keyword">import</span> &#123; <span class="title class_">InjectRepository</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/typeorm&#x27;</span>;<span class="keyword">import</span> &#123; <span class="title class_">Repository</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;typeorm&#x27;</span>;<span class="keyword">import</span> &#123; <span class="title class_">User</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./user.entity&#x27;</span>;<span class="meta">@Injectable</span>()<span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UsersService</span> &#123;  <span class="title function_">constructor</span>(<span class="params"></span><span class="params">    <span class="meta">@InjectRepository</span>(User)</span><span class="params">    <span class="keyword">private</span> <span class="attr">usersRepository</span>: <span class="title class_">Repository</span>&lt;<span class="title class_">User</span>&gt;,</span><span class="params">  </span>) &#123;&#125;  <span class="keyword">async</span> <span class="title function_">findAll</span>(): <span class="title class_">Promise</span>&lt;<span class="title class_">User</span>[]&gt; &#123;    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">usersRepository</span>.<span class="title function_">find</span>();  &#125;  <span class="keyword">async</span> <span class="title function_">findOne</span>(<span class="attr">id</span>: <span class="built_in">number</span>): <span class="title class_">Promise</span>&lt;<span class="title class_">User</span>&gt; &#123;    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">usersRepository</span>.<span class="title function_">findOne</span>(&#123; <span class="attr">where</span>: &#123; id &#125; &#125;);  &#125;  <span class="keyword">async</span> <span class="title function_">create</span>(<span class="attr">userData</span>: <span class="title class_">Partial</span>&lt;<span class="title class_">User</span>&gt;): <span class="title class_">Promise</span>&lt;<span class="title class_">User</span>&gt; &#123;    <span class="keyword">const</span> user = <span class="variable language_">this</span>.<span class="property">usersRepository</span>.<span class="title function_">create</span>(userData);    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">usersRepository</span>.<span class="title function_">save</span>(user);  &#125;  <span class="keyword">async</span> <span class="title function_">remove</span>(<span class="attr">id</span>: <span class="built_in">number</span>): <span class="title class_">Promise</span>&lt;<span class="built_in">void</span>&gt; &#123;    <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">usersRepository</span>.<span class="title function_">delete</span>(id);  &#125;&#125;</code></pre><h2 id="모듈-설정"><a href="#모듈-설정" class="headerlink" title="모듈 설정"></a>모듈 설정</h2><pre><code class="highlight typescript"><span class="comment">// users.module.ts</span><span class="keyword">import</span> &#123; <span class="title class_">Module</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;<span class="keyword">import</span> &#123; <span class="title class_">TypeOrmModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/typeorm&#x27;</span>;<span class="keyword">import</span> &#123; <span class="title class_">UsersService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./users.service&#x27;</span>;<span class="keyword">import</span> &#123; <span class="title class_">UsersController</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./users.controller&#x27;</span>;<span class="keyword">import</span> &#123; <span class="title class_">User</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./user.entity&#x27;</span>;<span class="meta">@Module</span>(&#123;  <span class="attr">imports</span>: [<span class="title class_">TypeOrmModule</span>.<span class="title function_">forFeature</span>([<span class="title class_">User</span>])],  <span class="attr">providers</span>: [<span class="title class_">UsersService</span>],  <span class="attr">controllers</span>: [<span class="title class_">UsersController</span>],&#125;)<span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UsersModule</span> &#123;&#125;</code></pre><h2 id="관계-설정"><a href="#관계-설정" class="headerlink" title="관계 설정"></a>관계 설정</h2><pre><code class="highlight typescript"><span class="comment">// user.entity.ts</span><span class="keyword">import</span> &#123; <span class="title class_">Entity</span>, <span class="title class_">PrimaryGeneratedColumn</span>, <span class="title class_">Column</span>, <span class="title class_">OneToMany</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;typeorm&#x27;</span>;<span class="keyword">import</span> &#123; <span class="title class_">Post</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../posts/post.entity&#x27;</span>;<span class="meta">@Entity</span>()<span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;  <span class="meta">@PrimaryGeneratedColumn</span>()  <span class="attr">id</span>: <span class="built_in">number</span>;  <span class="meta">@Column</span>()  <span class="attr">name</span>: <span class="built_in">string</span>;  <span class="meta">@OneToMany</span>(<span class="function">() =&gt;</span> <span class="title class_">Post</span>, <span class="function"><span class="params">post</span> =&gt;</span> post.<span class="property">user</span>)  <span class="attr">posts</span>: <span class="title class_">Post</span>[];&#125;</code></pre><pre><code class="highlight typescript"><span class="comment">// post.entity.ts</span><span class="keyword">import</span> &#123; <span class="title class_">Entity</span>, <span class="title class_">PrimaryGeneratedColumn</span>, <span class="title class_">Column</span>, <span class="title class_">ManyToOne</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;typeorm&#x27;</span>;<span class="keyword">import</span> &#123; <span class="title class_">User</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../users/user.entity&#x27;</span>;<span class="meta">@Entity</span>()<span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Post</span> &#123;  <span class="meta">@PrimaryGeneratedColumn</span>()  <span class="attr">id</span>: <span class="built_in">number</span>;  <span class="meta">@Column</span>()  <span class="attr">title</span>: <span class="built_in">string</span>;  <span class="meta">@Column</span>()  <span class="attr">content</span>: <span class="built_in">string</span>;  <span class="meta">@ManyToOne</span>(<span class="function">() =&gt;</span> <span class="title class_">User</span>, <span class="function"><span class="params">user</span> =&gt;</span> user.<span class="property">posts</span>)  <span class="attr">user</span>: <span class="title class_">User</span>;&#125;</code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>TypeORM을 사용하면 NestJS에서 데이터베이스를 쉽게 다룰 수 있습니다. 엔티티 정의와 관계 설정을 통해 복잡한 데이터 구조도 효율적으로 관리할 수 있습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> NestJS_기본기 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NestJS 고급 주제 - 인터셉터와 파이프</title>
      <link href="/nestjs/special/1/"/>
      <url>/nestjs/special/1/</url>
      
        <content type="html"><![CDATA[<h1 id="NestJS-고급-주제-인터셉터와-파이프"><a href="#NestJS-고급-주제-인터셉터와-파이프" class="headerlink" title="NestJS 고급 주제 - 인터셉터와 파이프"></a>NestJS 고급 주제 - 인터셉터와 파이프</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 NestJS의 고급 기능인 인터셉터와 파이프에 대해 알아보겠습니다.</p><h2 id="인터셉터란"><a href="#인터셉터란" class="headerlink" title="인터셉터란?"></a>인터셉터란?</h2><p>인터셉터는 요청과 응답을 가로채서 변형하거나 추가 로직을 수행할 수 있는 클래스입니다. 인터셉터는 마치 사진 편집 필터와 같습니다. 원본 사진(응답)을 받아서 효과를 적용한 후 최종 결과를 제공합니다.</p><h3 id="로깅-인터셉터"><a href="#로깅-인터셉터" class="headerlink" title="로깅 인터셉터"></a>로깅 인터셉터</h3><pre><code class="highlight typescript"><span class="comment">// logging.interceptor.ts</span><span class="keyword">import</span> &#123;  <span class="title class_">Injectable</span>,  <span class="title class_">NestInterceptor</span>,  <span class="title class_">ExecutionContext</span>,  <span class="title class_">CallHandler</span>,&#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;<span class="keyword">import</span> &#123; <span class="title class_">Observable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;<span class="keyword">import</span> &#123; tap &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/operators&#x27;</span>;<span class="meta">@Injectable</span>()<span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">LoggingInterceptor</span> <span class="keyword">implements</span> <span class="title class_">NestInterceptor</span> &#123;  <span class="title function_">intercept</span>(<span class="attr">context</span>: <span class="title class_">ExecutionContext</span>, <span class="attr">next</span>: <span class="title class_">CallHandler</span>): <span class="title class_">Observable</span>&lt;<span class="built_in">any</span>&gt; &#123;    <span class="keyword">const</span> now = <span class="title class_">Date</span>.<span class="title function_">now</span>();    <span class="keyword">const</span> request = context.<span class="title function_">switchToHttp</span>().<span class="title function_">getRequest</span>();        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Before: <span class="subst">$&#123;request.method&#125;</span> <span class="subst">$&#123;request.url&#125;</span>`</span>);        <span class="keyword">return</span> next.<span class="title function_">handle</span>().<span class="title function_">pipe</span>(      <span class="title function_">tap</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`After: <span class="subst">$&#123;<span class="built_in">Date</span>.now() - now&#125;</span>ms`</span>)),    );  &#125;&#125;</code></pre><h3 id="응답-변환-인터셉터"><a href="#응답-변환-인터셉터" class="headerlink" title="응답 변환 인터셉터"></a>응답 변환 인터셉터</h3><pre><code class="highlight typescript"><span class="comment">// transform.interceptor.ts</span><span class="keyword">import</span> &#123;  <span class="title class_">Injectable</span>,  <span class="title class_">NestInterceptor</span>,  <span class="title class_">ExecutionContext</span>,  <span class="title class_">CallHandler</span>,&#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;<span class="keyword">import</span> &#123; <span class="title class_">Observable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;<span class="keyword">import</span> &#123; map &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/operators&#x27;</span>;<span class="meta">@Injectable</span>()<span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">TransformInterceptor</span> <span class="keyword">implements</span> <span class="title class_">NestInterceptor</span> &#123;  <span class="title function_">intercept</span>(<span class="attr">context</span>: <span class="title class_">ExecutionContext</span>, <span class="attr">next</span>: <span class="title class_">CallHandler</span>): <span class="title class_">Observable</span>&lt;<span class="built_in">any</span>&gt; &#123;    <span class="keyword">return</span> next.<span class="title function_">handle</span>().<span class="title function_">pipe</span>(      <span class="title function_">map</span>(<span class="function"><span class="params">data</span> =&gt;</span> (&#123;        <span class="attr">success</span>: <span class="literal">true</span>,        data,        <span class="attr">timestamp</span>: <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toISOString</span>(),      &#125;)),    );  &#125;&#125;</code></pre><h2 id="파이프란"><a href="#파이프란" class="headerlink" title="파이프란?"></a>파이프란?</h2><p>파이프는 입력 데이터를 변환하거나 검증하는 클래스입니다. 파이프는 마치 정수기와 같습니다. 원본 물(입력 데이터)을 받아서 깨끗한 물(검증된 데이터)로 변환합니다.</p><h3 id="검증-파이프"><a href="#검증-파이프" class="headerlink" title="검증 파이프"></a>검증 파이프</h3><pre><code class="highlight typescript"><span class="comment">// validation.pipe.ts</span><span class="keyword">import</span> &#123;  <span class="title class_">PipeTransform</span>,  <span class="title class_">Injectable</span>,  <span class="title class_">ArgumentMetadata</span>,  <span class="title class_">BadRequestException</span>,&#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;<span class="meta">@Injectable</span>()<span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ValidationPipe</span> <span class="keyword">implements</span> <span class="title class_">PipeTransform</span> &#123;  <span class="title function_">transform</span>(<span class="params"><span class="attr">value</span>: <span class="built_in">any</span>, <span class="attr">metadata</span>: <span class="title class_">ArgumentMetadata</span></span>) &#123;    <span class="keyword">if</span> (!value) &#123;      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BadRequestException</span>(<span class="string">&#x27;Validation failed&#x27;</span>);    &#125;    <span class="keyword">return</span> value;  &#125;&#125;</code></pre><h3 id="변환-파이프"><a href="#변환-파이프" class="headerlink" title="변환 파이프"></a>변환 파이프</h3><pre><code class="highlight typescript"><span class="comment">// parse-int.pipe.ts</span><span class="keyword">import</span> &#123;  <span class="title class_">PipeTransform</span>,  <span class="title class_">Injectable</span>,  <span class="title class_">ArgumentMetadata</span>,  <span class="title class_">BadRequestException</span>,&#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;<span class="meta">@Injectable</span>()<span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ParseIntPipe</span> <span class="keyword">implements</span> <span class="title class_">PipeTransform</span>&lt;<span class="built_in">string</span>, <span class="built_in">number</span>&gt; &#123;  <span class="title function_">transform</span>(<span class="attr">value</span>: <span class="built_in">string</span>, <span class="attr">metadata</span>: <span class="title class_">ArgumentMetadata</span>): <span class="built_in">number</span> &#123;    <span class="keyword">const</span> val = <span class="built_in">parseInt</span>(value, <span class="number">10</span>);    <span class="keyword">if</span> (<span class="built_in">isNaN</span>(val)) &#123;      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BadRequestException</span>(<span class="string">&#x27;Validation failed&#x27;</span>);    &#125;    <span class="keyword">return</span> val;  &#125;&#125;</code></pre><h3 id="파이프-적용"><a href="#파이프-적용" class="headerlink" title="파이프 적용"></a>파이프 적용</h3><pre><code class="highlight typescript"><span class="comment">// users.controller.ts</span><span class="meta">@Controller</span>(<span class="string">&#x27;users&#x27;</span>)<span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UsersController</span> &#123;  <span class="meta">@Get</span>(<span class="string">&#x27;:id&#x27;</span>)  <span class="title function_">findOne</span>(<span class="params"><span class="meta">@Param</span>(<span class="string">&#x27;id&#x27;</span>, ParseIntPipe) <span class="attr">id</span>: <span class="built_in">number</span></span>) &#123;    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">usersService</span>.<span class="title function_">findOne</span>(id);  &#125;&#125;</code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>인터셉터와 파이프는 NestJS의 강력한 기능으로, 코드의 재사용성과 관심사 분리를 향상시킵니다. 적절히 활용하면 깔끔하고 유지보수가 쉬운 애플리케이션을 만들 수 있습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> NestJS_고급 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NestJS 트러블슈팅[1] 의존성 주입 오류</title>
      <link href="/nestjs/troubleshooting/1/"/>
      <url>/nestjs/troubleshooting/1/</url>
      
        <content type="html"><![CDATA[<h1 id="NestJS-트러블슈팅-1-의존성-주입-오류"><a href="#NestJS-트러블슈팅-1-의존성-주입-오류" class="headerlink" title="NestJS 트러블슈팅[1] 의존성 주입 오류"></a>NestJS 트러블슈팅[1] 의존성 주입 오류</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 NestJS에서 자주 발생하는 의존성 주입 오류와 그 해결 방법에 대해 알아보겠습니다.</p><h2 id="1-Nest-can-t-resolve-dependencies-오류"><a href="#1-Nest-can-t-resolve-dependencies-오류" class="headerlink" title="1. Nest can&#39;t resolve dependencies 오류"></a>1. <code>Nest can&#39;t resolve dependencies</code> 오류</h2><h3 id="오류-메시지"><a href="#오류-메시지" class="headerlink" title="오류 메시지"></a>오류 메시지</h3><pre><code class="highlight plaintext">Nest can&#x27;t resolve dependencies of the UsersController (?). Please make sure that the argument UsersService at index [0] is available in the UsersModule context.</code></pre><h3 id="원인"><a href="#원인" class="headerlink" title="원인"></a>원인</h3><ul><li>서비스가 모듈에 등록되지 않음</li><li>잘못된 import 경로</li><li>순환 의존성 문제</li></ul><h3 id="해결-방법"><a href="#해결-방법" class="headerlink" title="해결 방법"></a>해결 방법</h3><h4 id="1-모듈에-서비스-등록-확인"><a href="#1-모듈에-서비스-등록-확인" class="headerlink" title="1. 모듈에 서비스 등록 확인"></a>1. 모듈에 서비스 등록 확인</h4><pre><code class="highlight typescript"><span class="comment">// users.module.ts</span><span class="meta">@Module</span>(&#123;  <span class="attr">controllers</span>: [<span class="title class_">UsersController</span>],  <span class="attr">providers</span>: [<span class="title class_">UsersService</span>], <span class="comment">// 서비스 등록 확인</span>&#125;)<span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UsersModule</span> &#123;&#125;</code></pre><h4 id="2-Import-경로-확인"><a href="#2-Import-경로-확인" class="headerlink" title="2. Import 경로 확인"></a>2. Import 경로 확인</h4><pre><code class="highlight typescript"><span class="comment">// users.controller.ts</span><span class="keyword">import</span> &#123; <span class="title class_">UsersService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./users.service&#x27;</span>; <span class="comment">// 올바른 경로 확인</span></code></pre><h4 id="3-순환-의존성-해결"><a href="#3-순환-의존성-해결" class="headerlink" title="3. 순환 의존성 해결"></a>3. 순환 의존성 해결</h4><pre><code class="highlight typescript"><span class="comment">// users.service.ts</span><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span>, forwardRef, <span class="title class_">Inject</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;<span class="keyword">import</span> &#123; <span class="title class_">PostsService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../posts/posts.service&#x27;</span>;<span class="meta">@Injectable</span>()<span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UsersService</span> &#123;  <span class="title function_">constructor</span>(<span class="params"></span><span class="params">    <span class="meta">@Inject</span>(forwardRef(() =&gt; PostsService))</span><span class="params">    <span class="keyword">private</span> <span class="attr">postsService</span>: <span class="title class_">PostsService</span>,</span><span class="params">  </span>) &#123;&#125;&#125;</code></pre><h2 id="2-Module-not-found-오류"><a href="#2-Module-not-found-오류" class="headerlink" title="2. Module not found 오류"></a>2. <code>Module not found</code> 오류</h2><h3 id="오류-메시지-1"><a href="#오류-메시지-1" class="headerlink" title="오류 메시지"></a>오류 메시지</h3><pre><code class="highlight plaintext">Cannot find module &#x27;./users/users.module&#x27; or its corresponding type declarations.</code></pre><h3 id="해결-방법-1"><a href="#해결-방법-1" class="headerlink" title="해결 방법"></a>해결 방법</h3><pre><code class="highlight typescript"><span class="comment">// app.module.ts</span><span class="keyword">import</span> &#123; <span class="title class_">UsersModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./users/users.module&#x27;</span>; <span class="comment">// 경로 확인</span><span class="meta">@Module</span>(&#123;  <span class="attr">imports</span>: [<span class="title class_">UsersModule</span>],&#125;)<span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppModule</span> &#123;&#125;</code></pre><h2 id="3-Provider-not-found-오류"><a href="#3-Provider-not-found-오류" class="headerlink" title="3. Provider not found 오류"></a>3. <code>Provider not found</code> 오류</h2><h3 id="해결-방법-2"><a href="#해결-방법-2" class="headerlink" title="해결 방법"></a>해결 방법</h3><pre><code class="highlight typescript"><span class="comment">// shared.module.ts</span><span class="meta">@Module</span>(&#123;  <span class="attr">providers</span>: [<span class="title class_">SharedService</span>],  <span class="attr">exports</span>: [<span class="title class_">SharedService</span>], <span class="comment">// export 추가</span>&#125;)<span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">SharedModule</span> &#123;&#125;</code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>의존성 주입 오류는 NestJS에서 가장 자주 발생하는 문제 중 하나입니다. 모듈 구조를 정확히 이해하고 서비스 등록을 확인하면 대부분의 문제를 해결할 수 있습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> NestJS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NestJS 에러 처리</title>
      <link href="/nestjs/basic/6/"/>
      <url>/nestjs/basic/6/</url>
      
        <content type="html"><![CDATA[<h1 id="NestJS-에러-처리"><a href="#NestJS-에러-처리" class="headerlink" title="NestJS 에러 처리"></a>NestJS 에러 처리</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 NestJS의 에러 처리에 대해 알아보겠습니다.<br>애플리케이션에서 발생하는 예외를 적절히 처리하는 것은 사용자 경험과 시스템 안정성을 위해 매우 중요합니다.</p><h2 id="기본-예외-처리"><a href="#기본-예외-처리" class="headerlink" title="기본 예외 처리"></a>기본 예외 처리</h2><p>NestJS는 기본적인 HTTP 예외를 제공합니다:</p><pre><code class="highlight typescript"><span class="comment">// users.controller.ts</span><span class="keyword">import</span> &#123; <span class="title class_">Controller</span>, <span class="title class_">Get</span>, <span class="title class_">Param</span>, <span class="title class_">NotFoundException</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;<span class="meta">@Controller</span>(<span class="string">&#x27;users&#x27;</span>)<span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UsersController</span> &#123;  <span class="meta">@Get</span>(<span class="string">&#x27;:id&#x27;</span>)  <span class="title function_">findOne</span>(<span class="params"><span class="meta">@Param</span>(<span class="string">&#x27;id&#x27;</span>) <span class="attr">id</span>: <span class="built_in">string</span></span>) &#123;    <span class="keyword">const</span> user = <span class="variable language_">this</span>.<span class="property">usersService</span>.<span class="title function_">findOne</span>(+id);    <span class="keyword">if</span> (!user) &#123;      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NotFoundException</span>(<span class="string">&#x27;User not found&#x27;</span>);    &#125;    <span class="keyword">return</span> user;  &#125;&#125;</code></pre><h2 id="내장-HTTP-예외"><a href="#내장-HTTP-예외" class="headerlink" title="내장 HTTP 예외"></a>내장 HTTP 예외</h2><p>NestJS는 다양한 HTTP 예외를 제공합니다:</p><pre><code class="highlight typescript"><span class="keyword">import</span> &#123;  <span class="title class_">BadRequestException</span>,  <span class="title class_">UnauthorizedException</span>,  <span class="title class_">ForbiddenException</span>,  <span class="title class_">NotFoundException</span>,  <span class="title class_">ConflictException</span>,  <span class="title class_">InternalServerErrorException</span>,&#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;<span class="comment">// 400 Bad Request</span><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BadRequestException</span>(<span class="string">&#x27;Invalid input data&#x27;</span>);<span class="comment">// 401 Unauthorized</span><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnauthorizedException</span>(<span class="string">&#x27;Invalid credentials&#x27;</span>);<span class="comment">// 403 Forbidden</span><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ForbiddenException</span>(<span class="string">&#x27;Access denied&#x27;</span>);<span class="comment">// 404 Not Found</span><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NotFoundException</span>(<span class="string">&#x27;Resource not found&#x27;</span>);<span class="comment">// 409 Conflict</span><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConflictException</span>(<span class="string">&#x27;Email already exists&#x27;</span>);<span class="comment">// 500 Internal Server Error</span><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InternalServerErrorException</span>(<span class="string">&#x27;Something went wrong&#x27;</span>);</code></pre><h2 id="커스텀-예외-필터"><a href="#커스텀-예외-필터" class="headerlink" title="커스텀 예외 필터"></a>커스텀 예외 필터</h2><p>예외를 커스텀하게 처리할 수 있습니다:</p><pre><code class="highlight typescript"><span class="comment">// http-exception.filter.ts</span><span class="keyword">import</span> &#123;  <span class="title class_">ExceptionFilter</span>,  <span class="title class_">Catch</span>,  <span class="title class_">ArgumentsHost</span>,  <span class="title class_">HttpException</span>,  <span class="title class_">HttpStatus</span>,&#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;<span class="meta">@Catch</span>(<span class="title class_">HttpException</span>)<span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">HttpExceptionFilter</span> <span class="keyword">implements</span> <span class="title class_">ExceptionFilter</span> &#123;  <span class="keyword">catch</span>(<span class="attr">exception</span>: <span class="title class_">HttpException</span>, <span class="attr">host</span>: <span class="title class_">ArgumentsHost</span>) &#123;    <span class="keyword">const</span> ctx = host.<span class="title function_">switchToHttp</span>();    <span class="keyword">const</span> response = ctx.<span class="title function_">getResponse</span>();    <span class="keyword">const</span> request = ctx.<span class="title function_">getRequest</span>();    <span class="keyword">const</span> status = exception.<span class="title function_">getStatus</span>();    response.<span class="title function_">status</span>(status).<span class="title function_">json</span>(&#123;      <span class="attr">statusCode</span>: status,      <span class="attr">timestamp</span>: <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toISOString</span>(),      <span class="attr">path</span>: request.<span class="property">url</span>,      <span class="attr">message</span>: exception.<span class="property">message</span>,    &#125;);  &#125;&#125;</code></pre><h3 id="예외-필터-적용"><a href="#예외-필터-적용" class="headerlink" title="예외 필터 적용"></a>예외 필터 적용</h3><pre><code class="highlight typescript"><span class="comment">// app.module.ts</span><span class="keyword">import</span> &#123; <span class="title class_">Module</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;<span class="keyword">import</span> &#123; <span class="variable constant_">APP_FILTER</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/core&#x27;</span>;<span class="keyword">import</span> &#123; <span class="title class_">HttpExceptionFilter</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./http-exception.filter&#x27;</span>;<span class="meta">@Module</span>(&#123;  <span class="attr">providers</span>: [    &#123;      <span class="attr">provide</span>: <span class="variable constant_">APP_FILTER</span>,      <span class="attr">useClass</span>: <span class="title class_">HttpExceptionFilter</span>,    &#125;,  ],&#125;)<span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppModule</span> &#123;&#125;</code></pre><h2 id="비즈니스-로직-예외"><a href="#비즈니스-로직-예외" class="headerlink" title="비즈니스 로직 예외"></a>비즈니스 로직 예외</h2><pre><code class="highlight typescript"><span class="comment">// users.service.ts</span><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span>, <span class="title class_">BadRequestException</span>, <span class="title class_">NotFoundException</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;<span class="meta">@Injectable</span>()<span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UsersService</span> &#123;  <span class="keyword">async</span> <span class="title function_">createUser</span>(<span class="params"><span class="attr">userData</span>: <span class="title class_">CreateUserDto</span></span>) &#123;    <span class="comment">// 이메일 중복 검사</span>    <span class="keyword">const</span> existingUser = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">findByEmail</span>(userData.<span class="property">email</span>);    <span class="keyword">if</span> (existingUser) &#123;      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BadRequestException</span>(<span class="string">&#x27;Email already exists&#x27;</span>);    &#125;    <span class="comment">// 사용자 생성</span>    <span class="keyword">try</span> &#123;      <span class="keyword">return</span> <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">userRepository</span>.<span class="title function_">create</span>(userData);    &#125; <span class="keyword">catch</span> (error) &#123;      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InternalServerErrorException</span>(<span class="string">&#x27;Failed to create user&#x27;</span>);    &#125;  &#125;  <span class="keyword">async</span> <span class="title function_">findOne</span>(<span class="params"><span class="attr">id</span>: <span class="built_in">number</span></span>) &#123;    <span class="keyword">const</span> user = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">userRepository</span>.<span class="title function_">findById</span>(id);    <span class="keyword">if</span> (!user) &#123;      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NotFoundException</span>(<span class="string">`User with ID <span class="subst">$&#123;id&#125;</span> not found`</span>);    &#125;    <span class="keyword">return</span> user;  &#125;&#125;</code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 NestJS의 에러 처리에 대해 알아보았습니다. 적절한 예외 처리는 안정적인 애플리케이션 개발의 필수 요소입니다. 다음 시간에는 데이터베이스 통합에 대해 자세히 알아보겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> NestJS_기본기 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Javascript WeakMap과 WeakSet</title>
      <link href="/javascript/detail/13/"/>
      <url>/javascript/detail/13/</url>
      
        <content type="html"><![CDATA[<h1 id="Javascript-WeakMap과-WeakSet"><a href="#Javascript-WeakMap과-WeakSet" class="headerlink" title="Javascript WeakMap과 WeakSet"></a>Javascript WeakMap과 WeakSet</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 JavaScript에서 <code>WeakMap</code>과 <code>WeakSet</code>에 대해 알아보겠습니다. <code>WeakMap</code>과 <code>WeakSet</code>은 약한 참조를 가지는 데이터 구조로, 가비지 컬렉션의 대상이 됩니다.</p><h2 id="WeakMap-사용법"><a href="#WeakMap-사용법" class="headerlink" title="WeakMap 사용법"></a>WeakMap 사용법</h2><p><code>WeakMap</code>은 객체를 키로 가지는 약한 참조의 키-값 쌍을 저장합니다:</p><pre><code class="highlight javascript"><span class="keyword">let</span> obj = &#123; <span class="attr">name</span>: <span class="string">&quot;John Doe&quot;</span> &#125;;<span class="keyword">const</span> weakMap = <span class="keyword">new</span> <span class="title class_">WeakMap</span>();weakMap.<span class="title function_">set</span>(obj, <span class="string">&quot;Some value&quot;</span>);<span class="variable language_">console</span>.<span class="title function_">log</span>(weakMap.<span class="title function_">get</span>(obj)); <span class="comment">// 출력: Some value</span>obj = <span class="literal">null</span>; <span class="comment">// obj가 가비지 컬렉션의 대상이 됩니다.</span></code></pre><h2 id="WeakSet-사용법"><a href="#WeakSet-사용법" class="headerlink" title="WeakSet 사용법"></a>WeakSet 사용법</h2><p><code>WeakSet</code>은 객체의 고유한 값을 저장하는 약한 참조의 집합입니다:</p><pre><code class="highlight javascript"><span class="keyword">let</span> obj1 = &#123; <span class="attr">name</span>: <span class="string">&quot;John Doe&quot;</span> &#125;;<span class="keyword">let</span> obj2 = &#123; <span class="attr">name</span>: <span class="string">&quot;Jane Doe&quot;</span> &#125;;<span class="keyword">const</span> weakSet = <span class="keyword">new</span> <span class="title class_">WeakSet</span>();weakSet.<span class="title function_">add</span>(obj1);weakSet.<span class="title function_">add</span>(obj2);<span class="variable language_">console</span>.<span class="title function_">log</span>(weakSet.<span class="title function_">has</span>(obj1)); <span class="comment">// 출력: true</span>obj1 = <span class="literal">null</span>; <span class="comment">// obj1이 가비지 컬렉션의 대상이 됩니다.</span></code></pre><h2 id="특징"><a href="#특징" class="headerlink" title="특징"></a>특징</h2><ul><li><code>WeakMap</code>과 <code>WeakSet</code>은 객체만을 키로 가질 수 있습니다.</li><li>약한 참조로 인해 가비지 컬렉션의 대상이 됩니다.</li><li>반복(iteration)을 지원하지 않습니다.</li></ul><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 Javascript에서 <code>WeakMap</code>과 <code>WeakSet</code>을 사용하는 방법에 대해 알아보았습니다. <code>WeakMap</code>과 <code>WeakSet</code>은 약한 참조를 가지는 데이터 구조로, 메모리 관리를 효율적으로 할 수 있습니다. 다음 시간에는 심볼에 대해 알아보겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> JS_디테일 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NestJS 미들웨어와 가드</title>
      <link href="/nestjs/basic/5/"/>
      <url>/nestjs/basic/5/</url>
      
        <content type="html"><![CDATA[<h1 id="NestJS-미들웨어와-가드"><a href="#NestJS-미들웨어와-가드" class="headerlink" title="NestJS 미들웨어와 가드"></a>NestJS 미들웨어와 가드</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 NestJS의 미들웨어와 가드에 대해 알아보겠습니다.<br>미들웨어는 요청과 응답 사이에서 실행되는 함수이며, 가드는 요청이 특정 조건을 만족하는지 확인하는 역할을 합니다.</p><h2 id="미들웨어란"><a href="#미들웨어란" class="headerlink" title="미들웨어란?"></a>미들웨어란?</h2><p>미들웨어는 요청-응답 주기에서 클라이언트와 서버 사이에 위치한 함수입니다. 미들웨어는 마치 건물의 보안 검색대와 같습니다. 사람들이 건물에 들어가기 전에 보안 검사를 받는 것처럼, HTTP 요청이 컨트롤러에 도달하기 전에 미들웨어에서 처리됩니다.</p><h3 id="미들웨어-생성"><a href="#미들웨어-생성" class="headerlink" title="미들웨어 생성"></a>미들웨어 생성</h3><pre><code class="highlight typescript"><span class="comment">// logger.middleware.ts</span><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span>, <span class="title class_">NestMiddleware</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;<span class="keyword">import</span> &#123; <span class="title class_">Request</span>, <span class="title class_">Response</span>, <span class="title class_">NextFunction</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;express&#x27;</span>;<span class="meta">@Injectable</span>()<span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">LoggerMiddleware</span> <span class="keyword">implements</span> <span class="title class_">NestMiddleware</span> &#123;  <span class="title function_">use</span>(<span class="params"><span class="attr">req</span>: <span class="title class_">Request</span>, <span class="attr">res</span>: <span class="title class_">Response</span>, <span class="attr">next</span>: <span class="title class_">NextFunction</span></span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;req.method&#125;</span> <span class="subst">$&#123;req.url&#125;</span> - <span class="subst">$&#123;<span class="keyword">new</span> <span class="built_in">Date</span>().toISOString()&#125;</span>`</span>);    <span class="title function_">next</span>();  &#125;&#125;</code></pre><h3 id="미들웨어-적용"><a href="#미들웨어-적용" class="headerlink" title="미들웨어 적용"></a>미들웨어 적용</h3><pre><code class="highlight typescript"><span class="comment">// app.module.ts</span><span class="keyword">import</span> &#123; <span class="title class_">Module</span>, <span class="title class_">NestModule</span>, <span class="title class_">MiddlewareConsumer</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;<span class="keyword">import</span> &#123; <span class="title class_">LoggerMiddleware</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./logger.middleware&#x27;</span>;<span class="meta">@Module</span>(&#123;  <span class="comment">// ...</span>&#125;)<span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppModule</span> <span class="keyword">implements</span> <span class="title class_">NestModule</span> &#123;  <span class="title function_">configure</span>(<span class="params"><span class="attr">consumer</span>: <span class="title class_">MiddlewareConsumer</span></span>) &#123;    consumer      .<span class="title function_">apply</span>(<span class="title class_">LoggerMiddleware</span>)      .<span class="title function_">forRoutes</span>(<span class="string">&#x27;*&#x27;</span>); <span class="comment">// 모든 경로에 적용</span>  &#125;&#125;</code></pre><h2 id="가드란"><a href="#가드란" class="headerlink" title="가드란?"></a>가드란?</h2><p>가드는 요청이 특정 조건을 만족하는지 확인하는 클래스입니다. 가드는 마치 클럽의 문지기와 같습니다. 손님이 들어가기 전에 신분증을 확인하고, 조건을 만족하지 않으면 출입을 거부합니다.</p><h3 id="인증-가드-생성"><a href="#인증-가드-생성" class="headerlink" title="인증 가드 생성"></a>인증 가드 생성</h3><pre><code class="highlight typescript"><span class="comment">// auth.guard.ts</span><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span>, <span class="title class_">CanActivate</span>, <span class="title class_">ExecutionContext</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;<span class="keyword">import</span> &#123; <span class="title class_">Observable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;<span class="meta">@Injectable</span>()<span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AuthGuard</span> <span class="keyword">implements</span> <span class="title class_">CanActivate</span> &#123;  <span class="title function_">canActivate</span>(    <span class="attr">context</span>: <span class="title class_">ExecutionContext</span>,  ): <span class="built_in">boolean</span> | <span class="title class_">Promise</span>&lt;<span class="built_in">boolean</span>&gt; | <span class="title class_">Observable</span>&lt;<span class="built_in">boolean</span>&gt; &#123;    <span class="keyword">const</span> request = context.<span class="title function_">switchToHttp</span>().<span class="title function_">getRequest</span>();    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">validateRequest</span>(request);  &#125;  <span class="keyword">private</span> <span class="title function_">validateRequest</span>(<span class="attr">request</span>: <span class="built_in">any</span>): <span class="built_in">boolean</span> &#123;    <span class="comment">// 토큰 검증 로직</span>    <span class="keyword">const</span> token = request.<span class="property">headers</span>.<span class="property">authorization</span>;    <span class="keyword">return</span> token &amp;&amp; token.<span class="title function_">startsWith</span>(<span class="string">&#x27;Bearer &#x27;</span>);  &#125;&#125;</code></pre><h3 id="가드-적용"><a href="#가드-적용" class="headerlink" title="가드 적용"></a>가드 적용</h3><pre><code class="highlight typescript"><span class="comment">// users.controller.ts</span><span class="keyword">import</span> &#123; <span class="title class_">Controller</span>, <span class="title class_">Get</span>, <span class="title class_">UseGuards</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;<span class="keyword">import</span> &#123; <span class="title class_">AuthGuard</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./auth.guard&#x27;</span>;<span class="meta">@Controller</span>(<span class="string">&#x27;users&#x27;</span>)<span class="meta">@UseGuards</span>(<span class="title class_">AuthGuard</span>) <span class="comment">// 컨트롤러 전체에 적용</span><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UsersController</span> &#123;  <span class="meta">@Get</span>()  <span class="title function_">findAll</span>(<span class="params"></span>) &#123;    <span class="keyword">return</span> <span class="string">&#x27;This action returns all users&#x27;</span>;  &#125;  <span class="meta">@Get</span>(<span class="string">&#x27;profile&#x27;</span>)  <span class="meta">@UseGuards</span>(<span class="title class_">AuthGuard</span>) <span class="comment">// 특정 메서드에만 적용</span>  <span class="title function_">getProfile</span>(<span class="params"></span>) &#123;    <span class="keyword">return</span> <span class="string">&#x27;User profile&#x27;</span>;  &#125;&#125;</code></pre><h2 id="역할-기반-가드"><a href="#역할-기반-가드" class="headerlink" title="역할 기반 가드"></a>역할 기반 가드</h2><pre><code class="highlight typescript"><span class="comment">// roles.guard.ts</span><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span>, <span class="title class_">CanActivate</span>, <span class="title class_">ExecutionContext</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;<span class="keyword">import</span> &#123; <span class="title class_">Reflector</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/core&#x27;</span>;<span class="meta">@Injectable</span>()<span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">RolesGuard</span> <span class="keyword">implements</span> <span class="title class_">CanActivate</span> &#123;  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="attr">reflector</span>: <span class="title class_">Reflector</span></span>) &#123;&#125;  <span class="title function_">canActivate</span>(<span class="attr">context</span>: <span class="title class_">ExecutionContext</span>): <span class="built_in">boolean</span> &#123;    <span class="keyword">const</span> requiredRoles = <span class="variable language_">this</span>.<span class="property">reflector</span>.<span class="property">get</span>&lt;<span class="built_in">string</span>[]&gt;(<span class="string">&#x27;roles&#x27;</span>, context.<span class="title function_">getHandler</span>());    <span class="keyword">if</span> (!requiredRoles) &#123;      <span class="keyword">return</span> <span class="literal">true</span>;    &#125;        <span class="keyword">const</span> request = context.<span class="title function_">switchToHttp</span>().<span class="title function_">getRequest</span>();    <span class="keyword">const</span> user = request.<span class="property">user</span>;        <span class="keyword">return</span> requiredRoles.<span class="title function_">some</span>(<span class="function">(<span class="params">role</span>) =&gt;</span> user.<span class="property">roles</span>?.<span class="title function_">includes</span>(role));  &#125;&#125;</code></pre><h3 id="역할-데코레이터"><a href="#역할-데코레이터" class="headerlink" title="역할 데코레이터"></a>역할 데코레이터</h3><pre><code class="highlight typescript"><span class="comment">// roles.decorator.ts</span><span class="keyword">import</span> &#123; <span class="title class_">SetMetadata</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;<span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">Roles</span> = (<span class="params">...<span class="attr">roles</span>: <span class="built_in">string</span>[]</span>) =&gt; <span class="title class_">SetMetadata</span>(<span class="string">&#x27;roles&#x27;</span>, roles);</code></pre><h3 id="역할-기반-가드-사용"><a href="#역할-기반-가드-사용" class="headerlink" title="역할 기반 가드 사용"></a>역할 기반 가드 사용</h3><pre><code class="highlight typescript"><span class="comment">// users.controller.ts</span><span class="meta">@Controller</span>(<span class="string">&#x27;users&#x27;</span>)<span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UsersController</span> &#123;  <span class="meta">@Get</span>(<span class="string">&#x27;admin&#x27;</span>)  <span class="meta">@UseGuards</span>(<span class="title class_">AuthGuard</span>, <span class="title class_">RolesGuard</span>)  <span class="meta">@Roles</span>(<span class="string">&#x27;admin&#x27;</span>)  <span class="title function_">getAdminData</span>(<span class="params"></span>) &#123;    <span class="keyword">return</span> <span class="string">&#x27;Admin only data&#x27;</span>;  &#125;&#125;</code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 NestJS의 미들웨어와 가드에 대해 알아보았습니다. 미들웨어는 요청 처리 과정에서 공통 로직을 수행하고, 가드는 요청의 유효성을 검증하는 역할을 합니다. 다음 시간에는 에러 처리에 대해 자세히 알아보겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> NestJS_기본기 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NestJS 모듈과 프로젝트 구조</title>
      <link href="/nestjs/basic/4/"/>
      <url>/nestjs/basic/4/</url>
      
        <content type="html"><![CDATA[<h1 id="NestJS-모듈과-프로젝트-구조"><a href="#NestJS-모듈과-프로젝트-구조" class="headerlink" title="NestJS 모듈과 프로젝트 구조"></a>NestJS 모듈과 프로젝트 구조</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 NestJS의 모듈과 프로젝트 구조에 대해 알아보겠습니다.<br>모듈은 관련된 컴포넌트들을 그룹화하여 애플리케이션을 구조화하는 핵심 요소입니다.</p><h2 id="모듈이란"><a href="#모듈이란" class="headerlink" title="모듈이란?"></a>모듈이란?</h2><p>모듈은 <code>@Module()</code> 데코레이터로 주석이 달린 클래스입니다. 모듈은 마치 아파트 건물의 각 층과 같습니다. 각 층(모듈)은 특정 기능을 담당하는 방들(컨트롤러, 서비스)을 포함하고 있으며, 엘리베이터나 계단(의존성 주입)을 통해 층 간 이동이 가능합니다.</p><h3 id="모듈의-구성-요소"><a href="#모듈의-구성-요소" class="headerlink" title="모듈의 구성 요소"></a>모듈의 구성 요소</h3><pre><code class="highlight typescript"><span class="keyword">import</span> &#123; <span class="title class_">Module</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;<span class="meta">@Module</span>(&#123;  <span class="attr">imports</span>: [],      <span class="comment">// 다른 모듈 가져오기</span>  <span class="attr">controllers</span>: [],  <span class="comment">// 컨트롤러 등록</span>  <span class="attr">providers</span>: [],    <span class="comment">// 서비스 등록 (프로바이더)</span>  <span class="attr">exports</span>: [],      <span class="comment">// 다른 모듈에서 사용할 수 있도록 내보내기</span>&#125;)<span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppModule</span> &#123;&#125;</code></pre><h2 id="기본-모듈-생성"><a href="#기본-모듈-생성" class="headerlink" title="기본 모듈 생성"></a>기본 모듈 생성</h2><p>NestJS CLI를 사용하여 모듈을 생성할 수 있습니다:</p><pre><code class="highlight bash">nest generate module <span class="built_in">users</span><span class="comment"># 또는 줄여서</span>nest g module <span class="built_in">users</span></code></pre><h2 id="실제-모듈-예시"><a href="#실제-모듈-예시" class="headerlink" title="실제 모듈 예시"></a>실제 모듈 예시</h2><pre><code class="highlight typescript"><span class="comment">// users.module.ts</span><span class="keyword">import</span> &#123; <span class="title class_">Module</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;<span class="keyword">import</span> &#123; <span class="title class_">UsersController</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./users.controller&#x27;</span>;<span class="keyword">import</span> &#123; <span class="title class_">UsersService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./users.service&#x27;</span>;<span class="meta">@Module</span>(&#123;  <span class="attr">controllers</span>: [<span class="title class_">UsersController</span>],  <span class="attr">providers</span>: [<span class="title class_">UsersService</span>],  <span class="attr">exports</span>: [<span class="title class_">UsersService</span>], <span class="comment">// 다른 모듈에서 사용 가능</span>&#125;)<span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UsersModule</span> &#123;&#125;</code></pre><h2 id="루트-모듈"><a href="#루트-모듈" class="headerlink" title="루트 모듈"></a>루트 모듈</h2><p>모든 NestJS 애플리케이션은 루트 모듈을 가져야 합니다:</p><pre><code class="highlight typescript"><span class="comment">// app.module.ts</span><span class="keyword">import</span> &#123; <span class="title class_">Module</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;<span class="keyword">import</span> &#123; <span class="title class_">AppController</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.controller&#x27;</span>;<span class="keyword">import</span> &#123; <span class="title class_">AppService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.service&#x27;</span>;<span class="keyword">import</span> &#123; <span class="title class_">UsersModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./users/users.module&#x27;</span>;<span class="keyword">import</span> &#123; <span class="title class_">PostsModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./posts/posts.module&#x27;</span>;<span class="meta">@Module</span>(&#123;  <span class="attr">imports</span>: [<span class="title class_">UsersModule</span>, <span class="title class_">PostsModule</span>],  <span class="attr">controllers</span>: [<span class="title class_">AppController</span>],  <span class="attr">providers</span>: [<span class="title class_">AppService</span>],&#125;)<span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppModule</span> &#123;&#125;</code></pre><h2 id="기능별-모듈-구조"><a href="#기능별-모듈-구조" class="headerlink" title="기능별 모듈 구조"></a>기능별 모듈 구조</h2><p>실제 프로젝트에서는 기능별로 모듈을 구성합니다:</p><pre><code class="highlight plaintext">src/├── app.module.ts├── main.ts├── users/│   ├── users.module.ts│   ├── users.controller.ts│   ├── users.service.ts│   └── dto/│       ├── create-user.dto.ts│       └── update-user.dto.ts├── posts/│   ├── posts.module.ts│   ├── posts.controller.ts│   ├── posts.service.ts│   └── dto/│       ├── create-post.dto.ts│       └── update-post.dto.ts└── auth/    ├── auth.module.ts    ├── auth.controller.ts    ├── auth.service.ts    └── guards/        └── auth.guard.ts</code></pre><h2 id="모듈-간-의존성"><a href="#모듈-간-의존성" class="headerlink" title="모듈 간 의존성"></a>모듈 간 의존성</h2><p>모듈 간 의존성을 설정하여 서비스를 공유할 수 있습니다:</p><pre><code class="highlight typescript"><span class="comment">// posts.module.ts</span><span class="keyword">import</span> &#123; <span class="title class_">Module</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;<span class="keyword">import</span> &#123; <span class="title class_">PostsController</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./posts.controller&#x27;</span>;<span class="keyword">import</span> &#123; <span class="title class_">PostsService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./posts.service&#x27;</span>;<span class="keyword">import</span> &#123; <span class="title class_">UsersModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../users/users.module&#x27;</span>;<span class="meta">@Module</span>(&#123;  <span class="attr">imports</span>: [<span class="title class_">UsersModule</span>], <span class="comment">// UsersModule을 가져와서 UsersService 사용</span>  <span class="attr">controllers</span>: [<span class="title class_">PostsController</span>],  <span class="attr">providers</span>: [<span class="title class_">PostsService</span>],&#125;)<span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">PostsModule</span> &#123;&#125;</code></pre><pre><code class="highlight typescript"><span class="comment">// posts.service.ts</span><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;<span class="keyword">import</span> &#123; <span class="title class_">UsersService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../users/users.service&#x27;</span>;<span class="meta">@Injectable</span>()<span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">PostsService</span> &#123;  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> <span class="attr">usersService</span>: <span class="title class_">UsersService</span></span>) &#123;&#125;  <span class="keyword">async</span> <span class="title function_">createPost</span>(<span class="params"><span class="attr">userId</span>: <span class="built_in">number</span>, <span class="attr">postData</span>: <span class="built_in">any</span></span>) &#123;    <span class="keyword">const</span> user = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">usersService</span>.<span class="title function_">findOne</span>(userId);    <span class="keyword">if</span> (!user) &#123;      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;User not found&#x27;</span>);    &#125;    <span class="comment">// 포스트 생성 로직</span>  &#125;&#125;</code></pre><h2 id="전역-모듈"><a href="#전역-모듈" class="headerlink" title="전역 모듈"></a>전역 모듈</h2><p>전역 모듈은 애플리케이션 전체에서 사용할 수 있습니다:</p><pre><code class="highlight typescript"><span class="comment">// database.module.ts</span><span class="keyword">import</span> &#123; <span class="title class_">Global</span>, <span class="title class_">Module</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;<span class="keyword">import</span> &#123; <span class="title class_">DatabaseService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./database.service&#x27;</span>;<span class="meta">@Global</span>()<span class="meta">@Module</span>(&#123;  <span class="attr">providers</span>: [<span class="title class_">DatabaseService</span>],  <span class="attr">exports</span>: [<span class="title class_">DatabaseService</span>],&#125;)<span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">DatabaseModule</span> &#123;&#125;</code></pre><p>전역 모듈은 루트 모듈에서 한 번만 가져오면 됩니다:</p><pre><code class="highlight typescript"><span class="comment">// app.module.ts</span><span class="meta">@Module</span>(&#123;  <span class="attr">imports</span>: [<span class="title class_">DatabaseModule</span>, <span class="title class_">UsersModule</span>, <span class="title class_">PostsModule</span>],  <span class="comment">// DatabaseModule을 가져오면 모든 모듈에서 DatabaseService 사용 가능</span>&#125;)<span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppModule</span> &#123;&#125;</code></pre><h2 id="동적-모듈"><a href="#동적-모듈" class="headerlink" title="동적 모듈"></a>동적 모듈</h2><p>모듈을 동적으로 구성할 수 있습니다:</p><pre><code class="highlight typescript"><span class="comment">// config.module.ts</span><span class="keyword">import</span> &#123; <span class="title class_">DynamicModule</span>, <span class="title class_">Module</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;<span class="keyword">import</span> &#123; <span class="title class_">ConfigService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./config.service&#x27;</span>;<span class="meta">@Module</span>(&#123;&#125;)<span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ConfigModule</span> &#123;  <span class="keyword">static</span> <span class="title function_">forRoot</span>(<span class="attr">options</span>: &#123; <span class="attr">folder</span>: <span class="built_in">string</span> &#125;): <span class="title class_">DynamicModule</span> &#123;    <span class="keyword">return</span> &#123;      <span class="attr">module</span>: <span class="title class_">ConfigModule</span>,      <span class="attr">providers</span>: [        &#123;          <span class="attr">provide</span>: <span class="string">&#x27;CONFIG_OPTIONS&#x27;</span>,          <span class="attr">useValue</span>: options,        &#125;,        <span class="title class_">ConfigService</span>,      ],      <span class="attr">exports</span>: [<span class="title class_">ConfigService</span>],    &#125;;  &#125;&#125;</code></pre><p>사용 예시:</p><pre><code class="highlight typescript"><span class="comment">// app.module.ts</span><span class="meta">@Module</span>(&#123;  <span class="attr">imports</span>: [    <span class="title class_">ConfigModule</span>.<span class="title function_">forRoot</span>(&#123; <span class="attr">folder</span>: <span class="string">&#x27;./config&#x27;</span> &#125;),    <span class="title class_">UsersModule</span>,  ],&#125;)<span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppModule</span> &#123;&#125;</code></pre><h2 id="모듈-재내보내기"><a href="#모듈-재내보내기" class="headerlink" title="모듈 재내보내기"></a>모듈 재내보내기</h2><p>모듈을 재내보내기하여 다른 모듈에서 쉽게 사용할 수 있습니다:</p><pre><code class="highlight typescript"><span class="comment">// common.module.ts</span><span class="keyword">import</span> &#123; <span class="title class_">Module</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;<span class="keyword">import</span> &#123; <span class="title class_">DatabaseModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./database/database.module&#x27;</span>;<span class="keyword">import</span> &#123; <span class="title class_">LoggerModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./logger/logger.module&#x27;</span>;<span class="meta">@Module</span>(&#123;  <span class="attr">imports</span>: [<span class="title class_">DatabaseModule</span>, <span class="title class_">LoggerModule</span>],  <span class="attr">exports</span>: [<span class="title class_">DatabaseModule</span>, <span class="title class_">LoggerModule</span>], <span class="comment">// 재내보내기</span>&#125;)<span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">CommonModule</span> &#123;&#125;</code></pre><h2 id="권장-프로젝트-구조"><a href="#권장-프로젝트-구조" class="headerlink" title="권장 프로젝트 구조"></a>권장 프로젝트 구조</h2><h3 id="소규모-프로젝트"><a href="#소규모-프로젝트" class="headerlink" title="소규모 프로젝트"></a>소규모 프로젝트</h3><pre><code class="highlight plaintext">src/├── app.module.ts├── main.ts├── users/│   ├── users.module.ts│   ├── users.controller.ts│   ├── users.service.ts│   └── users.entity.ts└── posts/    ├── posts.module.ts    ├── posts.controller.ts    ├── posts.service.ts    └── posts.entity.ts</code></pre><h3 id="대규모-프로젝트"><a href="#대규모-프로젝트" class="headerlink" title="대규모 프로젝트"></a>대규모 프로젝트</h3><pre><code class="highlight plaintext">src/├── app.module.ts├── main.ts├── common/│   ├── decorators/│   ├── filters/│   ├── guards/│   ├── interceptors/│   └── pipes/├── config/│   ├── config.module.ts│   └── config.service.ts├── database/│   ├── database.module.ts│   └── database.service.ts├── users/│   ├── users.module.ts│   ├── controllers/│   ├── services/│   ├── entities/│   └── dto/└── posts/    ├── posts.module.ts    ├── controllers/    ├── services/    ├── entities/    └── dto/</code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 NestJS의 모듈과 프로젝트 구조에 대해 알아보았습니다. 모듈은 애플리케이션을 구조화하고 관리하는 핵심 요소이며, 적절한 모듈 구조는 코드의 유지보수성과 확장성을 크게 향상시킵니다. 다음 시간에는 미들웨어와 가드에 대해 자세히 알아보겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> NestJS_기본기 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NestJS 서비스와 의존성 주입</title>
      <link href="/nestjs/basic/3/"/>
      <url>/nestjs/basic/3/</url>
      
        <content type="html"><![CDATA[<h1 id="NestJS-서비스와-의존성-주입"><a href="#NestJS-서비스와-의존성-주입" class="headerlink" title="NestJS 서비스와 의존성 주입"></a>NestJS 서비스와 의존성 주입</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 NestJS의 서비스와 의존성 주입에 대해 알아보겠습니다.<br>서비스는 비즈니스 로직을 담당하는 클래스이며, 의존성 주입은 객체 간의 의존성을 자동으로 관리하는 방법입니다.</p><h2 id="서비스란"><a href="#서비스란" class="headerlink" title="서비스란?"></a>서비스란?</h2><p>서비스는 특정 기능을 수행하는 클래스입니다. 서비스는 마치 전문 기술자와 같습니다. 컨트롤러(접수 창구)에서 요청을 받으면, 서비스(전문 기술자)가 실제 작업을 수행합니다. 예를 들어, 사용자 관리 서비스는 사용자 등록, 수정, 삭제 등의 작업을 담당합니다.</p><h3 id="서비스-생성"><a href="#서비스-생성" class="headerlink" title="서비스 생성"></a>서비스 생성</h3><p>NestJS CLI를 사용하여 서비스를 생성할 수 있습니다:</p><pre><code class="highlight bash">nest generate service <span class="built_in">users</span><span class="comment"># 또는 줄여서</span>nest g service <span class="built_in">users</span></code></pre><h2 id="기본-서비스-구조"><a href="#기본-서비스-구조" class="headerlink" title="기본 서비스 구조"></a>기본 서비스 구조</h2><pre><code class="highlight typescript"><span class="comment">// users.service.ts</span><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;<span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">User</span> &#123;  <span class="attr">id</span>: <span class="built_in">number</span>;  <span class="attr">name</span>: <span class="built_in">string</span>;  <span class="attr">email</span>: <span class="built_in">string</span>;&#125;<span class="meta">@Injectable</span>()<span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UsersService</span> &#123;  <span class="keyword">private</span> <span class="attr">users</span>: <span class="title class_">User</span>[] = [    &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;John Doe&#x27;</span>, <span class="attr">email</span>: <span class="string">&#x27;john@example.com&#x27;</span> &#125;,    &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;Jane Smith&#x27;</span>, <span class="attr">email</span>: <span class="string">&#x27;jane@example.com&#x27;</span> &#125;,  ];  <span class="title function_">findAll</span>(): <span class="title class_">User</span>[] &#123;    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">users</span>;  &#125;  <span class="title function_">findOne</span>(<span class="attr">id</span>: <span class="built_in">number</span>): <span class="title class_">User</span> &#123;    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">users</span>.<span class="title function_">find</span>(<span class="function"><span class="params">user</span> =&gt;</span> user.<span class="property">id</span> === id);  &#125;  <span class="title function_">create</span>(<span class="attr">user</span>: <span class="title class_">Omit</span>&lt;<span class="title class_">User</span>, <span class="string">&#x27;id&#x27;</span>&gt;): <span class="title class_">User</span> &#123;    <span class="keyword">const</span> newUser = &#123;      <span class="attr">id</span>: <span class="variable language_">this</span>.<span class="property">users</span>.<span class="property">length</span> + <span class="number">1</span>,      ...user,    &#125;;    <span class="variable language_">this</span>.<span class="property">users</span>.<span class="title function_">push</span>(newUser);    <span class="keyword">return</span> newUser;  &#125;  <span class="title function_">update</span>(<span class="attr">id</span>: <span class="built_in">number</span>, <span class="attr">updateData</span>: <span class="title class_">Partial</span>&lt;<span class="title class_">User</span>&gt;): <span class="title class_">User</span> &#123;    <span class="keyword">const</span> userIndex = <span class="variable language_">this</span>.<span class="property">users</span>.<span class="title function_">findIndex</span>(<span class="function"><span class="params">user</span> =&gt;</span> user.<span class="property">id</span> === id);    <span class="keyword">if</span> (userIndex === -<span class="number">1</span>) &#123;      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;User not found&#x27;</span>);    &#125;    <span class="variable language_">this</span>.<span class="property">users</span>[userIndex] = &#123; ...<span class="variable language_">this</span>.<span class="property">users</span>[userIndex], ...updateData &#125;;    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">users</span>[userIndex];  &#125;  <span class="title function_">remove</span>(<span class="attr">id</span>: <span class="built_in">number</span>): <span class="built_in">void</span> &#123;    <span class="keyword">const</span> userIndex = <span class="variable language_">this</span>.<span class="property">users</span>.<span class="title function_">findIndex</span>(<span class="function"><span class="params">user</span> =&gt;</span> user.<span class="property">id</span> === id);    <span class="keyword">if</span> (userIndex === -<span class="number">1</span>) &#123;      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;User not found&#x27;</span>);    &#125;    <span class="variable language_">this</span>.<span class="property">users</span>.<span class="title function_">splice</span>(userIndex, <span class="number">1</span>);  &#125;&#125;</code></pre><h2 id="의존성-주입이란"><a href="#의존성-주입이란" class="headerlink" title="의존성 주입이란?"></a>의존성 주입이란?</h2><p>의존성 주입(Dependency Injection)은 객체가 직접 의존성을 생성하는 대신, 외부에서 주입받는 디자인 패턴입니다. 이는 마치 요리사가 재료를 직접 구매하는 대신, 재료 공급업체에서 필요한 재료를 받아오는 것과 같습니다.</p><h3 id="의존성-주입의-장점"><a href="#의존성-주입의-장점" class="headerlink" title="의존성 주입의 장점"></a>의존성 주입의 장점</h3><ol><li><strong>테스트 용이성</strong>: 의존성을 쉽게 모킹할 수 있습니다.</li><li><strong>유연성</strong>: 런타임에 다른 구현체를 주입할 수 있습니다.</li><li><strong>결합도 감소</strong>: 객체 간의 결합도가 낮아집니다.</li><li><strong>재사용성</strong>: 서비스를 다른 곳에서 재사용할 수 있습니다.</li></ol><h2 id="컨트롤러에서-서비스-사용"><a href="#컨트롤러에서-서비스-사용" class="headerlink" title="컨트롤러에서 서비스 사용"></a>컨트롤러에서 서비스 사용</h2><pre><code class="highlight typescript"><span class="comment">// users.controller.ts</span><span class="keyword">import</span> &#123; <span class="title class_">Controller</span>, <span class="title class_">Get</span>, <span class="title class_">Post</span>, <span class="title class_">Body</span>, <span class="title class_">Param</span>, <span class="title class_">Delete</span>, <span class="title class_">Put</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;<span class="keyword">import</span> &#123; <span class="title class_">UsersService</span>, <span class="title class_">User</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./users.service&#x27;</span>;<span class="meta">@Controller</span>(<span class="string">&#x27;users&#x27;</span>)<span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UsersController</span> &#123;  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> <span class="attr">usersService</span>: <span class="title class_">UsersService</span></span>) &#123;&#125;  <span class="meta">@Get</span>()  <span class="title function_">findAll</span>(): <span class="title class_">User</span>[] &#123;    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">usersService</span>.<span class="title function_">findAll</span>();  &#125;  <span class="meta">@Get</span>(<span class="string">&#x27;:id&#x27;</span>)  <span class="title function_">findOne</span>(<span class="meta">@Param</span>(<span class="string">&#x27;id&#x27;</span>) <span class="attr">id</span>: <span class="built_in">string</span>): <span class="title class_">User</span> &#123;    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">usersService</span>.<span class="title function_">findOne</span>(+id);  &#125;  <span class="meta">@Post</span>()  <span class="title function_">create</span>(<span class="meta">@Body</span>() <span class="attr">createUserDto</span>: <span class="title class_">Omit</span>&lt;<span class="title class_">User</span>, <span class="string">&#x27;id&#x27;</span>&gt;): <span class="title class_">User</span> &#123;    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">usersService</span>.<span class="title function_">create</span>(createUserDto);  &#125;  <span class="meta">@Put</span>(<span class="string">&#x27;:id&#x27;</span>)  <span class="title function_">update</span>(<span class="meta">@Param</span>(<span class="string">&#x27;id&#x27;</span>) <span class="attr">id</span>: <span class="built_in">string</span>, <span class="meta">@Body</span>() <span class="attr">updateUserDto</span>: <span class="title class_">Partial</span>&lt;<span class="title class_">User</span>&gt;): <span class="title class_">User</span> &#123;    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">usersService</span>.<span class="title function_">update</span>(+id, updateUserDto);  &#125;  <span class="meta">@Delete</span>(<span class="string">&#x27;:id&#x27;</span>)  <span class="title function_">remove</span>(<span class="meta">@Param</span>(<span class="string">&#x27;id&#x27;</span>) <span class="attr">id</span>: <span class="built_in">string</span>): <span class="built_in">void</span> &#123;    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">usersService</span>.<span class="title function_">remove</span>(+id);  &#125;&#125;</code></pre><h2 id="서비스-간-의존성-주입"><a href="#서비스-간-의존성-주입" class="headerlink" title="서비스 간 의존성 주입"></a>서비스 간 의존성 주입</h2><p>서비스는 다른 서비스를 의존성으로 주입받을 수 있습니다:</p><pre><code class="highlight typescript"><span class="comment">// email.service.ts</span><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;<span class="meta">@Injectable</span>()<span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">EmailService</span> &#123;  <span class="title function_">sendEmail</span>(<span class="attr">to</span>: <span class="built_in">string</span>, <span class="attr">subject</span>: <span class="built_in">string</span>, <span class="attr">body</span>: <span class="built_in">string</span>): <span class="built_in">void</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Sending email to <span class="subst">$&#123;to&#125;</span>: <span class="subst">$&#123;subject&#125;</span>`</span>);    <span class="comment">// 실제 이메일 전송 로직</span>  &#125;&#125;</code></pre><pre><code class="highlight typescript"><span class="comment">// users.service.ts</span><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;<span class="keyword">import</span> &#123; <span class="title class_">EmailService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./email.service&#x27;</span>;<span class="meta">@Injectable</span>()<span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UsersService</span> &#123;  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> <span class="attr">emailService</span>: <span class="title class_">EmailService</span></span>) &#123;&#125;  <span class="keyword">private</span> <span class="attr">users</span>: <span class="title class_">User</span>[] = [];  <span class="title function_">create</span>(<span class="attr">user</span>: <span class="title class_">Omit</span>&lt;<span class="title class_">User</span>, <span class="string">&#x27;id&#x27;</span>&gt;): <span class="title class_">User</span> &#123;    <span class="keyword">const</span> newUser = &#123;      <span class="attr">id</span>: <span class="variable language_">this</span>.<span class="property">users</span>.<span class="property">length</span> + <span class="number">1</span>,      ...user,    &#125;;    <span class="variable language_">this</span>.<span class="property">users</span>.<span class="title function_">push</span>(newUser);        <span class="comment">// 환영 이메일 전송</span>    <span class="variable language_">this</span>.<span class="property">emailService</span>.<span class="title function_">sendEmail</span>(      newUser.<span class="property">email</span>,      <span class="string">&#x27;Welcome!&#x27;</span>,      <span class="string">`Welcome to our service, <span class="subst">$&#123;newUser.name&#125;</span>!`</span>    );        <span class="keyword">return</span> newUser;  &#125;&#125;</code></pre><h2 id="커스텀-프로바이더"><a href="#커스텀-프로바이더" class="headerlink" title="커스텀 프로바이더"></a>커스텀 프로바이더</h2><p>때로는 더 복잡한 프로바이더 설정이 필요할 수 있습니다:</p><h3 id="값-프로바이더"><a href="#값-프로바이더" class="headerlink" title="값 프로바이더"></a>값 프로바이더</h3><pre><code class="highlight typescript"><span class="comment">// app.module.ts</span><span class="keyword">import</span> &#123; <span class="title class_">Module</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;<span class="meta">@Module</span>(&#123;  <span class="attr">providers</span>: [    &#123;      <span class="attr">provide</span>: <span class="string">&#x27;API_KEY&#x27;</span>,      <span class="attr">useValue</span>: <span class="string">&#x27;my-secret-api-key&#x27;</span>,    &#125;,  ],&#125;)<span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppModule</span> &#123;&#125;</code></pre><pre><code class="highlight typescript"><span class="comment">// users.service.ts</span><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span>, <span class="title class_">Inject</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;<span class="meta">@Injectable</span>()<span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UsersService</span> &#123;  <span class="title function_">constructor</span>(<span class="params"><span class="meta">@Inject</span>(<span class="string">&#x27;API_KEY&#x27;</span>) <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="attr">apiKey</span>: <span class="built_in">string</span></span>) &#123;&#125;    <span class="title function_">someMethod</span>(): <span class="built_in">void</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Using API key: <span class="subst">$&#123;<span class="variable language_">this</span>.apiKey&#125;</span>`</span>);  &#125;&#125;</code></pre><h3 id="팩토리-프로바이더"><a href="#팩토리-프로바이더" class="headerlink" title="팩토리 프로바이더"></a>팩토리 프로바이더</h3><pre><code class="highlight typescript"><span class="comment">// app.module.ts</span><span class="meta">@Module</span>(&#123;  <span class="attr">providers</span>: [    &#123;      <span class="attr">provide</span>: <span class="string">&#x27;DATABASE_CONNECTION&#x27;</span>,      <span class="attr">useFactory</span>: <span class="title function_">async</span> () =&gt; &#123;        <span class="comment">// 데이터베이스 연결 로직</span>        <span class="keyword">return</span> <span class="keyword">await</span> <span class="title function_">createDatabaseConnection</span>();      &#125;,    &#125;,  ],&#125;)<span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppModule</span> &#123;&#125;</code></pre><h2 id="스코프"><a href="#스코프" class="headerlink" title="스코프"></a>스코프</h2><p>NestJS에서 프로바이더는 다음과 같은 스코프를 가질 수 있습니다:</p><h3 id="싱글톤-스코프-기본값"><a href="#싱글톤-스코프-기본값" class="headerlink" title="싱글톤 스코프 (기본값)"></a>싱글톤 스코프 (기본값)</h3><pre><code class="highlight typescript"><span class="meta">@Injectable</span>()<span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UsersService</span> &#123;  <span class="comment">// 애플리케이션 전체에서 하나의 인스턴스만 생성</span>&#125;</code></pre><h3 id="요청-스코프"><a href="#요청-스코프" class="headerlink" title="요청 스코프"></a>요청 스코프</h3><pre><code class="highlight typescript"><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span>, <span class="title class_">Scope</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;<span class="meta">@Injectable</span>(&#123; <span class="attr">scope</span>: <span class="title class_">Scope</span>.<span class="property">REQUEST</span> &#125;)<span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UsersService</span> &#123;  <span class="comment">// 각 HTTP 요청마다 새로운 인스턴스 생성</span>&#125;</code></pre><h3 id="일시적-스코프"><a href="#일시적-스코프" class="headerlink" title="일시적 스코프"></a>일시적 스코프</h3><pre><code class="highlight typescript"><span class="meta">@Injectable</span>(&#123; <span class="attr">scope</span>: <span class="title class_">Scope</span>.<span class="property">TRANSIENT</span> &#125;)<span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UsersService</span> &#123;  <span class="comment">// 주입될 때마다 새로운 인스턴스 생성</span>&#125;</code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 NestJS의 서비스와 의존성 주입에 대해 알아보았습니다. 서비스는 비즈니스 로직을 담당하는 핵심 구성 요소이며, 의존성 주입을 통해 객체 간의 결합도를 낮추고 테스트 가능한 코드를 작성할 수 있습니다. 다음 시간에는 모듈과 프로젝트 구조에 대해 자세히 알아보겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> NestJS_기본기 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NestJS 컨트롤러와 라우팅</title>
      <link href="/nestjs/basic/2/"/>
      <url>/nestjs/basic/2/</url>
      
        <content type="html"><![CDATA[<h1 id="NestJS-컨트롤러와-라우팅"><a href="#NestJS-컨트롤러와-라우팅" class="headerlink" title="NestJS 컨트롤러와 라우팅"></a>NestJS 컨트롤러와 라우팅</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 NestJS의 컨트롤러와 라우팅에 대해 알아보겠습니다.<br>컨트롤러는 들어오는 HTTP 요청을 처리하고 응답을 반환하는 역할을 합니다.</p><h2 id="컨트롤러란"><a href="#컨트롤러란" class="headerlink" title="컨트롤러란?"></a>컨트롤러란?</h2><p>컨트롤러는 특정 경로로 들어오는 HTTP 요청을 처리하는 클래스입니다. 컨트롤러는 마치 레스토랑의 웨이터와 같습니다. 손님(클라이언트)의 주문(HTTP 요청)을 받아 주방(서비스)에 전달하고, 완성된 음식(응답)을 손님에게 제공합니다.</p><h3 id="컨트롤러-생성"><a href="#컨트롤러-생성" class="headerlink" title="컨트롤러 생성"></a>컨트롤러 생성</h3><p>NestJS CLI를 사용하여 컨트롤러를 생성할 수 있습니다:</p><pre><code class="highlight bash">nest generate controller <span class="built_in">users</span><span class="comment"># 또는 줄여서</span>nest g controller <span class="built_in">users</span></code></pre><h2 id="기본-컨트롤러-구조"><a href="#기본-컨트롤러-구조" class="headerlink" title="기본 컨트롤러 구조"></a>기본 컨트롤러 구조</h2><pre><code class="highlight typescript"><span class="comment">// users.controller.ts</span><span class="keyword">import</span> &#123; <span class="title class_">Controller</span>, <span class="title class_">Get</span>, <span class="title class_">Post</span>, <span class="title class_">Body</span>, <span class="title class_">Param</span>, <span class="title class_">Delete</span>, <span class="title class_">Put</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;<span class="meta">@Controller</span>(<span class="string">&#x27;users&#x27;</span>)<span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UsersController</span> &#123;    <span class="meta">@Get</span>()  <span class="title function_">findAll</span>(): <span class="built_in">string</span> &#123;    <span class="keyword">return</span> <span class="string">&#x27;This action returns all users&#x27;</span>;  &#125;  <span class="meta">@Get</span>(<span class="string">&#x27;:id&#x27;</span>)  <span class="title function_">findOne</span>(<span class="meta">@Param</span>(<span class="string">&#x27;id&#x27;</span>) <span class="attr">id</span>: <span class="built_in">string</span>): <span class="built_in">string</span> &#123;    <span class="keyword">return</span> <span class="string">`This action returns a #<span class="subst">$&#123;id&#125;</span> user`</span>;  &#125;  <span class="meta">@Post</span>()  <span class="title function_">create</span>(<span class="meta">@Body</span>() <span class="attr">createUserDto</span>: <span class="built_in">any</span>): <span class="built_in">string</span> &#123;    <span class="keyword">return</span> <span class="string">&#x27;This action adds a new user&#x27;</span>;  &#125;  <span class="meta">@Put</span>(<span class="string">&#x27;:id&#x27;</span>)  <span class="title function_">update</span>(<span class="meta">@Param</span>(<span class="string">&#x27;id&#x27;</span>) <span class="attr">id</span>: <span class="built_in">string</span>, <span class="meta">@Body</span>() <span class="attr">updateUserDto</span>: <span class="built_in">any</span>): <span class="built_in">string</span> &#123;    <span class="keyword">return</span> <span class="string">`This action updates a #<span class="subst">$&#123;id&#125;</span> user`</span>;  &#125;  <span class="meta">@Delete</span>(<span class="string">&#x27;:id&#x27;</span>)  <span class="title function_">remove</span>(<span class="meta">@Param</span>(<span class="string">&#x27;id&#x27;</span>) <span class="attr">id</span>: <span class="built_in">string</span>): <span class="built_in">string</span> &#123;    <span class="keyword">return</span> <span class="string">`This action removes a #<span class="subst">$&#123;id&#125;</span> user`</span>;  &#125;&#125;</code></pre><h2 id="HTTP-메서드-데코레이터"><a href="#HTTP-메서드-데코레이터" class="headerlink" title="HTTP 메서드 데코레이터"></a>HTTP 메서드 데코레이터</h2><p>NestJS는 다양한 HTTP 메서드에 대응하는 데코레이터를 제공합니다:</p><h3 id="Get-조회"><a href="#Get-조회" class="headerlink" title="@Get() - 조회"></a><code>@Get()</code> - 조회</h3><pre><code class="highlight typescript"><span class="meta">@Get</span>(<span class="string">&#x27;profile&#x27;</span>)<span class="title function_">getProfile</span>(): <span class="built_in">string</span> &#123;  <span class="keyword">return</span> <span class="string">&#x27;User profile&#x27;</span>;&#125;</code></pre><h3 id="Post-생성"><a href="#Post-생성" class="headerlink" title="@Post() - 생성"></a><code>@Post()</code> - 생성</h3><pre><code class="highlight typescript"><span class="meta">@Post</span>()<span class="title function_">createUser</span>(<span class="meta">@Body</span>() <span class="attr">createUserDto</span>: <span class="title class_">CreateUserDto</span>): <span class="built_in">string</span> &#123;  <span class="keyword">return</span> <span class="string">&#x27;User created successfully&#x27;</span>;&#125;</code></pre><h3 id="Put-전체-업데이트"><a href="#Put-전체-업데이트" class="headerlink" title="@Put() - 전체 업데이트"></a><code>@Put()</code> - 전체 업데이트</h3><pre><code class="highlight typescript"><span class="meta">@Put</span>(<span class="string">&#x27;:id&#x27;</span>)<span class="title function_">updateUser</span>(<span class="meta">@Param</span>(<span class="string">&#x27;id&#x27;</span>) <span class="attr">id</span>: <span class="built_in">string</span>, <span class="meta">@Body</span>() <span class="attr">updateUserDto</span>: <span class="title class_">UpdateUserDto</span>): <span class="built_in">string</span> &#123;  <span class="keyword">return</span> <span class="string">`User <span class="subst">$&#123;id&#125;</span> updated`</span>;&#125;</code></pre><h3 id="Patch-부분-업데이트"><a href="#Patch-부분-업데이트" class="headerlink" title="@Patch() - 부분 업데이트"></a><code>@Patch()</code> - 부분 업데이트</h3><pre><code class="highlight typescript"><span class="meta">@Patch</span>(<span class="string">&#x27;:id&#x27;</span>)<span class="title function_">patchUser</span>(<span class="meta">@Param</span>(<span class="string">&#x27;id&#x27;</span>) <span class="attr">id</span>: <span class="built_in">string</span>, <span class="meta">@Body</span>() <span class="attr">patchUserDto</span>: <span class="title class_">PatchUserDto</span>): <span class="built_in">string</span> &#123;  <span class="keyword">return</span> <span class="string">`User <span class="subst">$&#123;id&#125;</span> patched`</span>;&#125;</code></pre><h3 id="Delete-삭제"><a href="#Delete-삭제" class="headerlink" title="@Delete() - 삭제"></a><code>@Delete()</code> - 삭제</h3><pre><code class="highlight typescript"><span class="meta">@Delete</span>(<span class="string">&#x27;:id&#x27;</span>)<span class="title function_">removeUser</span>(<span class="meta">@Param</span>(<span class="string">&#x27;id&#x27;</span>) <span class="attr">id</span>: <span class="built_in">string</span>): <span class="built_in">string</span> &#123;  <span class="keyword">return</span> <span class="string">`User <span class="subst">$&#123;id&#125;</span> removed`</span>;&#125;</code></pre><h2 id="요청-데이터-처리"><a href="#요청-데이터-처리" class="headerlink" title="요청 데이터 처리"></a>요청 데이터 처리</h2><h3 id="경로-매개변수-Param"><a href="#경로-매개변수-Param" class="headerlink" title="경로 매개변수 (@Param())"></a>경로 매개변수 (<code>@Param()</code>)</h3><p>URL 경로에서 매개변수를 추출합니다:</p><pre><code class="highlight typescript"><span class="meta">@Get</span>(<span class="string">&#x27;:id&#x27;</span>)<span class="title function_">findOne</span>(<span class="meta">@Param</span>(<span class="string">&#x27;id&#x27;</span>) <span class="attr">id</span>: <span class="built_in">string</span>): <span class="built_in">string</span> &#123;  <span class="keyword">return</span> <span class="string">`User ID: <span class="subst">$&#123;id&#125;</span>`</span>;&#125;<span class="meta">@Get</span>(<span class="string">&#x27;:id/posts/:postId&#x27;</span>)<span class="title function_">findUserPost</span>(  <span class="meta">@Param</span>(<span class="string">&#x27;id&#x27;</span>) <span class="attr">userId</span>: <span class="built_in">string</span>,  <span class="meta">@Param</span>(<span class="string">&#x27;postId&#x27;</span>) <span class="attr">postId</span>: <span class="built_in">string</span>): <span class="built_in">string</span> &#123;  <span class="keyword">return</span> <span class="string">`User <span class="subst">$&#123;userId&#125;</span>&#x27;s post <span class="subst">$&#123;postId&#125;</span>`</span>;&#125;</code></pre><h3 id="쿼리-매개변수-Query"><a href="#쿼리-매개변수-Query" class="headerlink" title="쿼리 매개변수 (@Query())"></a>쿼리 매개변수 (<code>@Query()</code>)</h3><p>URL 쿼리 문자열에서 매개변수를 추출합니다:</p><pre><code class="highlight typescript"><span class="meta">@Get</span>()<span class="title function_">findAll</span>(<span class="meta">@Query</span>() <span class="attr">query</span>: <span class="built_in">any</span>): <span class="built_in">string</span> &#123;  <span class="comment">// GET /users?limit=10&amp;offset=0</span>  <span class="keyword">return</span> <span class="string">`Limit: <span class="subst">$&#123;query.limit&#125;</span>, Offset: <span class="subst">$&#123;query.offset&#125;</span>`</span>;&#125;<span class="meta">@Get</span>(<span class="string">&#x27;search&#x27;</span>)<span class="title function_">searchUsers</span>(<span class="meta">@Query</span>(<span class="string">&#x27;name&#x27;</span>) <span class="attr">name</span>: <span class="built_in">string</span>): <span class="built_in">string</span> &#123;  <span class="comment">// GET /users/search?name=john</span>  <span class="keyword">return</span> <span class="string">`Searching for: <span class="subst">$&#123;name&#125;</span>`</span>;&#125;</code></pre><h3 id="요청-본문-Body"><a href="#요청-본문-Body" class="headerlink" title="요청 본문 (@Body())"></a>요청 본문 (<code>@Body()</code>)</h3><p>POST, PUT, PATCH 요청의 본문 데이터를 추출합니다:</p><pre><code class="highlight typescript"><span class="meta">@Post</span>()<span class="title function_">create</span>(<span class="meta">@Body</span>() <span class="attr">createUserDto</span>: <span class="title class_">CreateUserDto</span>): <span class="built_in">string</span> &#123;  <span class="keyword">return</span> <span class="string">`Creating user: <span class="subst">$&#123;createUserDto.name&#125;</span>`</span>;&#125;</code></pre><h3 id="헤더-Headers"><a href="#헤더-Headers" class="headerlink" title="헤더 (@Headers())"></a>헤더 (<code>@Headers()</code>)</h3><p>HTTP 헤더에서 값을 추출합니다:</p><pre><code class="highlight typescript"><span class="meta">@Get</span>()<span class="title function_">findAll</span>(<span class="meta">@Headers</span>(<span class="string">&#x27;authorization&#x27;</span>) <span class="attr">auth</span>: <span class="built_in">string</span>): <span class="built_in">string</span> &#123;  <span class="keyword">return</span> <span class="string">`Authorization: <span class="subst">$&#123;auth&#125;</span>`</span>;&#125;</code></pre><h2 id="응답-처리"><a href="#응답-처리" class="headerlink" title="응답 처리"></a>응답 처리</h2><h3 id="상태-코드-설정"><a href="#상태-코드-설정" class="headerlink" title="상태 코드 설정"></a>상태 코드 설정</h3><pre><code class="highlight typescript"><span class="keyword">import</span> &#123; <span class="title class_">HttpCode</span>, <span class="title class_">HttpStatus</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;<span class="meta">@Post</span>()<span class="meta">@HttpCode</span>(<span class="title class_">HttpStatus</span>.<span class="property">CREATED</span>)<span class="title function_">create</span>(<span class="meta">@Body</span>() <span class="attr">createUserDto</span>: <span class="title class_">CreateUserDto</span>): <span class="built_in">string</span> &#123;  <span class="keyword">return</span> <span class="string">&#x27;User created&#x27;</span>;&#125;</code></pre><h3 id="헤더-설정"><a href="#헤더-설정" class="headerlink" title="헤더 설정"></a>헤더 설정</h3><pre><code class="highlight typescript"><span class="keyword">import</span> &#123; <span class="title class_">Header</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;<span class="meta">@Get</span>()<span class="meta">@Header</span>(<span class="string">&#x27;Cache-Control&#x27;</span>, <span class="string">&#x27;none&#x27;</span>)<span class="title function_">findAll</span>(): <span class="built_in">string</span> &#123;  <span class="keyword">return</span> <span class="string">&#x27;This response has a custom header&#x27;</span>;&#125;</code></pre><h3 id="리다이렉션"><a href="#리다이렉션" class="headerlink" title="리다이렉션"></a>리다이렉션</h3><pre><code class="highlight typescript"><span class="keyword">import</span> &#123; <span class="title class_">Redirect</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;<span class="meta">@Get</span>(<span class="string">&#x27;redirect&#x27;</span>)<span class="meta">@Redirect</span>(<span class="string">&#x27;https://example.com&#x27;</span>, <span class="number">301</span>)<span class="title function_">redirect</span>(): <span class="built_in">void</span> &#123;  <span class="comment">// 리다이렉션 처리</span>&#125;</code></pre><h2 id="비동기-처리"><a href="#비동기-처리" class="headerlink" title="비동기 처리"></a>비동기 처리</h2><p>컨트롤러 메서드는 비동기적으로 처리할 수 있습니다:</p><pre><code class="highlight typescript"><span class="meta">@Get</span>()<span class="keyword">async</span> <span class="title function_">findAll</span>(): <span class="title class_">Promise</span>&lt;<span class="title class_">User</span>[]&gt; &#123;  <span class="keyword">return</span> <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">usersService</span>.<span class="title function_">findAll</span>();&#125;<span class="meta">@Get</span>(<span class="string">&#x27;:id&#x27;</span>)<span class="keyword">async</span> <span class="title function_">findOne</span>(<span class="meta">@Param</span>(<span class="string">&#x27;id&#x27;</span>) <span class="attr">id</span>: <span class="built_in">string</span>): <span class="title class_">Promise</span>&lt;<span class="title class_">User</span>&gt; &#123;  <span class="keyword">return</span> <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">usersService</span>.<span class="title function_">findOne</span>(id);&#125;</code></pre><h2 id="서브-도메인-라우팅"><a href="#서브-도메인-라우팅" class="headerlink" title="서브 도메인 라우팅"></a>서브 도메인 라우팅</h2><p>특정 서브 도메인에서만 동작하도록 설정할 수 있습니다:</p><pre><code class="highlight typescript"><span class="meta">@Controller</span>(&#123; <span class="attr">host</span>: <span class="string">&#x27;admin.example.com&#x27;</span> &#125;)<span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AdminController</span> &#123;  <span class="meta">@Get</span>()  <span class="title function_">index</span>(): <span class="built_in">string</span> &#123;    <span class="keyword">return</span> <span class="string">&#x27;Admin panel&#x27;</span>;  &#125;&#125;</code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 NestJS의 컨트롤러와 라우팅에 대해 알아보았습니다. 컨트롤러는 HTTP 요청을 처리하는 핵심 구성 요소이며, 다양한 데코레이터를 통해 요청 데이터를 쉽게 처리할 수 있습니다. 다음 시간에는 서비스와 의존성 주입에 대해 자세히 알아보겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> NestJS_기본기 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>GraphQL의 개념과 API 서버 구축 및 Express로 실습하기</title>
      <link href="/web/essential/20/"/>
      <url>/web/essential/20/</url>
      
        <content type="html"><![CDATA[<h1 id="GraphQL의-개념과-API-서버-구축-및-Express로-실습하기"><a href="#GraphQL의-개념과-API-서버-구축-및-Express로-실습하기" class="headerlink" title="GraphQL의 개념과 API 서버 구축 및 Express로 실습하기"></a>GraphQL의 개념과 API 서버 구축 및 Express로 실습하기</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 GraphQL의 개념과 원리에 대해 알아보고, Express를 사용하여 GraphQL API 서버를 구축하는 방법을 실습해보겠습니다. GraphQL은 현대 웹 애플리케이션에서 효율적인 데이터 통신을 위한 중요한 기술입니다.</p><h2 id="GraphQL의-개념"><a href="#GraphQL의-개념" class="headerlink" title="GraphQL의 개념"></a>GraphQL의 개념</h2><h3 id="GraphQL이란"><a href="#GraphQL이란" class="headerlink" title="GraphQL이란?"></a>GraphQL이란?</h3><p>GraphQL은 페이스북에서 개발한 쿼리 언어로, 클라이언트가 필요한 데이터의 구조를 정의하면 서버가 그 구조에 맞는 데이터를 반환하는 방식입니다. REST API와 달리, 하나의 엔드포인트에서 다양한 데이터를 요청하고 받을 수 있습니다.</p><h3 id="GraphQL의-주요-특징"><a href="#GraphQL의-주요-특징" class="headerlink" title="GraphQL의 주요 특징"></a>GraphQL의 주요 특징</h3><ol><li><strong>유연한 쿼리</strong>: 클라이언트가 필요한 데이터만 선택하여 요청할 수 있습니다.</li><li><strong>단일 엔드포인트</strong>: 여러 리소스에 접근하기 위해 여러 엔드포인트를 사용할 필요 없이 하나의 엔드포인트에서 모든 요청을 처리할 수 있습니다.</li><li><strong>타입 시스템</strong>: 스키마를 정의하여 데이터의 구조와 타입을 명확히 할 수 있습니다.</li><li><strong>실시간 데이터</strong>: 구독(subscription)을 통해 실시간 데이터를 지원합니다.</li></ol><h3 id="GraphQL과-REST-API-비교"><a href="#GraphQL과-REST-API-비교" class="headerlink" title="GraphQL과 REST API 비교"></a>GraphQL과 REST API 비교</h3><table><thead><tr><th>특징</th><th>GraphQL</th><th>REST API</th></tr></thead><tbody><tr><td>요청 형식</td><td>클라이언트가 필요한 데이터의 구조를 정의</td><td>고정된 형식의 엔드포인트와 리소스</td></tr><tr><td>엔드포인트</td><td>단일 엔드포인트</td><td>리소스마다 개별 엔드포인트</td></tr><tr><td>데이터 반환</td><td>필요한 데이터만 반환</td><td>정해진 형식의 전체 데이터 반환</td></tr><tr><td>타입 시스템</td><td>스키마를 통한 타입 시스템 제공</td><td>없음</td></tr><tr><td>실시간 데이터</td><td>구독(subscription) 기능 지원</td><td>기본적으로 지원하지 않음</td></tr></tbody></table><h2 id="준비하기"><a href="#준비하기" class="headerlink" title="준비하기"></a>준비하기</h2><p>먼저 필요한 패키지를 설치합니다:</p><pre><code class="highlight bash">npm init -ynpm install express express-graphql graphql</code></pre><h2 id="서버-설정"><a href="#서버-설정" class="headerlink" title="서버 설정"></a>서버 설정</h2><p>다음은 필요한 모듈을 가져오고 서버를 설정하는 코드입니다. 자세한 부분은 뒤에서 알아보겠습니다.</p><pre><code class="highlight javascript"><span class="comment">// server.js</span><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);<span class="keyword">const</span> &#123; graphqlHTTP &#125; = <span class="built_in">require</span>(<span class="string">&quot;express-graphql&quot;</span>);<span class="keyword">const</span> &#123; buildSchema &#125; = <span class="built_in">require</span>(<span class="string">&quot;graphql&quot;</span>);<span class="keyword">const</span> app = <span class="title function_">express</span>();<span class="keyword">const</span> port = <span class="number">3000</span>;<span class="comment">// GraphQL 스키마 정의</span><span class="keyword">const</span> schema = <span class="title function_">buildSchema</span>(<span class="string">`</span><span class="string">  type Query &#123;</span><span class="string">    hello: String</span><span class="string">    user(id: ID!): User</span><span class="string">  &#125;</span><span class="string">  type User &#123;</span><span class="string">    id: ID</span><span class="string">    name: String</span><span class="string">    age: Int</span><span class="string">  &#125;</span><span class="string">`</span>);<span class="comment">// 데이터</span><span class="keyword">const</span> users = [  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span>, <span class="attr">age</span>: <span class="number">25</span> &#125;,  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&quot;Bob&quot;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;,];<span class="comment">// GraphQL 리졸버 정의</span><span class="keyword">const</span> root = &#123;  <span class="attr">hello</span>: <span class="function">() =&gt;</span> <span class="string">&quot;Hello, world!&quot;</span>,  <span class="attr">user</span>: <span class="function">(<span class="params">&#123; id &#125;</span>) =&gt;</span> users.<span class="title function_">find</span>(<span class="function">(<span class="params">user</span>) =&gt;</span> user.<span class="property">id</span> == id),&#125;;<span class="comment">// GraphQL 미들웨어 설정</span>app.<span class="title function_">use</span>(  <span class="string">&quot;/graphql&quot;</span>,  <span class="title function_">graphqlHTTP</span>(&#123;    <span class="attr">schema</span>: schema,    <span class="attr">rootValue</span>: root,    <span class="attr">graphiql</span>: <span class="literal">true</span>, <span class="comment">// GraphiQL 인터페이스 활성화</span>  &#125;));<span class="comment">// 서버 시작</span>app.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Server is running on &lt;http://localhost&gt;:<span class="subst">$&#123;port&#125;</span>/graphql`</span>);&#125;);</code></pre><h2 id="설정-설명"><a href="#설정-설명" class="headerlink" title="설정 설명"></a>설정 설명</h2><p>Express에서 GraphQL API 서버를 설정하는 방법을 설명합니다.</p><ol><li><p><strong>GraphQL 스키마 정의</strong>:</p><pre><code class="highlight javascript"><span class="keyword">const</span> schema = <span class="title function_">buildSchema</span>(<span class="string">`</span><span class="string">  type Query &#123;</span><span class="string">    hello: String</span><span class="string">    user(id: ID!): User</span><span class="string">  &#125;</span><span class="string">  type User &#123;</span><span class="string">    id: ID</span><span class="string">    name: String</span><span class="string">    age: Int</span><span class="string">  &#125;</span><span class="string">`</span>);</code></pre><p><code>buildSchema</code>를 사용하여 GraphQL 스키마를 정의합니다. 여기서는 <code>hello</code>와 <code>user</code> 쿼리를 정의하고, <code>User</code> 타입을 정의합니다.</p></li><li><p><strong>데이터</strong>:</p><pre><code class="highlight javascript"><span class="keyword">const</span> users = [  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span>, <span class="attr">age</span>: <span class="number">25</span> &#125;,  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&quot;Bob&quot;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;,];</code></pre><p>예제 데이터를 정의합니다. 실제 애플리케이션에서는 데이터베이스에서 데이터를 가져옵니다.</p></li><li><p><strong>GraphQL 리졸버 정의</strong>:</p><pre><code class="highlight javascript"><span class="keyword">const</span> root = &#123;  <span class="attr">hello</span>: <span class="function">() =&gt;</span> <span class="string">&quot;Hello, world!&quot;</span>,  <span class="attr">user</span>: <span class="function">(<span class="params">&#123; id &#125;</span>) =&gt;</span> users.<span class="title function_">find</span>(<span class="function">(<span class="params">user</span>) =&gt;</span> user.<span class="property">id</span> == id),&#125;;</code></pre><p>리졸버는 쿼리를 처리하는 함수입니다. <code>hello</code> 쿼리는 간단한 문자열을 반환하고, <code>user</code> 쿼리는 사용자 ID에 따라 사용자 데이터를 반환합니다.</p></li><li><p><strong>GraphQL 미들웨어 설정</strong>:</p><pre><code class="highlight javascript">app.<span class="title function_">use</span>(  <span class="string">&quot;/graphql&quot;</span>,  <span class="title function_">graphqlHTTP</span>(&#123;    <span class="attr">schema</span>: schema,    <span class="attr">rootValue</span>: root,    <span class="attr">graphiql</span>: <span class="literal">true</span>, <span class="comment">// GraphiQL 인터페이스 활성화</span>  &#125;));</code></pre><p><code>express-graphql</code> 미들웨어를 사용하여 GraphQL API 서버를 설정합니다. <code>graphiql</code> 옵션을 <code>true</code>로 설정하면 브라우저에서 GraphiQL 인터페이스를 사용할 수 있습니다.</p></li></ol><h2 id="테스트"><a href="#테스트" class="headerlink" title="테스트"></a>테스트</h2><p>이렇게 하면 Node.js에서 GraphQL API 서버를 설정할 수 있습니다. 이 코드를 실행하기 전에 <code>server.js</code> 파일을 실행하여 서버를 시작하세요.</p><pre><code class="highlight bash">node server.js</code></pre><p>서버가 성공적으로 실행되면, <code>http://localhost:3000/graphql</code>에서 GraphiQL 인터페이스를 통해 GraphQL API를 테스트할 수 있습니다.</p><h3 id="테스트-쿼리"><a href="#테스트-쿼리" class="headerlink" title="테스트 쿼리"></a>테스트 쿼리</h3><ol><li><p><strong>Hello 쿼리</strong>:</p><pre><code class="highlight graphql"><span class="punctuation">&#123;</span>  hello<span class="punctuation">&#125;</span></code></pre></li><li><p><strong>User 쿼리</strong>:</p><pre><code class="highlight graphql"><span class="punctuation">&#123;</span>  user<span class="punctuation">(</span><span class="symbol">id</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">)</span> <span class="punctuation">&#123;</span>    id    name    age  <span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></code></pre></li></ol><p>위의 쿼리를 GraphiQL 인터페이스에 입력하여 실행하면, 각각의 쿼리에 대한 응답을 확인할 수 있습니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 GraphQL의 개념과 필요성을 이해하고, Express를 사용하여 GraphQL API 서버를 구축하는 방법을 알아보았습니다. 이를 바탕으로 더 유연하고 효율적인 데이터 통신을 구현할 수 있는 웹 애플리케이션을 개발해보세요!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> web_필수 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NestJS 소개 및 설치</title>
      <link href="/nestjs/basic/1/"/>
      <url>/nestjs/basic/1/</url>
      
        <content type="html"><![CDATA[<h1 id="NestJS-소개-및-설치"><a href="#NestJS-소개-및-설치" class="headerlink" title="NestJS 소개 및 설치"></a>NestJS 소개 및 설치</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 NestJS의 소개와 설치 방법에 대해 알아보겠습니다.<br>NestJS는 Node.js 기반의 확장 가능한 서버 사이드 애플리케이션을 구축하기 위한 프레임워크입니다.</p><h2 id="NestJS란"><a href="#NestJS란" class="headerlink" title="NestJS란?"></a>NestJS란?</h2><p>NestJS는 Angular의 설계 철학을 Node.js 백엔드 개발에 적용한 프레임워크입니다. TypeScript를 기본으로 하며, 객체 지향 프로그래밍, 함수형 프로그래밍, 그리고 함수형 반응형 프로그래밍 요소들을 결합했습니다.</p><h3 id="NestJS의-주요-특징"><a href="#NestJS의-주요-특징" class="headerlink" title="NestJS의 주요 특징"></a>NestJS의 주요 특징</h3><ol><li><strong>TypeScript 기본 지원</strong>: TypeScript를 기본으로 하여 강력한 타입 시스템을 제공합니다.</li><li><strong>모듈 시스템</strong>: Angular와 유사한 모듈 시스템으로 코드를 구조화합니다.</li><li><strong>의존성 주입</strong>: 강력한 의존성 주입 시스템을 제공합니다.</li><li><strong>데코레이터 기반</strong>: 데코레이터를 통해 간결하고 명확한 코드를 작성할 수 있습니다.</li></ol><p>NestJS는 마치 잘 정리된 도서관과 같습니다. 각 책(모듈)이 적절한 섹션(컨트롤러, 서비스)에 배치되어 있어 필요한 정보를 쉽게 찾을 수 있습니다.</p><h2 id="NestJS-설치"><a href="#NestJS-설치" class="headerlink" title="NestJS 설치"></a>NestJS 설치</h2><h3 id="1-Node-js-설치"><a href="#1-Node-js-설치" class="headerlink" title="1. Node.js 설치"></a>1. Node.js 설치</h3><p>NestJS를 사용하기 위해서는 Node.js가 필요합니다. <a href="https://nodejs.org/">Node.js 공식 웹사이트</a>에서 최신 LTS 버전을 다운로드하여 설치합니다.</p><p>설치 확인:</p><pre><code class="highlight bash">node -vnpm -v</code></pre><h3 id="2-NestJS-CLI-설치"><a href="#2-NestJS-CLI-설치" class="headerlink" title="2. NestJS CLI 설치"></a>2. NestJS CLI 설치</h3><p>NestJS CLI를 전역으로 설치합니다:</p><pre><code class="highlight bash">npm install -g @nestjs/cli</code></pre><p>설치 확인:</p><pre><code class="highlight bash">nest --version</code></pre><h3 id="3-새-프로젝트-생성"><a href="#3-새-프로젝트-생성" class="headerlink" title="3. 새 프로젝트 생성"></a>3. 새 프로젝트 생성</h3><p>NestJS CLI를 사용하여 새 프로젝트를 생성합니다:</p><pre><code class="highlight bash">nest new my-nestjs-app</code></pre><p>프로젝트 생성 시 패키지 매니저를 선택할 수 있습니다:</p><ul><li>npm</li><li>yarn</li><li>pnpm</li></ul><h3 id="4-개발-서버-시작"><a href="#4-개발-서버-시작" class="headerlink" title="4. 개발 서버 시작"></a>4. 개발 서버 시작</h3><p>프로젝트 디렉토리로 이동하여 개발 서버를 시작합니다:</p><pre><code class="highlight bash"><span class="built_in">cd</span> my-nestjs-appnpm run start:dev</code></pre><p>서버가 성공적으로 시작되면 <code>http://localhost:3000</code>에서 애플리케이션을 확인할 수 있습니다.</p><h2 id="프로젝트-구조"><a href="#프로젝트-구조" class="headerlink" title="프로젝트 구조"></a>프로젝트 구조</h2><p>NestJS 프로젝트의 기본 구조는 다음과 같습니다:</p><pre><code class="highlight plaintext">my-nestjs-app/├── src/│   ├── app.controller.ts│   ├── app.controller.spec.ts│   ├── app.module.ts│   ├── app.service.ts│   └── main.ts├── test/├── package.json├── tsconfig.json└── nest-cli.json</code></pre><h3 id="주요-파일-설명"><a href="#주요-파일-설명" class="headerlink" title="주요 파일 설명"></a>주요 파일 설명</h3><ul><li><strong>main.ts</strong>: 애플리케이션의 진입점입니다. 마치 건물의 정문과 같은 역할을 합니다.</li><li><strong>app.module.ts</strong>: 애플리케이션의 루트 모듈입니다. 모든 모듈이 연결되는 중앙 허브입니다.</li><li><strong>app.controller.ts</strong>: HTTP 요청을 처리하는 컨트롤러입니다. 웹사이트의 접수 창구와 같습니다.</li><li><strong>app.service.ts</strong>: 비즈니스 로직을 담당하는 서비스입니다. 실제 일을 처리하는 직원과 같습니다.</li></ul><h2 id="첫-번째-API-엔드포인트"><a href="#첫-번째-API-엔드포인트" class="headerlink" title="첫 번째 API 엔드포인트"></a>첫 번째 API 엔드포인트</h2><p>기본 생성된 컨트롤러를 살펴보겠습니다:</p><pre><code class="highlight typescript"><span class="comment">// app.controller.ts</span><span class="keyword">import</span> &#123; <span class="title class_">Controller</span>, <span class="title class_">Get</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;<span class="keyword">import</span> &#123; <span class="title class_">AppService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.service&#x27;</span>;<span class="meta">@Controller</span>()<span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppController</span> &#123;  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> <span class="attr">appService</span>: <span class="title class_">AppService</span></span>) &#123;&#125;  <span class="meta">@Get</span>()  <span class="title function_">getHello</span>(): <span class="built_in">string</span> &#123;    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">appService</span>.<span class="title function_">getHello</span>();  &#125;&#125;</code></pre><p><code>@Get()</code> 데코레이터는 HTTP GET 요청을 처리하는 메서드를 정의합니다. 이는 마치 “이 문으로 들어오는 손님을 맞이하겠다”는 표지판과 같습니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 NestJS의 소개와 설치 방법, 그리고 기본 프로젝트 구조에 대해 알아보았습니다. NestJS는 구조적이고 확장 가능한 서버 사이드 애플리케이션을 구축하는 데 매우 유용한 프레임워크입니다. 다음 시간에는 컨트롤러와 라우팅에 대해 자세히 알아보겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> NestJS_기본기 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 메모리 관리와 가비지 컬렉션</title>
      <link href="/javascript/special/10/"/>
      <url>/javascript/special/10/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-메모리-관리와-가비지-컬렉션"><a href="#JavaScript-메모리-관리와-가비지-컬렉션" class="headerlink" title="JavaScript 메모리 관리와 가비지 컬렉션"></a>JavaScript 메모리 관리와 가비지 컬렉션</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!</p><p>JavaScript는 자동 메모리 관리를 지원하는 고수준 언어입니다.<br>메모리 관리는 애플리케이션 성능과 안정성에 중요한 영향을 미칩니다.<br>이번 글에서는 JavaScript의 메모리 관리 방식, 가비지 컬렉션의 동작 원리, 그리고 메모리 누수를 방지하는 방법을 설명합니다.</p><h2 id="JavaScript의-메모리-관리-방식"><a href="#JavaScript의-메모리-관리-방식" class="headerlink" title="JavaScript의 메모리 관리 방식"></a>JavaScript의 메모리 관리 방식</h2><p>JavaScript는 메모리를 자동으로 관리합니다. 개발자는 명시적으로 메모리를 할당하거나 해제할 필요가 없으며, JavaScript 엔진이 필요에 따라 메모리를 할당하고 가비지 컬렉션을 통해 사용하지 않는 메모리를 해제합니다.</p><h3 id="메모리-할당"><a href="#메모리-할당" class="headerlink" title="메모리 할당"></a>메모리 할당</h3><p>JavaScript에서 메모리는 다음과 같은 경우에 할당됩니다:</p><ul><li>변수를 선언하고 값을 할당할 때</li><li>객체를 생성할 때</li><li>함수가 호출될 때 새로운 스코프가 생성되며, 해당 스코프에 필요한 메모리가 할당됩니다</li></ul><h3 id="메모리-해제"><a href="#메모리-해제" class="headerlink" title="메모리 해제"></a>메모리 해제</h3><p>JavaScript 엔진은 더 이상 사용되지 않는 메모리를 자동으로 해제합니다. 이 과정은 가비지 컬렉션이라고 합니다.</p><h2 id="가비지-컬렉션의-동작-원리"><a href="#가비지-컬렉션의-동작-원리" class="headerlink" title="가비지 컬렉션의 동작 원리"></a>가비지 컬렉션의 동작 원리</h2><p>가비지 컬렉션은 사용되지 않는 메모리를 자동으로 해제하는 프로세스입니다. JavaScript 엔진은 여러 가지 알고리즘을 사용하여 가비지 컬렉션을 수행합니다. 가장 널리 사용되는 알고리즘은 “참조 카운팅(Reference Counting)”과 “마크-앤-스위프(Mark-and-Sweep)”입니다.</p><h3 id="참조-카운팅"><a href="#참조-카운팅" class="headerlink" title="참조 카운팅"></a>참조 카운팅</h3><p>참조 카운팅은 객체에 대한 참조 횟수를 추적합니다. 참조 횟수가 0이 되면 해당 객체는 가비지 컬렉션의 대상이 됩니다. 그러나 순환 참조 문제로 인해 모든 가비지를 제대로 수집하지 못할 수 있습니다.</p><pre><code class="highlight javascript"><span class="keyword">function</span> <span class="title function_">createCycle</span>(<span class="params"></span>) &#123;  <span class="keyword">const</span> obj1 = &#123;&#125;;  <span class="keyword">const</span> obj2 = &#123;&#125;;  obj1.<span class="property">reference</span> = obj2;  obj2.<span class="property">reference</span> = obj1;&#125;<span class="title function_">createCycle</span>();</code></pre><p>위 코드에서는 <code>obj1</code>과 <code>obj2</code>가 서로를 참조하고 있어 참조 카운팅만으로는 메모리를 해제할 수 없습니다.</p><h3 id="마크-앤-스위프"><a href="#마크-앤-스위프" class="headerlink" title="마크-앤-스위프"></a>마크-앤-스위프</h3><p>마크-앤-스위프 알고리즘은 모든 객체를 “도달 가능한(reachable)” 객체와 “도달 불가능한(unreachable)” 객체로 분류합니다. 도달 가능한 객체는 루트(root) 객체에서부터 시작하여 참조를 통해 도달할 수 있는 객체를 의미합니다. 도달 불가능한 객체는 가비지 컬렉션의 대상이 됩니다.</p><ol><li><strong>마크 단계:</strong> 루트 객체에서 시작하여 도달 가능한 모든 객체를 마크(mark)합니다.</li><li><strong>스위프 단계:</strong> 마크되지 않은 객체를 메모리에서 해제합니다.</li></ol><h2 id="메모리-누수를-방지하는-방법"><a href="#메모리-누수를-방지하는-방법" class="headerlink" title="메모리 누수를 방지하는 방법"></a>메모리 누수를 방지하는 방법</h2><p>메모리 누수는 사용하지 않는 메모리가 해제되지 않고 남아 있는 현상을 의미합니다. 메모리 누수는 애플리케이션 성능 저하와 크래시를 유발할 수 있습니다. 메모리 누수를 방지하기 위한 몇 가지 방법을 소개합니다.</p><h3 id="1-전역-변수-사용-줄이기"><a href="#1-전역-변수-사용-줄이기" class="headerlink" title="1. 전역 변수 사용 줄이기"></a>1. 전역 변수 사용 줄이기</h3><p>전역 변수는 애플리케이션이 종료될 때까지 메모리에 유지됩니다. 전역 변수를 최소화하고, 필요한 경우 <code>const</code>나 <code>let</code>을 사용하여 변수의 범위를 제한합니다.</p><pre><code class="highlight javascript"><span class="comment">// 나쁜 예제</span><span class="keyword">var</span> globalVariable = <span class="string">&quot;I am a global variable&quot;</span>;<span class="comment">// 좋은 예제</span><span class="keyword">function</span> <span class="title function_">example</span>(<span class="params"></span>) &#123;  <span class="keyword">const</span> localVariable = <span class="string">&quot;I am a local variable&quot;</span>;&#125;</code></pre><h3 id="2-클로저-주의하기"><a href="#2-클로저-주의하기" class="headerlink" title="2. 클로저 주의하기"></a>2. 클로저 주의하기</h3><p>클로저는 유용하지만, 잘못 사용하면 메모리 누수를 유발할 수 있습니다. 필요하지 않은 경우 참조를 제거하여 메모리가 해제될 수 있도록 합니다.</p><pre><code class="highlight javascript"><span class="keyword">function</span> <span class="title function_">outerFunction</span>(<span class="params"></span>) &#123;  <span class="keyword">let</span> largeArray = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">1000000</span>).<span class="title function_">fill</span>(<span class="string">&quot;Some data&quot;</span>);  <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">innerFunction</span>(<span class="params"></span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(largeArray.<span class="property">length</span>);  &#125;;&#125;<span class="keyword">const</span> closure = <span class="title function_">outerFunction</span>();<span class="comment">// largeArray는 여전히 메모리에 남아 있음</span>closure = <span class="literal">null</span>; <span class="comment">// 참조를 제거하여 메모리 해제</span></code></pre><h3 id="3-DOM-요소-참조-제거"><a href="#3-DOM-요소-참조-제거" class="headerlink" title="3. DOM 요소 참조 제거"></a>3. DOM 요소 참조 제거</h3><p>이벤트 리스너나 DOM 요소에 대한 참조를 제거하지 않으면 메모리 누수가 발생할 수 있습니다. 요소가 더 이상 필요하지 않은 경우, 이벤트 리스너를 제거하고 참조를 해제합니다.</p><pre><code class="highlight javascript"><span class="keyword">let</span> button = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myButton&quot;</span>);button.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> <span class="title function_">handleClick</span>(<span class="params"></span>) &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Button clicked&quot;</span>);&#125;);<span class="comment">// 버튼이 더 이상 필요하지 않을 때</span>button.<span class="title function_">removeEventListener</span>(<span class="string">&quot;click&quot;</span>, handleClick);button = <span class="literal">null</span>;</code></pre><h3 id="4-타이머와-콜백-관리"><a href="#4-타이머와-콜백-관리" class="headerlink" title="4. 타이머와 콜백 관리"></a>4. 타이머와 콜백 관리</h3><p>타이머나 비동기 콜백이 완료된 후에도 참조가 남아 있을 수 있습니다. 타이머를 사용한 후에는 <code>clearTimeout</code>을 호출하고, 콜백이 더 이상 필요하지 않을 때는 참조를 제거합니다.</p><pre><code class="highlight javascript"><span class="keyword">let</span> timeoutId = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;This will run after 1 second&quot;</span>);&#125;, <span class="number">1000</span>);<span class="comment">// 타이머가 더 이상 필요하지 않을 때</span><span class="built_in">clearTimeout</span>(timeoutId);timeoutId = <span class="literal">null</span>;</code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>JavaScript에서 메모리 관리와 가비지 컬렉션은 애플리케이션 성능과 안정성에 중요한 역할을 합니다. JavaScript 엔진은 자동 메모리 관리를 제공하지만, 개발자는 메모리 누수를 방지하기 위해 신경 써야 합니다. 전역 변수 사용 줄이기, 클로저 주의하기, DOM 요소 참조 제거, 타이머와 콜백 관리 등 메모리 누수를 방지하는 방법을 실천하여 효율적인 메모리 관리를 구현해보세요!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> JS_필살기 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript 데코레이터 사용 시 발생하는 문제 해결</title>
      <link href="/typescript/troubleshooting/7/"/>
      <url>/typescript/troubleshooting/7/</url>
      
        <content type="html"><![CDATA[<h1 id="TypeScript-데코레이터-사용-시-발생하는-문제-해결"><a href="#TypeScript-데코레이터-사용-시-발생하는-문제-해결" class="headerlink" title="TypeScript 데코레이터 사용 시 발생하는 문제 해결"></a>TypeScript 데코레이터 사용 시 발생하는 문제 해결</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 TypeScript에서 데코레이터(Decorators)를 사용할 때 발생할 수 있는 문제와 이를 해결하는 방법에 대해 알아보겠습니다.<br>데코레이터는 클래스와 메서드에 부가 기능을 추가할 수 있는 강력한 도구지만, 잘못 사용하면 예기치 않은 동작이나 에러가 발생할 수 있습니다.</p><h2 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h2><h3 id="데코레이터란"><a href="#데코레이터란" class="headerlink" title="데코레이터란?"></a>데코레이터란?</h3><p>데코레이터는 클래스, 메서드, 접근자, 프로퍼티, 매개변수에 부가 기능을 추가하는 특별한 종류의 선언입니다. 데코레이터는 함수로 구현되며, 대상 선언에 대한 메타데이터를 주고받을 수 있습니다.</p><h3 id="데코레이터의-사용-예"><a href="#데코레이터의-사용-예" class="headerlink" title="데코레이터의 사용 예"></a>데코레이터의 사용 예</h3><pre><code class="highlight typescript"><span class="keyword">function</span> <span class="title function_">Logger</span>(<span class="params"></span><span class="params">  <span class="attr">target</span>: <span class="built_in">any</span>,</span><span class="params">  <span class="attr">propertyKey</span>: <span class="built_in">string</span>,</span><span class="params">  <span class="attr">descriptor</span>: <span class="title class_">PropertyDescriptor</span></span><span class="params"></span>) &#123;  <span class="keyword">const</span> originalMethod = descriptor.<span class="property">value</span>;  descriptor.<span class="property">value</span> = <span class="keyword">function</span> (<span class="params">...<span class="attr">args</span>: <span class="built_in">any</span>[]</span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Calling <span class="subst">$&#123;propertyKey&#125;</span> with arguments:`</span>, args);    <span class="keyword">const</span> result = originalMethod.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Result:`</span>, result);    <span class="keyword">return</span> result;  &#125;;  <span class="keyword">return</span> descriptor;&#125;<span class="keyword">class</span> <span class="title class_">Example</span> &#123;  <span class="meta">@Logger</span>  <span class="title function_">sum</span>(<span class="params"><span class="attr">a</span>: <span class="built_in">number</span>, <span class="attr">b</span>: <span class="built_in">number</span></span>) &#123;    <span class="keyword">return</span> a + b;  &#125;&#125;<span class="keyword">const</span> example = <span class="keyword">new</span> <span class="title class_">Example</span>();example.<span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// Calling sum with arguments: [1, 2]</span><span class="comment">// Result: 3</span></code></pre><h2 id="문제-상황과-해결-방법"><a href="#문제-상황과-해결-방법" class="headerlink" title="문제 상황과 해결 방법"></a>문제 상황과 해결 방법</h2><h3 id="문제-1-데코레이터의-순서-문제"><a href="#문제-1-데코레이터의-순서-문제" class="headerlink" title="문제 1: 데코레이터의 순서 문제"></a>문제 1: 데코레이터의 순서 문제</h3><h4 id="예제-코드"><a href="#예제-코드" class="headerlink" title="예제 코드"></a>예제 코드</h4><pre><code class="highlight typescript"><span class="keyword">function</span> <span class="title function_">First</span>(<span class="params"></span><span class="params">  <span class="attr">target</span>: <span class="built_in">any</span>,</span><span class="params">  <span class="attr">propertyKey</span>: <span class="built_in">string</span>,</span><span class="params">  <span class="attr">descriptor</span>: <span class="title class_">PropertyDescriptor</span></span><span class="params"></span>) &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;First decorator&quot;</span>);&#125;<span class="keyword">function</span> <span class="title function_">Second</span>(<span class="params"></span><span class="params">  <span class="attr">target</span>: <span class="built_in">any</span>,</span><span class="params">  <span class="attr">propertyKey</span>: <span class="built_in">string</span>,</span><span class="params">  <span class="attr">descriptor</span>: <span class="title class_">PropertyDescriptor</span></span><span class="params"></span>) &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Second decorator&quot;</span>);&#125;<span class="keyword">class</span> <span class="title class_">Example</span> &#123;  <span class="meta">@First</span>  <span class="meta">@Second</span>  <span class="title function_">method</span>(<span class="params"></span>) &#123;&#125;&#125;<span class="comment">// 출력:</span><span class="comment">// Second decorator</span><span class="comment">// First decorator</span></code></pre><h4 id="문제-설명"><a href="#문제-설명" class="headerlink" title="문제 설명"></a>문제 설명</h4><p>데코레이터는 아래에서 위로, 즉 가장 가까운 데코레이터부터 차례로 실행됩니다. 이를 잘못 이해하면 데코레이터의 실행 순서로 인해 예기치 않은 동작이 발생할 수 있습니다.</p><h4 id="해결-방법"><a href="#해결-방법" class="headerlink" title="해결 방법"></a>해결 방법</h4><p>데코레이터의 실행 순서를 명확하게 이해하고, 의도한 순서대로 데코레이터를 작성합니다.</p><pre><code class="highlight typescript"><span class="keyword">class</span> <span class="title class_">Example</span> &#123;  <span class="meta">@Second</span>  <span class="meta">@First</span>  <span class="title function_">method</span>(<span class="params"></span>) &#123;&#125;&#125;<span class="comment">// 출력:</span><span class="comment">// First decorator</span><span class="comment">// Second decorator</span></code></pre><h3 id="문제-2-클래스-프로퍼티에-데코레이터-사용-시-초기화-문제"><a href="#문제-2-클래스-프로퍼티에-데코레이터-사용-시-초기화-문제" class="headerlink" title="문제 2: 클래스 프로퍼티에 데코레이터 사용 시 초기화 문제"></a>문제 2: 클래스 프로퍼티에 데코레이터 사용 시 초기화 문제</h3><h4 id="예제-코드-1"><a href="#예제-코드-1" class="headerlink" title="예제 코드"></a>예제 코드</h4><pre><code class="highlight typescript"><span class="keyword">function</span> <span class="title function_">DefaultValue</span>(<span class="params"><span class="attr">value</span>: <span class="built_in">any</span></span>) &#123;  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"><span class="attr">target</span>: <span class="built_in">any</span>, <span class="attr">propertyKey</span>: <span class="built_in">string</span></span>) &#123;    target[propertyKey] = value;  &#125;;&#125;<span class="keyword">class</span> <span class="title class_">Example</span> &#123;  <span class="meta">@DefaultValue</span>(<span class="number">10</span>)  <span class="attr">value</span>: <span class="built_in">number</span>;  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">value</span>); <span class="comment">// undefined</span>  &#125;&#125;</code></pre><h4 id="문제-설명-1"><a href="#문제-설명-1" class="headerlink" title="문제 설명"></a>문제 설명</h4><p>클래스 프로퍼티 데코레이터는 프로퍼티가 초기화되기 전에 적용됩니다. 따라서 데코레이터에서 설정한 값이 실제 인스턴스에 반영되지 않을 수 있습니다.</p><h4 id="해결-방법-1"><a href="#해결-방법-1" class="headerlink" title="해결 방법"></a>해결 방법</h4><p>생성자에서 명시적으로 초기화하거나, 접근자 데코레이터를 사용하여 값을 설정합니다.</p><pre><code class="highlight typescript"><span class="keyword">function</span> <span class="title function_">DefaultValue</span>(<span class="params"><span class="attr">value</span>: <span class="built_in">any</span></span>) &#123;  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"><span class="attr">target</span>: <span class="built_in">any</span>, <span class="attr">propertyKey</span>: <span class="built_in">string</span></span>) &#123;    <span class="keyword">let</span> _value = value;    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(target, propertyKey, &#123;      <span class="title function_">get</span>(<span class="params"></span>) &#123;        <span class="keyword">return</span> _value;      &#125;,      <span class="title function_">set</span>(<span class="params">newValue</span>) &#123;        _value = newValue;      &#125;,      <span class="attr">enumerable</span>: <span class="literal">true</span>,      <span class="attr">configurable</span>: <span class="literal">true</span>,    &#125;);  &#125;;&#125;<span class="keyword">class</span> <span class="title class_">Example</span> &#123;  <span class="meta">@DefaultValue</span>(<span class="number">10</span>)  <span class="attr">value</span>: <span class="built_in">number</span>;  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">value</span>); <span class="comment">// 10</span>  &#125;&#125;</code></pre><h3 id="문제-3-데코레이터와-타입스크립트의-타입-시스템-문제"><a href="#문제-3-데코레이터와-타입스크립트의-타입-시스템-문제" class="headerlink" title="문제 3: 데코레이터와 타입스크립트의 타입 시스템 문제"></a>문제 3: 데코레이터와 타입스크립트의 타입 시스템 문제</h3><h4 id="예제-코드-2"><a href="#예제-코드-2" class="headerlink" title="예제 코드"></a>예제 코드</h4><pre><code class="highlight typescript"><span class="keyword">function</span> <span class="title function_">ToString</span>(<span class="params"></span><span class="params">  <span class="attr">target</span>: <span class="built_in">any</span>,</span><span class="params">  <span class="attr">propertyKey</span>: <span class="built_in">string</span>,</span><span class="params">  <span class="attr">descriptor</span>: <span class="title class_">PropertyDescriptor</span></span><span class="params"></span>) &#123;  <span class="keyword">const</span> originalMethod = descriptor.<span class="property">value</span>;  descriptor.<span class="property">value</span> = <span class="keyword">function</span> (<span class="params">...<span class="attr">args</span>: <span class="built_in">any</span>[]</span>) &#123;    <span class="keyword">const</span> result = originalMethod.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);    <span class="keyword">return</span> result.<span class="title function_">toString</span>(); <span class="comment">// Error: Object is possibly &#x27;null&#x27; or &#x27;undefined&#x27;.</span>  &#125;;  <span class="keyword">return</span> descriptor;&#125;<span class="keyword">class</span> <span class="title class_">Example</span> &#123;  <span class="meta">@ToString</span>  <span class="title function_">method</span>(<span class="params"></span>) &#123;    <span class="keyword">return</span> <span class="number">123</span>;  &#125;&#125;</code></pre><h4 id="문제-설명-2"><a href="#문제-설명-2" class="headerlink" title="문제 설명"></a>문제 설명</h4><p>데코레이터는 런타임에 동작하며, TypeScript의 타입 시스템과 상호작용하지 않습니다. 따라서 타입 검사가 제대로 이루어지지 않아 런타임 오류가 발생할 수 있습니다.</p><h4 id="해결-방법-2"><a href="#해결-방법-2" class="headerlink" title="해결 방법"></a>해결 방법</h4><p>데코레이터 내에서 타입 검사를 수동으로 수행하여 런타임 오류를 방지합니다.</p><pre><code class="highlight typescript"><span class="keyword">function</span> <span class="title function_">ToString</span>(<span class="params"></span><span class="params">  <span class="attr">target</span>: <span class="built_in">any</span>,</span><span class="params">  <span class="attr">propertyKey</span>: <span class="built_in">string</span>,</span><span class="params">  <span class="attr">descriptor</span>: <span class="title class_">PropertyDescriptor</span></span><span class="params"></span>) &#123;  <span class="keyword">const</span> originalMethod = descriptor.<span class="property">value</span>;  descriptor.<span class="property">value</span> = <span class="keyword">function</span> (<span class="params">...<span class="attr">args</span>: <span class="built_in">any</span>[]</span>) &#123;    <span class="keyword">const</span> result = originalMethod.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);    <span class="keyword">if</span> (result !== <span class="literal">null</span> &amp;&amp; result !== <span class="literal">undefined</span>) &#123;      <span class="keyword">return</span> result.<span class="title function_">toString</span>();    &#125;    <span class="keyword">return</span> result;  &#125;;  <span class="keyword">return</span> descriptor;&#125;<span class="keyword">class</span> <span class="title class_">Example</span> &#123;  <span class="meta">@ToString</span>  <span class="title function_">method</span>(<span class="params"></span>) &#123;    <span class="keyword">return</span> <span class="number">123</span>;  &#125;&#125;</code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 TypeScript에서 데코레이터를 사용할 때 발생할 수 있는 문제와 이를 해결하는 방법에 대해 알아보았습니다. 데코레이터의 순서, 프로퍼티 초기화 문제, 타입 시스템과의 상호작용 문제 등을 이해하고 적절한 해결 방법을 적용하여 안정적인 코드를 작성할 수 있습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> TS_트러블슈팅 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript 클래스 상속과 다형성 문제 해결</title>
      <link href="/typescript/troubleshooting/6/"/>
      <url>/typescript/troubleshooting/6/</url>
      
        <content type="html"><![CDATA[<h1 id="TypeScript-클래스-상속과-다형성-문제-해결"><a href="#TypeScript-클래스-상속과-다형성-문제-해결" class="headerlink" title="TypeScript 클래스 상속과 다형성 문제 해결"></a>TypeScript 클래스 상속과 다형성 문제 해결</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 TypeScript에서 클래스 상속과 다형성을 사용할 때 발생할 수 있는 문제와 이를 해결하는 방법에 대해 알아보겠습니다.<br>상속과 다형성은 객체 지향 프로그래밍의 중요한 개념이지만, 올바르게 사용하지 않으면 예기치 않은 동작이나 타입 에러가 발생할 수 있습니다.</p><h2 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h2><h3 id="클래스-상속"><a href="#클래스-상속" class="headerlink" title="클래스 상속"></a>클래스 상속</h3><p>클래스 상속은 한 클래스가 다른 클래스의 속성과 메서드를 물려받아 새로운 클래스를 생성하는 것을 의미합니다. 상속을 통해 코드의 재사용성을 높이고, 계층 구조를 통해 객체를 체계적으로 관리할 수 있습니다.</p><h3 id="다형성"><a href="#다형성" class="headerlink" title="다형성"></a>다형성</h3><p>다형성(Polymorphism)은 같은 인터페이스나 부모 클래스를 공유하는 객체들이 서로 다른 방식으로 동작할 수 있게 하는 원리입니다. 다형성은 주로 메서드 오버라이딩을 통해 구현됩니다.</p><h2 id="문제-상황과-해결-방법"><a href="#문제-상황과-해결-방법" class="headerlink" title="문제 상황과 해결 방법"></a>문제 상황과 해결 방법</h2><h3 id="문제-1-메서드-오버라이딩-시-타입-호환성-문제"><a href="#문제-1-메서드-오버라이딩-시-타입-호환성-문제" class="headerlink" title="문제 1: 메서드 오버라이딩 시 타입 호환성 문제"></a>문제 1: 메서드 오버라이딩 시 타입 호환성 문제</h3><h4 id="예제-코드"><a href="#예제-코드" class="headerlink" title="예제 코드"></a>예제 코드</h4><pre><code class="highlight typescript"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;  <span class="title function_">makeSound</span>(): <span class="built_in">void</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Some generic animal sound&quot;</span>);  &#125;&#125;<span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;  <span class="title function_">makeSound</span>(): <span class="built_in">void</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Woof! Woof!&quot;</span>);  &#125;&#125;<span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;  <span class="title function_">makeSound</span>(): <span class="built_in">void</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Meow! Meow!&quot;</span>);  &#125;&#125;<span class="keyword">function</span> <span class="title function_">playWithAnimal</span>(<span class="params"><span class="attr">animal</span>: <span class="title class_">Animal</span></span>) &#123;  animal.<span class="title function_">makeSound</span>();&#125;<span class="keyword">const</span> myDog = <span class="keyword">new</span> <span class="title class_">Dog</span>();<span class="keyword">const</span> myCat = <span class="keyword">new</span> <span class="title class_">Cat</span>();<span class="title function_">playWithAnimal</span>(myDog); <span class="comment">// Woof! Woof!</span><span class="title function_">playWithAnimal</span>(myCat); <span class="comment">// Meow! Meow!</span></code></pre><h4 id="해결-방법-부모-클래스와-동일한-메서드-시그니처-사용"><a href="#해결-방법-부모-클래스와-동일한-메서드-시그니처-사용" class="headerlink" title="해결 방법: 부모 클래스와 동일한 메서드 시그니처 사용"></a>해결 방법: 부모 클래스와 동일한 메서드 시그니처 사용</h4><p>메서드 오버라이딩 시 부모 클래스의 메서드와 동일한 시그니처를 사용하여 타입 호환성을 유지합니다.</p><pre><code class="highlight typescript"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;  <span class="title function_">makeSound</span>(): <span class="built_in">void</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Some generic animal sound&quot;</span>);  &#125;&#125;<span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;  <span class="title function_">makeSound</span>(): <span class="built_in">void</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Woof! Woof!&quot;</span>);  &#125;&#125;<span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;  <span class="title function_">makeSound</span>(): <span class="built_in">void</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Meow! Meow!&quot;</span>);  &#125;&#125;<span class="keyword">function</span> <span class="title function_">playWithAnimal</span>(<span class="params"><span class="attr">animal</span>: <span class="title class_">Animal</span></span>) &#123;  animal.<span class="title function_">makeSound</span>();&#125;<span class="keyword">const</span> myDog = <span class="keyword">new</span> <span class="title class_">Dog</span>();<span class="keyword">const</span> myCat = <span class="keyword">new</span> <span class="title class_">Cat</span>();<span class="title function_">playWithAnimal</span>(myDog); <span class="comment">// Woof! Woof!</span><span class="title function_">playWithAnimal</span>(myCat); <span class="comment">// Meow! Meow!</span></code></pre><h3 id="문제-2-상속-구조에서의-타입-호환성-문제"><a href="#문제-2-상속-구조에서의-타입-호환성-문제" class="headerlink" title="문제 2: 상속 구조에서의 타입 호환성 문제"></a>문제 2: 상속 구조에서의 타입 호환성 문제</h3><h4 id="예제-코드-1"><a href="#예제-코드-1" class="headerlink" title="예제 코드"></a>예제 코드</h4><pre><code class="highlight typescript"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;  <span class="title function_">makeSound</span>(): <span class="built_in">void</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Some generic animal sound&quot;</span>);  &#125;&#125;<span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;  <span class="title function_">makeSound</span>(): <span class="built_in">void</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Woof! Woof!&quot;</span>);  &#125;  <span class="title function_">fetch</span>(): <span class="built_in">void</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Fetching the ball!&quot;</span>);  &#125;&#125;<span class="keyword">function</span> <span class="title function_">interactWithAnimal</span>(<span class="params"><span class="attr">animal</span>: <span class="title class_">Animal</span></span>) &#123;  animal.<span class="title function_">makeSound</span>();  <span class="keyword">if</span> (animal <span class="keyword">instanceof</span> <span class="title class_">Dog</span>) &#123;    animal.<span class="title function_">fetch</span>(); <span class="comment">// Error: Property &#x27;fetch&#x27; does not exist on type &#x27;Animal&#x27;.</span>  &#125;&#125;<span class="keyword">const</span> myDog = <span class="keyword">new</span> <span class="title class_">Dog</span>();<span class="title function_">interactWithAnimal</span>(myDog);</code></pre><h4 id="해결-방법-타입-가드-사용"><a href="#해결-방법-타입-가드-사용" class="headerlink" title="해결 방법: 타입 가드 사용"></a>해결 방법: 타입 가드 사용</h4><p>타입 가드를 사용하여 런타임에 타입을 안전하게 확인하고, 해당 타입에만 존재하는 메서드를 호출할 수 있습니다.</p><pre><code class="highlight typescript"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;  <span class="title function_">makeSound</span>(): <span class="built_in">void</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Some generic animal sound&quot;</span>);  &#125;&#125;<span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;  <span class="title function_">makeSound</span>(): <span class="built_in">void</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Woof! Woof!&quot;</span>);  &#125;  <span class="title function_">fetch</span>(): <span class="built_in">void</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Fetching the ball!&quot;</span>);  &#125;&#125;<span class="keyword">function</span> <span class="title function_">interactWithAnimal</span>(<span class="params"><span class="attr">animal</span>: <span class="title class_">Animal</span></span>) &#123;  animal.<span class="title function_">makeSound</span>();  <span class="keyword">if</span> (animal <span class="keyword">instanceof</span> <span class="title class_">Dog</span>) &#123;    animal.<span class="title function_">fetch</span>(); <span class="comment">// Safe: Type guard ensures &#x27;animal&#x27; is of type &#x27;Dog&#x27;.</span>  &#125;&#125;<span class="keyword">const</span> myDog = <span class="keyword">new</span> <span class="title class_">Dog</span>();<span class="title function_">interactWithAnimal</span>(myDog);</code></pre><h3 id="문제-3-다형성-사용-시-메서드-반환-타입-문제"><a href="#문제-3-다형성-사용-시-메서드-반환-타입-문제" class="headerlink" title="문제 3: 다형성 사용 시 메서드 반환 타입 문제"></a>문제 3: 다형성 사용 시 메서드 반환 타입 문제</h3><h4 id="예제-코드-2"><a href="#예제-코드-2" class="headerlink" title="예제 코드"></a>예제 코드</h4><pre><code class="highlight typescript"><span class="keyword">class</span> <span class="title class_">Shape</span> &#123;  <span class="title function_">area</span>(): <span class="built_in">number</span> &#123;    <span class="keyword">return</span> <span class="number">0</span>;  &#125;&#125;<span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Shape</span> &#123;  <span class="title function_">area</span>(): <span class="built_in">number</span> &#123;    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="property">PI</span> * <span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="variable language_">this</span>.<span class="property">radius</span>, <span class="number">2</span>); <span class="comment">// Error: Property &#x27;radius&#x27; does not exist on type &#x27;Circle&#x27;.</span>  &#125;&#125;<span class="keyword">class</span> <span class="title class_">Rectangle</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Shape</span> &#123;  <span class="title function_">area</span>(): <span class="built_in">number</span> &#123;    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">width</span> * <span class="variable language_">this</span>.<span class="property">height</span>; <span class="comment">// Error: Property &#x27;width&#x27; and &#x27;height&#x27; do not exist on type &#x27;Rectangle&#x27;.</span>  &#125;&#125;</code></pre><h4 id="해결-방법-적절한-클래스-필드-추가-및-초기화"><a href="#해결-방법-적절한-클래스-필드-추가-및-초기화" class="headerlink" title="해결 방법: 적절한 클래스 필드 추가 및 초기화"></a>해결 방법: 적절한 클래스 필드 추가 및 초기화</h4><p>클래스에 필요한 필드를 추가하고, 생성자를 통해 초기화합니다.</p><pre><code class="highlight typescript"><span class="keyword">class</span> <span class="title class_">Shape</span> &#123;  <span class="title function_">area</span>(): <span class="built_in">number</span> &#123;    <span class="keyword">return</span> <span class="number">0</span>;  &#125;&#125;<span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Shape</span> &#123;  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="attr">radius</span>: <span class="built_in">number</span></span>) &#123;    <span class="variable language_">super</span>();  &#125;  <span class="title function_">area</span>(): <span class="built_in">number</span> &#123;    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="property">PI</span> * <span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="variable language_">this</span>.<span class="property">radius</span>, <span class="number">2</span>);  &#125;&#125;<span class="keyword">class</span> <span class="title class_">Rectangle</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Shape</span> &#123;  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="attr">width</span>: <span class="built_in">number</span>, <span class="keyword">private</span> <span class="attr">height</span>: <span class="built_in">number</span></span>) &#123;    <span class="variable language_">super</span>();  &#125;  <span class="title function_">area</span>(): <span class="built_in">number</span> &#123;    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">width</span> * <span class="variable language_">this</span>.<span class="property">height</span>;  &#125;&#125;<span class="keyword">const</span> circle = <span class="keyword">new</span> <span class="title class_">Circle</span>(<span class="number">5</span>);<span class="keyword">const</span> rectangle = <span class="keyword">new</span> <span class="title class_">Rectangle</span>(<span class="number">10</span>, <span class="number">20</span>);<span class="variable language_">console</span>.<span class="title function_">log</span>(circle.<span class="title function_">area</span>()); <span class="comment">// 78.53981633974483</span><span class="variable language_">console</span>.<span class="title function_">log</span>(rectangle.<span class="title function_">area</span>()); <span class="comment">// 200</span></code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 TypeScript에서 클래스 상속과 다형성을 사용할 때 발생할 수 있는 문제와 이를 해결하는 방법에 대해 알아보았습니다.<br>타입 가드, 적절한 클래스 필드 추가 및 초기화 등을 활용하여 타입 호환성과 안전성을 유지하며 상속과 다형성을 사용할 수 있습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> TS_트러블슈팅 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript 타입 시스템의 한계와 이를 우회하는 방법</title>
      <link href="/typescript/troubleshooting/5/"/>
      <url>/typescript/troubleshooting/5/</url>
      
        <content type="html"><![CDATA[<h1 id="TypeScript-타입-시스템의-한계와-이를-우회하는-방법"><a href="#TypeScript-타입-시스템의-한계와-이를-우회하는-방법" class="headerlink" title="TypeScript 타입 시스템의 한계와 이를 우회하는 방법"></a>TypeScript 타입 시스템의 한계와 이를 우회하는 방법</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 TypeScript의 타입 시스템이 가진 한계와 이를 우회하는 방법에 대해 알아보겠습니다.<br>TypeScript는 강한 정적 타입 검사를 제공하지만, 때로는 이 타입 시스템이 유연하지 못한 경우가 발생할 수 있습니다.<br>이러한 상황에서 유용한 몇 가지 패턴과 기법을 소개하겠습니다.</p><h2 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h2><h3 id="타입-시스템의-한계"><a href="#타입-시스템의-한계" class="headerlink" title="타입 시스템의 한계"></a>타입 시스템의 한계</h3><p>TypeScript의 타입 시스템은 대부분의 경우 강한 정적 타입 검사를 제공하지만, 몇 가지 한계가 존재합니다. 예를 들어, 동적 타입 추론의 어려움, 복잡한 타입 간의 호환성 문제, 외부 라이브러리와의 타입 호환성 문제 등이 있습니다.</p><h3 id="타입-시스템-한계의-예"><a href="#타입-시스템-한계의-예" class="headerlink" title="타입 시스템 한계의 예"></a>타입 시스템 한계의 예</h3><ol><li><strong>동적 데이터 처리의 어려움</strong>: TypeScript는 정적으로 타입을 검사하기 때문에 동적으로 생성되는 데이터의 타입을 정확히 추론하기 어렵습니다.</li><li><strong>복잡한 타입 간의 호환성 문제</strong>: 복잡한 타입을 정의하고 이를 조합하는 과정에서 타입 호환성 문제가 발생할 수 있습니다.</li><li><strong>외부 라이브러리와의 타입 호환성 문제</strong>: 타입 정의가 제대로 되어 있지 않은 외부 라이브러리를 사용할 때, 타입 시스템이 제대로 작동하지 않을 수 있습니다.</li></ol><h2 id="문제-상황과-해결-방법"><a href="#문제-상황과-해결-방법" class="headerlink" title="문제 상황과 해결 방법"></a>문제 상황과 해결 방법</h2><h3 id="문제-1-동적-데이터-처리의-어려움"><a href="#문제-1-동적-데이터-처리의-어려움" class="headerlink" title="문제 1: 동적 데이터 처리의 어려움"></a>문제 1: 동적 데이터 처리의 어려움</h3><h4 id="예제-코드"><a href="#예제-코드" class="headerlink" title="예제 코드"></a>예제 코드</h4><pre><code class="highlight typescript"><span class="keyword">function</span> <span class="title function_">processData</span>(<span class="params"><span class="attr">data</span>: <span class="built_in">any</span></span>) &#123;  <span class="keyword">if</span> (data.<span class="property">type</span> === <span class="string">&quot;text&quot;</span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>((data <span class="keyword">as</span> &#123; <span class="attr">type</span>: <span class="built_in">string</span>; <span class="attr">value</span>: <span class="built_in">string</span> &#125;).<span class="property">value</span>);  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (data.<span class="property">type</span> === <span class="string">&quot;number&quot;</span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>((data <span class="keyword">as</span> &#123; <span class="attr">type</span>: <span class="built_in">string</span>; <span class="attr">value</span>: <span class="built_in">number</span> &#125;).<span class="property">value</span>);  &#125;&#125;<span class="keyword">const</span> textData = &#123; <span class="attr">type</span>: <span class="string">&quot;text&quot;</span>, <span class="attr">value</span>: <span class="string">&quot;Hello, World!&quot;</span> &#125;;<span class="keyword">const</span> numberData = &#123; <span class="attr">type</span>: <span class="string">&quot;number&quot;</span>, <span class="attr">value</span>: <span class="number">42</span> &#125;;<span class="title function_">processData</span>(textData);<span class="title function_">processData</span>(numberData);</code></pre><h4 id="해결-방법-타입-가드-사용"><a href="#해결-방법-타입-가드-사용" class="headerlink" title="해결 방법: 타입 가드 사용"></a>해결 방법: 타입 가드 사용</h4><p>타입 가드를 사용하여 동적 데이터의 타입을 안전하게 처리할 수 있습니다.</p><pre><code class="highlight typescript"><span class="keyword">type</span> <span class="title class_">TextData</span> = &#123; <span class="attr">type</span>: <span class="string">&quot;text&quot;</span>; <span class="attr">value</span>: <span class="built_in">string</span> &#125;;<span class="keyword">type</span> <span class="title class_">NumberData</span> = &#123; <span class="attr">type</span>: <span class="string">&quot;number&quot;</span>; <span class="attr">value</span>: <span class="built_in">number</span> &#125;;<span class="keyword">type</span> <span class="title class_">Data</span> = <span class="title class_">TextData</span> | <span class="title class_">NumberData</span>;<span class="keyword">function</span> <span class="title function_">isTextData</span>(<span class="params"><span class="attr">data</span>: <span class="title class_">Data</span></span>): data is <span class="title class_">TextData</span> &#123;  <span class="keyword">return</span> data.<span class="property">type</span> === <span class="string">&quot;text&quot;</span>;&#125;<span class="keyword">function</span> <span class="title function_">isNumberData</span>(<span class="params"><span class="attr">data</span>: <span class="title class_">Data</span></span>): data is <span class="title class_">NumberData</span> &#123;  <span class="keyword">return</span> data.<span class="property">type</span> === <span class="string">&quot;number&quot;</span>;&#125;<span class="keyword">function</span> <span class="title function_">processData</span>(<span class="params"><span class="attr">data</span>: <span class="title class_">Data</span></span>) &#123;  <span class="keyword">if</span> (<span class="title function_">isTextData</span>(data)) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="property">value</span>);  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">isNumberData</span>(data)) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="property">value</span>);  &#125;&#125;<span class="title function_">processData</span>(&#123; <span class="attr">type</span>: <span class="string">&quot;text&quot;</span>, <span class="attr">value</span>: <span class="string">&quot;Hello, World!&quot;</span> &#125;);<span class="title function_">processData</span>(&#123; <span class="attr">type</span>: <span class="string">&quot;number&quot;</span>, <span class="attr">value</span>: <span class="number">42</span> &#125;);</code></pre><h3 id="문제-2-복잡한-타입-간의-호환성-문제"><a href="#문제-2-복잡한-타입-간의-호환성-문제" class="headerlink" title="문제 2: 복잡한 타입 간의 호환성 문제"></a>문제 2: 복잡한 타입 간의 호환성 문제</h3><h4 id="예제-코드-1"><a href="#예제-코드-1" class="headerlink" title="예제 코드"></a>예제 코드</h4><pre><code class="highlight typescript"><span class="keyword">type</span> <span class="title class_">User</span> = &#123;  <span class="attr">id</span>: <span class="built_in">number</span>;  <span class="attr">name</span>: <span class="built_in">string</span>;&#125;;<span class="keyword">type</span> <span class="title class_">Admin</span> = <span class="title class_">User</span> &amp; &#123;  <span class="attr">role</span>: <span class="string">&quot;admin&quot;</span>;&#125;;<span class="keyword">function</span> <span class="title function_">getUserInfo</span>(<span class="params"><span class="attr">user</span>: <span class="title class_">User</span> | <span class="title class_">Admin</span></span>) &#123;  <span class="keyword">if</span> ((user <span class="keyword">as</span> <span class="title class_">Admin</span>).<span class="property">role</span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Admin: <span class="subst">$&#123;user.name&#125;</span>`</span>);  &#125; <span class="keyword">else</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`User: <span class="subst">$&#123;user.name&#125;</span>`</span>);  &#125;&#125;<span class="keyword">const</span> <span class="attr">admin</span>: <span class="title class_">Admin</span> = &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span>, <span class="attr">role</span>: <span class="string">&quot;admin&quot;</span> &#125;;<span class="keyword">const</span> <span class="attr">user</span>: <span class="title class_">User</span> = &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&quot;Bob&quot;</span> &#125;;<span class="title function_">getUserInfo</span>(admin);<span class="title function_">getUserInfo</span>(user);</code></pre><h4 id="해결-방법-조건부-타입과-제네릭-사용"><a href="#해결-방법-조건부-타입과-제네릭-사용" class="headerlink" title="해결 방법: 조건부 타입과 제네릭 사용"></a>해결 방법: 조건부 타입과 제네릭 사용</h4><p>조건부 타입과 제네릭을 사용하여 타입 간의 호환성을 개선할 수 있습니다.</p><pre><code class="highlight typescript"><span class="keyword">type</span> <span class="title class_">User</span> = &#123;  <span class="attr">id</span>: <span class="built_in">number</span>;  <span class="attr">name</span>: <span class="built_in">string</span>;&#125;;<span class="keyword">type</span> <span class="title class_">Admin</span> = <span class="title class_">User</span> &amp; &#123;  <span class="attr">role</span>: <span class="string">&quot;admin&quot;</span>;&#125;;<span class="keyword">function</span> getUserInfo&lt;T <span class="keyword">extends</span> <span class="title class_">User</span>&gt;(<span class="attr">user</span>: T) &#123;  <span class="keyword">if</span> (<span class="string">&quot;role&quot;</span> <span class="keyword">in</span> user &amp;&amp; user.<span class="property">role</span> === <span class="string">&quot;admin&quot;</span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Admin: <span class="subst">$&#123;user.name&#125;</span>`</span>);  &#125; <span class="keyword">else</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`User: <span class="subst">$&#123;user.name&#125;</span>`</span>);  &#125;&#125;<span class="keyword">const</span> <span class="attr">admin</span>: <span class="title class_">Admin</span> = &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span>, <span class="attr">role</span>: <span class="string">&quot;admin&quot;</span> &#125;;<span class="keyword">const</span> <span class="attr">user</span>: <span class="title class_">User</span> = &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&quot;Bob&quot;</span> &#125;;<span class="title function_">getUserInfo</span>(admin);<span class="title function_">getUserInfo</span>(user);</code></pre><h3 id="문제-3-외부-라이브러리와의-타입-호환성-문제"><a href="#문제-3-외부-라이브러리와의-타입-호환성-문제" class="headerlink" title="문제 3: 외부 라이브러리와의 타입 호환성 문제"></a>문제 3: 외부 라이브러리와의 타입 호환성 문제</h3><h4 id="예제-코드-2"><a href="#예제-코드-2" class="headerlink" title="예제 코드"></a>예제 코드</h4><pre><code class="highlight typescript"><span class="keyword">import</span> * <span class="keyword">as</span> _ <span class="keyword">from</span> <span class="string">&quot;lodash&quot;</span>;<span class="keyword">const</span> result = _.<span class="title function_">flatten</span>([<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, [<span class="number">4</span>]], <span class="number">5</span>]]);<span class="variable language_">console</span>.<span class="title function_">log</span>(result);</code></pre><h4 id="해결-방법-타입-선언-보강"><a href="#해결-방법-타입-선언-보강" class="headerlink" title="해결 방법: 타입 선언 보강"></a>해결 방법: 타입 선언 보강</h4><p>타입 정의가 부족한 외부 라이브러리의 경우, 타입 선언을 보강하여 사용합니다.</p><pre><code class="highlight typescript"><span class="comment">// lodash.d.ts</span><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&quot;lodash&quot;</span> &#123;  <span class="keyword">export</span> <span class="keyword">function</span> flatten&lt;T&gt;(<span class="attr">array</span>: T[][]): T[];&#125;<span class="comment">// main.ts</span><span class="keyword">import</span> * <span class="keyword">as</span> _ <span class="keyword">from</span> <span class="string">&quot;lodash&quot;</span>;<span class="keyword">const</span> result = _.<span class="title function_">flatten</span>([<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, [<span class="number">4</span>]], <span class="number">5</span>]]);<span class="variable language_">console</span>.<span class="title function_">log</span>(result);</code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 TypeScript의 타입 시스템이 가진 한계와 이를 우회하는 방법에 대해 알아보았습니다. 타입 가드, 조건부 타입, 제네릭, 그리고 타입 선언 보강 등을 활용하여 타입 시스템의 한계를 극복할 수 있습니다. 이를 통해 더욱 안정적이고 타입 안전한 코드를 작성할 수 있습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> TS_트러블슈팅 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Javascript Map과 Set</title>
      <link href="/javascript/detail/12/"/>
      <url>/javascript/detail/12/</url>
      
        <content type="html"><![CDATA[<h1 id="Javascript-Map과-Set"><a href="#Javascript-Map과-Set" class="headerlink" title="Javascript Map과 Set"></a>Javascript Map과 Set</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 JavaScript에서 <code>Map</code>과 <code>Set</code>에 대해 알아보겠습니다.<br><code>Map</code>과 <code>Set</code>은 ES6에서 도입된 새로운 데이터 구조로, 키-값 쌍과 고유한 값의 집합을 저장할 수 있습니다.</p><h2 id="Map-사용법"><a href="#Map-사용법" class="headerlink" title="Map 사용법"></a><code>Map</code> 사용법</h2><p><code>Map</code>은 키-값 쌍을 저장하는 데 사용됩니다:</p><pre><code class="highlight javascript"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();map.<span class="title function_">set</span>(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;John Doe&quot;</span>);map.<span class="title function_">set</span>(<span class="string">&quot;age&quot;</span>, <span class="number">30</span>);<span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">get</span>(<span class="string">&quot;name&quot;</span>)); <span class="comment">// 출력: John Doe</span><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">has</span>(<span class="string">&quot;age&quot;</span>)); <span class="comment">// 출력: true</span><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="property">size</span>); <span class="comment">// 출력: 2</span>map.<span class="title function_">delete</span>(<span class="string">&quot;age&quot;</span>);<span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="property">size</span>); <span class="comment">// 출력: 1</span>map.<span class="title function_">clear</span>();<span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="property">size</span>); <span class="comment">// 출력: 0</span></code></pre><h2 id="Set-사용법"><a href="#Set-사용법" class="headerlink" title="Set 사용법"></a><code>Set</code> 사용법</h2><p><code>Set</code>은 고유한 값을 저장하는 데 사용됩니다:</p><pre><code class="highlight javascript"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>();set.<span class="title function_">add</span>(<span class="number">1</span>);set.<span class="title function_">add</span>(<span class="number">2</span>);set.<span class="title function_">add</span>(<span class="number">2</span>); <span class="comment">// 중복된 값은 무시됩니다.</span><span class="variable language_">console</span>.<span class="title function_">log</span>(set.<span class="title function_">has</span>(<span class="number">1</span>)); <span class="comment">// 출력: true</span><span class="variable language_">console</span>.<span class="title function_">log</span>(set.<span class="property">size</span>); <span class="comment">// 출력: 2</span>set.<span class="title function_">delete</span>(<span class="number">2</span>);<span class="variable language_">console</span>.<span class="title function_">log</span>(set.<span class="property">size</span>); <span class="comment">// 출력: 1</span>set.<span class="title function_">clear</span>();<span class="variable language_">console</span>.<span class="title function_">log</span>(set.<span class="property">size</span>); <span class="comment">// 출력: 0</span></code></pre><h2 id="Map과-Set의-반복"><a href="#Map과-Set의-반복" class="headerlink" title="Map과 Set의 반복"></a><code>Map</code>과 <code>Set</code>의 반복</h2><p><code>Map</code>과 <code>Set</code>은 <code>for...of</code> 루프를 사용하여 반복할 수 있습니다:</p><pre><code class="highlight javascript"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>([  [<span class="string">&quot;name&quot;</span>, <span class="string">&quot;John Doe&quot;</span>],  [<span class="string">&quot;age&quot;</span>, <span class="number">30</span>],]);<span class="keyword">for</span> (<span class="keyword">const</span> [key, value] <span class="keyword">of</span> map) &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;key&#125;</span>: <span class="subst">$&#123;value&#125;</span>`</span>);&#125;<span class="comment">// 출력:</span><span class="comment">// name: John Doe</span><span class="comment">// age: 30</span><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);<span class="keyword">for</span> (<span class="keyword">const</span> value <span class="keyword">of</span> set) &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(value);&#125;<span class="comment">// 출력: 1, 2, 3</span></code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 Javascript에서 <code>Map</code>과 <code>Set</code>을 사용하는 방법에 대해 알아보았습니다. <code>Map</code>과 <code>Set</code>은 키-값 쌍과 고유한 값의 집합을 저장할 수 있는 유용한 데이터 구조입니다. 다음 시간에는 <code>WeakMap</code>과 <code>WeakSet</code>에 대해 알아보겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> JS_디테일 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>데이터베이스 트리거(Trigger)</title>
      <link href="/database/18/"/>
      <url>/database/18/</url>
      
        <content type="html"><![CDATA[<h1 id="데이터베이스-트리거-Trigger"><a href="#데이터베이스-트리거-Trigger" class="headerlink" title="데이터베이스 트리거(Trigger)"></a>데이터베이스 트리거(Trigger)</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 데이터베이스에서 자주 사용되는 기능 중 하나인 **트리거(Trigger)**에 대해 알아보겠습니다.<br>트리거는 데이터베이스에서 특정 이벤트가 발생할 때 자동으로 실행되는 일종의 규칙입니다.<br>트리거를 사용하면 데이터 무결성을 유지하고, 자동화된 데이터 처리 로직을 구현할 수 있습니다.</p><h2 id="트리거-Trigger-란-무엇인가"><a href="#트리거-Trigger-란-무엇인가" class="headerlink" title="트리거(Trigger)란 무엇인가?"></a>트리거(Trigger)란 무엇인가?</h2><h3 id="트리거의-개념"><a href="#트리거의-개념" class="headerlink" title="트리거의 개념"></a>트리거의 개념</h3><p>**트리거(Trigger)**는 데이터베이스 테이블에 삽입, 수정, 삭제와 같은 특정 이벤트가 발생할 때 자동으로 실행되는 SQL 구문 또는 절차입니다.<br>트리거는 주로 데이터 무결성을 유지하거나, 이벤트에 따라 자동으로 특정 작업을 수행하기 위해 사용됩니다.</p><h3 id="트리거의-사용-목적"><a href="#트리거의-사용-목적" class="headerlink" title="트리거의 사용 목적"></a>트리거의 사용 목적</h3><ul><li><strong>데이터 무결성 유지</strong>: 트리거를 사용하여 특정 작업 전후에 데이터의 무결성을 확인하고 유지할 수 있습니다.</li><li><strong>자동화된 데이터 처리</strong>: 특정 이벤트가 발생할 때 자동으로 데이터를 처리하거나 다른 테이블에 데이터를 삽입하는 등의 작업을 수행할 수 있습니다.</li><li><strong>로그 기록</strong>: 데이터 변경 이력을 자동으로 기록하는 데 트리거를 활용할 수 있습니다.</li></ul><h2 id="트리거의-종류"><a href="#트리거의-종류" class="headerlink" title="트리거의 종류"></a>트리거의 종류</h2><p>트리거는 이벤트가 발생하는 시점에 따라 다음과 같은 두 가지 주요 유형으로 구분됩니다:</p><ul><li><strong>BEFORE 트리거</strong>: 데이터베이스에 변경 작업이 수행되기 전에 실행됩니다.</li><li><strong>AFTER 트리거</strong>: 데이터베이스에 변경 작업이 수행된 후에 실행됩니다.</li></ul><p>또한, 트리거는 다음과 같은 작업에 대해 정의될 수 있습니다:</p><ul><li><strong>INSERT 트리거</strong>: 테이블에 데이터가 삽입될 때 실행됩니다.</li><li><strong>UPDATE 트리거</strong>: 테이블의 데이터가 수정될 때 실행됩니다.</li><li><strong>DELETE 트리거</strong>: 테이블의 데이터가 삭제될 때 실행됩니다.</li></ul><h2 id="트리거-생성-및-관리"><a href="#트리거-생성-및-관리" class="headerlink" title="트리거 생성 및 관리"></a>트리거 생성 및 관리</h2><h3 id="트리거-생성"><a href="#트리거-생성" class="headerlink" title="트리거 생성"></a>트리거 생성</h3><p>트리거는 <code>CREATE TRIGGER</code> 명령어를 사용하여 생성할 수 있습니다. 아래는 RPG 게임에서 캐릭터의 레벨이 변경될 때, 이를 로그 테이블에 기록하는 트리거를 생성하는 예제입니다.</p><pre><code class="highlight sql"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> log_level_changeAFTER <span class="keyword">UPDATE</span> <span class="keyword">ON</span> <span class="type">Character</span><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span><span class="keyword">BEGIN</span>    IF NEW.level <span class="operator">&lt;&gt;</span> OLD.level <span class="keyword">THEN</span>        <span class="keyword">INSERT</span> <span class="keyword">INTO</span> LevelChangeLog(character_id, old_level, new_level, change_date)        <span class="keyword">VALUES</span> (NEW.id, OLD.level, NEW.level, NOW());    <span class="keyword">END</span> IF;<span class="keyword">END</span>;</code></pre><p>이 트리거는 <code>Character</code> 테이블에서 레벨이 변경될 때마다 실행되며, <code>LevelChangeLog</code> 테이블에 변경 전후의 레벨과 변경 시점을 기록합니다.</p><h3 id="트리거-사용-예제"><a href="#트리거-사용-예제" class="headerlink" title="트리거 사용 예제"></a>트리거 사용 예제</h3><ol><li><p><strong>캐릭터 레벨 변경 시 로그 기록</strong></p><p>RPG 게임에서 캐릭터가 레벨 업을 하면, 이를 로그 테이블에 기록해야 한다고 가정합니다. 위에서 생성한 트리거가 이러한 작업을 자동으로 처리해 줍니다.</p><pre><code class="highlight sql"><span class="keyword">UPDATE</span> <span class="type">Character</span> <span class="keyword">SET</span> level <span class="operator">=</span> <span class="number">5</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>;</code></pre><p>이 쿼리가 실행되면, <code>Character</code> 테이블에서 레벨이 5로 변경되고, 동시에 <code>LevelChangeLog</code> 테이블에 이 변경 사항이 기록됩니다.</p></li><li><p><strong>아이템 삭제 시 관련 데이터 정리</strong></p><p>특정 아이템이 삭제될 때, 해당 아이템을 소유한 캐릭터의 아이템 목록에서도 이를 자동으로 제거하는 트리거를 만들 수 있습니다.</p><pre><code class="highlight sql"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> cleanup_itemAFTER <span class="keyword">DELETE</span> <span class="keyword">ON</span> Item<span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span><span class="keyword">BEGIN</span>    <span class="keyword">DELETE</span> <span class="keyword">FROM</span> CharacterItems <span class="keyword">WHERE</span> item_id <span class="operator">=</span> OLD.id;<span class="keyword">END</span>;</code></pre><p>이 트리거는 <code>Item</code> 테이블에서 데이터가 삭제되면, 관련된 <code>CharacterItems</code> 테이블의 데이터를 정리합니다.</p></li></ol><h3 id="트리거-수정-및-삭제"><a href="#트리거-수정-및-삭제" class="headerlink" title="트리거 수정 및 삭제"></a>트리거 수정 및 삭제</h3><h4 id="트리거-수정"><a href="#트리거-수정" class="headerlink" title="트리거 수정"></a>트리거 수정</h4><p>트리거를 수정하려면 먼저 기존 트리거를 삭제하고, 새로 생성해야 합니다. 트리거는 <code>ALTER TRIGGER</code> 명령어로 수정할 수 없기 때문입니다.</p><h4 id="트리거-삭제"><a href="#트리거-삭제" class="headerlink" title="트리거 삭제"></a>트리거 삭제</h4><p>트리거가 더 이상 필요하지 않다면 <code>DROP TRIGGER</code> 명령어를 사용하여 삭제할 수 있습니다.</p><pre><code class="highlight sql"><span class="keyword">DROP</span> <span class="keyword">TRIGGER</span> IF <span class="keyword">EXISTS</span> log_level_change;</code></pre><p>이 명령어를 실행하면 <code>log_level_change</code> 트리거가 삭제됩니다.</p><h2 id="트리거-활용-시-주의사항"><a href="#트리거-활용-시-주의사항" class="headerlink" title="트리거 활용 시 주의사항"></a>트리거 활용 시 주의사항</h2><ul><li><strong>성능 문제</strong>: 트리거는 자동으로 실행되기 때문에, 복잡한 트리거는 데이터베이스 성능에 영향을 미칠 수 있습니다. 트리거는 필요한 경우에만 사용하고, 가능하면 간결하게 작성하는 것이 좋습니다.</li><li><strong>디버깅 어려움</strong>: 트리거는 자동으로 실행되므로, 디버깅이 어려울 수 있습니다. 트리거가 예상대로 작동하지 않는다면, 트리거의 논리와 순서를 주의 깊게 검토해야 합니다.</li><li><strong>순환 참조 방지</strong>: 트리거가 다른 트리거를 호출하여 무한 루프를 발생시키지 않도록 주의해야 합니다.</li></ul><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 데이터베이스 트리거의 개념과 활용 방법에 대해 알아보았습니다.<br>트리거는 데이터베이스에서 자동화된 데이터 처리와 무결성 유지를 위한 강력한 도구입니다.<br>하지만 성능과 복잡성을 고려하여 신중하게 사용해야 합니다. 트리거의 다양한 활용 방법을 실무에서도 유용하게 적용해보세요!<br>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> database </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>데이터베이스 VIEW(뷰)</title>
      <link href="/database/17/"/>
      <url>/database/17/</url>
      
        <content type="html"><![CDATA[<h1 id="데이터베이스-VIEW-뷰"><a href="#데이터베이스-VIEW-뷰" class="headerlink" title="데이터베이스 VIEW(뷰)"></a>데이터베이스 VIEW(뷰)</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 데이터베이스에서 매우 유용하게 사용되는 **VIEW(뷰)**에 대해 알아보겠습니다.<br>뷰는 복잡한 쿼리를 단순화하고, 데이터베이스 보안을 강화하며, 관리 효율성을 높이는 데 큰 역할을 합니다. 이번 글에서는 뷰의 개념부터 생성, 활용, 관리까지 다루어보겠습니다.</p><h2 id="VIEW란-무엇인가"><a href="#VIEW란-무엇인가" class="headerlink" title="VIEW란 무엇인가?"></a>VIEW란 무엇인가?</h2><h3 id="VIEW의-개념"><a href="#VIEW의-개념" class="headerlink" title="VIEW의 개념"></a>VIEW의 개념</h3><p>**뷰(View)**는 하나 이상의 테이블에서 가져온 데이터로 이루어진 가상의 테이블입니다. 뷰는 실제 데이터를 저장하지 않으며, 그 대신 데이터가 저장된 실제 테이블에 대한 쿼리를 수행하여 결과를 보여줍니다. 뷰를 사용하면 복잡한 SQL 쿼리를 단순화할 수 있으며, 특정 데이터를 캡슐화하여 보안을 강화할 수 있습니다.</p><h3 id="VIEW의-장점"><a href="#VIEW의-장점" class="headerlink" title="VIEW의 장점"></a>VIEW의 장점</h3><ul><li><strong>복잡한 쿼리 단순화</strong>: 자주 사용하는 복잡한 SQL 쿼리를 뷰로 만들어 두면, 이후 쿼리에서 단순히 뷰를 호출함으로써 간편하게 데이터를 조회할 수 있습니다.</li><li><strong>데이터 보안</strong>: 뷰를 사용하여 테이블의 특정 열이나 행만 노출할 수 있어, 민감한 데이터에 대한 접근을 제한할 수 있습니다.</li><li><strong>데이터 관리 효율성</strong>: 여러 테이블의 데이터를 결합하여 하나의 뷰로 제공할 수 있으므로, 일관된 데이터를 제공하고 관리할 수 있습니다.</li></ul><h2 id="VIEW-생성-및-관리"><a href="#VIEW-생성-및-관리" class="headerlink" title="VIEW 생성 및 관리"></a>VIEW 생성 및 관리</h2><h3 id="VIEW-생성"><a href="#VIEW-생성" class="headerlink" title="VIEW 생성"></a>VIEW 생성</h3><p>뷰는 <code>CREATE VIEW</code> 명령어를 사용하여 생성할 수 있습니다. 아래는 RPG 게임의 캐릭터와 아이템 정보를 결합한 뷰를 생성하는 예제입니다.</p><pre><code class="highlight sql"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> CharacterItems <span class="keyword">AS</span><span class="keyword">SELECT</span> c.name <span class="keyword">AS</span> character_name, c.level, i.name <span class="keyword">AS</span> item_name, i.power<span class="keyword">FROM</span> <span class="type">Character</span> c<span class="keyword">JOIN</span> Item i <span class="keyword">ON</span> c.id <span class="operator">=</span> i.character_id;</code></pre><p>위 예제에서는 <code>Character</code> 테이블과 <code>Item</code> 테이블을 조인하여, 캐릭터 이름, 레벨, 아이템 이름, 아이템 파워를 결합한 <code>CharacterItems</code> 뷰를 생성합니다.</p><h3 id="VIEW-사용"><a href="#VIEW-사용" class="headerlink" title="VIEW 사용"></a>VIEW 사용</h3><p>뷰가 생성된 후에는 마치 일반 테이블처럼 쿼리를 통해 데이터를 조회할 수 있습니다.</p><pre><code class="highlight sql"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> CharacterItems <span class="keyword">WHERE</span> level <span class="operator">&gt;</span> <span class="number">10</span>;</code></pre><p>이 쿼리는 <code>CharacterItems</code> 뷰에서 레벨이 10보다 큰 캐릭터의 이름과 아이템 정보를 조회합니다.</p><h3 id="VIEW-수정"><a href="#VIEW-수정" class="headerlink" title="VIEW 수정"></a>VIEW 수정</h3><p>기존 뷰를 수정하려면 <code>CREATE OR REPLACE VIEW</code> 명령어를 사용합니다. 예를 들어, 뷰에 추가 정보를 포함시키고자 할 때 사용할 수 있습니다.</p><pre><code class="highlight sql"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">VIEW</span> CharacterItems <span class="keyword">AS</span><span class="keyword">SELECT</span> c.name <span class="keyword">AS</span> character_name, c.level, i.name <span class="keyword">AS</span> item_name, i.power, c.class<span class="keyword">FROM</span> <span class="type">Character</span> c<span class="keyword">JOIN</span> Item i <span class="keyword">ON</span> c.id <span class="operator">=</span> i.character_id;</code></pre><p>이제 <code>CharacterItems</code> 뷰에는 캐릭터의 직업(<code>class</code>) 정보도 포함됩니다.</p><h3 id="VIEW-삭제"><a href="#VIEW-삭제" class="headerlink" title="VIEW 삭제"></a>VIEW 삭제</h3><p>필요 없는 뷰는 <code>DROP VIEW</code> 명령어를 사용하여 삭제할 수 있습니다.</p><pre><code class="highlight sql"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> CharacterItems;</code></pre><p>이 명령어를 실행하면 <code>CharacterItems</code> 뷰가 데이터베이스에서 삭제됩니다.</p><h2 id="VIEW의-활용-예제"><a href="#VIEW의-활용-예제" class="headerlink" title="VIEW의 활용 예제"></a>VIEW의 활용 예제</h2><h3 id="1-복잡한-쿼리-단순화"><a href="#1-복잡한-쿼리-단순화" class="headerlink" title="1. 복잡한 쿼리 단순화"></a>1. 복잡한 쿼리 단순화</h3><p>RPG 게임에서 여러 테이블을 조인하여 복잡한 쿼리를 자주 작성해야 하는 경우, 뷰를 사용하여 쿼리를 단순화할 수 있습니다.<br>예를 들어, 캐릭터의 이름과 레벨, 그들이 소유한 아이템 목록을 자주 조회한다고 가정해봅시다. 이를 위해 매번 다음과 같은 쿼리를 작성하는 대신:</p><pre><code class="highlight sql"><span class="keyword">SELECT</span> c.name, c.level, i.name<span class="keyword">FROM</span> <span class="type">Character</span> c<span class="keyword">JOIN</span> Item i <span class="keyword">ON</span> c.id <span class="operator">=</span> i.character_id<span class="keyword">WHERE</span> c.level <span class="operator">&gt;</span> <span class="number">10</span>;</code></pre><p>뷰를 사용하여 쿼리를 간단히 처리할 수 있습니다:</p><pre><code class="highlight sql"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> HighLevelCharacterItems <span class="keyword">AS</span><span class="keyword">SELECT</span> c.name, c.level, i.name<span class="keyword">FROM</span> <span class="type">Character</span> c<span class="keyword">JOIN</span> Item i <span class="keyword">ON</span> c.id <span class="operator">=</span> i.character_id<span class="keyword">WHERE</span> c.level <span class="operator">&gt;</span> <span class="number">10</span>;<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> HighLevelCharacterItems;</code></pre><h3 id="2-데이터-보안"><a href="#2-데이터-보안" class="headerlink" title="2. 데이터 보안"></a>2. 데이터 보안</h3><p>RPG 게임에서 관리자만 접근해야 하는 민감한 데이터가 있을 수 있습니다.<br>예를 들어, 캐릭터의 이메일 주소나 계정 정보는 일반 사용자에게 노출되지 않도록 해야 합니다. 이러한 경우, 뷰를 사용하여 민감한 데이터를 숨길 수 있습니다.</p><pre><code class="highlight sql"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> PublicCharacterInfo <span class="keyword">AS</span><span class="keyword">SELECT</span> name, level, class<span class="keyword">FROM</span> <span class="type">Character</span>;</code></pre><p><code>PublicCharacterInfo</code> 뷰는 캐릭터의 이름, 레벨, 직업만을 노출하고, 이메일 주소나 계정 정보는 숨깁니다.</p><h3 id="3-일관된-데이터-제공"><a href="#3-일관된-데이터-제공" class="headerlink" title="3. 일관된 데이터 제공"></a>3. 일관된 데이터 제공</h3><p>게임의 여러 테이블에서 데이터가 변경될 수 있지만, 뷰를 통해 일관된 데이터를 제공할 수 있습니다.<br>예를 들어, 캐릭터와 그들이 소유한 아이템에 대한 정보를 하나의 뷰로 제공하여 게임의 다른 부분에서 일관된 데이터에 접근할 수 있도록 합니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 데이터베이스의 뷰(View)에 대해 알아보았습니다.<br>뷰는 복잡한 쿼리를 단순화하고, 데이터 보안을 강화하며, 관리 효율성을 높이는 데 매우 유용한 도구입니다.<br>이를 활용하여 데이터베이스를 더욱 효율적으로 관리하고, 애플리케이션의 성능과 보안을 향상시킬 수 있습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> database </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Javascript 모듈 (Modules)</title>
      <link href="/javascript/detail/11/"/>
      <url>/javascript/detail/11/</url>
      
        <content type="html"><![CDATA[<h1 id="Javascript-모듈-Modules"><a href="#Javascript-모듈-Modules" class="headerlink" title="Javascript 모듈 (Modules)"></a>Javascript 모듈 (Modules)</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 JavaScript에서 모듈(Modules)에 대해 알아보겠습니다. 모듈은 코드 분할과 재사용을 용이하게 하는 ES6의 새로운 기능입니다.</p><h2 id="모듈-기본-사용법"><a href="#모듈-기본-사용법" class="headerlink" title="모듈 기본 사용법"></a>모듈 기본 사용법</h2><p>모듈은 <code>import</code>와 <code>export</code> 키워드를 사용하여 정의합니다:</p><pre><code class="highlight javascript"><span class="comment">// math.js</span><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;  <span class="keyword">return</span> a + b;&#125;<span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">subtract</span>(<span class="params">a, b</span>) &#123;  <span class="keyword">return</span> a - b;&#125;</code></pre><pre><code class="highlight javascript"><span class="comment">// main.js</span><span class="keyword">import</span> &#123; add, subtract &#125; <span class="keyword">from</span> <span class="string">&quot;./math.js&quot;</span>;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// 출력: 5</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">subtract</span>(<span class="number">5</span>, <span class="number">2</span>)); <span class="comment">// 출력: 3</span></code></pre><h2 id="기본-내보내기"><a href="#기본-내보내기" class="headerlink" title="기본 내보내기"></a>기본 내보내기</h2><p>모듈은 하나의 기본 내보내기(default export)를 가질 수 있습니다:</p><pre><code class="highlight javascript"><span class="comment">// person.js</span><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;  <span class="title function_">constructor</span>(<span class="params">name, age</span>) &#123;    <span class="variable language_">this</span>.<span class="property">name</span> = name;    <span class="variable language_">this</span>.<span class="property">age</span> = age;  &#125;  <span class="title function_">greet</span>(<span class="params"></span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello, my name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>);  &#125;&#125;</code></pre><pre><code class="highlight javascript"><span class="comment">// main.js</span><span class="keyword">import</span> <span class="title class_">Person</span> <span class="keyword">from</span> <span class="string">&quot;./person.js&quot;</span>;<span class="keyword">const</span> john = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;John Doe&quot;</span>, <span class="number">30</span>);john.<span class="title function_">greet</span>(); <span class="comment">// 출력: Hello, my name is John Doe</span></code></pre><h2 id="전체-모듈-가져오기"><a href="#전체-모듈-가져오기" class="headerlink" title="전체 모듈 가져오기"></a>전체 모듈 가져오기</h2><p>모듈 전체를 객체로 가져올 수도 있습니다:</p><pre><code class="highlight javascript"><span class="comment">// math.js</span><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;  <span class="keyword">return</span> a + b;&#125;<span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">subtract</span>(<span class="params">a, b</span>) &#123;  <span class="keyword">return</span> a - b;&#125;</code></pre><pre><code class="highlight javascript"><span class="comment">// main.js</span><span class="keyword">import</span> * <span class="keyword">as</span> <span class="title class_">MathUtils</span> <span class="keyword">from</span> <span class="string">&quot;./math.js&quot;</span>;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">MathUtils</span>.<span class="title function_">add</span>(<span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// 출력: 5</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">MathUtils</span>.<span class="title function_">subtract</span>(<span class="number">5</span>, <span class="number">2</span>)); <span class="comment">// 출력: 3</span></code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 Javascript에서 모듈을 사용하는 방법에 대해 알아보았습니다. 모듈은 코드 분할과 재사용을 용이하게 하여, 대규모 애플리케이션 개발에 유용합니다. 다음 시간에는 <code>Map</code>과 <code>Set</code>에 대해 알아보겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> JS_디테일 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>데이터베이스 정규화(Normalization)</title>
      <link href="/database/16/"/>
      <url>/database/16/</url>
      
        <content type="html"><![CDATA[<h1 id="데이터베이스-정규화-Normalization"><a href="#데이터베이스-정규화-Normalization" class="headerlink" title="데이터베이스 정규화(Normalization)"></a>데이터베이스 정규화(Normalization)</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 데이터베이스 설계에서 중요한 개념인 **정규화(Normalization)**에 대해 알아보겠습니다. 정규화는 데이터베이스를 효율적이고 일관성 있게 설계하기 위한 과정으로, 데이터를 구조화하여 중복을 최소화하고 데이터 무결성을 유지하는 데 큰 역할을 합니다.</p><h2 id="정규화란-무엇인가"><a href="#정규화란-무엇인가" class="headerlink" title="정규화란 무엇인가?"></a>정규화란 무엇인가?</h2><h3 id="정규화의-개념"><a href="#정규화의-개념" class="headerlink" title="정규화의 개념"></a>정규화의 개념</h3><p>**정규화(Normalization)**는 데이터베이스에서 데이터를 논리적으로 구조화하여 중복 데이터를 최소화하고, 데이터 일관성과 무결성을 유지하기 위한 프로세스입니다. 데이터베이스를 정규화하면 데이터의 중복을 줄이고, 데이터 변경 시 발생할 수 있는 이상 현상(Anomalies)을 방지할 수 있습니다.</p><h3 id="정규화의-필요성"><a href="#정규화의-필요성" class="headerlink" title="정규화의 필요성"></a>정규화의 필요성</h3><ul><li><strong>데이터 중복 제거</strong>: 동일한 데이터를 여러 테이블에 저장하지 않도록 하여 데이터 중복을 제거합니다.</li><li><strong>데이터 무결성 유지</strong>: 데이터가 일관되게 유지되도록 보장하여, 데이터의 정확성과 신뢰성을 높입니다.</li><li><strong>데이터베이스 확장성 향상</strong>: 데이터베이스가 커질수록 효율적으로 관리할 수 있도록 구조를 최적화합니다.</li></ul><h2 id="정규화-과정"><a href="#정규화-과정" class="headerlink" title="정규화 과정"></a>정규화 과정</h2><p>정규화는 일반적으로 여러 단계로 이루어지며, 각 단계는 **정규형(Normal Form)**으로 불립니다. 각 정규형은 데이터베이스가 특정 조건을 충족하도록 설계하는 규칙을 포함하고 있습니다. 아래에서는 1NF부터 3NF까지의 주요 정규형에 대해 알아보겠습니다.</p><h3 id="1NF-제1정규형-First-Normal-Form"><a href="#1NF-제1정규형-First-Normal-Form" class="headerlink" title="1NF: 제1정규형 (First Normal Form)"></a>1NF: 제1정규형 (First Normal Form)</h3><p>제1정규형(1NF)은 모든 열이 원자값(Atomic Value)을 가져야 함을 의미합니다. 즉, 각 열은 더 이상 나눌 수 없는 값으로 구성되어야 합니다.</p><h4 id="예제"><a href="#예제" class="headerlink" title="예제"></a>예제</h4><p>RPG 게임에서 캐릭터가 여러 아이템을 소지할 수 있다고 가정해봅시다.</p><p><strong>정규화 전</strong></p><table><thead><tr><th>캐릭터ID</th><th>이름</th><th>아이템</th></tr></thead><tbody><tr><td>1</td><td>전사</td><td>검, 방패, 갑옷</td></tr><tr><td>2</td><td>마법사</td><td>지팡이, 마법 책</td></tr></tbody></table><p>위 테이블은 1NF를 만족하지 않습니다. <code>아이템</code> 열에 여러 값이 포함되어 있기 때문입니다.</p><p><strong>정규화 후</strong></p><table><thead><tr><th>캐릭터ID</th><th>이름</th><th>아이템</th></tr></thead><tbody><tr><td>1</td><td>전사</td><td>검</td></tr><tr><td>1</td><td>전사</td><td>방패</td></tr><tr><td>1</td><td>전사</td><td>갑옷</td></tr><tr><td>2</td><td>마법사</td><td>지팡이</td></tr><tr><td>2</td><td>마법사</td><td>마법 책</td></tr></tbody></table><p>이제 <code>아이템</code> 열은 원자값으로 구성되어 있으므로 1NF를 만족합니다.</p><h3 id="2NF-제2정규형-Second-Normal-Form"><a href="#2NF-제2정규형-Second-Normal-Form" class="headerlink" title="2NF: 제2정규형 (Second Normal Form)"></a>2NF: 제2정규형 (Second Normal Form)</h3><p>제2정규형(2NF)은 제1정규형을 만족하면서, 기본 키가 아닌 모든 열이 기본 키에 완전 종속적이어야 한다는 것을 의미합니다. 여기서 “완전 종속”이란 기본 키의 모든 열을 사용해야 종속성을 만족하는 것을 말합니다.</p><h4 id="예제-1"><a href="#예제-1" class="headerlink" title="예제"></a>예제</h4><p><strong>정규화 전</strong></p><table><thead><tr><th>캐릭터ID</th><th>아이템</th><th>캐릭터 레벨</th></tr></thead><tbody><tr><td>1</td><td>검</td><td>10</td></tr><tr><td>1</td><td>방패</td><td>10</td></tr><tr><td>2</td><td>지팡이</td><td>20</td></tr></tbody></table><p>위 테이블에서는 <code>캐릭터 레벨</code>이 <code>캐릭터ID</code>에 종속적이지만, <code>아이템</code>에는 종속적이지 않으므로 2NF를 만족하지 않습니다.</p><p><strong>정규화 후</strong></p><ol><li><p>캐릭터 정보를 분리합니다:</p><table><thead><tr><th>캐릭터ID</th><th>이름</th><th>캐릭터 레벨</th></tr></thead><tbody><tr><td>1</td><td>전사</td><td>10</td></tr><tr><td>2</td><td>마법사</td><td>20</td></tr></tbody></table></li><li><p>아이템 정보를 별도의 테이블로 구성합니다:</p><table><thead><tr><th>캐릭터ID</th><th>아이템</th></tr></thead><tbody><tr><td>1</td><td>검</td></tr><tr><td>1</td><td>방패</td></tr><tr><td>2</td><td>지팡이</td></tr></tbody></table></li></ol><p>이제 각 열이 기본 키에 완전히 종속되므로 2NF를 만족합니다.</p><h3 id="3NF-제3정규형-Third-Normal-Form"><a href="#3NF-제3정규형-Third-Normal-Form" class="headerlink" title="3NF: 제3정규형 (Third Normal Form)"></a>3NF: 제3정규형 (Third Normal Form)</h3><p>제3정규형(3NF)은 제2정규형을 만족하면서, 기본 키가 아닌 모든 열이 기본 키 이외의 다른 열에 종속되지 않아야 한다는 것을 의미합니다. 즉, 기본 키가 아닌 열들 간에 종속 관계가 없어야 합니다.</p><h4 id="예제-2"><a href="#예제-2" class="headerlink" title="예제"></a>예제</h4><p><strong>정규화 전</strong></p><table><thead><tr><th>캐릭터ID</th><th>이름</th><th>도시</th></tr></thead><tbody><tr><td>1</td><td>전사</td><td>오크타운</td></tr><tr><td>2</td><td>마법사</td><td>위저드 시티</td></tr></tbody></table><p>위 테이블에서 <code>도시</code>는 <code>이름</code>에 종속적이므로 3NF를 만족하지 않습니다.</p><p><strong>정규화 후</strong></p><ol><li><p>캐릭터 정보를 분리합니다:</p><table><thead><tr><th>캐릭터ID</th><th>이름</th></tr></thead><tbody><tr><td>1</td><td>전사</td></tr><tr><td>2</td><td>마법사</td></tr></tbody></table></li><li><p>도시 정보를 별도의 테이블로 구성합니다:</p><table><thead><tr><th>이름</th><th>도시</th></tr></thead><tbody><tr><td>전사</td><td>오크타운</td></tr><tr><td>마법사</td><td>위저드 시티</td></tr></tbody></table></li></ol><p>이제 열 간의 종속성이 사라졌으므로 3NF를 만족합니다.</p><h2 id="정규화-요약"><a href="#정규화-요약" class="headerlink" title="정규화 요약"></a>정규화 요약</h2><p>아래 표는 각 정규형의 조건을 요약한 것입니다:</p><table><thead><tr><th>정규형</th><th>조건</th><th>설명</th></tr></thead><tbody><tr><td>1NF</td><td>모든 열이 원자값으로 구성됨</td><td>각 열은 더 이상 나눌 수 없는 값으로 구성됩니다.</td></tr><tr><td>2NF</td><td>1NF를 만족하고, 기본 키가 아닌 열이 기본 키에 완전 종속적임</td><td>기본 키의 모든 열을 사용해야 종속성을 만족합니다.</td></tr><tr><td>3NF</td><td>2NF를 만족하고, 기본 키가 아닌 열들 간에 종속성이 없음</td><td>기본 키 이외의 열들 간에 종속 관계가 없어야 합니다.</td></tr></tbody></table><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 데이터베이스 정규화의 개념과 1NF, 2NF, 3NF에 대해 알아보았습니다. 정규화를 통해 데이터베이스를 효율적으로 설계하고, 데이터의 중복과 이상 현상을 방지할 수 있습니다. 다음 시간에는 더 깊이 있는 데이터베이스 개념을 다루어보겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> database </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Javascript 클래스 (Classes)</title>
      <link href="/javascript/detail/10/"/>
      <url>/javascript/detail/10/</url>
      
        <content type="html"><![CDATA[<h1 id="Javascript-클래스-Classes"><a href="#Javascript-클래스-Classes" class="headerlink" title="Javascript 클래스 (Classes)"></a>Javascript 클래스 (Classes)</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 JavaScript에서 클래스(Classes)에 대해 알아보겠습니다. 클래스는 자바스크립트의 객체 지향 프로그래밍 문법으로, 객체를 생성하고 관리하는 데 사용됩니다.</p><h2 id="클래스-정의"><a href="#클래스-정의" class="headerlink" title="클래스 정의"></a>클래스 정의</h2><p>클래스는 <code>class</code> 키워드를 사용하여 정의합니다:</p><pre><code class="highlight javascript"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;  <span class="title function_">constructor</span>(<span class="params">name, age</span>) &#123;    <span class="variable language_">this</span>.<span class="property">name</span> = name;    <span class="variable language_">this</span>.<span class="property">age</span> = age;  &#125;  <span class="title function_">greet</span>(<span class="params"></span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(      <span class="string">`Hello, my name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> and I am <span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span> years old.`</span>    );  &#125;&#125;<span class="keyword">const</span> john = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;John Doe&quot;</span>, <span class="number">30</span>);john.<span class="title function_">greet</span>(); <span class="comment">// 출력: Hello, my name is John Doe and I am 30 years old.</span></code></pre><h2 id="상속"><a href="#상속" class="headerlink" title="상속"></a>상속</h2><p>클래스는 상속을 통해 다른 클래스를 확장할 수 있습니다:</p><pre><code class="highlight javascript"><span class="keyword">class</span> <span class="title class_">Employee</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;  <span class="title function_">constructor</span>(<span class="params">name, age, job</span>) &#123;    <span class="variable language_">super</span>(name, age);    <span class="variable language_">this</span>.<span class="property">job</span> = job;  &#125;  <span class="title function_">work</span>(<span class="params"></span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> is working as a <span class="subst">$&#123;<span class="variable language_">this</span>.job&#125;</span>.`</span>);  &#125;&#125;<span class="keyword">const</span> jane = <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;Jane Doe&quot;</span>, <span class="number">25</span>, <span class="string">&quot;developer&quot;</span>);jane.<span class="title function_">greet</span>(); <span class="comment">// 출력: Hello, my name is Jane Doe and I am 25 years old.</span>jane.<span class="title function_">work</span>(); <span class="comment">// 출력: Jane Doe is working as a developer.</span></code></pre><h2 id="정적-메서드"><a href="#정적-메서드" class="headerlink" title="정적 메서드"></a>정적 메서드</h2><p>정적 메서드는 클래스 자체에 속한 메서드로, 인스턴스 없이 호출할 수 있습니다:</p><pre><code class="highlight javascript"><span class="keyword">class</span> <span class="title class_">MathUtils</span> &#123;  <span class="keyword">static</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;    <span class="keyword">return</span> a + b;  &#125;&#125;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">MathUtils</span>.<span class="title function_">add</span>(<span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// 출력: 5</span></code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 Javascript에서 클래스를 사용하는 방법에 대해 알아보았습니다. 클래스는 자바스크립트의 객체 지향 프로그래밍 문법으로, 객체를 생성하고 관리하는 데 유용합니다. 다음 시간에는 모듈에 대해 알아보겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> JS_디테일 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>데이터베이스 무결성 제약조건(Integrity Constraints)</title>
      <link href="/database/15/"/>
      <url>/database/15/</url>
      
        <content type="html"><![CDATA[<h1 id="데이터베이스-무결성-제약조건-Integrity-Constraints"><a href="#데이터베이스-무결성-제약조건-Integrity-Constraints" class="headerlink" title="데이터베이스 무결성 제약조건(Integrity Constraints)"></a>데이터베이스 무결성 제약조건(Integrity Constraints)</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 데이터베이스 설계에서 중요한 개념인 **무결성 제약조건(Integrity Constraints)**에 대해 알아보겠습니다.<br>무결성 제약조건은 데이터베이스의 일관성과 신뢰성을 유지하기 위해 설정하는 규칙입니다. 이를 통해 데이터의 정확성과 유효성을 보장할 수 있습니다.</p><h2 id="무결성-제약조건이란"><a href="#무결성-제약조건이란" class="headerlink" title="무결성 제약조건이란?"></a>무결성 제약조건이란?</h2><h3 id="무결성-제약조건의-개념"><a href="#무결성-제약조건의-개념" class="headerlink" title="무결성 제약조건의 개념"></a>무결성 제약조건의 개념</h3><p>무결성 제약조건(Integrity Constraints)은 데이터베이스에 저장된 데이터의 정확성과 일관성을 유지하기 위해 설정된 규칙입니다.<br>이러한 제약조건을 통해 잘못된 데이터가 데이터베이스에 저장되지 않도록 방지할 수 있습니다.</p><p>무결성 제약조건은 데이터베이스 설계에서 필수적으로 고려해야 하며, 주로 테이블 생성 시 정의됩니다.<br>무결성 제약조건에는 다양한 종류가 있으며, 각 제약조건은 특정한 규칙을 강제하여 데이터의 무결성을 유지합니다.</p><h3 id="무결성-제약조건의-종류"><a href="#무결성-제약조건의-종류" class="headerlink" title="무결성 제약조건의 종류"></a>무결성 제약조건의 종류</h3><p>데이터베이스에서 일반적으로 사용되는 무결성 제약조건은 다음과 같습니다:</p><ul><li><strong>기본 키(Primary Key)</strong>: 테이블의 각 행을 고유하게 식별하는 열입니다.</li><li><strong>외래 키(Foreign Key)</strong>: 다른 테이블의 기본 키를 참조하는 열입니다.</li><li><strong>유일성(Unique)</strong>: 열의 모든 값이 고유해야 함을 보장합니다.</li><li><strong>NOT NULL</strong>: 열의 값이 반드시 존재해야 함을 보장합니다.</li><li><strong>CHECK</strong>: 열의 값이 특정 조건을 만족해야 함을 보장합니다.</li></ul><h2 id="무결성-제약조건의-활용-예제"><a href="#무결성-제약조건의-활용-예제" class="headerlink" title="무결성 제약조건의 활용 예제"></a>무결성 제약조건의 활용 예제</h2><p>RPG 게임을 예제로 무결성 제약조건을 적용한 테이블을 생성해보겠습니다. 이 예제에서는 캐릭터와 아이템을 저장하는 테이블에 제약조건을 적용하여, 데이터의 무결성을 유지할 수 있도록 합니다.</p><h3 id="1-기본-키-Primary-Key-제약조건"><a href="#1-기본-키-Primary-Key-제약조건" class="headerlink" title="1. 기본 키(Primary Key) 제약조건"></a>1. 기본 키(Primary Key) 제약조건</h3><p>기본 키는 각 테이블에서 각 행을 고유하게 식별할 수 있는 열입니다. 예를 들어, 캐릭터 테이블에서 <code>id</code> 열을 기본 키로 설정하면, <code>id</code>가 동일한 두 캐릭터가 존재할 수 없게 됩니다.</p><pre><code class="highlight sql"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="type">Character</span> (    id <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY,    name <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,    level <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>);</code></pre><h3 id="2-외래-키-Foreign-Key-제약조건"><a href="#2-외래-키-Foreign-Key-제약조건" class="headerlink" title="2. 외래 키(Foreign Key) 제약조건"></a>2. 외래 키(Foreign Key) 제약조건</h3><p>외래 키는 한 테이블의 열이 다른 테이블의 기본 키를 참조하도록 설정합니다. 예를 들어, <code>Inventory</code> 테이블에서 <code>character_id</code> 열이 <code>Character</code> 테이블의 <code>id</code> 열을 참조할 수 있습니다.</p><pre><code class="highlight sql"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Inventory (    id <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY,    character_id <span class="type">INT</span>,    item_name <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,    <span class="keyword">FOREIGN</span> KEY (character_id) <span class="keyword">REFERENCES</span> <span class="type">Character</span>(id));</code></pre><p>이렇게 설정하면 <code>Inventory</code> 테이블의 <code>character_id</code> 값이 반드시 <code>Character</code> 테이블의 <code>id</code> 값과 일치해야 합니다. 따라서 <code>Character</code> 테이블에 존재하지 않는 <code>character_id</code> 값이 <code>Inventory</code> 테이블에 삽입되는 것을 방지할 수 있습니다.</p><h3 id="3-유일성-Unique-제약조건"><a href="#3-유일성-Unique-제약조건" class="headerlink" title="3. 유일성(Unique) 제약조건"></a>3. 유일성(Unique) 제약조건</h3><p>유일성 제약조건은 테이블의 특정 열에 중복된 값이 들어가지 않도록 강제합니다. 예를 들어, 캐릭터의 이름은 고유해야 한다고 가정할 수 있습니다.</p><pre><code class="highlight sql"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="type">Character</span> (    id <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY,    name <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">UNIQUE</span>,    level <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>);</code></pre><p>이렇게 설정하면 동일한 이름을 가진 캐릭터를 두 번 삽입할 수 없게 됩니다.</p><h3 id="4-NOT-NULL-제약조건"><a href="#4-NOT-NULL-제약조건" class="headerlink" title="4. NOT NULL 제약조건"></a>4. NOT NULL 제약조건</h3><p>NOT NULL 제약조건은 열의 값이 반드시 존재해야 한다는 것을 보장합니다. 예를 들어, 캐릭터의 레벨은 항상 존재해야 한다고 가정할 수 있습니다.</p><pre><code class="highlight sql"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="type">Character</span> (    id <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY,    name <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,    level <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>);</code></pre><p>이렇게 설정하면 <code>level</code> 열에 NULL 값을 삽입할 수 없게 됩니다.</p><h3 id="5-CHECK-제약조건"><a href="#5-CHECK-제약조건" class="headerlink" title="5. CHECK 제약조건"></a>5. CHECK 제약조건</h3><p>CHECK 제약조건은 열의 값이 특정 조건을 만족해야 함을 보장합니다. 예를 들어, 캐릭터의 레벨은 1 이상이어야 한다고 설정할 수 있습니다.</p><pre><code class="highlight sql"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="type">Character</span> (    id <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY,    name <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,    level <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">CHECK</span> (level <span class="operator">&gt;=</span> <span class="number">1</span>));</code></pre><p>이렇게 설정하면 <code>level</code> 값이 1보다 작은 경우 삽입이 허용되지 않습니다.</p><h2 id="무결성-제약조건-요약"><a href="#무결성-제약조건-요약" class="headerlink" title="무결성 제약조건 요약"></a>무결성 제약조건 요약</h2><p>아래 표는 위에서 설명한 무결성 제약조건과 그 역할을 요약한 것입니다:</p><table><thead><tr><th>제약조건</th><th>설명</th><th>예시</th></tr></thead><tbody><tr><td>기본 키</td><td>각 행을 고유하게 식별할 수 있도록 보장합니다.</td><td><code>id INT AUTO_INCREMENT PRIMARY KEY</code></td></tr><tr><td>외래 키</td><td>한 테이블의 열이 다른 테이블의 기본 키를 참조하도록 보장합니다.</td><td><code>FOREIGN KEY (character_id) REFERENCES Character(id)</code></td></tr><tr><td>유일성</td><td>열의 모든 값이 고유하도록 보장합니다.</td><td><code>name VARCHAR(255) NOT NULL UNIQUE</code></td></tr><tr><td>NOT NULL</td><td>열의 값이 반드시 존재해야 함을 보장합니다.</td><td><code>level INT NOT NULL</code></td></tr><tr><td>CHECK</td><td>열의 값이 특정 조건을 만족해야 함을 보장합니다.</td><td><code>CHECK (level &gt;= 1)</code></td></tr></tbody></table><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 데이터베이스에서 데이터의 무결성을 보장하기 위해 사용되는 다양한 <strong>무결성 제약조건</strong>에 대해 알아보았습니다.<br>무결성 제약조건을 통해 데이터베이스의 일관성과 신뢰성을 유지할 수 있으며, 이를 적절히 설정하는 것이 데이터베이스 설계의 중요한 부분입니다.<br>다음 시간에는 더 깊이 있는 데이터베이스 개념을 다루어보겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> database </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>데드락(Deadlock) 이해와 해결 방안</title>
      <link href="/database/14/"/>
      <url>/database/14/</url>
      
        <content type="html"><![CDATA[<h1 id="데드락-Deadlock-이해와-해결-방안"><a href="#데드락-Deadlock-이해와-해결-방안" class="headerlink" title="데드락(Deadlock) 이해와 해결 방안"></a>데드락(Deadlock) 이해와 해결 방안</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 데이터베이스에서 자주 발생할 수 있는 문제 중 하나인 **데드락(Deadlock)**에 대해 알아보겠습니다.<br>데드락은 여러 트랜잭션이 서로 자원을 기다리며 영원히 대기하는 상황을 말합니다.<br>이로 인해 시스템 성능이 저하되거나 멈출 수 있으므로, 이를 이해하고 해결하는 방법이 중요합니다.</p><h2 id="데드락-Deadlock-이란"><a href="#데드락-Deadlock-이란" class="headerlink" title="데드락(Deadlock)이란?"></a>데드락(Deadlock)이란?</h2><h3 id="데드락의-개념"><a href="#데드락의-개념" class="headerlink" title="데드락의 개념"></a>데드락의 개념</h3><p>데드락은 두 개 이상의 트랜잭션이 서로가 점유한 자원을 기다리며 발생하는 교착 상태를 말합니다.<br>예를 들어, 트랜잭션 A가 자원 1을 점유하고 자원 2를 기다리는 상황에서, 트랜잭션 B가 자원 2를 점유하고 자원 1을 기다린다면, 두 트랜잭션은 서로가 점유한 자원을 기다리며 무한 대기에 빠지게 됩니다.</p><h3 id="데드락의-발생-조건"><a href="#데드락의-발생-조건" class="headerlink" title="데드락의 발생 조건"></a>데드락의 발생 조건</h3><p>데드락이 발생하기 위해서는 다음 네 가지 조건이 동시에 충족되어야 합니다:</p><ol><li><strong>상호 배제(Mutual Exclusion)</strong>: 자원은 하나의 트랜잭션만 점유할 수 있습니다.</li><li><strong>점유와 대기(Hold and Wait)</strong>: 트랜잭션은 이미 점유한 자원을 놓지 않고, 다른 자원을 기다립니다.</li><li><strong>비선점(Non-preemption)</strong>: 이미 할당된 자원은 트랜잭션이 자발적으로 해제할 때까지 강제로 빼앗을 수 없습니다.</li><li><strong>환형 대기(Circular Wait)</strong>: 트랜잭션 간에 서로가 점유한 자원을 기다리며 환형으로 대기합니다.</li></ol><h2 id="데드락-예제"><a href="#데드락-예제" class="headerlink" title="데드락 예제"></a>데드락 예제</h2><p>RPG 게임을 예제로 들어보겠습니다. 두 명의 캐릭터가 서로의 자원을 기다리며 데드락에 빠지는 상황을 시뮬레이션해보겠습니다.</p><h3 id="예제-시나리오"><a href="#예제-시나리오" class="headerlink" title="예제 시나리오"></a>예제 시나리오</h3><ol><li><strong>캐릭터 A</strong>는 자원 “검”을 점유하고 있으며, “방패”를 기다리고 있습니다.</li><li><strong>캐릭터 B</strong>는 자원 “방패”를 점유하고 있으며, “검”을 기다리고 있습니다.</li></ol><p>이 상황에서 두 캐릭터는 서로의 자원을 기다리며 데드락 상태에 빠집니다.</p><h3 id="MySQL에서-데드락-시뮬레이션"><a href="#MySQL에서-데드락-시뮬레이션" class="headerlink" title="MySQL에서 데드락 시뮬레이션"></a>MySQL에서 데드락 시뮬레이션</h3><pre><code class="highlight javascript"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">&quot;mysql2/promise&quot;</span>);<span class="keyword">const</span> pool = mysql.<span class="title function_">createPool</span>(&#123;  <span class="attr">host</span>: <span class="string">&quot;localhost&quot;</span>,  <span class="attr">user</span>: <span class="string">&quot;root&quot;</span>,  <span class="attr">password</span>: <span class="string">&quot;password&quot;</span>,  <span class="attr">database</span>: <span class="string">&quot;rpg_game&quot;</span>,  <span class="attr">waitForConnections</span>: <span class="literal">true</span>,  <span class="attr">connectionLimit</span>: <span class="number">10</span>,  <span class="attr">queueLimit</span>: <span class="number">0</span>,&#125;);<span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">simulateDeadlock</span>(<span class="params"></span>) &#123;  <span class="keyword">const</span> connection1 = <span class="keyword">await</span> pool.<span class="title function_">getConnection</span>();  <span class="keyword">const</span> connection2 = <span class="keyword">await</span> pool.<span class="title function_">getConnection</span>();  <span class="keyword">try</span> &#123;    <span class="comment">// 트랜잭션 A 시작</span>    <span class="keyword">await</span> connection1.<span class="title function_">beginTransaction</span>();    <span class="keyword">await</span> connection1.<span class="title function_">query</span>(      <span class="string">&#x27;SELECT * FROM inventory WHERE item = &quot;검&quot; FOR UPDATE&#x27;</span>    );    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;트랜잭션 A: 검 점유&quot;</span>);    <span class="comment">// 트랜잭션 B 시작</span>    <span class="keyword">await</span> connection2.<span class="title function_">beginTransaction</span>();    <span class="keyword">await</span> connection2.<span class="title function_">query</span>(      <span class="string">&#x27;SELECT * FROM inventory WHERE item = &quot;방패&quot; FOR UPDATE&#x27;</span>    );    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;트랜잭션 B: 방패 점유&quot;</span>);    <span class="comment">// 트랜잭션 A가 방패를 기다림</span>    <span class="keyword">await</span> connection1.<span class="title function_">query</span>(      <span class="string">&#x27;SELECT * FROM inventory WHERE item = &quot;방패&quot; FOR UPDATE&#x27;</span>    );    <span class="comment">// 트랜잭션 B가 검을 기다림</span>    <span class="keyword">await</span> connection2.<span class="title function_">query</span>(      <span class="string">&#x27;SELECT * FROM inventory WHERE item = &quot;검&quot; FOR UPDATE&#x27;</span>    );    <span class="comment">// 트랜잭션 커밋</span>    <span class="keyword">await</span> connection1.<span class="title function_">commit</span>();    <span class="keyword">await</span> connection2.<span class="title function_">commit</span>();  &#125; <span class="keyword">catch</span> (error) &#123;    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;데드락 발생:&quot;</span>, error.<span class="property">message</span>);    <span class="comment">// 트랜잭션 롤백</span>    <span class="keyword">await</span> connection1.<span class="title function_">rollback</span>();    <span class="keyword">await</span> connection2.<span class="title function_">rollback</span>();  &#125; <span class="keyword">finally</span> &#123;    connection1.<span class="title function_">release</span>();    connection2.<span class="title function_">release</span>();  &#125;&#125;<span class="title function_">simulateDeadlock</span>().<span class="title function_">catch</span>(<span class="variable language_">console</span>.<span class="property">error</span>);</code></pre><p>이 예제에서는 두 트랜잭션이 서로의 자원을 기다리며 데드락에 빠지게 됩니다.<br>다행히 MySQL은 데드락을 감지하면 그 중 하나의 트랜잭션을 강제로 종료하고, 다른 트랜잭션을 진행시킵니다.</p><h2 id="데드락-해결-방안"><a href="#데드락-해결-방안" class="headerlink" title="데드락 해결 방안"></a>데드락 해결 방안</h2><p>데드락을 해결하기 위한 방법에는 여러 가지가 있습니다. 이번 시간에는 주로 사용되는 해결 방법을 알아보겠습니다.</p><h3 id="1-타임아웃-Timeouts-설정"><a href="#1-타임아웃-Timeouts-설정" class="headerlink" title="1. 타임아웃(Timeouts) 설정"></a>1. 타임아웃(Timeouts) 설정</h3><p>데드락을 방지하기 위해 트랜잭션이 자원을 일정 시간 동안 기다리도록 타임아웃을 설정할 수 있습니다.<br>타임아웃이 발생하면 트랜잭션은 강제로 종료되며 롤백됩니다.</p><pre><code class="highlight sql"><span class="keyword">SET</span> innodb_lock_wait_timeout <span class="operator">=</span> <span class="number">5</span>;</code></pre><h3 id="2-자원-요청-순서-설정"><a href="#2-자원-요청-순서-설정" class="headerlink" title="2. 자원 요청 순서 설정"></a>2. 자원 요청 순서 설정</h3><p>트랜잭션이 자원을 요청할 때 항상 일정한 순서로 요청하도록 코딩하는 것도 데드락을 방지하는 방법 중 하나입니다.<br>자원 요청 순서가 일정하면 환형 대기가 발생하지 않으므로 데드락을 예방할 수 있습니다.</p><h3 id="3-데드락-회피-Deadlock-Avoidance"><a href="#3-데드락-회피-Deadlock-Avoidance" class="headerlink" title="3. 데드락 회피(Deadlock Avoidance)"></a>3. 데드락 회피(Deadlock Avoidance)</h3><p>트랜잭션이 자원을 점유하기 전에 다른 트랜잭션이 해당 자원을 기다리고 있는지 확인하는 방법입니다.<br>만약 다른 트랜잭션이 자원을 기다리고 있다면, 트랜잭션이 자원을 점유하기 전에 롤백하여 데드락을 예방할 수 있습니다.</p><h3 id="4-데드락-탐지-Deadlock-Detection"><a href="#4-데드락-탐지-Deadlock-Detection" class="headerlink" title="4. 데드락 탐지(Deadlock Detection)"></a>4. 데드락 탐지(Deadlock Detection)</h3><p>데드락을 실시간으로 탐지하고, 데드락이 발생했을 때 하나의 트랜잭션을 강제로 종료하는 방법입니다.<br>MySQL과 같은 데이터베이스는 자동으로 데드락을 탐지하고 해결할 수 있습니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 데이터베이스에서 발생할 수 있는 데드락에 대해 알아보았습니다.<br>데드락은 여러 트랜잭션이 서로 자원을 기다리며 발생하는 문제로, 이를 예방하거나 해결하는 다양한 방법을 이해하고 적용하는 것이 중요합니다.<br>이러한 개념을 잘 이해하고 실제 애플리케이션에 적용하면, 데이터베이스 성능을 향상시키고 시스템의 안정성을 높일 수 있습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> database </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>트랜잭션 격리 수준 (Isolation Level)</title>
      <link href="/database/13/"/>
      <url>/database/13/</url>
      
        <content type="html"><![CDATA[<h1 id="트랜잭션-격리-수준-Isolation-Level"><a href="#트랜잭션-격리-수준-Isolation-Level" class="headerlink" title="트랜잭션 격리 수준 (Isolation Level)"></a>트랜잭션 격리 수준 (Isolation Level)</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 데이터베이스에서 트랜잭션의 격리 수준(Isolation Level)에 대해 알아보겠습니다.<br>트랜잭션 격리 수준은 데이터베이스의 일관성과 성능을 유지하는 데 중요한 역할을 합니다.<br>특히, 여러 트랜잭션이 동시에 실행될 때 발생할 수 있는 문제를 방지하는 데 중요한 개념입니다.</p><h2 id="트랜잭션-격리-수준이란"><a href="#트랜잭션-격리-수준이란" class="headerlink" title="트랜잭션 격리 수준이란?"></a>트랜잭션 격리 수준이란?</h2><p>트랜잭션 격리 수준(Isolation Level)은 여러 트랜잭션이 동시에 실행될 때 서로 간섭하지 않도록 격리하는 정도를 의미합니다.<br>격리 수준에 따라 트랜잭션이 데이터에 접근하는 방식이 달라지며, 각 격리 수준은 데이터의 일관성과 성능에 영향을 미칩니다.</p><h3 id="트랜잭션-격리-수준과-문제점"><a href="#트랜잭션-격리-수준과-문제점" class="headerlink" title="트랜잭션 격리 수준과 문제점"></a>트랜잭션 격리 수준과 문제점</h3><p>격리 수준에 따라 발생할 수 있는 데이터 일관성 문제는 다음과 같습니다:</p><ul><li><strong>더티 리드(Dirty Read)</strong>: 다른 트랜잭션에서 아직 커밋되지 않은 데이터를 읽는 문제.</li><li><strong>반복 불가능한 읽기(Non-repeatable Read)</strong>: 동일한 데이터를 읽는 도중 다른 트랜잭션이 그 데이터를 변경하여 결과가 달라지는 문제.</li><li><strong>팬텀 리드(Phantom Read)</strong>: 트랜잭션 도중 다른 트랜잭션이 데이터를 삽입하거나 삭제하여 결과 세트가 달라지는 문제.</li></ul><h2 id="트랜잭션-격리-수준의-종류"><a href="#트랜잭션-격리-수준의-종류" class="headerlink" title="트랜잭션 격리 수준의 종류"></a>트랜잭션 격리 수준의 종류</h2><p>트랜잭션 격리 수준은 다음과 같이 네 가지로 구분됩니다. 각 수준에 따른 문제 발생 가능성을 표로 정리하면 다음과 같습니다:</p><table><thead><tr><th>격리 수준</th><th>더티 리드(Dirty Read)</th><th>반복 불가능한 읽기(Non-repeatable Read)</th><th>팬텀 리드(Phantom Read)</th></tr></thead><tbody><tr><td><strong>READ UNCOMMITTED</strong></td><td>발생 가능</td><td>발생 가능</td><td>발생 가능</td></tr><tr><td><strong>READ COMMITTED</strong></td><td>발생하지 않음</td><td>발생 가능</td><td>발생 가능</td></tr><tr><td><strong>REPEATABLE READ</strong></td><td>발생하지 않음</td><td>발생하지 않음</td><td>발생 가능</td></tr><tr><td><strong>SERIALIZABLE</strong></td><td>발생하지 않음</td><td>발생하지 않음</td><td>발생하지 않음</td></tr></tbody></table><h3 id="1-READ-UNCOMMITTED-읽기-미완료"><a href="#1-READ-UNCOMMITTED-읽기-미완료" class="headerlink" title="1. READ UNCOMMITTED (읽기 미완료)"></a>1. READ UNCOMMITTED (읽기 미완료)</h3><ul><li><strong>특징</strong>: 가장 낮은 격리 수준으로, 다른 트랜잭션에서 아직 커밋되지 않은 데이터를 읽을 수 있습니다.</li><li><strong>장점</strong>: 성능이 높지만 데이터의 일관성이 보장되지 않습니다.</li><li><strong>단점</strong>: 더티 리드, 반복 불가능한 읽기, 팬텀 리드 문제가 발생할 수 있습니다.</li></ul><h3 id="2-READ-COMMITTED-읽기-커밋됨"><a href="#2-READ-COMMITTED-읽기-커밋됨" class="headerlink" title="2. READ COMMITTED (읽기 커밋됨)"></a>2. READ COMMITTED (읽기 커밋됨)</h3><ul><li><strong>특징</strong>: 다른 트랜잭션에서 커밋된 데이터만 읽을 수 있습니다.</li><li><strong>장점</strong>: 더티 리드 문제는 발생하지 않습니다.</li><li><strong>단점</strong>: 반복 불가능한 읽기와 팬텀 리드 문제가 발생할 수 있습니다.</li></ul><h3 id="3-REPEATABLE-READ-반복-가능한-읽기"><a href="#3-REPEATABLE-READ-반복-가능한-읽기" class="headerlink" title="3. REPEATABLE READ (반복 가능한 읽기)"></a>3. REPEATABLE READ (반복 가능한 읽기)</h3><ul><li><strong>특징</strong>: 트랜잭션이 시작된 후에 읽은 데이터는 변경되지 않습니다.</li><li><strong>장점</strong>: 더티 리드와 반복 불가능한 읽기 문제가 발생하지 않습니다.</li><li><strong>단점</strong>: 팬텀 리드 문제는 여전히 발생할 수 있습니다.</li></ul><h3 id="4-SERIALIZABLE-직렬화-가능"><a href="#4-SERIALIZABLE-직렬화-가능" class="headerlink" title="4. SERIALIZABLE (직렬화 가능)"></a>4. SERIALIZABLE (직렬화 가능)</h3><ul><li><strong>특징</strong>: 가장 높은 격리 수준으로, 트랜잭션이 순차적으로 실행되어 데이터의 완전한 일관성을 보장합니다.</li><li><strong>장점</strong>: 모든 데이터 일관성 문제가 해결됩니다.</li><li><strong>단점</strong>: 성능이 가장 낮으며, 동시성 문제가 발생할 수 있습니다.</li></ul><h2 id="격리-수준-실습"><a href="#격리-수준-실습" class="headerlink" title="격리 수준 실습"></a>격리 수준 실습</h2><p>이번에는 MySQL2 모듈을 사용하여 트랜잭션 격리 수준을 설정하고 테스트해보겠습니다.</p><h3 id="트랜잭션-격리-수준-설정"><a href="#트랜잭션-격리-수준-설정" class="headerlink" title="트랜잭션 격리 수준 설정"></a>트랜잭션 격리 수준 설정</h3><p>MySQL2에서 트랜잭션의 격리 수준을 설정하려면 <code>SET TRANSACTION ISOLATION LEVEL</code> 명령어를 사용합니다.</p><p><strong>src&#x2F;transaction-isolation.js</strong></p><pre><code class="highlight javascript"><span class="keyword">const</span> pool = <span class="built_in">require</span>(<span class="string">&quot;./db&quot;</span>);<span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">testIsolationLevel</span>(<span class="params"></span>) &#123;  <span class="keyword">const</span> connection = <span class="keyword">await</span> pool.<span class="title function_">getConnection</span>();  <span class="keyword">try</span> &#123;    <span class="comment">// 트랜잭션 시작</span>    <span class="keyword">await</span> connection.<span class="title function_">beginTransaction</span>();    <span class="comment">// 격리 수준 설정</span>    <span class="keyword">await</span> connection.<span class="title function_">query</span>(<span class="string">&quot;SET TRANSACTION ISOLATION LEVEL REPEATABLE READ&quot;</span>);    <span class="comment">// 첫 번째 읽기</span>    <span class="keyword">const</span> [rows] = <span class="keyword">await</span> connection.<span class="title function_">query</span>(      <span class="string">&quot;SELECT * FROM character WHERE id = 1&quot;</span>    );    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;첫 번째 읽기:&quot;</span>, rows);    <span class="comment">// 다른 트랜잭션에서 데이터를 변경하는 로직을 시뮬레이션할 수 있습니다.</span>    <span class="comment">// 두 번째 읽기</span>    <span class="keyword">const</span> [rows2] = <span class="keyword">await</span> connection.<span class="title function_">query</span>(      <span class="string">&quot;SELECT * FROM character WHERE id = 1&quot;</span>    );    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;두 번째 읽기:&quot;</span>, rows2);    <span class="comment">// 트랜잭션 커밋</span>    <span class="keyword">await</span> connection.<span class="title function_">commit</span>();  &#125; <span class="keyword">catch</span> (error) &#123;    <span class="comment">// 트랜잭션 롤백</span>    <span class="keyword">await</span> connection.<span class="title function_">rollback</span>();    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;트랜잭션 오류 발생:&quot;</span>, error.<span class="property">message</span>);  &#125; <span class="keyword">finally</span> &#123;    connection.<span class="title function_">release</span>();  &#125;&#125;<span class="title function_">testIsolationLevel</span>().<span class="title function_">catch</span>(<span class="variable language_">console</span>.<span class="property">error</span>);</code></pre><p>이 예제에서는 <code>REPEATABLE READ</code> 격리 수준을 설정하여 트랜잭션 내에서 동일한 데이터를 읽을 때 동일한 결과가 반환되도록 보장합니다.</p><h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><p>이번 시간에는 트랜잭션 격리 수준에 대해 알아보고, 각각의 격리 수준이 데이터 일관성에 미치는 영향을 살펴보았습니다. 각 격리 수준은 성능과 일관성 간의 트레이드오프를 가지고 있으므로, 애플리케이션의 요구사항에 맞는 격리 수준을 선택하는 것이 중요합니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> database </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript 코드 품질 - ESLint, Prettier</title>
      <link href="/typescript/special/19/"/>
      <url>/typescript/special/19/</url>
      
        <content type="html"><![CDATA[<h1 id="TypeScript-코드-품질"><a href="#TypeScript-코드-품질" class="headerlink" title="TypeScript 코드 품질"></a>TypeScript 코드 품질</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 TypeScript에서 코드 품질을 높이기 위해 사용할 수 있는 도구와 방법들에 대해 알아보겠습니다. 특히 Linting 도구와 타입 검사 도구를 활용하여 코드의 일관성을 유지하고, 잠재적인 오류를 사전에 방지하는 방법을 중점적으로 다뤄보겠습니다.</p><h2 id="코드-품질이-중요한-이유"><a href="#코드-품질이-중요한-이유" class="headerlink" title="코드 품질이 중요한 이유"></a>코드 품질이 중요한 이유</h2><p>코드 품질은 코드의 유지보수성, 가독성, 안정성을 보장하는 중요한 요소입니다. 특히 대규모 프로젝트나 협업 환경에서는 코드 품질 관리가 필수적입니다. TypeScript는 정적 타입 검사 덕분에 기본적으로 코드 품질을 높이는 데 도움이 되지만, 추가적인 도구를 사용하여 더 철저한 관리를 할 수 있습니다.</p><h2 id="1-ESLint-설정-및-사용법"><a href="#1-ESLint-설정-및-사용법" class="headerlink" title="1. ESLint 설정 및 사용법"></a>1. ESLint 설정 및 사용법</h2><h3 id="ESLint란"><a href="#ESLint란" class="headerlink" title="ESLint란?"></a>ESLint란?</h3><p>ESLint는 JavaScript(및 TypeScript) 코드에서 잠재적인 문제를 발견하고, 코드 스타일을 일관되게 유지할 수 있도록 도와주는 정적 코드 분석 도구입니다. ESLint는 규칙 기반의 분석을 수행하며, 사용자가 원하는 규칙을 구성하여 코드 품질을 높일 수 있습니다.</p><h3 id="ESLint-설치"><a href="#ESLint-설치" class="headerlink" title="ESLint 설치"></a>ESLint 설치</h3><p>ESLint를 설치하기 위해 npm을 사용합니다:</p><pre><code class="highlight bash">npm install eslint --save-dev</code></pre><p>프로젝트에 ESLint를 설정하기 위해 <code>npx eslint --init</code> 명령어를 실행하여 설정 마법사를 사용할 수도 있습니다.</p><h3 id="ESLint-설정-파일"><a href="#ESLint-설정-파일" class="headerlink" title="ESLint 설정 파일"></a>ESLint 설정 파일</h3><p>ESLint는 다양한 포맷의 설정 파일을 지원합니다. 그 중 가장 일반적인 <code>.eslintrc.json</code> 파일의 예시는 다음과 같습니다:</p><pre><code class="highlight json"><span class="punctuation">&#123;</span>  <span class="attr">&quot;parser&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@typescript-eslint/parser&quot;</span><span class="punctuation">,</span>  <span class="attr">&quot;extends&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span>    <span class="string">&quot;eslint:recommended&quot;</span><span class="punctuation">,</span>    <span class="string">&quot;plugin:@typescript-eslint/recommended&quot;</span><span class="punctuation">,</span>    <span class="string">&quot;plugin:prettier/recommended&quot;</span>  <span class="punctuation">]</span><span class="punctuation">,</span>  <span class="attr">&quot;plugins&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;@typescript-eslint&quot;</span><span class="punctuation">,</span> <span class="string">&quot;prettier&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span>  <span class="attr">&quot;rules&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>    <span class="attr">&quot;@typescript-eslint/explicit-function-return-type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;warn&quot;</span><span class="punctuation">,</span>    <span class="attr">&quot;@typescript-eslint/no-unused-vars&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span>      <span class="string">&quot;error&quot;</span><span class="punctuation">,</span>      <span class="punctuation">&#123;</span> <span class="attr">&quot;argsIgnorePattern&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^_&quot;</span> <span class="punctuation">&#125;</span>    <span class="punctuation">]</span><span class="punctuation">,</span>    <span class="attr">&quot;prettier/prettier&quot;</span><span class="punctuation">:</span> <span class="string">&quot;error&quot;</span><span class="punctuation">,</span>    <span class="attr">&quot;no-console&quot;</span><span class="punctuation">:</span> <span class="string">&quot;warn&quot;</span><span class="punctuation">,</span>    <span class="attr">&quot;semi&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;error&quot;</span><span class="punctuation">,</span> <span class="string">&quot;always&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span>    <span class="attr">&quot;quotes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;error&quot;</span><span class="punctuation">,</span> <span class="string">&quot;single&quot;</span><span class="punctuation">]</span>  <span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></code></pre><h3 id="주요-ESLint-규칙"><a href="#주요-ESLint-규칙" class="headerlink" title="주요 ESLint 규칙"></a>주요 ESLint 규칙</h3><ul><li><strong><code>parser</code></strong>: TypeScript 코드를 분석하기 위해 <code>@typescript-eslint/parser</code>를 사용합니다.</li><li><strong><code>extends</code></strong>: 기본 규칙 세트를 확장하는 옵션입니다. 여기서는 ESLint의 기본 권장 규칙과 TypeScript 및 Prettier 규칙을 포함하고 있습니다.</li><li><strong><code>plugins</code></strong>: ESLint를 확장하기 위한 플러그인을 지정합니다. 예를 들어, <code>@typescript-eslint</code>와 <code>prettier</code> 플러그인을 사용합니다.</li><li><strong><code>rules</code></strong>: 프로젝트에 맞게 규칙을 정의할 수 있습니다. 각 규칙은 <code>&quot;off&quot;</code>, <code>&quot;warn&quot;</code>, <code>&quot;error&quot;</code>의 값으로 설정됩니다.</li></ul><h4 id="구체적인-규칙-예시"><a href="#구체적인-규칙-예시" class="headerlink" title="구체적인 규칙 예시"></a>구체적인 규칙 예시</h4><ul><li><strong><code>@typescript-eslint/explicit-function-return-type</code></strong>: 함수의 반환 타입을 명시적으로 선언하지 않으면 경고를 발생시킵니다.</li><li><strong><code>@typescript-eslint/no-unused-vars</code></strong>: 사용하지 않는 변수를 에러로 처리합니다. 특정 패턴(예: <code>_</code>로 시작하는 변수명)을 무시하도록 설정할 수 있습니다.</li><li><strong><code>no-console</code></strong>: 콘솔 로그 사용 시 경고를 발생시킵니다. 이는 디버깅 코드가 프로덕션 코드에 포함되지 않도록 방지하는 데 유용합니다.</li><li><strong><code>semi</code></strong>: 모든 문장 끝에 세미콜론을 강제합니다.</li><li><strong><code>quotes</code></strong>: 인용부호 스타일을 설정하며, 여기서는 싱글 쿼트를 사용하도록 지정합니다.</li></ul><h3 id="ESLint-실행"><a href="#ESLint-실행" class="headerlink" title="ESLint 실행"></a>ESLint 실행</h3><p>ESLint를 명령어 라인에서 실행하여 프로젝트 전체 또는 특정 파일을 검사할 수 있습니다:</p><pre><code class="highlight bash">npx eslint .</code></pre><p>특정 파일 또는 디렉토리를 검사하려면:</p><pre><code class="highlight bash">npx eslint src/**/*.ts</code></pre><p>자동 수정 기능을 활용하여, 규칙에 위반되는 코드를 자동으로 수정할 수도 있습니다:</p><pre><code class="highlight bash">npx eslint . --fix</code></pre><h2 id="2-Prettier-설정-및-사용법"><a href="#2-Prettier-설정-및-사용법" class="headerlink" title="2. Prettier 설정 및 사용법"></a>2. Prettier 설정 및 사용법</h2><h3 id="Prettier란"><a href="#Prettier란" class="headerlink" title="Prettier란?"></a>Prettier란?</h3><p>Prettier는 코드의 포맷팅을 일관되게 유지해주는 코드 포매터입니다. Prettier는 스타일 가이드와 상관없이 코드를 자동으로 포맷팅하여, 팀 내에서 코드 스타일에 대한 논쟁을 줄이고, 코드의 가독성을 높입니다.</p><h3 id="Prettier-설치"><a href="#Prettier-설치" class="headerlink" title="Prettier 설치"></a>Prettier 설치</h3><p>Prettier를 설치하려면 npm을 사용합니다:</p><pre><code class="highlight bash">npm install prettier --save-dev</code></pre><h3 id="Prettier-설정-파일"><a href="#Prettier-설정-파일" class="headerlink" title="Prettier 설정 파일"></a>Prettier 설정 파일</h3><p>Prettier는 설정 파일을 사용하여 포맷팅 규칙을 정의할 수 있습니다. <code>.prettierrc</code> 파일의 예시는 다음과 같습니다:</p><pre><code class="highlight json"><span class="punctuation">&#123;</span>  <span class="attr">&quot;singleQuote&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span>  <span class="attr">&quot;semi&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span>  <span class="attr">&quot;tabWidth&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span>  <span class="attr">&quot;trailingComma&quot;</span><span class="punctuation">:</span> <span class="string">&quot;es5&quot;</span><span class="punctuation">,</span>  <span class="attr">&quot;printWidth&quot;</span><span class="punctuation">:</span> <span class="number">80</span><span class="punctuation">&#125;</span></code></pre><h3 id="주요-Prettier-설정"><a href="#주요-Prettier-설정" class="headerlink" title="주요 Prettier 설정"></a>주요 Prettier 설정</h3><ul><li><strong><code>singleQuote</code></strong>: 모든 문자열에 싱글 쿼트를 사용하도록 설정합니다. (<code>true</code>이면 싱글 쿼트, <code>false</code>이면 더블 쿼트)</li><li><strong><code>semi</code></strong>: 문장의 끝에 세미콜론을 추가합니다.</li><li><strong><code>tabWidth</code></strong>: 탭을 스페이스로 변환할 때 사용할 스페이스 개수를 설정합니다.</li><li><strong><code>trailingComma</code></strong>: ES5 객체나 배열, 함수 매개변수의 마지막 요소 뒤에 콤마를 추가할지 설정합니다. (<code>none</code>, <code>es5</code>, <code>all</code> 중 선택 가능)</li><li><strong><code>printWidth</code></strong>: 한 줄의 최대 길이를 설정하여 이 길이를 초과하는 경우 자동으로 줄바꿈을 수행합니다.</li></ul><h3 id="Prettier-실행"><a href="#Prettier-실행" class="headerlink" title="Prettier 실행"></a>Prettier 실행</h3><p>Prettier는 명령어를 통해 프로젝트 파일을 포맷할 수 있습니다:</p><pre><code class="highlight bash">npx prettier --write .</code></pre><p>특정 파일을 포맷하려면:</p><pre><code class="highlight bash">npx prettier --write src/**/*.ts</code></pre><p>Prettier는 <code>--check</code> 옵션을 사용하여 파일이 설정된 포맷 규칙을 따르는지 검사할 수도 있습니다:</p><pre><code class="highlight bash">npx prettier --check .</code></pre><h2 id="3-ESLint와-Prettier-함께-사용하기"><a href="#3-ESLint와-Prettier-함께-사용하기" class="headerlink" title="3. ESLint와 Prettier 함께 사용하기"></a>3. ESLint와 Prettier 함께 사용하기</h2><p>ESLint와 Prettier를 함께 사용할 때, Prettier가 포맷팅 규칙을 처리하고 ESLint는 코드 품질 관련 규칙을 처리하도록 설정할 수 있습니다. 이를 통해 두 도구가 충돌하지 않고, 함께 동작하도록 할 수 있습니다.</p><h3 id="Prettier와-ESLint-함께-사용하기-설정"><a href="#Prettier와-ESLint-함께-사용하기-설정" class="headerlink" title="Prettier와 ESLint 함께 사용하기 설정"></a>Prettier와 ESLint 함께 사용하기 설정</h3><pre><code class="highlight bash">npm install eslint-config-prettier eslint-plugin-prettier --save-dev</code></pre><p><code>.eslintrc.json</code> 파일에서 Prettier와 ESLint의 설정을 다음과 같이 통합할 수 있습니다:</p><pre><code class="highlight json"><span class="punctuation">&#123;</span>  <span class="attr">&quot;extends&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span>    <span class="string">&quot;eslint:recommended&quot;</span><span class="punctuation">,</span>    <span class="string">&quot;plugin:@typescript-eslint/recommended&quot;</span><span class="punctuation">,</span>    <span class="string">&quot;plugin:prettier/recommended&quot;</span>  <span class="punctuation">]</span><span class="punctuation">,</span>  <span class="attr">&quot;plugins&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;@typescript-eslint&quot;</span><span class="punctuation">,</span> <span class="string">&quot;prettier&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span>  <span class="attr">&quot;rules&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>    <span class="attr">&quot;prettier/prettier&quot;</span><span class="punctuation">:</span> <span class="string">&quot;error&quot;</span>  <span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></code></pre><p>위 설정은 Prettier의 규칙을 ESLint가 따르도록 설정하고, <code>prettier/prettier</code> 규칙에 위반되는 코드가 있을 경우 에러를 발생시킵니다.</p><h2 id="4-타입-검사-도구"><a href="#4-타입-검사-도구" class="headerlink" title="4. 타입 검사 도구"></a>4. 타입 검사 도구</h2><h3 id="TypeScript-타입-검사"><a href="#TypeScript-타입-검사" class="headerlink" title="TypeScript 타입 검사"></a>TypeScript 타입 검사</h3><p>TypeScript는 자체적으로 정적 타입 검사를 수행하여 코드의 타입 안전성을 보장합니다. TypeScript의 타입 검사기는 코드 내 타입 오류를 사전에 발견하여 런타임 에러를 줄일 수 있습니다.</p><p>타입 검사는 <code>tsc</code> 명령어를 사용하여 실행할 수 있습니다.</p><pre><code class="highlight bash">tsc --noEmit</code></pre><p>위 명령어는 코드를 컴파일하지 않고 타입 검사만 수행합니다. 이를 통해 컴파일 전에 모든 타입 오류를 확인할 수 있습니다.</p><h3 id="타사-타입-검사-도구"><a href="#타사-타입-검사-도구" class="headerlink" title="타사 타입 검사 도구"></a>타사 타입 검사 도구</h3><p>TypeScript의 기본 타입 검사 기능 외에도 추가적인 도구를 사용해 코드 품질을 높일 수 있습니다.</p><ul><li><p><strong>tslint</strong>: ESLint와 유사하게 TypeScript 전용으로 만들어진 Linting 도구입니다. 그러나 현재는 ESLint와의 통합이 권장되므로, 새로운 프로젝트에서는 ESLint를 사용하는 것이 좋습니다.</p></li><li><p><strong>SonarQube</strong>: 코드 품질과 보안성을 분석하는 도구로, TypeScript를 포함한 여러 언어를 지원합니다. SonarQube는 코드 스멜, 버그, 보안 취약점을 발견하는 데 유용합니다.</p></li></ul><h2 id="RPG-게임-예제-코드-품질-관리"><a href="#RPG-게임-예제-코드-품질-관리" class="headerlink" title="RPG 게임 예제: 코드 품질 관리"></a>RPG 게임 예제: 코드 품질 관리</h2><h3 id="1-ESLint와-Prettier를-사용한-코드-검사"><a href="#1-ESLint와-Prettier를-사용한-코드-검사" class="headerlink" title="1. ESLint와 Prettier를 사용한 코드 검사"></a>1. ESLint와 Prettier를 사용한 코드 검사</h3><p>다음은 RPG 게임에서 사용되는 캐릭터 클래스를 ESLint와 Prettier로 검사 및 포맷팅하는 예제입니다.</p><pre><code class="highlight typescript"><span class="keyword">class</span> <span class="title class_">Character</span> &#123;  <span class="keyword">private</span> <span class="attr">name</span>: <span class="built_in">string</span>;  <span class="keyword">private</span> <span class="attr">level</span>: <span class="built_in">number</span>;  <span class="title function_">constructor</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span></span>) &#123;    <span class="variable language_">this</span>.<span class="property">name</span> = name;    <span class="variable language_">this</span>.<span class="property">level</span> = <span class="number">1</span>;  &#125;  <span class="title function_">levelUp</span>(<span class="params"></span>) &#123;    <span class="variable language_">this</span>.<span class="property">level</span>++;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>의 레벨이 <span class="subst">$&#123;<span class="variable language_">this</span>.level&#125;</span>로 상승했습니다.`</span>);  &#125;&#125;<span class="keyword">const</span> character = <span class="keyword">new</span> <span class="title class_">Character</span>(<span class="string">&quot;Aragon&quot;</span>);character.<span class="title function_">levelUp</span>();</code></pre><p>ESLint와 Prettier를 사용하여 이 코드를 검사하고 포맷팅하면, 스타일 위반이나 사용되지 않는 변수가 있는지 확인하고 자동으로 수정할 수 있습니다.</p><h3 id="2-타입-검사로-오류-방지"><a href="#2-타입-검사로-오류-방지" class="headerlink" title="2. 타입 검사로 오류 방지"></a>2. 타입 검사로 오류 방지</h3><p>타입 검사를 통해 타입 오류를 사전에 방지하는 방법도 살펴보겠습니다.</p><pre><code class="highlight typescript"><span class="keyword">function</span> <span class="title function_">getCharacterName</span>(<span class="params"><span class="attr">character</span>: <span class="title class_">Character</span></span>): <span class="built_in">string</span> &#123;  <span class="keyword">return</span> character.<span class="property">name</span>; <span class="comment">// 오류: &#x27;name&#x27;은 private이므로 외부에서 접근할 수 없습니다.</span>&#125;</code></pre><p>위 예제에서 <code>getCharacterName</code> 함수는 <code>Character</code> 클래스의 private 멤버에 접근하려 하므로 타입 오류가 발생합니다. TypeScript의 타입 검사는 이러한 오류를 사전에 발견하여 안전한 코드를 작성하도록 도와줍니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 TypeScript에서 코드 품질을 관리하는 방법에 대해 알아보았습니다. Linting 도구와 타입 검사 도구를 활용하면 코드의 일관성을 유지하고, 잠재적인 오류를 사전에 방지할 수 있습니다. 특히 대규모 프로젝트나 협업 환경에서는 이러한 도구들이 필수적입니다. TypeScript와 함께 ESLint, Prettier를 활용하여 코드 품질을 높이고 더욱 깨끗하고 유지보수 가능한 코드를 작성해보세요!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> TS_필살기 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Javascript 선택적 체이닝 (Optional Chaining)과 Null 병합 연산자 (Nullish Coalescing)</title>
      <link href="/javascript/detail/9/"/>
      <url>/javascript/detail/9/</url>
      
        <content type="html"><![CDATA[<h1 id="Javascript-선택적-체이닝-Optional-Chaining-과-Null-병합-연산자-Nullish-Coalescing"><a href="#Javascript-선택적-체이닝-Optional-Chaining-과-Null-병합-연산자-Nullish-Coalescing" class="headerlink" title="Javascript 선택적 체이닝 (Optional Chaining)과 Null 병합 연산자 (Nullish Coalescing)"></a>Javascript 선택적 체이닝 (Optional Chaining)과 Null 병합 연산자 (Nullish Coalescing)</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 JavaScript에서 선택적 체이닝(Optional Chaining)과 Null 병합 연산자(Nullish Coalescing)에 대해 알아보겠습니다. 이 두 가지 기능은 안전하게 객체 속성에 접근하고, null 또는 undefined를 대체하는 방법을 제공합니다.</p><h2 id="선택적-체이닝-Optional-Chaining"><a href="#선택적-체이닝-Optional-Chaining" class="headerlink" title="선택적 체이닝 (Optional Chaining)"></a>선택적 체이닝 (Optional Chaining)</h2><p>선택적 체이닝은 <code>?.</code> 연산자를 사용하여 객체의 깊은 속성에 안전하게 접근할 수 있게 합니다:</p><pre><code class="highlight javascript"><span class="keyword">const</span> user = &#123;  <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,  <span class="attr">address</span>: &#123;    <span class="attr">city</span>: <span class="string">&quot;New York&quot;</span>,  &#125;,&#125;;<span class="variable language_">console</span>.<span class="title function_">log</span>(user.<span class="property">address</span>?.<span class="property">city</span>); <span class="comment">// 출력: New York</span><span class="variable language_">console</span>.<span class="title function_">log</span>(user.<span class="property">address</span>?.<span class="property">zipcode</span>); <span class="comment">// 출력: undefined</span></code></pre><h2 id="Null-병합-연산자-Nullish-Coalescing"><a href="#Null-병합-연산자-Nullish-Coalescing" class="headerlink" title="Null 병합 연산자 (Nullish Coalescing)"></a>Null 병합 연산자 (Nullish Coalescing)</h2><p>Null 병합 연산자는 <code>??</code> 연산자를 사용하여 null 또는 undefined인 경우 기본값을 제공할 수 있습니다:</p><pre><code class="highlight javascript"><span class="keyword">const</span> user = &#123;  <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,  <span class="attr">age</span>: <span class="literal">null</span>,&#125;;<span class="keyword">const</span> age = user.<span class="property">age</span> ?? <span class="number">30</span>;<span class="variable language_">console</span>.<span class="title function_">log</span>(age); <span class="comment">// 출력: 30</span></code></pre><h2 id="선택적-체이닝과-Null-병합-연산자-함께-사용"><a href="#선택적-체이닝과-Null-병합-연산자-함께-사용" class="headerlink" title="선택적 체이닝과 Null 병합 연산자 함께 사용"></a>선택적 체이닝과 Null 병합 연산자 함께 사용</h2><p>선택적 체이닝과 Null 병합 연산자를 함께 사용하여 안전하게 객체 속성에 접근하고, 기본값을 설정할 수 있습니다:</p><pre><code class="highlight javascript"><span class="keyword">const</span> user = &#123;  <span class="attr">name</span>: <span class="string">&quot;Jane&quot;</span>,  <span class="attr">address</span>: &#123;    <span class="attr">city</span>: <span class="string">&quot;Los Angeles&quot;</span>,  &#125;,&#125;;<span class="keyword">const</span> city = user.<span class="property">address</span>?.<span class="property">city</span> ?? <span class="string">&quot;Unknown City&quot;</span>;<span class="variable language_">console</span>.<span class="title function_">log</span>(city); <span class="comment">// 출력: Los Angeles</span><span class="keyword">const</span> zipcode = user.<span class="property">address</span>?.<span class="property">zipcode</span> ?? <span class="string">&quot;00000&quot;</span>;<span class="variable language_">console</span>.<span class="title function_">log</span>(zipcode); <span class="comment">// 출력: 00000</span></code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 Javascript에서 선택적 체이닝과 Null 병합 연산자를 사용하는 방법에 대해 알아보았습니다. 이 두 가지 기능은 안전하게 객체 속성에 접근하고, null 또는 undefined를 대체하는 데 유용합니다. 다음 시간에는 클래스에 대해 알아보겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> JS_디테일 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript 비동기 프로그래밍</title>
      <link href="/typescript/special/18/"/>
      <url>/typescript/special/18/</url>
      
        <content type="html"><![CDATA[<h1 id="TypeScript-비동기-프로그래밍"><a href="#TypeScript-비동기-프로그래밍" class="headerlink" title="TypeScript 비동기 프로그래밍"></a>TypeScript 비동기 프로그래밍</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 TypeScript에서 비동기 프로그래밍을 어떻게 다루는지, 특히 <code>async/await</code>와 Promise를 사용한 비동기 처리의 타입을 위주로 알아보겠습니다.</p><h2 id="비동기-프로그래밍의-기본-개념"><a href="#비동기-프로그래밍의-기본-개념" class="headerlink" title="비동기 프로그래밍의 기본 개념"></a>비동기 프로그래밍의 기본 개념</h2><h3 id="1-비동기-프로그래밍이란"><a href="#1-비동기-프로그래밍이란" class="headerlink" title="1. 비동기 프로그래밍이란?"></a>1. 비동기 프로그래밍이란?</h3><p>비동기 프로그래밍은 코드가 블로킹 없이 비동기 작업을 처리하도록 설계된 방식입니다. I&#x2F;O 작업이나 네트워크 요청 등 시간이 걸리는 작업이 있는 경우, 비동기 프로그래밍은 이러한 작업이 완료될 때까지 코드가 중단되지 않고 계속 실행되도록 합니다.</p><h3 id="2-Promise와-async-await"><a href="#2-Promise와-async-await" class="headerlink" title="2. Promise와 async/await"></a>2. Promise와 <code>async/await</code></h3><ul><li><p><strong>Promise</strong>: 비동기 작업의 성공 또는 실패를 나타내는 객체로, 작업이 완료되면 결과를 제공합니다. <code>Promise</code>는 <code>then</code>, <code>catch</code>, <code>finally</code> 메서드를 사용해 비동기 작업의 완료, 실패, 후속 작업을 처리할 수 있습니다.</p></li><li><p><strong><code>async/await</code></strong>: ES2017에서 도입된 구문으로, 비동기 코드를 마치 동기 코드처럼 작성할 수 있게 해줍니다. <code>await</code> 키워드는 <code>Promise</code>가 완료될 때까지 코드 실행을 잠시 멈추게 하며, <code>async</code> 함수 내에서만 사용할 수 있습니다.</p></li></ul><h2 id="async-await와-Promise-타입-정의"><a href="#async-await와-Promise-타입-정의" class="headerlink" title="async/await와 Promise 타입 정의"></a><code>async/await</code>와 Promise 타입 정의</h2><h3 id="1-Promise-타입-정의"><a href="#1-Promise-타입-정의" class="headerlink" title="1. Promise 타입 정의"></a>1. Promise 타입 정의</h3><p>TypeScript에서는 <code>Promise</code>의 결과 타입을 명시하여, 비동기 함수가 반환하는 값의 타입을 정확하게 지정할 수 있습니다. 이는 코드의 타입 안전성을 높이며, 예상치 못한 타입 오류를 방지하는 데 도움이 됩니다.</p><pre><code class="highlight typescript"><span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params"></span>): <span class="title class_">Promise</span>&lt;<span class="built_in">string</span>&gt; &#123;  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;      <span class="keyword">if</span> (<span class="title class_">Math</span>.<span class="title function_">random</span>() &gt; <span class="number">0.5</span>) &#123;        <span class="title function_">resolve</span>(<span class="string">&quot;데이터 로드 완료&quot;</span>);      &#125; <span class="keyword">else</span> &#123;        <span class="title function_">reject</span>(<span class="string">&quot;데이터 로드 실패&quot;</span>);      &#125;    &#125;, <span class="number">1000</span>);  &#125;);&#125;</code></pre><p>위 예제에서 <code>fetchData</code> 함수는 <code>Promise&lt;string&gt;</code> 타입을 반환합니다. 이 Promise는 성공 시 <code>string</code>을 반환하며, 실패 시 <code>reject</code>로 에러를 발생시킬 수 있습니다.</p><h3 id="2-async-await-함수의-타입-정의"><a href="#2-async-await-함수의-타입-정의" class="headerlink" title="2. async/await 함수의 타입 정의"></a>2. <code>async/await</code> 함수의 타입 정의</h3><p><code>async</code> 함수는 항상 <code>Promise</code>를 반환합니다. 함수 내부에서 반환된 값은 자동으로 <code>Promise</code>로 감싸집니다. TypeScript는 이 반환 타입을 명시적으로 지정할 수 있으며, 이를 통해 함수가 반환할 값의 타입을 명확히 정의할 수 있습니다.</p><pre><code class="highlight typescript"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchCharacterName</span>(<span class="params"></span>): <span class="title class_">Promise</span>&lt;<span class="built_in">string</span>&gt; &#123;  <span class="keyword">const</span> name = <span class="keyword">await</span> <span class="title function_">fetchData</span>();  <span class="keyword">return</span> name;&#125;</code></pre><p>위 <code>fetchCharacterName</code> 함수는 <code>Promise&lt;string&gt;</code> 타입을 반환합니다. 이는 비동기 작업이 성공적으로 완료되었을 때, 함수가 <code>string</code> 타입의 이름을 반환함을 보장합니다.</p><h3 id="3-비동기-함수의-반환-타입과-안전성"><a href="#3-비동기-함수의-반환-타입과-안전성" class="headerlink" title="3. 비동기 함수의 반환 타입과 안전성"></a>3. 비동기 함수의 반환 타입과 안전성</h3><p>비동기 함수의 반환 타입을 명시하는 것은 매우 중요합니다. 이는 코드의 가독성과 유지보수성을 높이며, TypeScript가 컴파일 시 타입 오류를 감지할 수 있게 합니다.</p><pre><code class="highlight typescript"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">loadCharacter</span>(<span class="params"><span class="attr">id</span>: <span class="built_in">number</span></span>): <span class="title class_">Promise</span>&lt;<span class="title class_">Character</span> | <span class="literal">null</span>&gt; &#123;  <span class="keyword">try</span> &#123;    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">`/api/characters/<span class="subst">$&#123;id&#125;</span>`</span>);    <span class="keyword">if</span> (!response.<span class="property">ok</span>) &#123;      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;캐릭터 데이터를 불러오는 데 실패했습니다.&quot;</span>);      <span class="keyword">return</span> <span class="literal">null</span>;    &#125;    <span class="keyword">const</span> <span class="attr">character</span>: <span class="title class_">Character</span> = <span class="keyword">await</span> response.<span class="title function_">json</span>();    <span class="keyword">return</span> character;  &#125; <span class="keyword">catch</span> (error) &#123;    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;에러:&quot;</span>, error);    <span class="keyword">return</span> <span class="literal">null</span>;  &#125;&#125;</code></pre><p>위 예제에서 <code>loadCharacter</code> 함수는 <code>Character</code> 객체를 반환하거나, 오류가 발생했을 때 <code>null</code>을 반환합니다. 이처럼 <code>Promise&lt;Character | null&gt;</code> 타입으로 반환 타입을 정의함으로써, 호출자는 항상 함수의 반환값을 안전하게 처리할 수 있습니다.</p><h2 id="에러-처리와-타입-안전성"><a href="#에러-처리와-타입-안전성" class="headerlink" title="에러 처리와 타입 안전성"></a>에러 처리와 타입 안전성</h2><h3 id="1-try-catch를-통한-안전한-에러-처리"><a href="#1-try-catch를-통한-안전한-에러-처리" class="headerlink" title="1. try/catch를 통한 안전한 에러 처리"></a>1. <code>try/catch</code>를 통한 안전한 에러 처리</h3><p>비동기 함수에서 발생할 수 있는 오류를 안전하게 처리하기 위해, <code>try/catch</code> 구문을 사용해 오류를 처리하는 것이 권장됩니다. TypeScript는 이러한 오류 처리 과정에서 타입을 엄격하게 검사하여, 예상치 못한 런타임 오류를 방지합니다.</p><pre><code class="highlight typescript"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">loadCharacterSafe</span>(<span class="params"><span class="attr">id</span>: <span class="built_in">number</span></span>): <span class="title class_">Promise</span>&lt;<span class="title class_">Character</span> | <span class="literal">null</span>&gt; &#123;  <span class="keyword">try</span> &#123;    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">`/api/characters/<span class="subst">$&#123;id&#125;</span>`</span>);    <span class="keyword">if</span> (!response.<span class="property">ok</span>) &#123;      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;캐릭터 데이터를 불러오는 데 실패했습니다.&quot;</span>);    &#125;    <span class="keyword">const</span> <span class="attr">data</span>: <span class="title class_">Character</span> = <span class="keyword">await</span> response.<span class="title function_">json</span>();    <span class="keyword">return</span> data;  &#125; <span class="keyword">catch</span> (error) &#123;    <span class="variable language_">console</span>.<span class="title function_">error</span>(error);    <span class="keyword">return</span> <span class="literal">null</span>;  &#125;&#125;</code></pre><p>이 예제에서는 API 요청이 실패하면 에러를 발생시키고, <code>catch</code> 블록에서 이를 처리하여 <code>null</code>을 반환하도록 구현했습니다. 이는 비동기 함수의 오류 처리에서 예외 상황을 안전하게 처리하는 방법입니다.</p><h3 id="2-에러-객체의-타입-정의"><a href="#2-에러-객체의-타입-정의" class="headerlink" title="2. 에러 객체의 타입 정의"></a>2. 에러 객체의 타입 정의</h3><p>TypeScript에서는 <code>Error</code> 객체의 타입을 명시적으로 정의할 수 있으며, 이로 인해 에러 처리 로직이 더욱 견고해집니다. 에러 메시지나 에러 코드를 포함한 커스텀 에러 객체를 만들어 사용할 수도 있습니다.</p><pre><code class="highlight typescript"><span class="keyword">class</span> <span class="title class_">APIError</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Error</span> &#123;  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> <span class="attr">code</span>: <span class="built_in">number</span>, <span class="attr">message</span>: <span class="built_in">string</span></span>) &#123;    <span class="variable language_">super</span>(message);    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;APIError&quot;</span>;  &#125;&#125;<span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">loadCharacterWithCustomError</span>(<span class="params"></span><span class="params">  <span class="attr">id</span>: <span class="built_in">number</span></span><span class="params"></span>): <span class="title class_">Promise</span>&lt;<span class="title class_">Character</span> | <span class="literal">null</span>&gt; &#123;  <span class="keyword">try</span> &#123;    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">`/api/characters/<span class="subst">$&#123;id&#125;</span>`</span>);    <span class="keyword">if</span> (!response.<span class="property">ok</span>) &#123;      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">APIError</span>(        response.<span class="property">status</span>,        <span class="string">&quot;캐릭터 데이터를 불러오는 데 실패했습니다.&quot;</span>      );    &#125;    <span class="keyword">const</span> <span class="attr">data</span>: <span class="title class_">Character</span> = <span class="keyword">await</span> response.<span class="title function_">json</span>();    <span class="keyword">return</span> data;  &#125; <span class="keyword">catch</span> (error) &#123;    <span class="keyword">if</span> (error <span class="keyword">instanceof</span> <span class="title class_">APIError</span>) &#123;      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`Error <span class="subst">$&#123;error.code&#125;</span>: <span class="subst">$&#123;error.message&#125;</span>`</span>);    &#125; <span class="keyword">else</span> &#123;      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;예상치 못한 에러:&quot;</span>, error);    &#125;    <span class="keyword">return</span> <span class="literal">null</span>;  &#125;&#125;</code></pre><p>이 예제에서는 <code>APIError</code>라는 커스텀 에러 클래스를 만들어, 에러 발생 시 추가적인 정보를 담아 처리할 수 있습니다. <code>instanceof</code>를 사용해 특정 에러 타입을 구분하고 적절히 처리할 수 있습니다.</p><h2 id="RPG-게임-예제-비동기-캐릭터-로드"><a href="#RPG-게임-예제-비동기-캐릭터-로드" class="headerlink" title="RPG 게임 예제: 비동기 캐릭터 로드"></a>RPG 게임 예제: 비동기 캐릭터 로드</h2><h3 id="1-캐릭터-데이터를-비동기로-불러오기"><a href="#1-캐릭터-데이터를-비동기로-불러오기" class="headerlink" title="1. 캐릭터 데이터를 비동기로 불러오기"></a>1. 캐릭터 데이터를 비동기로 불러오기</h3><p>RPG 게임에서 캐릭터 데이터를 비동기로 불러와 처리하는 예제를 통해, 비동기 함수의 타입 정의와 안전성을 실습해보겠습니다.</p><pre><code class="highlight typescript"><span class="keyword">interface</span> <span class="title class_">Character</span> &#123;  <span class="attr">name</span>: <span class="built_in">string</span>;  <span class="attr">level</span>: <span class="built_in">number</span>;  <span class="attr">class</span>: <span class="built_in">string</span>;&#125;<span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">loadCharacter</span>(<span class="params"><span class="attr">id</span>: <span class="built_in">number</span></span>): <span class="title class_">Promise</span>&lt;<span class="title class_">Character</span> | <span class="literal">null</span>&gt; &#123;  <span class="keyword">try</span> &#123;    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">`/api/characters/<span class="subst">$&#123;id&#125;</span>`</span>);    <span class="keyword">if</span> (!response.<span class="property">ok</span>) &#123;      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;캐릭터 데이터를 불러오는 데 실패했습니다.&quot;</span>);      <span class="keyword">return</span> <span class="literal">null</span>;    &#125;    <span class="keyword">const</span> <span class="attr">character</span>: <span class="title class_">Character</span> = <span class="keyword">await</span> response.<span class="title function_">json</span>();    <span class="keyword">return</span> character;  &#125; <span class="keyword">catch</span> (error) &#123;    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;에러:&quot;</span>, error);    <span class="keyword">return</span> <span class="literal">null</span>;  &#125;&#125;<span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">startGame</span>(<span class="params"></span>) &#123;  <span class="keyword">const</span> character = <span class="keyword">await</span> <span class="title function_">loadCharacter</span>(<span class="number">1</span>);  <span class="keyword">if</span> (character) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;character.name&#125;</span>님이 게임에 참여하셨습니다!`</span>);  &#125; <span class="keyword">else</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;캐릭터 로드 실패&quot;</span>);  &#125;&#125;<span class="title function_">startGame</span>();</code></pre><p>위 예제에서는 <code>loadCharacter</code> 함수가 캐릭터 데이터를 안전하게 불러오도록 설계되었습니다. 에러 발생 시 <code>null</code>을 반환하며, 이를 처리하는 로직도 타입 안전성을 유지하도록 작성되었습니다. 이는 복잡한 비동기 로직에서도 타입 안정성을 유지하면서 코드를 작성할 수 있는 좋은 예입니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 TypeScript에서 비동기 프로그래밍을 다루는 방법을 알아보았습니다. <code>async/await</code>와 Promise의 타입 정의를 통해 비동기 코드의 안전성을 높이는 방법과 관련된 구체적인 방안들도 함께 살펴보았습니다. 비동기 프로그래밍에 TypeScript를 적용하고 더욱 견고한 코드를 작성해보세요!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> TS_필살기 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript에서 여러 비동기 요청 한번에 처리하기</title>
      <link href="/javascript/special/9/"/>
      <url>/javascript/special/9/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript에서-여러-비동기-요청-한번에-처리하기"><a href="#JavaScript에서-여러-비동기-요청-한번에-처리하기" class="headerlink" title="JavaScript에서 여러 비동기 요청 한번에 처리하기"></a>JavaScript에서 여러 비동기 요청 한번에 처리하기</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!</p><p>웹 개발을 하다 보면 비동기 작업을 한 번에 여러 개 보내야 할 때가 있죠? 특히 여러 개의 API 요청을 동시에 보내고, 모두 응답이 도착했을 때 다음 작업을 처리하고 싶을 때 같은 경우입니다. 이 글에서는 Promise.all()을 비롯한 다양한 방법으로 이러한 작업을 쉽게 처리하는 방법을 알려드리겠습니다.</p><h2 id="사전-지식"><a href="#사전-지식" class="headerlink" title="사전 지식"></a>사전 지식</h2><ul><li>JavaScript 비동기 프로그래밍</li><li>Promises</li><li>기본적인 API 호출 방법</li></ul><h2 id="Promise-all-기본-사용법"><a href="#Promise-all-기본-사용법" class="headerlink" title="Promise.all() 기본 사용법"></a>Promise.all() 기본 사용법</h2><p><code>Promise.all()</code>은 여러 개의 프로미스를 동시에 실행시키고, 모두 성공하면 그 결과를 배열로 반환합니다. 만약 하나라도 실패하면 즉시 에러를 발생시키고 나머지는 무시합니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> promise1 = <span class="title function_">fetch</span>(<span class="string">&quot;https://api.example.com/data1&quot;</span>);<span class="keyword">const</span> promise2 = <span class="title function_">fetch</span>(<span class="string">&quot;https://api.example.com/data2&quot;</span>);<span class="keyword">const</span> promise3 = <span class="title function_">fetch</span>(<span class="string">&quot;https://api.example.com/data3&quot;</span>);<span class="title class_">Promise</span>.<span class="title function_">all</span>([promise1, promise2, promise3])  .<span class="title function_">then</span>(<span class="function">(<span class="params">responses</span>) =&gt;</span> &#123;    <span class="comment">// 모든 요청이 성공적으로 완료됨</span>    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>(responses.<span class="title function_">map</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> response.<span class="title function_">json</span>()));  &#125;)  .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;모든 데이터 도착:&quot;</span>, data);    <span class="comment">// 다음 작업 진행</span>  &#125;)  .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;요청 중 하나가 실패:&quot;</span>, error);  &#125;);</code></pre><p>위 예제에서는 세 개의 API 요청을 동시에 보내고, 모든 응답이 도착했을 때 JSON으로 변환하여 콘솔에 출력합니다.</p><h2 id="다른-방법-async-await와-반복문-사용"><a href="#다른-방법-async-await와-반복문-사용" class="headerlink" title="다른 방법: async&#x2F;await와 반복문 사용"></a>다른 방법: async&#x2F;await와 반복문 사용</h2><p>Promise.all() 외에도 async&#x2F;await와 반복문을 사용하여 여러 비동기 작업을 동시에 처리할 수 있습니다. 이 방법이 코드가 더 직관적이고 가독성이 좋습니다.</p><pre><code class="highlight javascript"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params"></span>) &#123;  <span class="keyword">const</span> urls = [    <span class="string">&quot;https://api.example.com/data1&quot;</span>,    <span class="string">&quot;https://api.example.com/data2&quot;</span>,    <span class="string">&quot;https://api.example.com/data3&quot;</span>,  ];  <span class="keyword">try</span> &#123;    <span class="keyword">const</span> responses = <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>(urls.<span class="title function_">map</span>(<span class="function">(<span class="params">url</span>) =&gt;</span> <span class="title function_">fetch</span>(url)));    <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>(      responses.<span class="title function_">map</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> response.<span class="title function_">json</span>())    );    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;모든 데이터 도착:&quot;</span>, data);    <span class="comment">// 다음 작업 진행</span>  &#125; <span class="keyword">catch</span> (error) &#123;    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;요청 중 하나가 실패:&quot;</span>, error);  &#125;&#125;<span class="title function_">fetchData</span>();</code></pre><p>여기서는 Promise.all()을 사용하여 URL 배열에 대한 요청을 병렬로 처리하고, 응답을 JSON으로 변환합니다. async&#x2F;await 문법을 사용하여 비동기 작업을 동기적으로 작성할 수 있습니다.</p><h2 id="다른-방법-Promise-race-와-각-요청의-상태-추적"><a href="#다른-방법-Promise-race-와-각-요청의-상태-추적" class="headerlink" title="다른 방법: Promise.race()와 각 요청의 상태 추적"></a>다른 방법: Promise.race()와 각 요청의 상태 추적</h2><p>또 다른 방법으로 Promise.race()를 사용하여 여러 요청 중 가장 빠른 요청이 완료될 때까지 기다리는 방법도 있습니다. 이 방법은 모든 요청이 완료될 때까지 기다리지는 않지만, 각 요청의 상태를 개별적으로 추적할 수 있습니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> request1 = <span class="title function_">fetch</span>(<span class="string">&quot;https://api.example.com/data1&quot;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span>  response.<span class="title function_">json</span>());<span class="keyword">const</span> request2 = <span class="title function_">fetch</span>(<span class="string">&quot;https://api.example.com/data2&quot;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span>  response.<span class="title function_">json</span>());<span class="keyword">const</span> request3 = <span class="title function_">fetch</span>(<span class="string">&quot;https://api.example.com/data3&quot;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span>  response.<span class="title function_">json</span>());<span class="keyword">const</span> requests = [request1, request2, request3];<span class="keyword">let</span> completed = <span class="number">0</span>;requests.<span class="title function_">forEach</span>(<span class="function">(<span class="params">promise</span>) =&gt;</span> &#123;  promise    .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;      completed++;      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;요청 완료:&quot;</span>, data);      <span class="keyword">if</span> (completed === requests.<span class="property">length</span>) &#123;        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;모든 요청 완료&quot;</span>);        <span class="comment">// 다음 작업 진행</span>      &#125;    &#125;)    .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;요청 실패:&quot;</span>, error);    &#125;);&#125;);</code></pre><p>위 예제에서는 각 요청의 완료 여부를 추적하여, 모든 요청이 완료되었을 때 다음 작업을 처리합니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>Promise.all()은 여러 개의 비동기 작업을 동시에 처리하고, 모든 작업이 완료되었을 때 다음 작업을 진행하는 데 매우 유용한 도구입니다. 하지만 async&#x2F;await와 반복문, Promise.race()를 포함한 다른 방법들도 유용하게 사용할 수 있습니다. 다양한 패턴을 이해하고 활용하면, 더 효율적이고 깔끔한 코드를 작성할 수 있습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> JS_필살기 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript 모듈 해석 순서와 트리 쉐이킹 문제 해결</title>
      <link href="/typescript/troubleshooting/4/"/>
      <url>/typescript/troubleshooting/4/</url>
      
        <content type="html"><![CDATA[<h1 id="TypeScript-모듈-해석-순서와-트리-쉐이킹-문제-해결"><a href="#TypeScript-모듈-해석-순서와-트리-쉐이킹-문제-해결" class="headerlink" title="TypeScript 모듈 해석 순서와 트리 쉐이킹 문제 해결"></a>TypeScript 모듈 해석 순서와 트리 쉐이킹 문제 해결</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 TypeScript에서 모듈 해석 순서와 트리 쉐이킹 문제를 해결하는 방법에 대해 알아보겠습니다.<br>이러한 문제들은 모듈의 불필요한 코드를 제거하고 빌드 최적화를 위해 매우 중요합니다.</p><h2 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h2><h3 id="모듈-해석-순서란"><a href="#모듈-해석-순서란" class="headerlink" title="모듈 해석 순서란?"></a>모듈 해석 순서란?</h3><p>모듈 해석 순서는 TypeScript가 모듈을 찾고 해석하는 순서를 의미합니다. TypeScript는 <code>import</code> 문을 해석할 때 다음과 같은 순서로 모듈을 찾습니다:</p><ol><li><strong>파일 확장자 확인</strong>: <code>.ts</code>, <code>.tsx</code>, <code>.d.ts</code>, <code>.js</code>, <code>.jsx</code> 순서로 파일을 찾습니다.</li><li><strong>파일 경로 확인</strong>: 정확한 파일 경로를 확인합니다.</li><li><strong>디렉토리 인덱스 파일 확인</strong>: 모듈 경로가 디렉토리인 경우 <code>index</code> 파일을 찾습니다.</li><li><strong><code>node_modules</code> 확인</strong>: 위의 경로에 파일이 없으면 <code>node_modules</code> 폴더에서 찾습니다.</li></ol><h3 id="트리-쉐이킹이란"><a href="#트리-쉐이킹이란" class="headerlink" title="트리 쉐이킹이란?"></a>트리 쉐이킹이란?</h3><p>트리 쉐이킹(Tree Shaking)은 사용되지 않는 코드를 제거하여 최종 번들 크기를 줄이는 최적화 기법입니다. 이를 통해 빌드된 코드의 성능을 향상시킬 수 있습니다. ES6 모듈 시스템을 사용하면 트리 쉐이킹이 가능해집니다.</p><h2 id="문제-발생-상황"><a href="#문제-발생-상황" class="headerlink" title="문제 발생 상황"></a>문제 발생 상황</h2><p>모듈 해석 순서와 트리 쉐이킹 문제는 종종 다음과 같은 상황에서 발생할 수 있습니다:</p><ol><li><strong>중복된 파일 경로</strong>: 동일한 경로에 파일과 디렉토리가 동시에 존재하는 경우.</li><li><strong>미사용 코드 포함</strong>: 불필요한 코드가 번들에 포함되어 최종 빌드 크기가 커지는 경우.</li></ol><h3 id="문제-1-중복된-파일-경로"><a href="#문제-1-중복된-파일-경로" class="headerlink" title="문제 1: 중복된 파일 경로"></a>문제 1: 중복된 파일 경로</h3><pre><code class="highlight typescript"><span class="comment">// src/utils.ts</span><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">utilFunction</span> = (<span class="params"></span>) =&gt; &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Utility function from utils.ts&quot;</span>);&#125;;<span class="comment">// src/utils/index.ts</span><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">utilFunction</span> = (<span class="params"></span>) =&gt; &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Utility function from utils/index.ts&quot;</span>);&#125;;</code></pre><h3 id="문제-2-미사용-코드-포함"><a href="#문제-2-미사용-코드-포함" class="headerlink" title="문제 2: 미사용 코드 포함"></a>문제 2: 미사용 코드 포함</h3><pre><code class="highlight typescript"><span class="comment">// src/moduleA.ts</span><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">usedFunction</span> = (<span class="params"></span>) =&gt; &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;This function is used&quot;</span>);&#125;;<span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">unusedFunction</span> = (<span class="params"></span>) =&gt; &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;This function is not used&quot;</span>);&#125;;<span class="comment">// src/main.ts</span><span class="keyword">import</span> &#123; usedFunction &#125; <span class="keyword">from</span> <span class="string">&quot;./moduleA&quot;</span>;<span class="title function_">usedFunction</span>();</code></pre><h2 id="해결-방안"><a href="#해결-방안" class="headerlink" title="해결 방안"></a>해결 방안</h2><h3 id="문제-1-중복된-파일-경로-해결"><a href="#문제-1-중복된-파일-경로-해결" class="headerlink" title="문제 1: 중복된 파일 경로 해결"></a>문제 1: 중복된 파일 경로 해결</h3><ol><li><p><strong>명확한 파일 구조 설정</strong></p><p>파일과 디렉토리 구조를 명확히 구분하여 중복 참조 문제를 방지합니다.</p><pre><code class="highlight typescript"><span class="comment">// src/utils.ts</span><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">utilFunctionFromFile</span> = (<span class="params"></span>) =&gt; &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Utility function from utils.ts&quot;</span>);&#125;;<span class="comment">// src/utils/index.ts</span><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">utilFunctionFromIndex</span> = (<span class="params"></span>) =&gt; &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Utility function from utils/index.ts&quot;</span>);&#125;;</code></pre></li><li><p><strong>명확한 임포트 경로 사용</strong></p><p>임포트 경로를 명확하게 지정하여 파일을 구분합니다.</p><pre><code class="highlight typescript"><span class="comment">// src/main.ts</span><span class="keyword">import</span> &#123; utilFunctionFromFile &#125; <span class="keyword">from</span> <span class="string">&quot;./utils&quot;</span>;<span class="keyword">import</span> &#123; utilFunctionFromIndex &#125; <span class="keyword">from</span> <span class="string">&quot;./utils/index&quot;</span>;<span class="title function_">utilFunctionFromFile</span>();<span class="title function_">utilFunctionFromIndex</span>();</code></pre></li></ol><h3 id="문제-2-미사용-코드-포함-해결"><a href="#문제-2-미사용-코드-포함-해결" class="headerlink" title="문제 2: 미사용 코드 포함 해결"></a>문제 2: 미사용 코드 포함 해결</h3><ol><li><p><strong>ES6 모듈 사용</strong></p><p>ES6 모듈 시스템을 사용하여 트리 쉐이킹이 가능하도록 설정합니다.</p><pre><code class="highlight typescript"><span class="comment">// src/moduleA.ts</span><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">usedFunction</span> = (<span class="params"></span>) =&gt; &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;This function is used&quot;</span>);&#125;;<span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">unusedFunction</span> = (<span class="params"></span>) =&gt; &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;This function is not used&quot;</span>);&#125;;<span class="comment">// src/main.ts</span><span class="keyword">import</span> &#123; usedFunction &#125; <span class="keyword">from</span> <span class="string">&quot;./moduleA&quot;</span>;<span class="title function_">usedFunction</span>();</code></pre></li><li><p><strong>트리 쉐이킹을 지원하는 번들러 사용</strong></p><p>Webpack과 같은 트리 쉐이킹을 지원하는 번들러를 사용하여 빌드합니다.</p><p><strong>webpack.config.js</strong></p><pre><code class="highlight javascript"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);<span class="variable language_">module</span>.<span class="property">exports</span> = &#123;  <span class="attr">entry</span>: <span class="string">&quot;./src/main.ts&quot;</span>,  <span class="attr">output</span>: &#123;    <span class="attr">filename</span>: <span class="string">&quot;bundle.js&quot;</span>,    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;dist&quot;</span>),  &#125;,  <span class="attr">module</span>: &#123;    <span class="attr">rules</span>: [      &#123;        <span class="attr">test</span>: <span class="regexp">/\.tsx?$/</span>,        <span class="attr">use</span>: <span class="string">&quot;ts-loader&quot;</span>,        <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,      &#125;,    ],  &#125;,  <span class="attr">resolve</span>: &#123;    <span class="attr">extensions</span>: [<span class="string">&quot;.ts&quot;</span>, <span class="string">&quot;.js&quot;</span>],  &#125;,  <span class="attr">optimization</span>: &#123;    <span class="attr">usedExports</span>: <span class="literal">true</span>,  &#125;,&#125;;</code></pre></li></ol><h2 id="실습-예제"><a href="#실습-예제" class="headerlink" title="실습 예제"></a>실습 예제</h2><h3 id="프로젝트-구조"><a href="#프로젝트-구조" class="headerlink" title="프로젝트 구조"></a>프로젝트 구조</h3><p>다음과 같은 프로젝트 구조를 가정합니다:</p><pre><code class="highlight bash">src/├── main.ts├── moduleA.ts└── utils/    ├── index.ts    └── utils.ts</code></pre><h3 id="파일-내용"><a href="#파일-내용" class="headerlink" title="파일 내용"></a>파일 내용</h3><p><strong>src&#x2F;utils.ts</strong></p><pre><code class="highlight typescript"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">utilFunctionFromFile</span> = (<span class="params"></span>) =&gt; &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Utility function from utils.ts&quot;</span>);&#125;;</code></pre><p><strong>src&#x2F;utils&#x2F;index.ts</strong></p><pre><code class="highlight typescript"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">utilFunctionFromIndex</span> = (<span class="params"></span>) =&gt; &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Utility function from utils/index.ts&quot;</span>);&#125;;</code></pre><p><strong>src&#x2F;moduleA.ts</strong></p><pre><code class="highlight typescript"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">usedFunction</span> = (<span class="params"></span>) =&gt; &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;This function is used&quot;</span>);&#125;;<span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">unusedFunction</span> = (<span class="params"></span>) =&gt; &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;This function is not used&quot;</span>);&#125;;</code></pre><p><strong>src&#x2F;main.ts</strong></p><pre><code class="highlight typescript"><span class="keyword">import</span> &#123; utilFunctionFromFile &#125; <span class="keyword">from</span> <span class="string">&quot;./utils&quot;</span>;<span class="keyword">import</span> &#123; utilFunctionFromIndex &#125; <span class="keyword">from</span> <span class="string">&quot;./utils/index&quot;</span>;<span class="keyword">import</span> &#123; usedFunction &#125; <span class="keyword">from</span> <span class="string">&quot;./moduleA&quot;</span>;<span class="title function_">utilFunctionFromFile</span>();<span class="title function_">utilFunctionFromIndex</span>();<span class="title function_">usedFunction</span>();</code></pre><h3 id="TypeScript-빌드-설정"><a href="#TypeScript-빌드-설정" class="headerlink" title="TypeScript 빌드 설정"></a>TypeScript 빌드 설정</h3><p><code>tsconfig.json</code> 파일을 설정합니다.</p><pre><code class="highlight json"><span class="punctuation">&#123;</span>  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>    <span class="attr">&quot;outDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./lib&quot;</span><span class="punctuation">,</span>    <span class="attr">&quot;rootDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./src&quot;</span><span class="punctuation">,</span>    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;es6&quot;</span><span class="punctuation">,</span>    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;es6&quot;</span><span class="punctuation">,</span>    <span class="attr">&quot;esModuleInterop&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span>  <span class="punctuation">&#125;</span><span class="punctuation">,</span>  <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;src&quot;</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></code></pre><h3 id="Webpack-설정"><a href="#Webpack-설정" class="headerlink" title="Webpack 설정"></a>Webpack 설정</h3><p><code>webpack.config.js</code> 파일을 설정합니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);<span class="variable language_">module</span>.<span class="property">exports</span> = &#123;  <span class="attr">entry</span>: <span class="string">&quot;./src/main.ts&quot;</span>,  <span class="attr">output</span>: &#123;    <span class="attr">filename</span>: <span class="string">&quot;bundle.js&quot;</span>,    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;dist&quot;</span>),  &#125;,  <span class="attr">module</span>: &#123;    <span class="attr">rules</span>: [      &#123;        <span class="attr">test</span>: <span class="regexp">/\.tsx?$/</span>,        <span class="attr">use</span>: <span class="string">&quot;ts-loader&quot;</span>,        <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,      &#125;,    ],  &#125;,  <span class="attr">resolve</span>: &#123;    <span class="attr">extensions</span>: [<span class="string">&quot;.ts&quot;</span>, <span class="string">&quot;.js&quot;</span>],  &#125;,  <span class="attr">optimization</span>: &#123;    <span class="attr">usedExports</span>: <span class="literal">true</span>,  &#125;,&#125;;</code></pre><h3 id="빌드-및-실행"><a href="#빌드-및-실행" class="headerlink" title="빌드 및 실행"></a>빌드 및 실행</h3><p>다음 명령어를 사용하여 빌드를 실행하고 결과를 확인합니다:</p><pre><code class="highlight bash">npm run buildnode dist/bundle.js</code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 TypeScript에서 모듈 해석 순서와 트리 쉐이킹 문제를 해결하는 방법에 대해 알아보았습니다. 이를 통해 모듈의 불필요한 코드를 제거하고 빌드 최적화를 할 수 있습니다. 다음 시간에도 유용한 TypeScript 트러블슈팅 방법을 다뤄보겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> TS_트러블슈팅 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NoSQL 데이터베이스</title>
      <link href="/database/12/"/>
      <url>/database/12/</url>
      
        <content type="html"><![CDATA[<h1 id="NoSQL-데이터베이스"><a href="#NoSQL-데이터베이스" class="headerlink" title="NoSQL 데이터베이스"></a>NoSQL 데이터베이스</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 NoSQL 데이터베이스에 대해 알아보겠습니다. NoSQL 데이터베이스는 관계형 데이터베이스와 달리 비정형 데이터를 효율적으로 처리할 수 있는 데이터베이스입니다.<br>다양한 NoSQL 데이터베이스 유형 중 문서 지향 데이터베이스, 키-값 저장소, 컬럼 지향 데이터베이스에 대해 설명하고, 각각의 예제를 통해 실습해보겠습니다.</p><h2 id="문서-지향-데이터베이스-Document-Oriented-Database"><a href="#문서-지향-데이터베이스-Document-Oriented-Database" class="headerlink" title="문서 지향 데이터베이스(Document-Oriented Database)"></a>문서 지향 데이터베이스(Document-Oriented Database)</h2><h3 id="MongoDB-개요와-설치"><a href="#MongoDB-개요와-설치" class="headerlink" title="MongoDB 개요와 설치"></a>MongoDB 개요와 설치</h3><p><strong>MongoDB</strong>는 문서 지향 데이터베이스로, JSON과 유사한 BSON(Binary JSON) 형식의 문서를 저장합니다. MongoDB는 유연한 스키마와 수평적 확장성을 제공하여, 대규모 데이터 처리에 적합합니다.</p><h4 id="MongoDB-설치"><a href="#MongoDB-설치" class="headerlink" title="MongoDB 설치"></a>MongoDB 설치</h4><pre><code class="highlight bash"><span class="comment"># Ubuntu 기준 MongoDB 설치</span><span class="built_in">sudo</span> apt update<span class="built_in">sudo</span> apt install -y mongodb<span class="comment"># MongoDB 서비스 시작</span><span class="built_in">sudo</span> systemctl start mongodb<span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> mongodb</code></pre><h3 id="MongoDB-기본-CRUD-작업"><a href="#MongoDB-기본-CRUD-작업" class="headerlink" title="MongoDB 기본 CRUD 작업"></a>MongoDB 기본 CRUD 작업</h3><p>MongoDB에서 데이터베이스와 컬렉션을 생성하고, 기본적인 CRUD 작업을 수행해보겠습니다.</p><h4 id="데이터베이스-및-컬렉션-생성"><a href="#데이터베이스-및-컬렉션-생성" class="headerlink" title="데이터베이스 및 컬렉션 생성"></a>데이터베이스 및 컬렉션 생성</h4><pre><code class="highlight javascript"><span class="comment">// RPG 게임의 캐릭터 데이터베이스와 컬렉션 생성</span>use rpg_game;db.<span class="title function_">createCollection</span>(<span class="string">&quot;characters&quot;</span>);</code></pre><h4 id="데이터-삽입-Create"><a href="#데이터-삽입-Create" class="headerlink" title="데이터 삽입 (Create)"></a>데이터 삽입 (Create)</h4><pre><code class="highlight javascript">db.<span class="property">characters</span>.<span class="title function_">insertOne</span>(&#123;  <span class="attr">name</span>: <span class="string">&quot;전사&quot;</span>,  <span class="attr">level</span>: <span class="number">10</span>,  <span class="attr">items</span>: [<span class="string">&quot;검&quot;</span>, <span class="string">&quot;방패&quot;</span>, <span class="string">&quot;갑옷&quot;</span>],&#125;);</code></pre><h4 id="데이터-조회-Read"><a href="#데이터-조회-Read" class="headerlink" title="데이터 조회 (Read)"></a>데이터 조회 (Read)</h4><pre><code class="highlight javascript"><span class="comment">// 모든 캐릭터 조회</span>db.<span class="property">characters</span>.<span class="title function_">find</span>();<span class="comment">// 특정 조건으로 조회</span>db.<span class="property">characters</span>.<span class="title function_">find</span>(&#123; <span class="attr">level</span>: &#123; <span class="attr">$gte</span>: <span class="number">10</span> &#125; &#125;);</code></pre><h4 id="데이터-수정-Update"><a href="#데이터-수정-Update" class="headerlink" title="데이터 수정 (Update)"></a>데이터 수정 (Update)</h4><pre><code class="highlight javascript"><span class="comment">// 캐릭터 레벨 업데이트</span>db.<span class="property">characters</span>.<span class="title function_">updateOne</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;전사&quot;</span> &#125;, &#123; <span class="attr">$set</span>: &#123; <span class="attr">level</span>: <span class="number">11</span> &#125; &#125;);</code></pre><h4 id="데이터-삭제-Delete"><a href="#데이터-삭제-Delete" class="headerlink" title="데이터 삭제 (Delete)"></a>데이터 삭제 (Delete)</h4><pre><code class="highlight javascript"><span class="comment">// 특정 캐릭터 삭제</span>db.<span class="property">characters</span>.<span class="title function_">deleteOne</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;전사&quot;</span> &#125;);</code></pre><h3 id="MongoDB의-데이터-모델링"><a href="#MongoDB의-데이터-모델링" class="headerlink" title="MongoDB의 데이터 모델링"></a>MongoDB의 데이터 모델링</h3><p>MongoDB에서 데이터 모델링은 데이터의 구조와 관계를 정의하는 과정입니다. 스키마가 유연하여 다양한 방식으로 데이터 모델링이 가능합니다. 예를 들어, RPG 게임에서 캐릭터와 아이템 간의 관계를 다음과 같이 모델링할 수 있습니다:</p><pre><code class="highlight javascript"><span class="comment">// 캐릭터와 아이템의 내장 문서 구조</span>db.<span class="property">characters</span>.<span class="title function_">insertOne</span>(&#123;  <span class="attr">name</span>: <span class="string">&quot;법사&quot;</span>,  <span class="attr">level</span>: <span class="number">15</span>,  <span class="attr">items</span>: [    &#123; <span class="attr">name</span>: <span class="string">&quot;마법 지팡이&quot;</span>, <span class="attr">power</span>: <span class="number">50</span> &#125;,    &#123; <span class="attr">name</span>: <span class="string">&quot;마법 책&quot;</span>, <span class="attr">power</span>: <span class="number">30</span> &#125;,  ],&#125;);</code></pre><h2 id="키-값-저장소-Key-Value-Store"><a href="#키-값-저장소-Key-Value-Store" class="headerlink" title="키-값 저장소(Key-Value Store)"></a>키-값 저장소(Key-Value Store)</h2><h3 id="Redis-개요와-설치"><a href="#Redis-개요와-설치" class="headerlink" title="Redis 개요와 설치"></a>Redis 개요와 설치</h3><p><strong>Redis</strong>는 키-값 저장소로, 데이터를 키와 값의 쌍으로 저장합니다. 매우 빠른 성능을 제공하며, 캐싱, 세션 관리, 실시간 분석 등에 많이 사용됩니다.</p><h4 id="Redis-설치"><a href="#Redis-설치" class="headerlink" title="Redis 설치"></a>Redis 설치</h4><pre><code class="highlight bash"><span class="comment"># Ubuntu 기준 Redis 설치</span><span class="built_in">sudo</span> apt update<span class="built_in">sudo</span> apt install -y redis-server<span class="comment"># Redis 서비스 시작</span><span class="built_in">sudo</span> systemctl start redis<span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> redis</code></pre><h3 id="Redis-기본-명령어와-사용법"><a href="#Redis-기본-명령어와-사용법" class="headerlink" title="Redis 기본 명령어와 사용법"></a>Redis 기본 명령어와 사용법</h3><h4 id="데이터-삽입과-조회"><a href="#데이터-삽입과-조회" class="headerlink" title="데이터 삽입과 조회"></a>데이터 삽입과 조회</h4><pre><code class="highlight bash"><span class="comment"># Redis CLI 접속</span>redis-cli<span class="comment"># 데이터 삽입</span>SET character:1 <span class="string">&quot;전사&quot;</span>SET character:2 <span class="string">&quot;법사&quot;</span><span class="comment"># 데이터 조회</span>GET character:1GET character:2</code></pre><h4 id="데이터-수정과-삭제"><a href="#데이터-수정과-삭제" class="headerlink" title="데이터 수정과 삭제"></a>데이터 수정과 삭제</h4><pre><code class="highlight bash"><span class="comment"># 데이터 수정</span>SET character:1 <span class="string">&quot;강력한 전사&quot;</span><span class="comment"># 데이터 삭제</span>DEL character:2</code></pre><h4 id="데이터-구조-활용"><a href="#데이터-구조-활용" class="headerlink" title="데이터 구조 활용"></a>데이터 구조 활용</h4><pre><code class="highlight bash"><span class="comment"># 해시(Hash) 사용</span>HSET character:1 name <span class="string">&quot;전사&quot;</span> level 10HGETALL character:1<span class="comment"># 리스트(List) 사용</span>LPUSH inventory <span class="string">&quot;검&quot;</span> <span class="string">&quot;방패&quot;</span> <span class="string">&quot;갑옷&quot;</span>LRANGE inventory 0 -1<span class="comment"># 집합(Set) 사용</span>SADD skills <span class="string">&quot;불꽃&quot;</span> <span class="string">&quot;얼음&quot;</span> <span class="string">&quot;번개&quot;</span>SMEMBERS skills</code></pre><h2 id="컬럼-지향-데이터베이스-Column-Oriented-Database"><a href="#컬럼-지향-데이터베이스-Column-Oriented-Database" class="headerlink" title="컬럼 지향 데이터베이스(Column-Oriented Database)"></a>컬럼 지향 데이터베이스(Column-Oriented Database)</h2><h3 id="Cassandra-개요와-설치"><a href="#Cassandra-개요와-설치" class="headerlink" title="Cassandra 개요와 설치"></a>Cassandra 개요와 설치</h3><p><strong>Cassandra</strong>는 컬럼 지향 데이터베이스로, 대규모 데이터와 높은 쓰기 성능을 요구하는 애플리케이션에 적합합니다. 분산형 아키텍처를 통해 높은 가용성과 확장성을 제공합니다.</p><h4 id="Cassandra-설치"><a href="#Cassandra-설치" class="headerlink" title="Cassandra 설치"></a>Cassandra 설치</h4><pre><code class="highlight bash"><span class="comment"># Ubuntu 기준 Cassandra 설치</span><span class="built_in">sudo</span> apt update<span class="built_in">sudo</span> apt install -y cassandra<span class="comment"># Cassandra 서비스 시작</span><span class="built_in">sudo</span> systemctl start cassandra<span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> cassandra</code></pre><h3 id="Cassandra-기본-CRUD-작업"><a href="#Cassandra-기본-CRUD-작업" class="headerlink" title="Cassandra 기본 CRUD 작업"></a>Cassandra 기본 CRUD 작업</h3><p>Cassandra에서 키스페이스와 테이블을 생성하고, 기본적인 CRUD 작업을 수행해보겠습니다.</p><h4 id="키스페이스-및-테이블-생성"><a href="#키스페이스-및-테이블-생성" class="headerlink" title="키스페이스 및 테이블 생성"></a>키스페이스 및 테이블 생성</h4><pre><code class="highlight sql"><span class="comment">-- RPG 게임의 캐릭터 키스페이스와 테이블 생성</span><span class="keyword">CREATE</span> KEYSPACE rpg_game <span class="keyword">WITH</span> replication <span class="operator">=</span> &#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;SimpleStrategy&#x27;</span>, <span class="string">&#x27;replication_factor&#x27;</span>: <span class="number">1</span>&#125;;USE rpg_game;<span class="keyword">CREATE</span> <span class="keyword">TABLE</span> characters (  id UUID <span class="keyword">PRIMARY</span> KEY,  name TEXT,  level <span class="type">INT</span>,  items LIST<span class="operator">&lt;</span>TEXT<span class="operator">&gt;</span>);</code></pre><h4 id="데이터-삽입-Create-1"><a href="#데이터-삽입-Create-1" class="headerlink" title="데이터 삽입 (Create)"></a>데이터 삽입 (Create)</h4><pre><code class="highlight sql"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> characters (id, name, level, items) <span class="keyword">VALUES</span> (uuid(), <span class="string">&#x27;전사&#x27;</span>, <span class="number">10</span>, [<span class="string">&#x27;검&#x27;</span>, <span class="string">&#x27;방패&#x27;</span>, <span class="string">&#x27;갑옷&#x27;</span>]);</code></pre><h4 id="데이터-조회-Read-1"><a href="#데이터-조회-Read-1" class="headerlink" title="데이터 조회 (Read)"></a>데이터 조회 (Read)</h4><pre><code class="highlight sql"><span class="comment">-- 모든 캐릭터 조회</span><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> characters;<span class="comment">-- 특정 조건으로 조회</span><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> characters <span class="keyword">WHERE</span> level <span class="operator">&gt;=</span> <span class="number">10</span>;</code></pre><h4 id="데이터-수정-Update-1"><a href="#데이터-수정-Update-1" class="headerlink" title="데이터 수정 (Update)"></a>데이터 수정 (Update)</h4><pre><code class="highlight sql"><span class="comment">-- 캐릭터 레벨 업데이트</span><span class="keyword">UPDATE</span> characters <span class="keyword">SET</span> level <span class="operator">=</span> <span class="number">11</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="operator">&lt;</span>UUID<span class="operator">&gt;</span>;</code></pre><h4 id="데이터-삭제-Delete-1"><a href="#데이터-삭제-Delete-1" class="headerlink" title="데이터 삭제 (Delete)"></a>데이터 삭제 (Delete)</h4><pre><code class="highlight sql"><span class="comment">-- 특정 캐릭터 삭제</span><span class="keyword">DELETE</span> <span class="keyword">FROM</span> characters <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="operator">&lt;</span>UUID<span class="operator">&gt;</span>;</code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 NoSQL 데이터베이스의 주요 유형인 문서 지향 데이터베이스, 키-값 저장소, 컬럼 지향 데이터베이스에 대해 알아보았습니다. 각각의 데이터베이스는 특정 용도에 맞게 설계되어 있어, 애플리케이션의 요구사항에 따라 적절한 데이터베이스를 선택하여 사용할 수 있습니다. RPG 게임 예제를 통해 실습해보면서 NoSQL 데이터베이스의 다양한 기능을 이해하고 활용해보세요!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> database </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>데이터베이스 성능 최적화 - index(인덱스)와 쿼리 튜닝</title>
      <link href="/database/11/"/>
      <url>/database/11/</url>
      
        <content type="html"><![CDATA[<h1 id="데이터베이스-성능-최적화"><a href="#데이터베이스-성능-최적화" class="headerlink" title="데이터베이스 성능 최적화"></a>데이터베이스 성능 최적화</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 데이터베이스 성능 최적화에 대해 알아보겠습니다. 데이터베이스 성능 최적화는 애플리케이션의 효율성과 반응 속도를 크게 향상시킬 수 있는 중요한 과정입니다. 특히 인덱스와 쿼리 튜닝에 대해 중점적으로 다뤄보겠습니다.</p><h2 id="인덱스-Index"><a href="#인덱스-Index" class="headerlink" title="인덱스(Index)"></a>인덱스(Index)</h2><h3 id="인덱스의-개념과-종류"><a href="#인덱스의-개념과-종류" class="headerlink" title="인덱스의 개념과 종류"></a>인덱스의 개념과 종류</h3><p><strong>인덱스</strong>는 데이터베이스에서 검색 속도를 높이기 위해 사용하는 자료 구조입니다. 인덱스는 데이터베이스 테이블의 특정 열에 대해 생성되며, 이 열을 기준으로 데이터의 빠른 검색을 가능하게 합니다.</p><h4 id="인덱스의-종류"><a href="#인덱스의-종류" class="headerlink" title="인덱스의 종류"></a>인덱스의 종류</h4><ol><li><strong>B-Tree 인덱스</strong>: 대부분의 관계형 데이터베이스에서 기본적으로 사용되는 인덱스 유형입니다. 범위 검색과 정렬된 데이터를 빠르게 검색할 수 있습니다.</li><li><strong>해시 인덱스</strong>: 특정 값을 빠르게 검색할 때 유용하며, 정확한 일치 검색에 최적화되어 있습니다.</li><li><strong>비트맵 인덱스</strong>: 비트맵을 사용하여 데이터를 인덱싱하며, 데이터 중복이 많은 경우 효과적입니다.</li><li><strong>함수 기반 인덱스</strong>: 컬럼의 값을 함수나 표현식으로 변환한 결과를 인덱싱합니다.</li></ol><h3 id="인덱스의-장점과-단점"><a href="#인덱스의-장점과-단점" class="headerlink" title="인덱스의 장점과 단점"></a>인덱스의 장점과 단점</h3><h4 id="장점"><a href="#장점" class="headerlink" title="장점"></a>장점</h4><ul><li><strong>검색 속도 향상</strong>: 인덱스를 사용하면 데이터 검색 속도가 크게 향상됩니다.</li><li><strong>정렬 속도 향상</strong>: 인덱스를 사용하면 데이터를 정렬하는 속도도 빨라집니다.</li></ul><h4 id="단점"><a href="#단점" class="headerlink" title="단점"></a>단점</h4><ul><li><strong>쓰기 성능 저하</strong>: 인덱스가 많아질수록 데이터를 삽입, 업데이트, 삭제하는 작업의 속도가 느려질 수 있습니다.</li><li><strong>저장 공간 증가</strong>: 인덱스를 저장하기 위한 추가적인 공간이 필요합니다.</li></ul><h3 id="인덱스-생성과-관리"><a href="#인덱스-생성과-관리" class="headerlink" title="인덱스 생성과 관리"></a>인덱스 생성과 관리</h3><h4 id="인덱스-생성"><a href="#인덱스-생성" class="headerlink" title="인덱스 생성"></a>인덱스 생성</h4><pre><code class="highlight sql"><span class="comment">-- RPG 게임의 캐릭터 테이블에서 &#x27;level&#x27; 열에 대해 인덱스 생성</span><span class="keyword">CREATE</span> INDEX idx_character_level <span class="keyword">ON</span> characters(level);</code></pre><h4 id="인덱스-삭제"><a href="#인덱스-삭제" class="headerlink" title="인덱스 삭제"></a>인덱스 삭제</h4><pre><code class="highlight sql"><span class="comment">-- &#x27;idx_character_level&#x27; 인덱스 삭제</span><span class="keyword">DROP</span> INDEX idx_character_level;</code></pre><h4 id="인덱스-관리"><a href="#인덱스-관리" class="headerlink" title="인덱스 관리"></a>인덱스 관리</h4><p>인덱스의 유효성을 유지하기 위해 주기적으로 인덱스를 재구성하거나 분석할 필요가 있습니다.</p><pre><code class="highlight sql"><span class="comment">-- 인덱스 재구성</span><span class="keyword">ALTER</span> INDEX idx_character_level REBUILD;<span class="comment">-- 인덱스 통계 업데이트</span>ANALYZE <span class="keyword">TABLE</span> characters;</code></pre><h2 id="쿼리-튜닝"><a href="#쿼리-튜닝" class="headerlink" title="쿼리 튜닝"></a>쿼리 튜닝</h2><h3 id="쿼리-튜닝-기법"><a href="#쿼리-튜닝-기법" class="headerlink" title="쿼리 튜닝 기법"></a>쿼리 튜닝 기법</h3><p>쿼리 튜닝는 데이터베이스 성능을 향상시키기 위해 SQL 쿼리를 효율적으로 작성하는 과정입니다.</p><h4 id="기본-최적화-기법"><a href="#기본-최적화-기법" class="headerlink" title="기본 최적화 기법"></a>기본 최적화 기법</h4><ol><li><p><strong>필요한 데이터만 선택</strong>: SELECT 문에서 필요한 열만 선택하여 불필요한 데이터 처리를 줄입니다.</p><pre><code class="highlight sql"><span class="comment">-- 모든 열 대신 필요한 열만 선택</span><span class="keyword">SELECT</span> name, level <span class="keyword">FROM</span> characters <span class="keyword">WHERE</span> level <span class="operator">&gt;</span> <span class="number">10</span>;</code></pre></li><li><p><strong>조인 최적화</strong>: 조인 조건을 명확히 하고, 불필요한 조인을 피합니다.</p><pre><code class="highlight sql"><span class="comment">-- 명확한 조인 조건 사용</span><span class="keyword">SELECT</span> c.name, i.item_name<span class="keyword">FROM</span> characters c<span class="keyword">JOIN</span> inventory i <span class="keyword">ON</span> c.id <span class="operator">=</span> i.character_id<span class="keyword">WHERE</span> c.level <span class="operator">&gt;</span> <span class="number">10</span>;</code></pre></li><li><p><strong>서브쿼리 대신 조인 사용</strong>: 서브쿼리는 성능이 저하될 수 있으므로, 가능한 경우 조인으로 대체합니다.</p><pre><code class="highlight sql"><span class="comment">-- 서브쿼리 대신 조인 사용</span><span class="keyword">SELECT</span> c.name, i.item_name<span class="keyword">FROM</span> characters c<span class="keyword">JOIN</span> inventory i <span class="keyword">ON</span> c.id <span class="operator">=</span> i.character_id<span class="keyword">WHERE</span> c.id <span class="keyword">IN</span> (<span class="keyword">SELECT</span> character_id <span class="keyword">FROM</span> inventory <span class="keyword">WHERE</span> item_name <span class="operator">=</span> <span class="string">&#x27;Sword&#x27;</span>);</code></pre></li></ol><h3 id="실행-계획-EXPLAIN-PLAN-분석"><a href="#실행-계획-EXPLAIN-PLAN-분석" class="headerlink" title="실행 계획(EXPLAIN PLAN) 분석"></a>실행 계획(EXPLAIN PLAN) 분석</h3><p>쿼리 성능을 최적화하기 위해 실행 계획을 분석합니다. 실행 계획은 데이터베이스가 쿼리를 실행하는 방법을 보여줍니다.</p><pre><code class="highlight sql"><span class="comment">-- 실행 계획 확인</span>EXPLAIN <span class="keyword">SELECT</span> name, level <span class="keyword">FROM</span> characters <span class="keyword">WHERE</span> level <span class="operator">&gt;</span> <span class="number">10</span>;</code></pre><p>실행 계획을 통해 쿼리의 실행 순서, 사용된 인덱스, 조인 방법 등을 확인할 수 있습니다. 이를 바탕으로 쿼리를 최적화할 수 있습니다.</p><h3 id="예제-RPG-게임에서의-쿼리-튜닝"><a href="#예제-RPG-게임에서의-쿼리-튜닝" class="headerlink" title="예제: RPG 게임에서의 쿼리 튜닝"></a>예제: RPG 게임에서의 쿼리 튜닝</h3><p>RPG 게임에서 캐릭터의 레벨이 높은 순서대로 아이템 목록을 조회하는 쿼리를 최적화해보겠습니다.</p><pre><code class="highlight sql"><span class="comment">-- 최적화된 쿼리</span><span class="keyword">SELECT</span> c.name, i.item_name<span class="keyword">FROM</span> characters c<span class="keyword">JOIN</span> inventory i <span class="keyword">ON</span> c.id <span class="operator">=</span> i.character_id<span class="keyword">WHERE</span> c.level <span class="operator">&gt;</span> <span class="number">10</span><span class="keyword">ORDER</span> <span class="keyword">BY</span> c.level <span class="keyword">DESC</span>;</code></pre><p>실행 계획을 분석하여 필요한 인덱스를 추가합니다.</p><pre><code class="highlight sql"><span class="comment">-- 인덱스 추가</span><span class="keyword">CREATE</span> INDEX idx_character_level <span class="keyword">ON</span> characters(level);</code></pre><p>최적화된 쿼리를 실행하여 성능을 확인합니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 데이터베이스 성능 최적화의 핵심 요소인 인덱스와 쿼리 튜닝에 대해 알아보았습니다. 인덱스는 데이터 검색 속도를 크게 향상시키는 중요한 도구이며, 쿼리 튜닝는 데이터베이스 성능을 극대화하는 데 필수적입니다.<br>RPG 게임 예제를 통해 실습하며 데이터베이스 성능 최적화의 중요성을 이해하고, 이를 실제 프로젝트에 적용해보세요!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> database </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Javascript 객체 리터럴 확장 (Object Literal Extensions)</title>
      <link href="/javascript/detail/8/"/>
      <url>/javascript/detail/8/</url>
      
        <content type="html"><![CDATA[<h1 id="Javascript-객체-리터럴-확장-Object-Literal-Extensions"><a href="#Javascript-객체-리터럴-확장-Object-Literal-Extensions" class="headerlink" title="Javascript 객체 리터럴 확장 (Object Literal Extensions)"></a>Javascript 객체 리터럴 확장 (Object Literal Extensions)</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 JavaScript에서 객체 리터럴 확장(Object Literal Extensions)에 대해 알아보겠습니다. ES6에서는 객체 리터럴의 문법이 확장되어 더욱 편리하게 객체를 작성할 수 있습니다.</p><h2 id="단축-속성명"><a href="#단축-속성명" class="headerlink" title="단축 속성명"></a>단축 속성명</h2><p>단축 속성명(Shorthand Property Names)을 사용하면 변수명을 그대로 객체의 속성명으로 사용할 수 있습니다:</p><pre><code class="highlight javascript"><span class="keyword">const</span> name = <span class="string">&quot;John&quot;</span>;<span class="keyword">const</span> age = <span class="number">30</span>;<span class="keyword">const</span> person = &#123; name, age &#125;;<span class="variable language_">console</span>.<span class="title function_">log</span>(person); <span class="comment">// 출력: &#123; name: &#x27;John&#x27;, age: 30 &#125;</span></code></pre><h2 id="계산된-속성명"><a href="#계산된-속성명" class="headerlink" title="계산된 속성명"></a>계산된 속성명</h2><p>계산된 속성명(Computed Property Names)을 사용하면 대괄호(<code>[]</code>) 안에 표현식을 넣어 속성명을 동적으로 정의할 수 있습니다:</p><pre><code class="highlight javascript"><span class="keyword">const</span> key = <span class="string">&quot;job&quot;</span>;<span class="keyword">const</span> person = &#123;  <span class="attr">name</span>: <span class="string">&quot;Jane&quot;</span>,  <span class="attr">age</span>: <span class="number">25</span>,  [key]: <span class="string">&quot;developer&quot;</span>,&#125;;<span class="variable language_">console</span>.<span class="title function_">log</span>(person); <span class="comment">// 출력: &#123; name: &#x27;Jane&#x27;, age: 25, job: &#x27;developer&#x27; &#125;</span></code></pre><h2 id="메서드-정의"><a href="#메서드-정의" class="headerlink" title="메서드 정의"></a>메서드 정의</h2><p>메서드를 정의할 때 <code>function</code> 키워드를 생략할 수 있습니다:</p><pre><code class="highlight javascript"><span class="keyword">const</span> person = &#123;  <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,  <span class="attr">age</span>: <span class="number">30</span>,  <span class="title function_">greet</span>(<span class="params"></span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello, my name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>);  &#125;,&#125;;person.<span class="title function_">greet</span>(); <span class="comment">// 출력: Hello, my name is John</span></code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 Javascript에서 객체 리터럴 확장을 사용하는 방법에 대해 알아보았습니다. 객체 리터럴 확장은 코드의 가독성과 작성 편의성을 높여줍니다. 다음 시간에는 선택적 체이닝과 Null 병합 연산자에 대해 알아보겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> JS_디테일 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Node.js Vercel</title>
      <link href="/cli/14/"/>
      <url>/cli/14/</url>
      
        <content type="html"><![CDATA[<h1 id="Vercel-손쉬운-프론트엔드-배포-및-서버리스-애플리케이션"><a href="#Vercel-손쉬운-프론트엔드-배포-및-서버리스-애플리케이션" class="headerlink" title="Vercel: 손쉬운 프론트엔드 배포 및 서버리스 애플리케이션"></a>Vercel: 손쉬운 프론트엔드 배포 및 서버리스 애플리케이션</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 손쉬운 프론트엔드 배포와 서버리스 애플리케이션 관리를 위한 도구인 Vercel에 대해 알아보겠습니다. Vercel의 역할과 필요성, 설치 및 설정 방법, 그리고 기본 사용법을 알아보겠습니다.</p><h2 id="1-Vercel-소개"><a href="#1-Vercel-소개" class="headerlink" title="1. Vercel 소개"></a>1. Vercel 소개</h2><h3 id="Vercel이란-무엇인가"><a href="#Vercel이란-무엇인가" class="headerlink" title="Vercel이란 무엇인가?"></a>Vercel이란 무엇인가?</h3><p>Vercel은 정적 사이트와 서버리스 애플리케이션을 쉽게 배포하고 관리할 수 있는 플랫폼입니다. 프론트엔드 개발자들이 빠르게 웹사이트를 배포하고, 서버리스 함수로 백엔드 로직을 구현할 수 있게 해줍니다.</p><h3 id="Vercel의-역할과-필요성"><a href="#Vercel의-역할과-필요성" class="headerlink" title="Vercel의 역할과 필요성"></a>Vercel의 역할과 필요성</h3><ul><li><strong>손쉬운 배포</strong>: 복잡한 설정 없이 웹 애플리케이션을 빠르게 배포할 수 있습니다.</li><li><strong>서버리스 함수</strong>: 백엔드 로직을 서버리스 함수로 작성하여, 인프라 관리 없이 쉽게 확장할 수 있습니다.</li><li><strong>자동화된 워크플로우</strong>: GitHub, GitLab, Bitbucket 등과 연동하여 자동으로 빌드 및 배포할 수 있습니다.</li></ul><h2 id="2-설치-및-설정"><a href="#2-설치-및-설정" class="headerlink" title="2. 설치 및 설정"></a>2. 설치 및 설정</h2><h3 id="Vercel-CLI-설치-방법"><a href="#Vercel-CLI-설치-방법" class="headerlink" title="Vercel CLI 설치 방법"></a>Vercel CLI 설치 방법</h3><p>Vercel CLI를 사용하여 로컬에서 쉽게 배포할 수 있습니다. 다음 명령어를 사용하여 Vercel CLI를 설치합니다.</p><pre><code class="highlight bash">npm install -g vercel</code></pre><p>설치가 완료되면 <code>vercel --version</code> 명령어로 설치된 버전을 확인할 수 있습니다.</p><pre><code class="highlight bash">vercel --version</code></pre><h2 id="3-기본-사용법"><a href="#3-기본-사용법" class="headerlink" title="3. 기본 사용법"></a>3. 기본 사용법</h2><h3 id="프로젝트-배포"><a href="#프로젝트-배포" class="headerlink" title="프로젝트 배포"></a>프로젝트 배포</h3><ul><li><strong>프로젝트 초기 배포</strong>: Vercel CLI를 사용하여 프로젝트를 배포합니다.</li></ul><pre><code class="highlight bash">vercel</code></pre><p>명령어를 실행하면, Vercel은 프로젝트의 설정 파일을 읽고 자동으로 배포를 진행합니다. 첫 실행 시에는 Vercel 계정에 로그인해야 합니다.</p><ul><li><strong>프로덕션 환경 배포</strong>: Vercel CLI를 사용하여 프로젝트를 프로덕션 환경에 배포합니다.</li></ul><pre><code class="highlight bash">vercel --prod</code></pre><h3 id="Vercel-설정-파일"><a href="#Vercel-설정-파일" class="headerlink" title="Vercel 설정 파일"></a>Vercel 설정 파일</h3><p>Vercel 설정 파일인 <code>vercel.json</code>을 사용하여 프로젝트의 배포 설정을 세부적으로 조정할 수 있습니다.</p><p><strong>vercel.json 예제</strong></p><pre><code class="highlight json"><span class="punctuation">&#123;</span>  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span>  <span class="attr">&quot;builds&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span>    <span class="punctuation">&#123;</span> <span class="attr">&quot;src&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.html&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;use&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@vercel/static&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span>    <span class="punctuation">&#123;</span> <span class="attr">&quot;src&quot;</span><span class="punctuation">:</span> <span class="string">&quot;api/**/*.js&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;use&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@vercel/node&quot;</span> <span class="punctuation">&#125;</span>  <span class="punctuation">]</span><span class="punctuation">,</span>  <span class="attr">&quot;routes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span> <span class="attr">&quot;src&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/api/(.*)&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;dest&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/api/$1&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></code></pre><h2 id="4-고급-사용법"><a href="#4-고급-사용법" class="headerlink" title="4. 고급 사용법"></a>4. 고급 사용법</h2><h3 id="서버리스-함수-작성"><a href="#서버리스-함수-작성" class="headerlink" title="서버리스 함수 작성"></a>서버리스 함수 작성</h3><p>Vercel을 사용하여 서버리스 함수를 작성하고 배포할 수 있습니다. 예를 들어, <code>api</code> 폴더에 함수를 작성합니다.</p><p><strong>api&#x2F;hello.js</strong></p><pre><code class="highlight javascript"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">json</span>(&#123; <span class="attr">message</span>: <span class="string">&quot;Hello from Vercel Serverless Function!&quot;</span> &#125;);&#125;;</code></pre><p>위와 같이 작성한 서버리스 함수는 자동으로 배포되며, <code>/api/hello</code> 경로에서 접근할 수 있습니다.</p><h3 id="환경-변수-설정"><a href="#환경-변수-설정" class="headerlink" title="환경 변수 설정"></a>환경 변수 설정</h3><p>Vercel에서는 프로젝트의 환경 변수를 설정하여 민감한 정보를 안전하게 관리할 수 있습니다.</p><p><strong>환경 변수 설정</strong></p><pre><code class="highlight bash">vercel <span class="built_in">env</span> add</code></pre><p>위 명령어를 통해 Vercel 프로젝트의 환경 변수를 설정할 수 있습니다.</p><h3 id="빌드-및-배포-설정"><a href="#빌드-및-배포-설정" class="headerlink" title="빌드 및 배포 설정"></a>빌드 및 배포 설정</h3><p>Vercel CLI를 사용하여 프로젝트의 빌드 및 배포 설정을 세부적으로 조정할 수 있습니다. 예를 들어, 특정 빌드 명령어를 사용하거나 배포 후 특정 스크립트를 실행할 수 있습니다.</p><p><strong>빌드 및 배포 설정 예제</strong></p><pre><code class="highlight json"><span class="punctuation">&#123;</span>  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span>  <span class="attr">&quot;builds&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span>    <span class="punctuation">&#123;</span>      <span class="attr">&quot;src&quot;</span><span class="punctuation">:</span> <span class="string">&quot;package.json&quot;</span><span class="punctuation">,</span>      <span class="attr">&quot;use&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@vercel/static-build&quot;</span><span class="punctuation">,</span>      <span class="attr">&quot;config&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;distDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;public&quot;</span> <span class="punctuation">&#125;</span>    <span class="punctuation">&#125;</span>  <span class="punctuation">]</span><span class="punctuation">,</span>  <span class="attr">&quot;routes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span> <span class="attr">&quot;src&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/(.*)&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;dest&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.html&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span>  <span class="attr">&quot;env&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>    <span class="attr">&quot;NODE_ENV&quot;</span><span class="punctuation">:</span> <span class="string">&quot;production&quot;</span>  <span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></code></pre><h2 id="5-실습-예제"><a href="#5-실습-예제" class="headerlink" title="5. 실습 예제"></a>5. 실습 예제</h2><h3 id="프로젝트-생성-및-Vercel-사용"><a href="#프로젝트-생성-및-Vercel-사용" class="headerlink" title="프로젝트 생성 및 Vercel 사용"></a>프로젝트 생성 및 Vercel 사용</h3><ol><li><strong>새 프로젝트 생성</strong>: 새로운 디렉토리를 만들고 이동합니다.</li></ol><pre><code class="highlight bash"><span class="built_in">mkdir</span> my-vercel-project<span class="built_in">cd</span> my-vercel-project</code></pre><ol start="2"><li><strong>프로젝트 초기화</strong>: 기본적인 웹 프로젝트를 초기화합니다.</li></ol><pre><code class="highlight bash"><span class="built_in">echo</span> <span class="string">&quot;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;My Vercel Project&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;Hello, Vercel!&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;&quot;</span> &gt; index.html</code></pre><ol start="3"><li><strong>프로젝트 배포</strong>: Vercel CLI를 사용하여 프로젝트를 배포합니다.</li></ol><pre><code class="highlight bash">vercel</code></pre><ol start="4"><li><strong>프로덕션 환경 배포</strong>: Vercel CLI를 사용하여 프로젝트를 프로덕션 환경에 배포합니다.</li></ol><pre><code class="highlight bash">vercel --prod</code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 Vercel의 기본 개념부터 설치 방법, 기본 및 고급 사용법, 실습 예제까지 다루었습니다. Vercel을 통해 Node.js 프로젝트를 쉽게 배포하고 서버리스 함수를 활용하여 백엔드 로직을 효율적으로 구현할 수 있습니다. 다음 시간에는 또 다른 유용한 CLI 도구를 소개하겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> CLI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue Composition API</title>
      <link href="/vue/24/"/>
      <url>/vue/24/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-Composition-API"><a href="#Vue-Composition-API" class="headerlink" title="Vue Composition API"></a>Vue Composition API</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 Vue3에서 도입된 <strong>Composition API</strong>에 대해 알아보겠습니다. Composition API는 Vue2의 기존 Options API에 비해 코드의 재사용성과 구성 가능성을 높이는 새로운 방식입니다.</p><h2 id="1-Composition-API란"><a href="#1-Composition-API란" class="headerlink" title="1. Composition API란?"></a>1. Composition API란?</h2><h3 id="Composition-API의-개념"><a href="#Composition-API의-개념" class="headerlink" title="Composition API의 개념"></a>Composition API의 개념</h3><p>Composition API는 Vue3에서 도입된 새로운 API로, Options API의 대안으로 제시되었습니다. 기존의 Options API는 <code>data</code>, <code>methods</code>, <code>computed</code> 등으로 로직을 분리하여 구성했지만, Composition API는 로직을 함수 단위로 재사용 가능하게 그룹화하여 구성할 수 있습니다. 이로 인해 코드의 재사용성과 가독성이 크게 향상됩니다.</p><h3 id="Composition-API의-기본-구성-요소"><a href="#Composition-API의-기본-구성-요소" class="headerlink" title="Composition API의 기본 구성 요소"></a>Composition API의 기본 구성 요소</h3><ul><li><p><strong><code>setup()</code></strong>: Composition API의 진입점으로, Vue 컴포넌트의 인스턴스가 생성되기 전에 호출됩니다. <code>setup</code> 함수 내에서 컴포넌트의 로직을 구성하고, 컴포넌트 템플릿에서 사용할 데이터와 메소드를 반환합니다.</p></li><li><p><strong><code>ref</code></strong>: 반응형 상태를 정의하는 데 사용됩니다. <code>ref</code>로 정의된 값은 <code>.value</code> 속성을 통해 접근할 수 있습니다.</p></li><li><p><strong><code>reactive</code></strong>: 객체 전체를 반응형으로 만들 때 사용됩니다. 객체의 속성들은 자동으로 반응형이 되며, 직접 <code>.value</code>를 사용하지 않고도 접근할 수 있습니다.</p></li><li><p><strong><code>computed</code></strong>: 계산된 속성을 생성하는 데 사용됩니다. 특정 상태에 의존하며, 해당 상태가 변경되면 자동으로 재계산됩니다.</p></li></ul><h3 id="Composition-API의-장점"><a href="#Composition-API의-장점" class="headerlink" title="Composition API의 장점"></a>Composition API의 장점</h3><ul><li><strong>로직의 재사용</strong>: Composition API를 사용하면 관련된 로직을 하나의 함수로 그룹화하여 재사용할 수 있습니다.</li><li><strong>더 나은 코드 구조</strong>: 기능별로 로직을 그룹화하여 코드의 가독성을 높이고, 유지보수성을 향상시킬 수 있습니다.</li><li><strong>타입스크립트와의 호환성</strong>: Composition API는 타입스크립트와 잘 맞아, 더 강력한 정적 타입 검사와 코드 완성 기능을 제공합니다.</li></ul><h2 id="2-Composition-API의-기본-사용법"><a href="#2-Composition-API의-기본-사용법" class="headerlink" title="2. Composition API의 기본 사용법"></a>2. Composition API의 기본 사용법</h2><h3 id="기본-예제"><a href="#기본-예제" class="headerlink" title="기본 예제"></a>기본 예제</h3><p>먼저 간단한 Vue3 컴포넌트를 Composition API를 사용하여 작성해보겠습니다.</p><pre><code class="highlight vue">&lt;template&gt;  &lt;div&gt;    &lt;p&gt;&#123;&#123; character.name &#125;&#125; (레벨: &#123;&#123; character.level &#125;&#125;)&lt;/p&gt;    &lt;button @click=&quot;levelUp&quot;&gt;레벨 업&lt;/button&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import &#123; ref &#125; from &quot;vue&quot;;export default &#123;  setup() &#123;    const character = ref(&#123;      name: &quot;전사&quot;,      level: 1,    &#125;);    const levelUp = () =&gt; &#123;      character.value.level++;    &#125;;    return &#123;      character,      levelUp,    &#125;;  &#125;,&#125;;&lt;/script&gt;</code></pre><h3 id="ref와-reactive의-사용"><a href="#ref와-reactive의-사용" class="headerlink" title="ref와 reactive의 사용"></a><code>ref</code>와 <code>reactive</code>의 사용</h3><p>Composition API에서는 <code>ref</code>와 <code>reactive</code>를 사용하여 반응형 데이터를 생성합니다. 이 두 가지는 각각 단일 값과 객체를 반응형으로 만드는 데 사용됩니다.</p><pre><code class="highlight javascript"><span class="keyword">import</span> &#123; ref, reactive &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;<span class="keyword">export</span> <span class="keyword">default</span> &#123;  <span class="title function_">setup</span>(<span class="params"></span>) &#123;    <span class="keyword">const</span> characterName = <span class="title function_">ref</span>(<span class="string">&quot;전사&quot;</span>);    <span class="keyword">const</span> characterStats = <span class="title function_">reactive</span>(&#123;      <span class="attr">level</span>: <span class="number">1</span>,      <span class="attr">hp</span>: <span class="number">100</span>,      <span class="attr">mp</span>: <span class="number">50</span>,    &#125;);    <span class="keyword">const</span> <span class="title function_">levelUp</span> = (<span class="params"></span>) =&gt; &#123;      characterStats.<span class="property">level</span>++;      characterStats.<span class="property">hp</span> += <span class="number">10</span>;      characterStats.<span class="property">mp</span> += <span class="number">5</span>;    &#125;;    <span class="keyword">return</span> &#123;      characterName,      characterStats,      levelUp,    &#125;;  &#125;,&#125;;</code></pre><p>위 예제에서는 <code>ref</code>를 사용해 단일 값을 반응형으로 만들고, <code>reactive</code>를 사용해 객체 전체를 반응형으로 만들었습니다.</p><h3 id="computed의-사용"><a href="#computed의-사용" class="headerlink" title="computed의 사용"></a><code>computed</code>의 사용</h3><p><code>computed</code>는 특정 상태에 의존하는 값을 자동으로 계산하여 반환합니다. 예를 들어, RPG 게임에서 캐릭터의 전투력을 계산하는 로직을 <code>computed</code>로 작성할 수 있습니다.</p><pre><code class="highlight javascript"><span class="keyword">import</span> &#123; ref, computed &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;<span class="keyword">export</span> <span class="keyword">default</span> &#123;  <span class="title function_">setup</span>(<span class="params"></span>) &#123;    <span class="keyword">const</span> strength = <span class="title function_">ref</span>(<span class="number">10</span>);    <span class="keyword">const</span> agility = <span class="title function_">ref</span>(<span class="number">8</span>);    <span class="keyword">const</span> intelligence = <span class="title function_">ref</span>(<span class="number">7</span>);    <span class="keyword">const</span> combatPower = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;      <span class="keyword">return</span> (        strength.<span class="property">value</span> * <span class="number">2</span> + agility.<span class="property">value</span> * <span class="number">1.5</span> + intelligence.<span class="property">value</span> * <span class="number">1.2</span>      );    &#125;);    <span class="keyword">return</span> &#123;      strength,      agility,      intelligence,      combatPower,    &#125;;  &#125;,&#125;;</code></pre><p>이렇게 정의된 <code>combatPower</code>는 <code>strength</code>, <code>agility</code>, <code>intelligence</code>의 값이 변경될 때마다 자동으로 재계산되어 최신 전투력을 반환합니다.</p><h2 id="3-사용-패턴"><a href="#3-사용-패턴" class="headerlink" title="3. 사용 패턴"></a>3. 사용 패턴</h2><h3 id="Composition-API를-사용할-때-고려할-점"><a href="#Composition-API를-사용할-때-고려할-점" class="headerlink" title="Composition API를 사용할 때 고려할 점"></a>Composition API를 사용할 때 고려할 점</h3><ul><li><strong>로직의 그룹화</strong>: 관련된 로직을 함수로 그룹화하여 재사용성과 가독성을 높입니다.</li><li><strong>명확한 반환</strong>: <code>setup</code> 함수에서 템플릿에서 사용할 모든 데이터와 메소드를 명확히 반환합니다.</li><li><strong>타입스크립트 사용</strong>: Composition API는 타입스크립트와 함께 사용했을 때 특히 강력합니다. 함수의 반환값과 데이터의 타입을 명확히 정의하여 안전한 코드를 작성할 수 있습니다.</li></ul><h3 id="고급-사용-예제-RPG-게임의-스킬-관리"><a href="#고급-사용-예제-RPG-게임의-스킬-관리" class="headerlink" title="고급 사용 예제: RPG 게임의 스킬 관리"></a>고급 사용 예제: RPG 게임의 스킬 관리</h3><p>이제 RPG 게임에서 여러 캐릭터의 스킬을 관리하는 고급 예제를 살펴보겠습니다.</p><pre><code class="highlight vue">&lt;template&gt;  &lt;div&gt;    &lt;h2&gt;&#123;&#123; character.name &#125;&#125;의 스킬 목록&lt;/h2&gt;    &lt;ul&gt;      &lt;li v-for=&quot;(skill, index) in character.skills&quot; :key=&quot;index&quot;&gt;        &#123;&#123; skill.name &#125;&#125; (필요 마나: &#123;&#123; skill.manaCost &#125;&#125;)        &lt;button @click=&quot;useSkill(skill)&quot;&gt;사용&lt;/button&gt;      &lt;/li&gt;    &lt;/ul&gt;    &lt;p&gt;남은 마나: &#123;&#123; character.mana &#125;&#125;&lt;/p&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import &#123; ref, reactive &#125; from &quot;vue&quot;;export default &#123;  setup() &#123;    const character = reactive(&#123;      name: &quot;마법사&quot;,      mana: 100,      skills: [        &#123; name: &quot;파이어볼&quot;, manaCost: 20 &#125;,        &#123; name: &quot;아이스 블래스트&quot;, manaCost: 25 &#125;,        &#123; name: &quot;라이트닝 볼트&quot;, manaCost: 30 &#125;,      ],    &#125;);    const useSkill = (skill) =&gt; &#123;      if (character.mana &gt;= skill.manaCost) &#123;        character.mana -= skill.manaCost;        alert(`$&#123;skill.name&#125;을(를) 사용했습니다!`);      &#125; else &#123;        alert(&quot;마나가 부족합니다.&quot;);      &#125;    &#125;;    return &#123;      character,      useSkill,    &#125;;  &#125;,&#125;;&lt;/script&gt;</code></pre><p>이 예제에서는 <code>reactive</code>를 사용해 캐릭터의 스킬과 마나를 관리하고, <code>useSkill</code> 메소드를 통해 스킬 사용 로직을 구현했습니다. 사용자는 스킬을 클릭하여 사용하고, 스킬에 필요한 마나가 충분하지 않으면 경고 메시지가 표시됩니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 Vue3의 핵심 개념 중 하나인 <strong>Composition API</strong>에 대해 알아보았습니다. Composition API는 로직을 재사용 가능하게 그룹화하고, Vue 컴포넌트의 구조를 더욱 유연하고 가독성 있게 만드는 데 도움이 됩니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript 모듈 해석과 패스 매핑</title>
      <link href="/typescript/special/17/"/>
      <url>/typescript/special/17/</url>
      
        <content type="html"><![CDATA[<h1 id="TypeScript-모듈-해석과-패스-매핑"><a href="#TypeScript-모듈-해석과-패스-매핑" class="headerlink" title="TypeScript 모듈 해석과 패스 매핑"></a>TypeScript 모듈 해석과 패스 매핑</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 TypeScript에서 모듈을 어떻게 해석하고, 프로젝트 구조를 관리하기 위해 **패스 매핑(Path Mapping)**을 사용하는 방법에 대해 알아보겠습니다. 특히 RPG 게임 개발을 예시로, TypeScript 모듈 시스템의 강력한 기능을 활용하는 방법을 자세히 알아보겠습니다.</p><h2 id="모듈-해석-규칙"><a href="#모듈-해석-규칙" class="headerlink" title="모듈 해석 규칙"></a>모듈 해석 규칙</h2><h3 id="1-모듈-해석이란"><a href="#1-모듈-해석이란" class="headerlink" title="1. 모듈 해석이란?"></a>1. 모듈 해석이란?</h3><p>TypeScript의 <strong>모듈 해석</strong>은 코드 내에서 <code>import</code>나 <code>require</code>로 모듈을 불러올 때, TypeScript가 해당 모듈을 찾는 과정입니다. TypeScript는 이 과정에서 몇 가지 규칙을 따르며, 이 규칙을 이해하는 것은 특히 대규모 프로젝트에서 모듈을 효율적으로 관리하는 데 중요합니다.</p><h3 id="2-기본-모듈-해석-규칙"><a href="#2-기본-모듈-해석-규칙" class="headerlink" title="2. 기본 모듈 해석 규칙"></a>2. 기본 모듈 해석 규칙</h3><p>TypeScript는 두 가지 모듈 해석 전략을 제공합니다:</p><ul><li><strong>Node 모듈 해석(Node module resolution)</strong>: Node.js의 모듈 해석 방식과 동일하게 동작합니다.</li><li><strong>클래식 모듈 해석(Classic module resolution)</strong>: 구 TypeScript 프로젝트와의 호환성을 위해 제공되며, 보통 Node 모듈 해석이 기본값입니다.</li></ul><h4 id="Node-모듈-해석"><a href="#Node-모듈-해석" class="headerlink" title="Node 모듈 해석"></a>Node 모듈 해석</h4><p>TypeScript는 <code>import</code>나 <code>require</code>로 모듈을 불러올 때 다음과 같은 순서로 모듈을 찾습니다:</p><ol><li><strong>파일 경로 확인</strong>: 주어진 경로가 상대 경로이거나 절대 경로인 경우 해당 파일을 찾습니다.<ul><li>예: <code>import Warrior from &quot;./warrior&quot;;</code></li></ul></li><li><strong>디렉터리 인덱스 확인</strong>: 모듈이 디렉터리인 경우, 해당 디렉터리의 <code>index.ts</code> 또는 <code>index.js</code> 파일을 찾습니다.<ul><li>예: <code>import Warrior from &quot;./warrior&quot;;</code>가 <code>./warrior/index.ts</code>로 해석될 수 있음.</li></ul></li><li><strong><code>node_modules</code> 폴더 검색</strong>: 모듈이 외부 패키지인 경우, 현재 프로젝트의 <code>node_modules</code> 디렉터리에서 모듈을 찾습니다.</li></ol><h3 id="3-모듈-해석-예제"><a href="#3-모듈-해석-예제" class="headerlink" title="3. 모듈 해석 예제"></a>3. 모듈 해석 예제</h3><p>RPG 게임에서 캐릭터 클래스를 모듈로 불러오는 예제를 살펴보겠습니다.</p><pre><code class="highlight typescript"><span class="comment">// src/classes/warrior.ts</span><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Warrior</span> &#123;  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> <span class="attr">name</span>: <span class="built_in">string</span></span>) &#123;&#125;&#125;<span class="comment">// src/main.ts</span><span class="keyword">import</span> <span class="title class_">Warrior</span> <span class="keyword">from</span> <span class="string">&quot;./classes/warrior&quot;</span>;<span class="keyword">const</span> aragorn = <span class="keyword">new</span> <span class="title class_">Warrior</span>(<span class="string">&quot;Aragorn&quot;</span>);<span class="variable language_">console</span>.<span class="title function_">log</span>(aragorn.<span class="property">name</span>); <span class="comment">// Aragorn</span></code></pre><p>위 예제에서 TypeScript는 <code>import Warrior from &quot;./classes/warrior&quot;;</code> 구문을 해석하기 위해 <code>src/classes/warrior.ts</code> 파일을 찾습니다.</p><h2 id="패스-매핑-Path-Mapping"><a href="#패스-매핑-Path-Mapping" class="headerlink" title="패스 매핑 (Path Mapping)"></a>패스 매핑 (Path Mapping)</h2><h3 id="1-패스-매핑의-필요성"><a href="#1-패스-매핑의-필요성" class="headerlink" title="1. 패스 매핑의 필요성"></a>1. 패스 매핑의 필요성</h3><p>프로젝트가 커지면서 파일 경로가 깊어지고 복잡해지면, 모듈을 <code>import</code>할 때 경로가 길어지는 문제가 발생합니다. 이러한 문제를 해결하기 위해 TypeScript는 <strong>패스 매핑(Path Mapping)</strong> 기능을 제공합니다. 이를 통해 특정 디렉터리에 별칭을 부여하거나 경로를 단순화할 수 있습니다.</p><h3 id="2-tsconfig-json에서-paths-설정"><a href="#2-tsconfig-json에서-paths-설정" class="headerlink" title="2. tsconfig.json에서 paths 설정"></a>2. <code>tsconfig.json</code>에서 <code>paths</code> 설정</h3><p>패스 매핑을 설정하려면 <code>tsconfig.json</code> 파일에서 <code>compilerOptions</code>에 <code>paths</code>와 <code>baseUrl</code> 옵션을 추가합니다.</p><ul><li><strong><code>baseUrl</code></strong>: 상대 경로의 기준이 되는 디렉터리를 지정합니다.</li><li><strong><code>paths</code></strong>: 별칭을 설정하여 특정 경로를 지정합니다.</li></ul><pre><code class="highlight json"><span class="punctuation">&#123;</span>  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>    <span class="attr">&quot;baseUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./src&quot;</span><span class="punctuation">,</span> <span class="comment">// 기본 경로 설정</span>    <span class="attr">&quot;paths&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>      <span class="attr">&quot;@classes/*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;classes/*&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="comment">// 별칭 설정</span>      <span class="attr">&quot;@utils/*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;utils/*&quot;</span><span class="punctuation">]</span>    <span class="punctuation">&#125;</span>  <span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></code></pre><h3 id="3-패스-매핑-예제"><a href="#3-패스-매핑-예제" class="headerlink" title="3. 패스 매핑 예제"></a>3. 패스 매핑 예제</h3><p>패스 매핑을 적용한 RPG 게임 예제를 살펴보겠습니다.</p><pre><code class="highlight typescript"><span class="comment">// tsconfig.json 설정</span>&#123;  <span class="string">&quot;compilerOptions&quot;</span>: &#123;    <span class="string">&quot;baseUrl&quot;</span>: <span class="string">&quot;./src&quot;</span>,    <span class="string">&quot;paths&quot;</span>: &#123;      <span class="string">&quot;@classes/*&quot;</span>: [<span class="string">&quot;classes/*&quot;</span>],      <span class="string">&quot;@utils/*&quot;</span>: [<span class="string">&quot;utils/*&quot;</span>]    &#125;  &#125;&#125;<span class="comment">// src/classes/warrior.ts</span><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Warrior</span> &#123;  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> <span class="attr">name</span>: <span class="built_in">string</span></span>) &#123;&#125;&#125;<span class="comment">// src/main.ts</span><span class="keyword">import</span> <span class="title class_">Warrior</span> <span class="keyword">from</span> <span class="string">&quot;@classes/warrior&quot;</span>;<span class="keyword">const</span> aragorn = <span class="keyword">new</span> <span class="title class_">Warrior</span>(<span class="string">&quot;Aragorn&quot;</span>);<span class="variable language_">console</span>.<span class="title function_">log</span>(aragorn.<span class="property">name</span>); <span class="comment">// Aragorn</span></code></pre><p>위 예제에서 <code>@classes/warrior</code>라는 경로 별칭을 사용해, 파일 경로를 더욱 간결하게 만들 수 있습니다. 이제 <code>import Warrior from &quot;./classes/warrior&quot;;</code> 대신 <code>import Warrior from &quot;@classes/warrior&quot;;</code>를 사용하여 모듈을 불러올 수 있습니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 TypeScript에서 <strong>모듈 해석</strong>과 <strong>패스 매핑</strong>에 대해 알아보았습니다. 모듈 해석 규칙을 이해하고, 패스 매핑을 통해 프로젝트 구조를 간결하게 관리하는 방법을 배웠습니다. 이와 같은 기능을 잘 활용하면 대규모 TypeScript 프로젝트에서도 모듈을 효율적으로 관리할 수 있습니다. 프로젝트의 복잡도가 높아질수록 이러한 기법을 통해 개발 효율성을 높여보세요!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> TS_필살기 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript 타입 선언 파일 작성 시 주의사항과 문제 해결</title>
      <link href="/typescript/troubleshooting/3/"/>
      <url>/typescript/troubleshooting/3/</url>
      
        <content type="html"><![CDATA[<h1 id="TypeScript-타입-선언-파일-작성-시-주의사항과-문제-해결"><a href="#TypeScript-타입-선언-파일-작성-시-주의사항과-문제-해결" class="headerlink" title="TypeScript 타입 선언 파일 작성 시 주의사항과 문제 해결"></a>TypeScript 타입 선언 파일 작성 시 주의사항과 문제 해결</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 TypeScript에서 타입 선언 파일을 작성할 때 주의해야 할 사항들과 발생할 수 있는 문제들을 해결하는 방법에 대해 알아보겠습니다.<br>타입 선언 파일은 외부 JavaScript 라이브러리와의 원활한 통합을 위해 필수적입니다.</p><h2 id="타입-선언-파일의-개념"><a href="#타입-선언-파일의-개념" class="headerlink" title="타입 선언 파일의 개념"></a>타입 선언 파일의 개념</h2><h3 id="타입-선언-파일이란"><a href="#타입-선언-파일이란" class="headerlink" title="타입 선언 파일이란?"></a>타입 선언 파일이란?</h3><p>타입 선언 파일(<code>.d.ts</code>)은 TypeScript가 JavaScript 코드의 타입을 이해할 수 있도록 돕는 파일입니다. 주로 JavaScript 라이브러리를 TypeScript 프로젝트에서 사용할 때, 해당 라이브러리의 타입 정보를 제공하기 위해 사용됩니다.</p><pre><code class="highlight typescript"><span class="comment">// example.d.ts</span><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&quot;example&quot;</span> &#123;  <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>): <span class="built_in">void</span>;  <span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">bar</span>: <span class="built_in">number</span>;&#125;</code></pre><h2 id="타입-선언-파일-작성-시-주의사항"><a href="#타입-선언-파일-작성-시-주의사항" class="headerlink" title="타입 선언 파일 작성 시 주의사항"></a>타입 선언 파일 작성 시 주의사항</h2><h3 id="1-정확한-타입-정의"><a href="#1-정확한-타입-정의" class="headerlink" title="1. 정확한 타입 정의"></a>1. 정확한 타입 정의</h3><p>타입 선언 파일을 작성할 때는 함수, 변수, 클래스 등의 타입을 정확하게 정의해야 합니다. 잘못된 타입 정의는 타입 체크 오류를 유발할 수 있습니다.</p><pre><code class="highlight typescript"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&quot;example&quot;</span> &#123;  <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span></span>): <span class="built_in">void</span>; <span class="comment">// 함수 인자의 타입 정의</span>  <span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">bar</span>: <span class="built_in">number</span>;&#125;</code></pre><h3 id="2-네임스페이스와-모듈-구분"><a href="#2-네임스페이스와-모듈-구분" class="headerlink" title="2. 네임스페이스와 모듈 구분"></a>2. 네임스페이스와 모듈 구분</h3><p>타입 선언 파일에서 네임스페이스와 모듈을 구분하여 정의해야 합니다. 네임스페이스는 전역 스코프에 영향을 미치고, 모듈은 파일 단위로 분리된 스코프를 가집니다.</p><pre><code class="highlight typescript"><span class="comment">// 전역 네임스페이스</span><span class="keyword">declare</span> <span class="keyword">namespace</span> <span class="title class_">ExampleNamespace</span> &#123;  <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>): <span class="built_in">void</span>;&#125;<span class="comment">// 모듈</span><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&quot;example&quot;</span> &#123;  <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>): <span class="built_in">void</span>;&#125;</code></pre><h3 id="3-오버로딩"><a href="#3-오버로딩" class="headerlink" title="3. 오버로딩"></a>3. 오버로딩</h3><p>오버로딩이 필요한 경우, 여러 버전의 함수를 정의하여 다양한 호출 방식을 지원할 수 있도록 합니다.</p><pre><code class="highlight typescript"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&quot;example&quot;</span> &#123;  <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span></span>): <span class="built_in">void</span>;  <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">age</span>: <span class="built_in">number</span></span>): <span class="built_in">void</span>;&#125;</code></pre><h2 id="문제-해결"><a href="#문제-해결" class="headerlink" title="문제 해결"></a>문제 해결</h2><h3 id="문제-1-타입-선언-파일이-인식되지-않는-경우"><a href="#문제-1-타입-선언-파일이-인식되지-않는-경우" class="headerlink" title="문제 1: 타입 선언 파일이 인식되지 않는 경우"></a>문제 1: 타입 선언 파일이 인식되지 않는 경우</h3><p>타입 선언 파일이 프로젝트에서 인식되지 않는 경우, <code>tsconfig.json</code> 파일을 확인해야 합니다. <code>include</code> 필드에 타입 선언 파일의 경로를 추가하여 TypeScript 컴파일러가 파일을 인식할 수 있도록 합니다.</p><pre><code class="highlight json"><span class="punctuation">&#123;</span>  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>    <span class="attr">&quot;outDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./lib&quot;</span><span class="punctuation">,</span>    <span class="attr">&quot;rootDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./src&quot;</span><span class="punctuation">,</span>    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;commonjs&quot;</span><span class="punctuation">,</span>    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;es6&quot;</span><span class="punctuation">,</span>    <span class="attr">&quot;esModuleInterop&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span>  <span class="punctuation">&#125;</span><span class="punctuation">,</span>  <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;src&quot;</span><span class="punctuation">,</span> <span class="string">&quot;typings&quot;</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></code></pre><h3 id="문제-2-잘못된-타입-정의로-인한-오류"><a href="#문제-2-잘못된-타입-정의로-인한-오류" class="headerlink" title="문제 2: 잘못된 타입 정의로 인한 오류"></a>문제 2: 잘못된 타입 정의로 인한 오류</h3><p>잘못된 타입 정의는 타입 체크 오류를 유발할 수 있습니다. 이를 해결하기 위해 타입을 정확하게 정의하고, 필요한 경우 <code>any</code> 타입을 사용하여 임시로 문제를 해결할 수 있습니다.</p><pre><code class="highlight typescript"><span class="comment">// 잘못된 타입 정의</span><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&quot;example&quot;</span> &#123;  <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">number</span></span>): <span class="built_in">void</span>;&#125;<span class="comment">// 수정된 타입 정의</span><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&quot;example&quot;</span> &#123;  <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span></span>): <span class="built_in">void</span>;&#125;</code></pre><h3 id="문제-3-외부-모듈의-타입-선언"><a href="#문제-3-외부-모듈의-타입-선언" class="headerlink" title="문제 3: 외부 모듈의 타입 선언"></a>문제 3: 외부 모듈의 타입 선언</h3><p>외부 모듈의 타입 선언이 제공되지 않는 경우, 직접 타입 선언 파일을 작성하거나 <code>@types</code> 패키지를 설치하여 해결할 수 있습니다.</p><pre><code class="highlight bash">npm install @types/example</code></pre><h2 id="실습-예제"><a href="#실습-예제" class="headerlink" title="실습 예제"></a>실습 예제</h2><h3 id="프로젝트-구조"><a href="#프로젝트-구조" class="headerlink" title="프로젝트 구조"></a>프로젝트 구조</h3><p>다음과 같은 프로젝트 구조를 가정합니다:</p><pre><code class="highlight bash">src/├── index.tstypings/└── example.d.ts</code></pre><h3 id="파일-내용"><a href="#파일-내용" class="headerlink" title="파일 내용"></a>파일 내용</h3><p><strong>typings&#x2F;example.d.ts</strong></p><pre><code class="highlight typescript"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&quot;example&quot;</span> &#123;  <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span></span>): <span class="built_in">void</span>;  <span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">bar</span>: <span class="built_in">number</span>;&#125;</code></pre><p><strong>src&#x2F;index.ts</strong></p><pre><code class="highlight typescript"><span class="keyword">import</span> &#123; foo, bar &#125; <span class="keyword">from</span> <span class="string">&quot;example&quot;</span>;<span class="title function_">foo</span>(<span class="string">&quot;TypeScript&quot;</span>);<span class="variable language_">console</span>.<span class="title function_">log</span>(bar);</code></pre><h3 id="TypeScript-빌드-설정"><a href="#TypeScript-빌드-설정" class="headerlink" title="TypeScript 빌드 설정"></a>TypeScript 빌드 설정</h3><p><code>tsconfig.json</code> 파일을 설정합니다.</p><pre><code class="highlight json"><span class="punctuation">&#123;</span>  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>    <span class="attr">&quot;outDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./lib&quot;</span><span class="punctuation">,</span>    <span class="attr">&quot;rootDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./src&quot;</span><span class="punctuation">,</span>    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;commonjs&quot;</span><span class="punctuation">,</span>    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;es6&quot;</span><span class="punctuation">,</span>    <span class="attr">&quot;esModuleInterop&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span>  <span class="punctuation">&#125;</span><span class="punctuation">,</span>  <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;src&quot;</span><span class="punctuation">,</span> <span class="string">&quot;typings&quot;</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></code></pre><h3 id="빌드-및-실행"><a href="#빌드-및-실행" class="headerlink" title="빌드 및 실행"></a>빌드 및 실행</h3><p>다음 명령어를 사용하여 빌드를 실행하고 결과를 확인합니다:</p><pre><code class="highlight bash">npm run buildnode lib/index.js</code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 TypeScript에서 타입 선언 파일을 작성할 때 주의해야 할 사항들과 발생할 수 있는 문제들을 해결하는 방법에 대해 알아보았습니다. 이를 통해 외부 라이브러리와의 통합을 원활하게 하고, 타입 안전성을 유지할 수 있습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> TS_트러블슈팅 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Javascript for...of 루프와 for...in 루프</title>
      <link href="/javascript/detail/7/"/>
      <url>/javascript/detail/7/</url>
      
        <content type="html"><![CDATA[<h1 id="Javascript-for-of-루프와-for-in-루프"><a href="#Javascript-for-of-루프와-for-in-루프" class="headerlink" title="Javascript for...of 루프와 for...in 루프"></a>Javascript <code>for...of</code> 루프와 <code>for...in</code> 루프</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 JavaScript에서 <code>for...of</code> 루프와 <code>for...in</code> 루프에 대해 알아보겠습니다. 이 두 가지 루프는 모두 반복문을 제공하지만, 그 사용 목적과 방식이 다릅니다. 각 루프의 사용법과 차이점을 이해하면, 상황에 맞게 더 적절한 반복문을 사용할 수 있습니다.</p><h2 id="1-for-of-루프"><a href="#1-for-of-루프" class="headerlink" title="1. for...of 루프"></a>1. <code>for...of</code> 루프</h2><h3 id="for-of-루프란"><a href="#for-of-루프란" class="headerlink" title="for...of 루프란?"></a><code>for...of</code> 루프란?</h3><p><code>for...of</code> 루프는 ES6(ECMAScript 2015)에서 도입된 새로운 반복문으로, <strong>이터러블 객체</strong>(배열, 문자열, Map, Set 등)를 순회(iterate)할 때 사용됩니다. 이터러블 객체는 내부적으로 <strong>Symbol.iterator</strong>라는 메서드를 가지고 있으며, 이 메서드를 통해 반복이 가능합니다.</p><h3 id="for-of의-기본-사용법"><a href="#for-of의-기본-사용법" class="headerlink" title="for...of의 기본 사용법"></a><code>for...of</code>의 기본 사용법</h3><p>배열과 같은 이터러블 객체를 순회할 때 <code>for...of</code> 루프를 사용할 수 있습니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];<span class="keyword">for</span> (<span class="keyword">const</span> value <span class="keyword">of</span> array) &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(value);&#125;<span class="comment">// 출력: 1, 2, 3, 4, 5</span></code></pre><p>위 예제에서 <code>for...of</code> 루프는 <code>array</code>의 각 요소를 순차적으로 가져와 <code>value</code> 변수에 할당하고, 이를 출력합니다.</p><h3 id="문자열-순회"><a href="#문자열-순회" class="headerlink" title="문자열 순회"></a>문자열 순회</h3><p>문자열도 이터러블 객체이기 때문에 <code>for...of</code> 루프를 사용해 개별 문자를 순회할 수 있습니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> str = <span class="string">&quot;Hello&quot;</span>;<span class="keyword">for</span> (<span class="keyword">const</span> char <span class="keyword">of</span> str) &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(char);&#125;<span class="comment">// 출력: H, e, l, l, o</span></code></pre><h3 id="Set과-Map-순회"><a href="#Set과-Map-순회" class="headerlink" title="Set과 Map 순회"></a>Set과 Map 순회</h3><p><code>for...of</code>는 <code>Set</code>과 <code>Map</code>과 같은 ES6의 새로운 자료구조도 순회할 수 있습니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> mySet = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]);<span class="keyword">for</span> (<span class="keyword">const</span> value <span class="keyword">of</span> mySet) &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(value);&#125;<span class="comment">// 출력: 1, 2, 3, 4, 5</span></code></pre><pre><code class="highlight javascript"><span class="keyword">const</span> myMap = <span class="keyword">new</span> <span class="title class_">Map</span>([  [<span class="string">&quot;name&quot;</span>, <span class="string">&quot;John&quot;</span>],  [<span class="string">&quot;age&quot;</span>, <span class="number">30</span>],  [<span class="string">&quot;job&quot;</span>, <span class="string">&quot;developer&quot;</span>],]);<span class="keyword">for</span> (<span class="keyword">const</span> [key, value] <span class="keyword">of</span> myMap) &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;key&#125;</span>: <span class="subst">$&#123;value&#125;</span>`</span>);&#125;<span class="comment">// 출력:</span><span class="comment">// name: John</span><span class="comment">// age: 30</span><span class="comment">// job: developer</span></code></pre><h3 id="for-of의-이점"><a href="#for-of의-이점" class="headerlink" title="for...of의 이점"></a><code>for...of</code>의 이점</h3><ul><li><strong>가독성</strong>: <code>for...of</code>는 인덱스나 키에 대한 접근 없이 이터러블의 값을 직접 다룰 수 있어 코드가 더 간결하고 가독성이 높습니다.</li><li><strong>다양한 자료구조 지원</strong>: <code>for...of</code>는 배열뿐만 아니라 문자열, Set, Map 등 다양한 이터러블 객체를 지원합니다.</li></ul><h2 id="2-for-in-루프"><a href="#2-for-in-루프" class="headerlink" title="2. for...in 루프"></a>2. <code>for...in</code> 루프</h2><h3 id="for-in-루프란"><a href="#for-in-루프란" class="headerlink" title="for...in 루프란?"></a><code>for...in</code> 루프란?</h3><p><code>for...in</code> 루프는 객체의 <strong>열거 가능한 속성</strong>(enumerable properties)을 순회할 때 사용됩니다. 즉, 객체의 키(key)를 순회할 때 주로 사용되며, 배열에서도 사용할 수 있지만 의도치 않은 동작이 발생할 수 있습니다.</p><h3 id="for-in의-기본-사용법"><a href="#for-in의-기본-사용법" class="headerlink" title="for...in의 기본 사용법"></a><code>for...in</code>의 기본 사용법</h3><p><code>for...in</code> 루프를 사용하여 객체의 모든 열거 가능한 속성을 순회할 수 있습니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> person = &#123;  <span class="attr">name</span>: <span class="string">&quot;John Doe&quot;</span>,  <span class="attr">age</span>: <span class="number">30</span>,  <span class="attr">job</span>: <span class="string">&quot;developer&quot;</span>,&#125;;<span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> person) &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;key&#125;</span>: <span class="subst">$&#123;person[key]&#125;</span>`</span>);&#125;<span class="comment">// 출력:</span><span class="comment">// name: John Doe</span><span class="comment">// age: 30</span><span class="comment">// job: developer</span></code></pre><p>위 예제에서 <code>for...in</code> 루프는 <code>person</code> 객체의 각 속성을 순회하며, 속성의 이름(key)과 그 값을 출력합니다.</p><h3 id="for-in과-배열"><a href="#for-in과-배열" class="headerlink" title="for...in과 배열"></a><code>for...in</code>과 배열</h3><p><code>for...in</code> 루프는 배열에서도 사용할 수 있지만, 배열의 인덱스를 순회하기 때문에 일반적인 배열 반복에는 권장되지 않습니다. 또한, 배열의 프로토타입에 추가된 속성까지 순회할 수 있어 예상치 못한 동작을 초래할 수 있습니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];<span class="keyword">for</span> (<span class="keyword">const</span> index <span class="keyword">in</span> array) &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(index);&#125;<span class="comment">// 출력: 0, 1, 2, 3, 4</span></code></pre><p>이 경우 <code>index</code>는 배열의 실제 값이 아닌 인덱스(키)를 나타냅니다. 따라서 배열의 값을 순회할 때는 <code>for...of</code>를 사용하는 것이 더 적합합니다.</p><h3 id="객체와-for-in"><a href="#객체와-for-in" class="headerlink" title="객체와 for...in"></a>객체와 <code>for...in</code></h3><p><code>for...in</code>은 객체의 모든 열거 가능한 속성을 순회하는 데 적합합니다. 그러나 프로토타입 체인 상의 속성까지 순회할 수 있으므로, <code>hasOwnProperty</code> 메서드를 사용해 객체 자신의 속성만 처리하도록 해야 합니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> person = &#123;  <span class="attr">name</span>: <span class="string">&quot;John Doe&quot;</span>,  <span class="attr">age</span>: <span class="number">30</span>,  <span class="attr">job</span>: <span class="string">&quot;developer&quot;</span>,&#125;;<span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> person) &#123;  <span class="keyword">if</span> (person.<span class="title function_">hasOwnProperty</span>(key)) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;key&#125;</span>: <span class="subst">$&#123;person[key]&#125;</span>`</span>);  &#125;&#125;<span class="comment">// 출력:</span><span class="comment">// name: John Doe</span><span class="comment">// age: 30</span><span class="comment">// job: developer</span></code></pre><h2 id="3-for-of와-for-in의-차이점"><a href="#3-for-of와-for-in의-차이점" class="headerlink" title="3. for...of와 for...in의 차이점"></a>3. <code>for...of</code>와 <code>for...in</code>의 차이점</h2><h3 id="기본적인-차이"><a href="#기본적인-차이" class="headerlink" title="기본적인 차이"></a>기본적인 차이</h3><ul><li><strong><code>for...of</code></strong>: 이터러블 객체(배열, 문자열, Map, Set 등)의 값을 순회합니다.</li><li><strong><code>for...in</code></strong>: 객체의 열거 가능한 속성(키)을 순회합니다.</li></ul><h3 id="배열에서의-차이점"><a href="#배열에서의-차이점" class="headerlink" title="배열에서의 차이점"></a>배열에서의 차이점</h3><pre><code class="highlight javascript"><span class="keyword">const</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];<span class="keyword">for</span> (<span class="keyword">const</span> value <span class="keyword">of</span> array) &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(value);&#125;<span class="comment">// 출력: 1, 2, 3, 4, 5</span><span class="keyword">for</span> (<span class="keyword">const</span> index <span class="keyword">in</span> array) &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(index);&#125;<span class="comment">// 출력: 0, 1, 2, 3, 4</span></code></pre><ul><li><code>for...of</code>는 배열의 값을 순회합니다.</li><li><code>for...in</code>은 배열의 인덱스를 순회합니다.</li></ul><h3 id="객체에서의-차이점"><a href="#객체에서의-차이점" class="headerlink" title="객체에서의 차이점"></a>객체에서의 차이점</h3><p><code>for...of</code>는 이터러블 객체에서만 사용 가능하므로, 객체를 순회할 때는 주로 <code>for...in</code>을 사용합니다.</p><h2 id="4-마무리"><a href="#4-마무리" class="headerlink" title="4. 마무리"></a>4. 마무리</h2><p>이번 시간에는 Javascript에서 <code>for...of</code> 루프와 <code>for...in</code> 루프의 차이점과 사용법에 대해 알아보았습니다. <code>for...of</code>는 이터러블 객체의 값을 순회하는 데 적합하며, <code>for...in</code>은 객체의 열거 가능한 속성을 순회하는 데 적합합니다.<br>이 두 가지 루프를 상황에 맞게 적절히 사용하여 코드의 가독성과 효율성을 높여보세요!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> JS_디테일 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 비동기 반복(iteration) - for-await-of 루프</title>
      <link href="/javascript/special/8/"/>
      <url>/javascript/special/8/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-비동기-반복-iteration-for-await-of-루프"><a href="#JavaScript-비동기-반복-iteration-for-await-of-루프" class="headerlink" title="JavaScript 비동기 반복(iteration): for-await-of 루프"></a>JavaScript 비동기 반복(iteration): for-await-of 루프</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!</p><p>JavaScript에서 비동기 작업을 처리하는 방법 중 하나로, 비동기 반복(iteration)을 사용할 수 있습니다.<br>ES2018에서 도입된 <code>for-await-of</code> 루프는 비동기 반복 작업을 간편하게 처리할 수 있도록 도와줍니다.<br>이번 시간에는 비동기 반복의 개념, <code>for-await-of</code> 루프를 사용하는 방법, 그리고 이를 활용한 예제를 설명합니다.</p><h2 id="비동기-반복의-개념"><a href="#비동기-반복의-개념" class="headerlink" title="비동기 반복의 개념"></a>비동기 반복의 개념</h2><p>비동기 반복(iteration)은 비동기 작업이 순차적으로 완료될 때까지 기다리며 반복 작업을 수행하는 것을 의미합니다. 이는 특히 네트워크 요청, 파일 읽기&#x2F;쓰기 등과 같은 시간이 걸리는 작업을 처리할 때 유용합니다. 기존의 <code>for-of</code> 루프는 동기적으로 작동하기 때문에, 비동기 작업을 처리하기 위해서는 <code>for-await-of</code> 루프를 사용해야 합니다.</p><h2 id="for-await-of-루프-사용-방법"><a href="#for-await-of-루프-사용-방법" class="headerlink" title="for-await-of 루프 사용 방법"></a>for-await-of 루프 사용 방법</h2><p><code>for-await-of</code> 루프는 비동기 반복을 쉽게 처리할 수 있는 문법입니다. <code>async</code> 함수 내에서만 사용할 수 있으며, 프로미스가 반환된 값을 기다린 후 반복 작업을 수행합니다.</p><h3 id="기본-문법"><a href="#기본-문법" class="headerlink" title="기본 문법"></a>기본 문법</h3><pre><code class="highlight javascript"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">processAsyncIterable</span>(<span class="params">iterable</span>) &#123;  <span class="keyword">for</span> <span class="title function_">await</span> (<span class="keyword">const</span> item <span class="keyword">of</span> iterable) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(item);  &#125;&#125;</code></pre><p>위 코드에서 <code>processAsyncIterable</code> 함수는 비동기 반복 가능한 객체(iterable)를 받아, 각 항목을 출력합니다.</p><h2 id="예제"><a href="#예제" class="headerlink" title="예제"></a>예제</h2><h3 id="예제-1-비동기-API-호출-처리"><a href="#예제-1-비동기-API-호출-처리" class="headerlink" title="예제 1: 비동기 API 호출 처리"></a>예제 1: 비동기 API 호출 처리</h3><p>다음은 <code>for-await-of</code> 루프를 사용하여 여러 비동기 API 호출을 순차적으로 처리하는 예제입니다.</p><pre><code class="highlight javascript"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params">url</span>) &#123;  <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(url);  <span class="keyword">const</span> data = <span class="keyword">await</span> response.<span class="title function_">json</span>();  <span class="keyword">return</span> data;&#125;<span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">processUrls</span>(<span class="params">urls</span>) &#123;  <span class="keyword">for</span> <span class="title function_">await</span> (<span class="keyword">const</span> url <span class="keyword">of</span> urls) &#123;    <span class="keyword">try</span> &#123;      <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="title function_">fetchData</span>(url);      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Data:&quot;</span>, data);    &#125; <span class="keyword">catch</span> (error) &#123;      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;Error fetching data from&quot;</span>, url, <span class="string">&quot;:&quot;</span>, error);    &#125;  &#125;&#125;<span class="keyword">const</span> urls = [  <span class="string">&quot;&lt;https://api.example.com/data1&gt;&quot;</span>,  <span class="string">&quot;&lt;https://api.example.com/data2&gt;&quot;</span>,  <span class="string">&quot;&lt;https://api.example.com/data3&gt;&quot;</span>,];<span class="title function_">processUrls</span>(urls);</code></pre><p>위 예제에서 <code>processUrls</code> 함수는 URL 목록을 받아, 각 URL에 대해 데이터를 가져오고 출력합니다. 각 URL에 대해 <code>fetchData</code> 함수를 호출하며, 데이터를 가져오는 동안 <code>for-await-of</code> 루프는 해당 작업이 완료될 때까지 기다립니다.</p><h3 id="예제-2-비동기-스트림-처리"><a href="#예제-2-비동기-스트림-처리" class="headerlink" title="예제 2: 비동기 스트림 처리"></a>예제 2: 비동기 스트림 처리</h3><p><code>for-await-of</code> 루프는 비동기 스트림을 처리하는 데에도 유용합니다. 다음은 Node.js의 파일 시스템 모듈을 사용하여 파일을 비동기적으로 읽는 예제입니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);<span class="keyword">const</span> readline = <span class="built_in">require</span>(<span class="string">&quot;readline&quot;</span>);<span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">processFile</span>(<span class="params">filePath</span>) &#123;  <span class="keyword">const</span> fileStream = fs.<span class="title function_">createReadStream</span>(filePath);  <span class="keyword">const</span> rl = readline.<span class="title function_">createInterface</span>(&#123;    <span class="attr">input</span>: fileStream,    <span class="attr">crlfDelay</span>: <span class="title class_">Infinity</span>,  &#125;);  <span class="keyword">for</span> <span class="title function_">await</span> (<span class="keyword">const</span> line <span class="keyword">of</span> rl) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Line from file: <span class="subst">$&#123;line&#125;</span>`</span>);  &#125;&#125;<span class="title function_">processFile</span>(<span class="string">&quot;path/to/file.txt&quot;</span>);</code></pre><p>위 예제에서 <code>processFile</code> 함수는 주어진 파일을 비동기적으로 읽어 각 줄을 출력합니다. <code>readline</code> 모듈을 사용하여 파일 스트림을 비동기적으로 처리하며, <code>for-await-of</code> 루프를 사용하여 각 줄이 읽힐 때까지 기다립니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>JavaScript에서 비동기 반복 작업을 처리할 때 <code>for-await-of</code> 루프는 매우 유용한 도구입니다. 이를 사용하면 비동기 작업을 순차적으로 처리할 수 있으며, 코드의 가독성과 유지보수성을 높일 수 있습니다. 비동기 API 호출, 파일 읽기 등 다양한 상황에서 <code>for-await-of</code> 루프를 활용하여 효율적인 비동기 코드를 작성해 보세요!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> JS_필살기 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript 메타프로그래밍</title>
      <link href="/typescript/special/16/"/>
      <url>/typescript/special/16/</url>
      
        <content type="html"><![CDATA[<h1 id="TypeScript-메타프로그래밍"><a href="#TypeScript-메타프로그래밍" class="headerlink" title="TypeScript 메타프로그래밍"></a>TypeScript 메타프로그래밍</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 TypeScript의 고급 기능 중 하나인 <strong>메타프로그래밍</strong>에 대해 알아보겠습니다. 메타프로그래밍이란 코드를 작성하는 코드, 즉 코드 자체를 동적으로 생성하거나 변형하는 기법을 의미합니다. TypeScript에서는 주로 <strong>조건부 타입</strong>과 <strong>제네릭</strong>을 사용해 복잡한 타입 연산을 수행하는 메타프로그래밍을 구현할 수 있습니다.</p><h2 id="조건부-타입-Conditional-Types"><a href="#조건부-타입-Conditional-Types" class="headerlink" title="조건부 타입 (Conditional Types)"></a>조건부 타입 (Conditional Types)</h2><h3 id="1-조건부-타입의-개념"><a href="#1-조건부-타입의-개념" class="headerlink" title="1. 조건부 타입의 개념"></a>1. 조건부 타입의 개념</h3><p>조건부 타입은 TypeScript에서 특정 조건에 따라 타입을 선택할 수 있는 기능입니다. 조건부 타입의 기본 형식은 다음과 같습니다:</p><pre><code class="highlight typescript">T <span class="keyword">extends</span> U ? X : Y</code></pre><p>위 구문에서 <code>T</code>가 <code>U</code> 타입에 할당 가능하면 <code>X</code> 타입을, 그렇지 않으면 <code>Y</code> 타입을 반환합니다. 조건부 타입을 사용하면 타입 시스템 내에서 복잡한 조건을 표현할 수 있습니다.</p><h3 id="2-조건부-타입-예제"><a href="#2-조건부-타입-예제" class="headerlink" title="2. 조건부 타입 예제"></a>2. 조건부 타입 예제</h3><p>RPG 게임에서 캐릭터가 특정 무기를 사용할 수 있는지 여부에 따라 다른 동작을 수행하도록 하는 예제를 살펴보겠습니다.</p><pre><code class="highlight typescript"><span class="keyword">type</span> <span class="title class_">WeaponType</span> = <span class="string">&quot;sword&quot;</span> | <span class="string">&quot;bow&quot;</span> | <span class="string">&quot;staff&quot;</span>;<span class="keyword">type</span> <span class="title class_">WarriorWeapon</span> = <span class="string">&quot;sword&quot;</span>;<span class="keyword">type</span> <span class="title class_">MageWeapon</span> = <span class="string">&quot;staff&quot;</span>;<span class="keyword">type</span> <span class="title class_">CanUseWeapon</span>&lt;T <span class="keyword">extends</span> <span class="title class_">WeaponType</span>&gt; = T <span class="keyword">extends</span> <span class="title class_">WarriorWeapon</span>  ? <span class="string">&quot;Warrior&quot;</span>  : T <span class="keyword">extends</span> <span class="title class_">MageWeapon</span>  ? <span class="string">&quot;Mage&quot;</span>  : <span class="string">&quot;Cannot use this weapon&quot;</span>;<span class="comment">// 예시 사용</span><span class="keyword">type</span> <span class="title class_">WarriorWithSword</span> = <span class="title class_">CanUseWeapon</span>&lt;<span class="string">&quot;sword&quot;</span>&gt;; <span class="comment">// Warrior</span><span class="keyword">type</span> <span class="title class_">MageWithStaff</span> = <span class="title class_">CanUseWeapon</span>&lt;<span class="string">&quot;staff&quot;</span>&gt;; <span class="comment">// Mage</span><span class="keyword">type</span> <span class="title class_">WarriorWithBow</span> = <span class="title class_">CanUseWeapon</span>&lt;<span class="string">&quot;bow&quot;</span>&gt;; <span class="comment">// Cannot use this weapon</span></code></pre><p>위 예제에서는 <code>CanUseWeapon</code>이라는 조건부 타입을 정의하여, 주어진 무기에 따라 사용할 수 있는 캐릭터 타입을 결정합니다. 이 타입은 조건에 따라 다른 문자열 리터럴 타입을 반환합니다.</p><h2 id="분산-조건부-타입-Distributive-Conditional-Types"><a href="#분산-조건부-타입-Distributive-Conditional-Types" class="headerlink" title="분산 조건부 타입 (Distributive Conditional Types)"></a>분산 조건부 타입 (Distributive Conditional Types)</h2><h3 id="1-분산-조건부-타입의-개념"><a href="#1-분산-조건부-타입의-개념" class="headerlink" title="1. 분산 조건부 타입의 개념"></a>1. 분산 조건부 타입의 개념</h3><p>분산 조건부 타입은 유니언 타입에 조건부 타입을 적용할 때, 각각의 유니언 멤버에 대해 조건부 타입을 분산하여 적용하는 기능입니다. 이는 TypeScript의 유니언 타입이 조건부 타입을 통해 자동으로 분산(distribute)되기 때문에 발생합니다.</p><pre><code class="highlight typescript"><span class="keyword">type</span> <span class="title class_">ToArray</span>&lt;T&gt; = T <span class="keyword">extends</span> <span class="built_in">any</span> ? T[] : <span class="built_in">never</span>;<span class="comment">// 예시 사용</span><span class="keyword">type</span> <span class="title class_">StringArrayOrNumberArray</span> = <span class="title class_">ToArray</span>&lt;<span class="built_in">string</span> | <span class="built_in">number</span>&gt;; <span class="comment">// string[] | number[]</span></code></pre><p>위 예제에서 <code>ToArray&lt;string | number&gt;</code>는 <code>string[] | number[]</code>로 분산됩니다. 이는 유니언 타입이 분해되어 각 멤버에 조건부 타입이 적용된 결과입니다.</p><h3 id="2-분산-조건부-타입-예제"><a href="#2-분산-조건부-타입-예제" class="headerlink" title="2. 분산 조건부 타입 예제"></a>2. 분산 조건부 타입 예제</h3><p>RPG 게임에서 다양한 캐릭터 클래스에 대한 능력치를 각각의 배열로 반환하는 타입을 정의해보겠습니다.</p><pre><code class="highlight typescript"><span class="keyword">type</span> <span class="title class_">CharacterClass</span> = <span class="string">&quot;Warrior&quot;</span> | <span class="string">&quot;Mage&quot;</span> | <span class="string">&quot;Rogue&quot;</span>;<span class="keyword">type</span> <span class="title class_">CharacterStats</span>&lt;T <span class="keyword">extends</span> <span class="title class_">CharacterClass</span>&gt; = T <span class="keyword">extends</span> <span class="string">&quot;Warrior&quot;</span>  ? &#123; <span class="attr">strength</span>: <span class="built_in">number</span> &#125;  : T <span class="keyword">extends</span> <span class="string">&quot;Mage&quot;</span>  ? &#123; <span class="attr">intelligence</span>: <span class="built_in">number</span> &#125;  : T <span class="keyword">extends</span> <span class="string">&quot;Rogue&quot;</span>  ? &#123; <span class="attr">agility</span>: <span class="built_in">number</span> &#125;  : <span class="built_in">never</span>;<span class="keyword">type</span> <span class="title class_">CharacterStatArray</span> = <span class="title class_">CharacterStats</span>&lt;<span class="string">&quot;Warrior&quot;</span> | <span class="string">&quot;Mage&quot;</span>&gt;;<span class="comment">// &#123; strength: number &#125; | &#123; intelligence: number &#125;</span></code></pre><p>위 예제에서는 <code>CharacterStats</code> 타입이 주어진 캐릭터 클래스에 따라 각기 다른 능력치 타입을 반환합니다. <code>CharacterStats&lt;&quot;Warrior&quot; | &quot;Mage&quot;&gt;</code>는 <code>Warrior</code>와 <code>Mage</code>의 능력치를 각각 분산 조건부 타입으로 처리하여 유니언 타입으로 반환합니다.</p><h2 id="제네릭을-사용한-복잡한-타입-연산"><a href="#제네릭을-사용한-복잡한-타입-연산" class="headerlink" title="제네릭을 사용한 복잡한 타입 연산"></a>제네릭을 사용한 복잡한 타입 연산</h2><h3 id="1-제네릭의-기본-개념"><a href="#1-제네릭의-기본-개념" class="headerlink" title="1. 제네릭의 기본 개념"></a>1. 제네릭의 기본 개념</h3><p>제네릭은 TypeScript에서 타입을 파라미터화하여 재사용성을 높이는 강력한 기능입니다. 제네릭을 사용하면 함수나 클래스, 인터페이스 등에서 다양한 타입을 동적으로 다룰 수 있습니다.</p><h3 id="2-제네릭-조건부-타입-예제"><a href="#2-제네릭-조건부-타입-예제" class="headerlink" title="2. 제네릭 조건부 타입 예제"></a>2. 제네릭 조건부 타입 예제</h3><p>RPG 게임에서 무기와 방어구의 속성 타입을 결합하여 새로운 아이템 타입을 생성하는 예제를 살펴보겠습니다.</p><pre><code class="highlight typescript"><span class="keyword">type</span> <span class="title class_">Weapon</span> = &#123; <span class="attr">attack</span>: <span class="built_in">number</span> &#125;;<span class="keyword">type</span> <span class="title class_">Armor</span> = &#123; <span class="attr">defense</span>: <span class="built_in">number</span> &#125;;<span class="keyword">type</span> <span class="title class_">CombineItems</span>&lt;W <span class="keyword">extends</span> <span class="title class_">Weapon</span>, A <span class="keyword">extends</span> <span class="title class_">Armor</span>&gt; = &#123;  <span class="attr">name</span>: <span class="built_in">string</span>;  <span class="attr">attack</span>: W[<span class="string">&quot;attack&quot;</span>];  <span class="attr">defense</span>: A[<span class="string">&quot;defense&quot;</span>];&#125;;<span class="keyword">type</span> <span class="title class_">SwordAndShield</span> = <span class="title class_">CombineItems</span>&lt;&#123; <span class="attr">attack</span>: <span class="number">50</span> &#125;, &#123; <span class="attr">defense</span>: <span class="number">30</span> &#125;&gt;;<span class="comment">// &#123; name: string; attack: 50; defense: 30; &#125;</span></code></pre><p>위 예제에서는 <code>CombineItems</code>라는 제네릭 타입을 사용하여 무기와 방어구의 속성을 결합한 새로운 아이템 타입을 생성합니다. 제네릭을 사용함으로써 타입을 더욱 유연하고 재사용 가능하게 만들 수 있습니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 TypeScript에서 메타프로그래밍을 구현하는 방법, 특히 조건부 타입, 분산 조건부 타입, 제네릭을 사용한 복잡한 타입 연산에 대해 알아보았습니다. 이러한 고급 기능을 통해 TypeScript의 타입 시스템을 최대한 활용하여 더욱 안전하고 유연한 코드를 작성할 수 있습니다. 메타프로그래밍을 활용하여 복잡한 타입 로직을 효과적으로 관리해보세요!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> TS_필살기 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TypeORM을 사용한 DB 연동 및 쿼리 빌딩</title>
      <link href="/database/10/"/>
      <url>/database/10/</url>
      
        <content type="html"><![CDATA[<h1 id="TypeORM을-사용한-DB-연동-및-쿼리-빌딩"><a href="#TypeORM을-사용한-DB-연동-및-쿼리-빌딩" class="headerlink" title="TypeORM을 사용한 DB 연동 및 쿼리 빌딩"></a>TypeORM을 사용한 DB 연동 및 쿼리 빌딩</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br><a href="/database/basic/9">이전 글</a>에서는 TypeORM을 사용한 데이터베이스 마이그레이션과 시드 작업에 대해 알아보았습니다. 이번 시간에는 TypeORM의 또 다른 주요 기능인 쿼리 빌딩과 객체 지향적으로 데이터베이스에 접근하는 방법에 대해 알아보겠습니다.</p><h2 id="TypeORM의-주요-기능"><a href="#TypeORM의-주요-기능" class="headerlink" title="TypeORM의 주요 기능"></a>TypeORM의 주요 기능</h2><h3 id="ORM의-개념-복습"><a href="#ORM의-개념-복습" class="headerlink" title="ORM의 개념 복습"></a>ORM의 개념 복습</h3><p>ORM(Object-Relational Mapping)은 객체 지향 프로그래밍 언어를 사용하여 관계형 데이터베이스를 관리할 수 있게 해주는 기술입니다. 이를 통해 SQL 쿼리를 직접 작성하지 않고도 데이터베이스와 상호작용할 수 있습니다.</p><h3 id="TypeORM의-주요-기능-1"><a href="#TypeORM의-주요-기능-1" class="headerlink" title="TypeORM의 주요 기능"></a>TypeORM의 주요 기능</h3><ul><li><strong>엔티티(Entity) 관리</strong>: 데이터베이스 테이블을 클래스처럼 다룰 수 있습니다.</li><li><strong>쿼리 빌더(Query Builder)</strong>: SQL 쿼리를 객체 지향적으로 작성할 수 있습니다.</li><li><strong>레포지토리(Repository) 패턴</strong>: 데이터베이스 접근을 캡슐화하여 코드의 재사용성과 유지보수성을 높입니다.</li></ul><h2 id="엔티티-관리"><a href="#엔티티-관리" class="headerlink" title="엔티티 관리"></a>엔티티 관리</h2><p>TypeORM을 사용하면 데이터베이스 테이블을 클래스로 정의할 수 있습니다. 이 클래스를 **엔티티(Entity)**라고 부릅니다. 엔티티는 데이터베이스의 테이블과 매핑되며, 클래스의 속성은 테이블의 컬럼에 매핑됩니다.</p><h3 id="엔티티-정의"><a href="#엔티티-정의" class="headerlink" title="엔티티 정의"></a>엔티티 정의</h3><p>예제 프로젝트에서 RPG 게임의 캐릭터와 아이템을 나타내는 엔티티를 정의해보겠습니다.</p><p><strong>src&#x2F;entity&#x2F;Character.ts</strong></p><pre><code class="highlight typescript"><span class="keyword">import</span> &#123; <span class="title class_">Entity</span>, <span class="title class_">PrimaryGeneratedColumn</span>, <span class="title class_">Column</span>, <span class="title class_">OneToMany</span> &#125; <span class="keyword">from</span> <span class="string">&quot;typeorm&quot;</span>;<span class="keyword">import</span> &#123; <span class="title class_">Item</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./Item&quot;</span>;<span class="meta">@Entity</span>()<span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Character</span> &#123;  <span class="meta">@PrimaryGeneratedColumn</span>()  <span class="attr">id</span>: <span class="built_in">number</span>;  <span class="meta">@Column</span>()  <span class="attr">name</span>: <span class="built_in">string</span>;  <span class="meta">@Column</span>()  <span class="attr">level</span>: <span class="built_in">number</span>;  <span class="meta">@OneToMany</span>(<span class="function">() =&gt;</span> <span class="title class_">Item</span>, <span class="function">(<span class="params">item</span>) =&gt;</span> item.<span class="property">character</span>)  <span class="attr">items</span>: <span class="title class_">Item</span>[];&#125;</code></pre><p><strong>src&#x2F;entity&#x2F;Item.ts</strong></p><pre><code class="highlight typescript"><span class="keyword">import</span> &#123; <span class="title class_">Entity</span>, <span class="title class_">PrimaryGeneratedColumn</span>, <span class="title class_">Column</span>, <span class="title class_">ManyToOne</span> &#125; <span class="keyword">from</span> <span class="string">&quot;typeorm&quot;</span>;<span class="keyword">import</span> &#123; <span class="title class_">Character</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./Character&quot;</span>;<span class="meta">@Entity</span>()<span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Item</span> &#123;  <span class="meta">@PrimaryGeneratedColumn</span>()  <span class="attr">id</span>: <span class="built_in">number</span>;  <span class="meta">@Column</span>()  <span class="attr">name</span>: <span class="built_in">string</span>;  <span class="meta">@Column</span>()  <span class="attr">power</span>: <span class="built_in">number</span>;  <span class="meta">@ManyToOne</span>(<span class="function">() =&gt;</span> <span class="title class_">Character</span>, <span class="function">(<span class="params">character</span>) =&gt;</span> character.<span class="property">items</span>)  <span class="attr">character</span>: <span class="title class_">Character</span>;&#125;</code></pre><h2 id="레포지토리-패턴을-통한-데이터베이스-접근"><a href="#레포지토리-패턴을-통한-데이터베이스-접근" class="headerlink" title="레포지토리 패턴을 통한 데이터베이스 접근"></a>레포지토리 패턴을 통한 데이터베이스 접근</h2><p>TypeORM은 레포지토리 패턴을 지원하여 데이터베이스 접근을 캡슐화합니다. 이를 통해 코드의 재사용성과 유지보수성을 높일 수 있습니다.</p><h3 id="레포지토리-사용-예제"><a href="#레포지토리-사용-예제" class="headerlink" title="레포지토리 사용 예제"></a>레포지토리 사용 예제</h3><p><strong>캐릭터 생성</strong></p><pre><code class="highlight typescript"><span class="keyword">import</span> &#123; createConnection &#125; <span class="keyword">from</span> <span class="string">&quot;typeorm&quot;</span>;<span class="keyword">import</span> &#123; <span class="title class_">Character</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./entity/Character&quot;</span>;<span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">createCharacter</span>(<span class="params"></span>) &#123;  <span class="keyword">const</span> connection = <span class="keyword">await</span> <span class="title function_">createConnection</span>();  <span class="keyword">const</span> characterRepository = connection.<span class="title function_">getRepository</span>(<span class="title class_">Character</span>);  <span class="keyword">const</span> newCharacter = <span class="keyword">new</span> <span class="title class_">Character</span>();  newCharacter.<span class="property">name</span> = <span class="string">&quot;마법사&quot;</span>;  newCharacter.<span class="property">level</span> = <span class="number">5</span>;  newCharacter.<span class="property">items</span> = [];  <span class="keyword">await</span> characterRepository.<span class="title function_">save</span>(newCharacter);  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;새 캐릭터가 저장되었습니다.&quot;</span>);  <span class="keyword">await</span> connection.<span class="title function_">close</span>();&#125;<span class="title function_">createCharacter</span>().<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(error));</code></pre><p><strong>캐릭터 조회</strong></p><pre><code class="highlight typescript"><span class="keyword">import</span> &#123; createConnection &#125; <span class="keyword">from</span> <span class="string">&quot;typeorm&quot;</span>;<span class="keyword">import</span> &#123; <span class="title class_">Character</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./entity/Character&quot;</span>;<span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getCharacterByName</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span></span>) &#123;  <span class="keyword">const</span> connection = <span class="keyword">await</span> <span class="title function_">createConnection</span>();  <span class="keyword">const</span> characterRepository = connection.<span class="title function_">getRepository</span>(<span class="title class_">Character</span>);  <span class="keyword">const</span> character = <span class="keyword">await</span> characterRepository.<span class="title function_">findOne</span>(&#123; <span class="attr">where</span>: &#123; name &#125; &#125;);  <span class="variable language_">console</span>.<span class="title function_">log</span>(character);  <span class="keyword">await</span> connection.<span class="title function_">close</span>();&#125;<span class="title function_">getCharacterByName</span>(<span class="string">&quot;마법사&quot;</span>).<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(error));</code></pre><h2 id="쿼리-빌더를-사용한-쿼리-작성"><a href="#쿼리-빌더를-사용한-쿼리-작성" class="headerlink" title="쿼리 빌더를 사용한 쿼리 작성"></a>쿼리 빌더를 사용한 쿼리 작성</h2><p>TypeORM의 쿼리 빌더를 사용하면 객체 지향적으로 SQL 쿼리를 작성할 수 있습니다. 이를 통해 복잡한 쿼리도 쉽게 작성할 수 있습니다.</p><h3 id="쿼리-빌더-사용-예제"><a href="#쿼리-빌더-사용-예제" class="headerlink" title="쿼리 빌더 사용 예제"></a>쿼리 빌더 사용 예제</h3><p><strong>모든 캐릭터 조회</strong></p><pre><code class="highlight typescript"><span class="keyword">import</span> &#123; createConnection &#125; <span class="keyword">from</span> <span class="string">&quot;typeorm&quot;</span>;<span class="keyword">import</span> &#123; <span class="title class_">Character</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./entity/Character&quot;</span>;<span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getAllCharacters</span>(<span class="params"></span>) &#123;  <span class="keyword">const</span> connection = <span class="keyword">await</span> <span class="title function_">createConnection</span>();  <span class="keyword">const</span> characterRepository = connection.<span class="title function_">getRepository</span>(<span class="title class_">Character</span>);  <span class="keyword">const</span> characters = <span class="keyword">await</span> characterRepository    .<span class="title function_">createQueryBuilder</span>(<span class="string">&quot;character&quot;</span>)    .<span class="title function_">getMany</span>();  <span class="variable language_">console</span>.<span class="title function_">log</span>(characters);  <span class="keyword">await</span> connection.<span class="title function_">close</span>();&#125;<span class="title function_">getAllCharacters</span>().<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(error));</code></pre><p><strong>특정 조건의 캐릭터 조회</strong></p><pre><code class="highlight typescript"><span class="keyword">import</span> &#123; createConnection &#125; <span class="keyword">from</span> <span class="string">&quot;typeorm&quot;</span>;<span class="keyword">import</span> &#123; <span class="title class_">Character</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./entity/Character&quot;</span>;<span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getCharactersByLevel</span>(<span class="params"><span class="attr">minLevel</span>: <span class="built_in">number</span></span>) &#123;  <span class="keyword">const</span> connection = <span class="keyword">await</span> <span class="title function_">createConnection</span>();  <span class="keyword">const</span> characterRepository = connection.<span class="title function_">getRepository</span>(<span class="title class_">Character</span>);  <span class="keyword">const</span> characters = <span class="keyword">await</span> characterRepository    .<span class="title function_">createQueryBuilder</span>(<span class="string">&quot;character&quot;</span>)    .<span class="title function_">where</span>(<span class="string">&quot;character.level &gt;= :minLevel&quot;</span>, &#123; minLevel &#125;)    .<span class="title function_">getMany</span>();  <span class="variable language_">console</span>.<span class="title function_">log</span>(characters);  <span class="keyword">await</span> connection.<span class="title function_">close</span>();&#125;<span class="title function_">getCharactersByLevel</span>(<span class="number">10</span>).<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(error));</code></pre><h2 id="정리"><a href="#정리" class="headerlink" title="정리"></a>정리</h2><p>이번 시간에는 TypeORM을 사용하여 쿼리 빌딩과 데이터베이스에 객체 지향적으로 접근하는 방법에 대해 알아보았습니다.<br>TypeORM은 엔티티를 통해 데이터베이스 테이블을 객체로 다루고, 레포지토리 패턴을 통해 데이터베이스 접근을 캡슐화하며, 쿼리 빌더를 통해 복잡한 쿼리도 쉽게 작성할 수 있습니다.<br>이를 통해 더 효율적이고 유지보수하기 쉬운 코드를 작성할 수 있습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> database </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TypeORM을 사용한 DB 마이그레이션 및 시드 작업</title>
      <link href="/database/9/"/>
      <url>/database/9/</url>
      
        <content type="html"><![CDATA[<h1 id="TypeORM을-사용한-DB-마이그레이션-및-시드-작업"><a href="#TypeORM을-사용한-DB-마이그레이션-및-시드-작업" class="headerlink" title="TypeORM을 사용한 DB 마이그레이션 및 시드 작업"></a>TypeORM을 사용한 DB 마이그레이션 및 시드 작업</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 데이터베이스 마이그레이션과 시드 작업에 대해 알아보겠습니다. 이를 위해 ORM(Object-Relational Mapping) 프레임워크 중 하나인 TypeORM을 사용하여 실습을 진행하겠습니다.</p><h2 id="ORM과-데이터베이스-생성"><a href="#ORM과-데이터베이스-생성" class="headerlink" title="ORM과 데이터베이스 생성"></a>ORM과 데이터베이스 생성</h2><h3 id="ORM-Object-Relational-Mapping-의-개념"><a href="#ORM-Object-Relational-Mapping-의-개념" class="headerlink" title="ORM(Object-Relational Mapping)의 개념"></a>ORM(Object-Relational Mapping)의 개념</h3><p>ORM은 객체 지향 프로그래밍 언어를 사용하여 관계형 데이터베이스를 관리할 수 있게 해주는 기술입니다. ORM을 사용하면 데이터베이스의 테이블을 클래스처럼 다룰 수 있어, SQL 쿼리를 직접 작성하지 않고도 데이터베이스와 상호작용할 수 있습니다.</p><h3 id="주요-ORM-프레임워크"><a href="#주요-ORM-프레임워크" class="headerlink" title="주요 ORM 프레임워크"></a>주요 ORM 프레임워크</h3><ul><li><strong>Sequelize</strong>: Node.js 환경에서 많이 사용되는 ORM으로, MySQL, PostgreSQL, SQLite 등을 지원합니다.</li><li><strong>TypeORM</strong>: TypeScript와 함께 사용하기에 최적화된 ORM으로, MySQL, PostgreSQL, SQLite 등을 지원합니다.</li></ul><h3 id="ORM을-사용한-데이터베이스-생성"><a href="#ORM을-사용한-데이터베이스-생성" class="headerlink" title="ORM을 사용한 데이터베이스 생성"></a>ORM을 사용한 데이터베이스 생성</h3><p>이번 실습에서는 TypeORM을 사용하여 데이터베이스를 생성하고 관리하는 방법을 알아보겠습니다.</p><h4 id="TypeORM-설치-및-설정"><a href="#TypeORM-설치-및-설정" class="headerlink" title="TypeORM 설치 및 설정"></a>TypeORM 설치 및 설정</h4><p>먼저 TypeORM과 필요한 패키지를 설치합니다.</p><pre><code class="highlight bash">npm install typeorm mysql2</code></pre><p>TypeORM 설정 파일을 생성합니다.</p><p><strong>ormconfig.json</strong></p><pre><code class="highlight json"><span class="punctuation">&#123;</span>  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mysql&quot;</span><span class="punctuation">,</span>  <span class="attr">&quot;host&quot;</span><span class="punctuation">:</span> <span class="string">&quot;localhost&quot;</span><span class="punctuation">,</span>  <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="number">3306</span><span class="punctuation">,</span>  <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;root&quot;</span><span class="punctuation">,</span>  <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;password&quot;</span><span class="punctuation">,</span>  <span class="attr">&quot;database&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rpg_game&quot;</span><span class="punctuation">,</span>  <span class="attr">&quot;synchronize&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span>  <span class="attr">&quot;logging&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span>  <span class="attr">&quot;entities&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;src/entity/**/*.ts&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span>  <span class="attr">&quot;migrations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;src/migration/**/*.ts&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span>  <span class="attr">&quot;subscribers&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;src/subscriber/**/*.ts&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span>  <span class="attr">&quot;cli&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>    <span class="attr">&quot;entitiesDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;src/entity&quot;</span><span class="punctuation">,</span>    <span class="attr">&quot;migrationsDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;src/migration&quot;</span><span class="punctuation">,</span>    <span class="attr">&quot;subscribersDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;src/subscriber&quot;</span>  <span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></code></pre><h4 id="엔티티-Entity-생성"><a href="#엔티티-Entity-생성" class="headerlink" title="엔티티(Entity) 생성"></a>엔티티(Entity) 생성</h4><p>RPG 게임의 캐릭터와 아이템을 나타내는 엔티티를 생성합니다.</p><p><strong>src&#x2F;entity&#x2F;Character.ts</strong></p><pre><code class="highlight typescript"><span class="keyword">import</span> &#123; <span class="title class_">Entity</span>, <span class="title class_">PrimaryGeneratedColumn</span>, <span class="title class_">Column</span> &#125; <span class="keyword">from</span> <span class="string">&quot;typeorm&quot;</span>;<span class="meta">@Entity</span>()<span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Character</span> &#123;  <span class="meta">@PrimaryGeneratedColumn</span>()  <span class="attr">id</span>: <span class="built_in">number</span>;  <span class="meta">@Column</span>()  <span class="attr">name</span>: <span class="built_in">string</span>;  <span class="meta">@Column</span>()  <span class="attr">level</span>: <span class="built_in">number</span>;  <span class="meta">@Column</span>(<span class="string">&quot;simple-array&quot;</span>)  <span class="attr">items</span>: <span class="built_in">string</span>[];&#125;</code></pre><p><strong>src&#x2F;entity&#x2F;Item.ts</strong></p><pre><code class="highlight typescript"><span class="keyword">import</span> &#123; <span class="title class_">Entity</span>, <span class="title class_">PrimaryGeneratedColumn</span>, <span class="title class_">Column</span> &#125; <span class="keyword">from</span> <span class="string">&quot;typeorm&quot;</span>;<span class="meta">@Entity</span>()<span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Item</span> &#123;  <span class="meta">@PrimaryGeneratedColumn</span>()  <span class="attr">id</span>: <span class="built_in">number</span>;  <span class="meta">@Column</span>()  <span class="attr">name</span>: <span class="built_in">string</span>;  <span class="meta">@Column</span>()  <span class="attr">power</span>: <span class="built_in">number</span>;&#125;</code></pre><h2 id="데이터베이스-마이그레이션"><a href="#데이터베이스-마이그레이션" class="headerlink" title="데이터베이스 마이그레이션"></a>데이터베이스 마이그레이션</h2><h3 id="마이그레이션의-개념과-필요성"><a href="#마이그레이션의-개념과-필요성" class="headerlink" title="마이그레이션의 개념과 필요성"></a>마이그레이션의 개념과 필요성</h3><p>마이그레이션(Migration)은 데이터베이스의 스키마를 버전 관리하고, 변경 사항을 체계적으로 적용하는 방법입니다. 이를 통해 데이터베이스의 구조를 변경할 때 발생할 수 있는 문제를 최소화할 수 있습니다.</p><h3 id="마이그레이션-작업-방법"><a href="#마이그레이션-작업-방법" class="headerlink" title="마이그레이션 작업 방법"></a>마이그레이션 작업 방법</h3><p>TypeORM CLI를 사용하여 마이그레이션을 생성하고 적용하는 방법을 알아보겠습니다.</p><h4 id="마이그레이션-생성"><a href="#마이그레이션-생성" class="headerlink" title="마이그레이션 생성"></a>마이그레이션 생성</h4><p>다음 명령어를 사용하여 마이그레이션 파일을 생성합니다.</p><pre><code class="highlight bash">npx typeorm migration:create -n CreateCharacterAndItemTables</code></pre><p>생성된 마이그레이션 파일에 테이블 생성 코드를 추가합니다.</p><p><strong>src&#x2F;migration&#x2F;CreateCharacterAndItemTables.ts</strong></p><pre><code class="highlight typescript"><span class="keyword">import</span> &#123; <span class="title class_">MigrationInterface</span>, <span class="title class_">QueryRunner</span> &#125; <span class="keyword">from</span> <span class="string">&quot;typeorm&quot;</span>;<span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">CreateCharacterAndItemTables</span> <span class="keyword">implements</span> <span class="title class_">MigrationInterface</span> &#123;  <span class="keyword">public</span> <span class="keyword">async</span> <span class="title function_">up</span>(<span class="attr">queryRunner</span>: <span class="title class_">QueryRunner</span>): <span class="title class_">Promise</span>&lt;<span class="built_in">void</span>&gt; &#123;    <span class="keyword">await</span> queryRunner.<span class="title function_">query</span>(<span class="string">`</span><span class="string">            CREATE TABLE character (</span><span class="string">                id INT AUTO_INCREMENT PRIMARY KEY,</span><span class="string">                name VARCHAR(255) NOT NULL,</span><span class="string">                level INT NOT NULL,</span><span class="string">                items VARCHAR(255) NOT NULL</span><span class="string">            )</span><span class="string">        `</span>);    <span class="keyword">await</span> queryRunner.<span class="title function_">query</span>(<span class="string">`</span><span class="string">            CREATE TABLE item (</span><span class="string">                id INT AUTO_INCREMENT PRIMARY KEY,</span><span class="string">                name VARCHAR(255) NOT NULL,</span><span class="string">                power INT NOT NULL</span><span class="string">            )</span><span class="string">        `</span>);  &#125;  <span class="keyword">public</span> <span class="keyword">async</span> <span class="title function_">down</span>(<span class="attr">queryRunner</span>: <span class="title class_">QueryRunner</span>): <span class="title class_">Promise</span>&lt;<span class="built_in">void</span>&gt; &#123;    <span class="keyword">await</span> queryRunner.<span class="title function_">query</span>(<span class="string">`DROP TABLE character`</span>);    <span class="keyword">await</span> queryRunner.<span class="title function_">query</span>(<span class="string">`DROP TABLE item`</span>);  &#125;&#125;</code></pre><h4 id="마이그레이션-적용"><a href="#마이그레이션-적용" class="headerlink" title="마이그레이션 적용"></a>마이그레이션 적용</h4><p>다음 명령어를 사용하여 마이그레이션을 데이터베이스에 적용합니다.</p><pre><code class="highlight bash">npx typeorm migration:run</code></pre><h2 id="데이터베이스-시드-작업"><a href="#데이터베이스-시드-작업" class="headerlink" title="데이터베이스 시드 작업"></a>데이터베이스 시드 작업</h2><h3 id="시드-데이터의-개념과-필요성"><a href="#시드-데이터의-개념과-필요성" class="headerlink" title="시드 데이터의 개념과 필요성"></a>시드 데이터의 개념과 필요성</h3><p>시드 데이터(Seed Data)는 초기 데이터베이스 설정 시 기본적으로 입력되는 데이터를 의미합니다. 예를 들어, RPG 게임에서 초기 캐릭터나 아이템 데이터를 시드 데이터로 설정할 수 있습니다.</p><h3 id="시드-데이터를-생성하고-적용하는-방법"><a href="#시드-데이터를-생성하고-적용하는-방법" class="headerlink" title="시드 데이터를 생성하고 적용하는 방법"></a>시드 데이터를 생성하고 적용하는 방법</h3><p>TypeORM을 사용하여 시드 데이터를 생성하고 적용하는 방법을 알아보겠습니다.</p><p><strong>src&#x2F;seed.ts</strong></p><pre><code class="highlight typescript"><span class="keyword">import</span> &#123; createConnection &#125; <span class="keyword">from</span> <span class="string">&quot;typeorm&quot;</span>;<span class="keyword">import</span> &#123; <span class="title class_">Character</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./entity/Character&quot;</span>;<span class="keyword">import</span> &#123; <span class="title class_">Item</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./entity/Item&quot;</span>;<span class="title function_">createConnection</span>()  .<span class="title function_">then</span>(<span class="title function_">async</span> (connection) =&gt; &#123;    <span class="keyword">const</span> characterRepository = connection.<span class="title function_">getRepository</span>(<span class="title class_">Character</span>);    <span class="keyword">const</span> itemRepository = connection.<span class="title function_">getRepository</span>(<span class="title class_">Item</span>);    <span class="comment">// 시드 데이터 생성</span>    <span class="keyword">const</span> character = <span class="keyword">new</span> <span class="title class_">Character</span>();    character.<span class="property">name</span> = <span class="string">&quot;전사&quot;</span>;    character.<span class="property">level</span> = <span class="number">10</span>;    character.<span class="property">items</span> = [<span class="string">&quot;검&quot;</span>, <span class="string">&quot;방패&quot;</span>, <span class="string">&quot;갑옷&quot;</span>];    <span class="keyword">const</span> item1 = <span class="keyword">new</span> <span class="title class_">Item</span>();    item1.<span class="property">name</span> = <span class="string">&quot;마법 지팡이&quot;</span>;    item1.<span class="property">power</span> = <span class="number">50</span>;    <span class="keyword">const</span> item2 = <span class="keyword">new</span> <span class="title class_">Item</span>();    item2.<span class="property">name</span> = <span class="string">&quot;마법 책&quot;</span>;    item2.<span class="property">power</span> = <span class="number">30</span>;    <span class="keyword">await</span> characterRepository.<span class="title function_">save</span>(character);    <span class="keyword">await</span> itemRepository.<span class="title function_">save</span>(item1);    <span class="keyword">await</span> itemRepository.<span class="title function_">save</span>(item2);    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;시드 데이터가 성공적으로 저장되었습니다.&quot;</span>);    <span class="keyword">await</span> connection.<span class="title function_">close</span>();  &#125;)  .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(error));</code></pre><p>시드 데이터를 적용하기 위해 다음 명령어를 실행합니다.</p><pre><code class="highlight bash">ts-node src/seed.ts</code></pre><h2 id="마이그레이션-시드-작업"><a href="#마이그레이션-시드-작업" class="headerlink" title="마이그레이션 &amp;&amp; 시드 작업"></a>마이그레이션 &amp;&amp; 시드 작업</h2><p><strong>src&#x2F;reset-and-seed.ts</strong></p><pre><code class="highlight typescript"><span class="keyword">import</span> &#123; createConnection, getConnection &#125; <span class="keyword">from</span> <span class="string">&quot;typeorm&quot;</span>;<span class="keyword">import</span> &#123; <span class="title class_">Character</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./entity/Character&quot;</span>;<span class="keyword">import</span> &#123; <span class="title class_">Item</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./entity/Item&quot;</span>;<span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">resetDatabase</span>(<span class="params"></span>) &#123;  <span class="keyword">const</span> connection = <span class="keyword">await</span> <span class="title function_">createConnection</span>();  <span class="keyword">const</span> queryRunner = connection.<span class="title function_">createQueryRunner</span>();  <span class="comment">// 데이터베이스 초기화</span>  <span class="keyword">await</span> queryRunner.<span class="title function_">clearDatabase</span>();  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;데이터베이스가 초기화되었습니다.&quot;</span>);  <span class="comment">// 마이그레이션 실행</span>  <span class="keyword">await</span> connection.<span class="title function_">runMigrations</span>();  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;마이그레이션이 성공적으로 실행되었습니다.&quot;</span>);  <span class="comment">// 시드 데이터 삽입</span>  <span class="keyword">const</span> characterRepository = connection.<span class="title function_">getRepository</span>(<span class="title class_">Character</span>);  <span class="keyword">const</span> itemRepository = connection.<span class="title function_">getRepository</span>(<span class="title class_">Item</span>);  <span class="keyword">const</span> character = <span class="keyword">new</span> <span class="title class_">Character</span>();  character.<span class="property">name</span> = <span class="string">&quot;전사&quot;</span>;  character.<span class="property">level</span> = <span class="number">10</span>;  character.<span class="property">items</span> = [<span class="string">&quot;검&quot;</span>, <span class="string">&quot;방패&quot;</span>, <span class="string">&quot;갑옷&quot;</span>];  <span class="keyword">const</span> item1 = <span class="keyword">new</span> <span class="title class_">Item</span>();  item1.<span class="property">name</span> = <span class="string">&quot;마법 지팡이&quot;</span>;  item1.<span class="property">power</span> = <span class="number">50</span>;  <span class="keyword">const</span> item2 = <span class="keyword">new</span> <span class="title class_">Item</span>();  item2.<span class="property">name</span> = <span class="string">&quot;마법 책&quot;</span>;  item2.<span class="property">power</span> = <span class="number">30</span>;  <span class="keyword">await</span> characterRepository.<span class="title function_">save</span>(character);  <span class="keyword">await</span> itemRepository.<span class="title function_">save</span>(item1);  <span class="keyword">await</span> itemRepository.<span class="title function_">save</span>(item2);  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;시드 데이터가 성공적으로 저장되었습니다.&quot;</span>);  <span class="keyword">await</span> connection.<span class="title function_">close</span>();&#125;<span class="title function_">resetDatabase</span>().<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(error));</code></pre><h3 id="작업-스크립트-실행"><a href="#작업-스크립트-실행" class="headerlink" title="작업 스크립트 실행"></a>작업 스크립트 실행</h3><p><code>ts-node</code>를 사용하여 전체 작업 스크립트를 실행합니다.</p><pre><code class="highlight bash">ts-node src/reset-and-seed.ts</code></pre><p>이 스크립트는 다음 작업을 순차적으로 수행합니다:</p><ol><li>데이터베이스를 초기화합니다.</li><li>마이그레이션을 실행하여 데이터베이스 스키마를 생성합니다.</li><li>시드 데이터를 삽입합니다.</li></ol><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 데이터베이스 마이그레이션과 시드 작업에 대해 알아보았습니다. TypeORM을 사용하여 데이터베이스의 스키마를 관리하고 초기 데이터를 설정하는 방법을 실습해보았습니다.<br>마이그레이션을 통해 데이터베이스의 변경 사항을 체계적으로 관리하고, 시드 작업을 통해 초기 데이터를 설정하여 더 안정적인 애플리케이션을 개발할 수 있습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> database </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Node.js webpack</title>
      <link href="/cli/13/"/>
      <url>/cli/13/</url>
      
        <content type="html"><![CDATA[<h1 id="webpack-모듈-번들러"><a href="#webpack-모듈-번들러" class="headerlink" title="webpack: 모듈 번들러"></a>webpack: 모듈 번들러</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 웹 애플리케이션 개발에서 중요한 역할을 하는 모듈 번들러, webpack에 대해 알아보겠습니다. webpack의 역할과 필요성, 설치 방법, 기본 사용법과 고급 사용법, 그리고 실제 프로젝트에서 webpack을 활용하는 방법을 알아보겠습니다.</p><h2 id="1-webpack-소개"><a href="#1-webpack-소개" class="headerlink" title="1. webpack 소개"></a>1. webpack 소개</h2><h3 id="webpack이란-무엇인가"><a href="#webpack이란-무엇인가" class="headerlink" title="webpack이란 무엇인가?"></a>webpack이란 무엇인가?</h3><p>webpack은 JavaScript 애플리케이션을 위한 정적 모듈 번들러입니다. 모듈 번들러란 여러 개의 모듈을 하나의 번들 파일로 묶어주는 도구로, 웹 애플리케이션의 성능을 최적화하고 복잡한 의존성을 관리하는 데 도움을 줍니다.</p><h3 id="webpack의-역할과-중요성"><a href="#webpack의-역할과-중요성" class="headerlink" title="webpack의 역할과 중요성"></a>webpack의 역할과 중요성</h3><ul><li><strong>모듈 번들링</strong>: 여러 파일을 하나의 번들로 묶어 전송을 최적화합니다.</li><li><strong>의존성 관리</strong>: 복잡한 의존성 구조를 효율적으로 관리합니다.</li><li><strong>코드 스플리팅</strong>: 필요에 따라 코드를 분리하여 로딩 속도를 향상시킵니다.</li><li><strong>트리 쉐이킹</strong>: 사용되지 않는 코드를 제거하여 번들 크기를 줄입니다.</li></ul><h2 id="2-설치-및-설정"><a href="#2-설치-및-설정" class="headerlink" title="2. 설치 및 설정"></a>2. 설치 및 설정</h2><h3 id="webpack-설치-방법"><a href="#webpack-설치-방법" class="headerlink" title="webpack 설치 방법"></a>webpack 설치 방법</h3><p>webpack과 webpack-cli를 프로젝트의 devDependencies로 설치합니다.</p><pre><code class="highlight bash">npm install --save-dev webpack webpack-cli</code></pre><h3 id="webpack-설정-파일"><a href="#webpack-설정-파일" class="headerlink" title="webpack 설정 파일"></a>webpack 설정 파일</h3><p>webpack의 설정 파일인 <code>webpack.config.js</code>를 프로젝트 루트에 생성합니다.</p><p><strong>webpack.config.js</strong></p><pre><code class="highlight javascript"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);<span class="variable language_">module</span>.<span class="property">exports</span> = &#123;  <span class="attr">entry</span>: <span class="string">&quot;./src/index.js&quot;</span>,  <span class="attr">output</span>: &#123;    <span class="attr">filename</span>: <span class="string">&quot;bundle.js&quot;</span>,    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;dist&quot;</span>),  &#125;,  <span class="attr">module</span>: &#123;    <span class="attr">rules</span>: [      &#123;        <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,        <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,        <span class="attr">use</span>: &#123;          <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span>,        &#125;,      &#125;,    ],  &#125;,&#125;;</code></pre><h2 id="3-기본-사용법"><a href="#3-기본-사용법" class="headerlink" title="3. 기본 사용법"></a>3. 기본 사용법</h2><h3 id="webpack-명령어"><a href="#webpack-명령어" class="headerlink" title="webpack 명령어"></a>webpack 명령어</h3><ul><li><strong>webpack</strong>: 기본 설정으로 webpack을 실행합니다.</li></ul><pre><code class="highlight bash">npx webpack</code></pre><ul><li><strong>webpack –config</strong>: 특정 설정 파일을 사용하여 webpack을 실행합니다.</li></ul><pre><code class="highlight bash">npx webpack --config webpack.config.js</code></pre><h2 id="4-기타-옵션-및-플러그인"><a href="#4-기타-옵션-및-플러그인" class="headerlink" title="4. 기타 옵션 및 플러그인"></a>4. 기타 옵션 및 플러그인</h2><h3 id="로더-Loaders"><a href="#로더-Loaders" class="headerlink" title="로더 (Loaders)"></a>로더 (Loaders)</h3><p>로더는 webpack이 모듈을 해석하고 변환할 수 있게 도와줍니다. 예를 들어, Babel 로더를 사용하여 최신 JavaScript 문법을 ES5로 변환할 수 있습니다.</p><p><strong>babel-loader 예제</strong></p><pre><code class="highlight bash">npm install --save-dev babel-loader @babel/core @babel/preset-env</code></pre><p><strong>webpack.config.js에 로더 추가</strong></p><pre><code class="highlight javascript"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;  <span class="comment">// ... other configurations</span>  <span class="attr">module</span>: &#123;    <span class="attr">rules</span>: [      &#123;        <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,        <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,        <span class="attr">use</span>: &#123;          <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span>,          <span class="attr">options</span>: &#123;            <span class="attr">presets</span>: [<span class="string">&quot;@babel/preset-env&quot;</span>],          &#125;,        &#125;,      &#125;,    ],  &#125;,&#125;;</code></pre><h3 id="플러그인-Plugins"><a href="#플러그인-Plugins" class="headerlink" title="플러그인 (Plugins)"></a>플러그인 (Plugins)</h3><p>플러그인은 webpack의 기능을 확장하거나 번들 최적화를 수행하는 데 사용됩니다. 예를 들어, HTML 파일을 자동으로 생성해주는 HTMLWebpackPlugin이 있습니다.</p><p><strong>html-webpack-plugin 설치 및 설정</strong></p><pre><code class="highlight bash">npm install --save-dev html-webpack-plugin</code></pre><p><strong>webpack.config.js에 플러그인 추가</strong></p><pre><code class="highlight javascript"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);<span class="variable language_">module</span>.<span class="property">exports</span> = &#123;  <span class="comment">// ... other configurations</span>  <span class="attr">plugins</span>: [    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;      <span class="attr">template</span>: <span class="string">&quot;./src/index.html&quot;</span>,    &#125;),  ],&#125;;</code></pre><h2 id="5-실습-예제"><a href="#5-실습-예제" class="headerlink" title="5. 실습 예제"></a>5. 실습 예제</h2><h3 id="프로젝트-생성-및-webpack-사용"><a href="#프로젝트-생성-및-webpack-사용" class="headerlink" title="프로젝트 생성 및 webpack 사용"></a>프로젝트 생성 및 webpack 사용</h3><ol><li><strong>새 프로젝트 생성</strong>: 새로운 디렉토리를 만들고 이동합니다.</li></ol><pre><code class="highlight bash"><span class="built_in">mkdir</span> my-webpack-project<span class="built_in">cd</span> my-webpack-project</code></pre><ol start="2"><li><strong>프로젝트 초기화</strong>: <code>npm init -y</code> 명령어를 사용하여 프로젝트를 초기화합니다.</li></ol><pre><code class="highlight bash">npm init -y</code></pre><ol start="3"><li><strong>필요한 패키지 설치</strong>: webpack, webpack-cli, babel-loader, @babel&#x2F;core, @babel&#x2F;preset-env, html-webpack-plugin을 설치합니다.</li></ol><pre><code class="highlight bash">npm install --save-dev webpack webpack-cli babel-loader @babel/core @babel/preset-env html-webpack-plugin</code></pre><ol start="4"><li><strong>프로젝트 구조 설정</strong>: 다음과 같은 프로젝트 구조를 만듭니다.</li></ol><pre><code class="highlight plaintext">my-webpack-project/├── dist/├── node_modules/├── src/│   ├── index.js│   └── index.html├── package.json└── webpack.config.js</code></pre><ol start="5"><li><strong>index.js 파일 생성</strong></li></ol><p><strong>src&#x2F;index.js</strong></p><pre><code class="highlight javascript"><span class="keyword">const</span> message = <span class="string">&quot;Hello, Webpack!&quot;</span>;<span class="variable language_">console</span>.<span class="title function_">log</span>(message);</code></pre><ol start="6"><li><strong>index.html 파일 생성</strong></li></ol><p><strong>src&#x2F;index.html</strong></p><pre><code class="highlight html"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">head</span>&gt;</span>    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span>    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span>    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Webpack Project<span class="tag">&lt;/<span class="name">title</span>&gt;</span>  <span class="tag">&lt;/<span class="name">head</span>&gt;</span>  <span class="tag">&lt;<span class="name">body</span>&gt;</span>    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Webpack Project<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;bundle.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  <span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></code></pre><ol start="7"><li><strong>webpack.config.js 파일 생성 및 설정</strong></li></ol><p><strong>webpack.config.js</strong></p><pre><code class="highlight javascript"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);<span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);<span class="variable language_">module</span>.<span class="property">exports</span> = &#123;  <span class="attr">entry</span>: <span class="string">&quot;./src/index.js&quot;</span>,  <span class="attr">output</span>: &#123;    <span class="attr">filename</span>: <span class="string">&quot;bundle.js&quot;</span>,    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;dist&quot;</span>),  &#125;,  <span class="attr">module</span>: &#123;    <span class="attr">rules</span>: [      &#123;        <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,        <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,        <span class="attr">use</span>: &#123;          <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span>,          <span class="attr">options</span>: &#123;            <span class="attr">presets</span>: [<span class="string">&quot;@babel/preset-env&quot;</span>],          &#125;,        &#125;,      &#125;,    ],  &#125;,  <span class="attr">plugins</span>: [    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;      <span class="attr">template</span>: <span class="string">&quot;./src/index.html&quot;</span>,    &#125;),  ],&#125;;</code></pre><ol start="8"><li><strong>webpack 실행 및 결과 확인</strong></li></ol><pre><code class="highlight bash">npx webpack</code></pre><p><code>dist</code> 폴더에 생성된 <code>index.html</code>과 <code>bundle.js</code> 파일을 브라우저에서 열어 결과를 확인합니다.</p><h3 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h3><p>이번 시간에는 webpack의 기본 개념부터 설치 방법, 기본 및 고급 사용법, 추가 명령어까지 다루었습니다. webpack을 통해 웹 애플리케이션의 성능을 최적화하고 복잡한 의존성을 효율적으로 관리할 수 있습니다. 다음 시간에는 또 다른 유용한 CLI 도구를 소개하겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> CLI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Javascript async/await와 Promises의 차이점</title>
      <link href="/javascript/special/7/"/>
      <url>/javascript/special/7/</url>
      
        <content type="html"><![CDATA[<h1 id="Javascript-async-await와-Promises의-차이점"><a href="#Javascript-async-await와-Promises의-차이점" class="headerlink" title="Javascript async&#x2F;await와 Promises의 차이점"></a>Javascript async&#x2F;await와 Promises의 차이점</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!</p><p>JavaScript 개발을 하다 보면 비동기 작업을 처리해야 할 때가 많습니다.<br>비동기 작업은 시간이 걸리는 작업(예: API 호출, 파일 읽기&#x2F;쓰기, 타이머 등)을 다른 코드 실행과 병행하여 처리할 수 있도록 합니다.<br>JavaScript에서 비동기 작업을 처리하는 주요 방법으로 Promises와 async&#x2F;await가 있습니다. 이번 글에서는 두 방법의 차이점과 각각의 사용 방법을 알아보겠습니다.</p><h2 id="Promises"><a href="#Promises" class="headerlink" title="Promises"></a>Promises</h2><h3 id="Promises란"><a href="#Promises란" class="headerlink" title="Promises란?"></a>Promises란?</h3><p>Promise는 JavaScript에서 비동기 작업의 완료 또는 실패를 나타내는 객체입니다. Promise는 다음 세 가지 상태를 가질 수 있습니다:</p><ul><li>Pending: 이행하거나 거부되지 않은 초기 상태</li><li>Fulfilled: 작업이 성공적으로 완료된 상태</li><li>Rejected: 작업이 실패한 상태</li></ul><h3 id="Promises-사용-방법"><a href="#Promises-사용-방법" class="headerlink" title="Promises 사용 방법"></a>Promises 사용 방법</h3><p>Promise를 사용하여 비동기 작업을 처리하는 예를 들어보겠습니다. <code>fetchData</code> 함수는 2초 후에 데이터를 반환하는 Promise를 생성합니다. 이 함수는 <code>new Promise</code>를 사용하여 생성하며, 콜백 함수 내에서 <code>resolve</code>를 호출하여 데이터를 반환합니다. 그런 다음 <code>fetchData</code>를 호출한 후, <code>then</code> 메서드를 사용하여 데이터가 도착했을 때의 작업을 정의하고, <code>catch</code> 메서드를 사용하여 에러를 처리합니다.</p><pre><code class="highlight javascript"><span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params"></span>) &#123;  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;      <span class="keyword">const</span> data = &#123; <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;;      <span class="title function_">resolve</span>(data);    &#125;, <span class="number">2000</span>);  &#125;);&#125;<span class="title function_">fetchData</span>()  .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Data received:&quot;</span>, data);  &#125;)  .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;Error:&quot;</span>, error);  &#125;);</code></pre><p>위 예제에서는 fetchData 함수가 데이터를 2초 후에 반환합니다. 데이터가 성공적으로 반환되면 then 메서드가 호출되어 데이터를 로그에 출력하고, 에러가 발생하면 catch 메서드가 호출됩니다.</p><h2 id="async-await"><a href="#async-await" class="headerlink" title="async&#x2F;await"></a>async&#x2F;await</h2><h3 id="async-await란"><a href="#async-await란" class="headerlink" title="async&#x2F;await란?"></a>async&#x2F;await란?</h3><p>async&#x2F;await는 ES2017(ES8)에서 도입된 비동기 코드를 작성하는 새로운 방법입니다. async&#x2F;await는 Promise 기반의 비동기 작업을 더 직관적이고 동기적인 코드처럼 작성할 수 있게 해줍니다.</p><h3 id="async-await-사용-방법"><a href="#async-await-사용-방법" class="headerlink" title="async&#x2F;await 사용 방법"></a>async&#x2F;await 사용 방법</h3><p>async&#x2F;await를 사용하여 비동기 작업을 처리하는 예를 들어보겠습니다. fetchData 함수는 여전히 Promise를 반환합니다. getData 함수는 async 키워드로 정의하며, await 키워드를 사용하여 fetchData가 완료될 때까지 기다립니다. 이렇게 하면 마치 동기 코드처럼 작성할 수 있습니다. 에러 처리를 위해 try&#x2F;catch 블록을 사용할 수 있습니다.</p><pre><code class="highlight javascript"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params"></span>) &#123;  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;      <span class="keyword">const</span> data = &#123; <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;;      <span class="title function_">resolve</span>(data);    &#125;, <span class="number">2000</span>);  &#125;);&#125;<span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getData</span>(<span class="params"></span>) &#123;  <span class="keyword">try</span> &#123;    <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="title function_">fetchData</span>();    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Data received:&quot;</span>, data);  &#125; <span class="keyword">catch</span> (error) &#123;    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;Error:&quot;</span>, error);  &#125;&#125;<span class="title function_">getData</span>();</code></pre><h2 id="Promises와-async-await의-차이점"><a href="#Promises와-async-await의-차이점" class="headerlink" title="Promises와 async&#x2F;await의 차이점"></a>Promises와 async&#x2F;await의 차이점</h2><h3 id="가독성"><a href="#가독성" class="headerlink" title="가독성"></a>가독성</h3><p>Promises는 then과 catch 메서드를 체인 형태로 사용하여 비동기 작업을 처리합니다. 그러나 코드가 복잡해지면 가독성이 떨어질 수 있습니다. 반면, async&#x2F;await는 동기 코드처럼 작성할 수 있어 가독성이 높고 직관적입니다.</p><h3 id="에러-처리"><a href="#에러-처리" class="headerlink" title="에러 처리"></a>에러 처리</h3><p>Promises는 catch 메서드를 사용하여 에러를 처리합니다. 반면, async&#x2F;await는 try&#x2F;catch 블록을 사용하여 에러를 처리할 수 있어 더 익숙하고 직관적입니다.</p><h3 id="사용-용이성"><a href="#사용-용이성" class="headerlink" title="사용 용이성"></a>사용 용이성</h3><p>Promises는 단순한 비동기 작업에는 적합하지만, 복잡한 비동기 로직에는 가독성이 떨어질 수 있습니다. 반면, async&#x2F;await는 복잡한 비동기 로직을 동기 코드처럼 쉽게 작성할 수 있습니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>JavaScript에서 비동기 작업을 처리하는 방법으로 Promises와 async&#x2F;await가 있습니다. 각각의 장단점이 있으므로 상황에 맞게 사용하는 것이 중요합니다. 단순한 비동기 작업에는 Promises를, 복잡한 비동기 로직에는 async&#x2F;await를 사용하는 것이 좋습니다. 이번 글을 통해 두 방법의 차이점과 사용 방법을 이해하고, 필요에 따라 적절히 활용해 보세요!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> JS_필살기 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>대칭키 및 비대칭키 암호화 방식(with node.js 실습)</title>
      <link href="/web/essential/19/"/>
      <url>/web/essential/19/</url>
      
        <content type="html"><![CDATA[<h1 id="대칭키-및-비대칭키-암호화-방식-with-node-js-실습"><a href="#대칭키-및-비대칭키-암호화-방식-with-node-js-실습" class="headerlink" title="대칭키 및 비대칭키 암호화 방식(with node.js 실습)"></a>대칭키 및 비대칭키 암호화 방식(with node.js 실습)</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 Node.js를 활용하여 대칭키와 비대칭키 암호화 실습을 해보겠습니다.<br>암호화는 데이터를 안전하게 보호하기 위한 중요한 기술입니다.<br>대칭키와 비대칭키 암호화가 무엇인지, 어떻게 사용하는지 알아보겠습니다.</p><h2 id="대칭키-암호화란"><a href="#대칭키-암호화란" class="headerlink" title="대칭키 암호화란?"></a>대칭키 암호화란?</h2><p>대칭키 암호화는 하나의 비밀키를 사용하여 데이터를 암호화하고 복호화하는 방식입니다.<br>마치 자물쇠와 열쇠 한 쌍을 사용하는 것과 비슷합니다. 자물쇠를 잠그고 여는 데 같은 열쇠를 사용합니다.<br>예를 들어, 여러분이 친구에게 보낼 비밀 메시지를 암호화할 때 대칭키를 사용하면, 그 친구도 같은 키를 사용해서 메시지를 복호화할 수 있습니다.</p><h3 id="대칭키-암호화-예제"><a href="#대칭키-암호화-예제" class="headerlink" title="대칭키 암호화 예제"></a>대칭키 암호화 예제</h3><pre><code class="highlight javascript"><span class="comment">// symmetric.js</span><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">&quot;crypto&quot;</span>);<span class="comment">// 대칭키 및 초기화 벡터 생성</span><span class="keyword">const</span> key = crypto.<span class="title function_">randomBytes</span>(<span class="number">32</span>);<span class="keyword">const</span> iv = crypto.<span class="title function_">randomBytes</span>(<span class="number">16</span>);<span class="keyword">const</span> algorithm = <span class="string">&quot;aes-256-cbc&quot;</span>;<span class="comment">// 암호화 함수</span><span class="keyword">function</span> <span class="title function_">encrypt</span>(<span class="params">text</span>) &#123;  <span class="keyword">const</span> cipher = crypto.<span class="title function_">createCipheriv</span>(algorithm, key, iv);  <span class="keyword">let</span> encrypted = cipher.<span class="title function_">update</span>(text, <span class="string">&quot;utf8&quot;</span>, <span class="string">&quot;hex&quot;</span>);  encrypted += cipher.<span class="title function_">final</span>(<span class="string">&quot;hex&quot;</span>);  <span class="keyword">return</span> encrypted;&#125;<span class="comment">// 복호화 함수</span><span class="keyword">function</span> <span class="title function_">decrypt</span>(<span class="params">encrypted</span>) &#123;  <span class="keyword">const</span> decipher = crypto.<span class="title function_">createDecipheriv</span>(algorithm, key, iv);  <span class="keyword">let</span> decrypted = decipher.<span class="title function_">update</span>(encrypted, <span class="string">&quot;hex&quot;</span>, <span class="string">&quot;utf8&quot;</span>);  decrypted += decipher.<span class="title function_">final</span>(<span class="string">&quot;utf8&quot;</span>);  <span class="keyword">return</span> decrypted;&#125;<span class="comment">// 테스트</span><span class="keyword">const</span> plainText = <span class="string">&quot;Hello, World!&quot;</span>;<span class="keyword">const</span> encryptedText = <span class="title function_">encrypt</span>(plainText);<span class="keyword">const</span> decryptedText = <span class="title function_">decrypt</span>(encryptedText);<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Plain Text:&quot;</span>, plainText);<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Encrypted Text:&quot;</span>, encryptedText);<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Decrypted Text:&quot;</span>, decryptedText);</code></pre><h3 id="설명"><a href="#설명" class="headerlink" title="설명"></a>설명</h3><ol><li><strong>키와 초기화 벡터 생성</strong>: <code>crypto.randomBytes(32)</code>로 256비트 대칭키를 생성하고, <code>crypto.randomBytes(16)</code>로 128비트 초기화 벡터(IV)를 생성합니다.</li><li><strong>암호화 함수</strong>: <code>crypto.createCipheriv</code>를 사용하여 암호화 객체를 생성하고, <code>update</code>와 <code>final</code> 메서드를 사용하여 데이터를 암호화합니다.</li><li><strong>복호화 함수</strong>: <code>crypto.createDecipheriv</code>를 사용하여 복호화 객체를 생성하고, <code>update</code>와 <code>final</code> 메서드를 사용하여 데이터를 복호화합니다.</li></ol><h2 id="비대칭키-암호화란"><a href="#비대칭키-암호화란" class="headerlink" title="비대칭키 암호화란?"></a>비대칭키 암호화란?</h2><p>비대칭키 암호화는 공개키와 개인키 쌍을 사용하여 데이터를 암호화하고 복호화하는 방식입니다.<br>이는 우체통과 우편함의 관계와 비슷합니다. 공개키는 누구나 접근할 수 있는 우체통과 같고, 개인키는 우편함의 열쇠와 같습니다.<br>누구나 우체통에 편지를 넣을 수 있지만, 우편함을 열 수 있는 사람은 열쇠를 가진 사람뿐입니다.</p><h3 id="비대칭키-암호화-예제"><a href="#비대칭키-암호화-예제" class="headerlink" title="비대칭키 암호화 예제"></a>비대칭키 암호화 예제</h3><pre><code class="highlight javascript"><span class="comment">// asymmetric.js</span><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">&quot;crypto&quot;</span>);<span class="comment">// RSA 키 쌍 생성</span><span class="keyword">const</span> &#123; publicKey, privateKey &#125; = crypto.<span class="title function_">generateKeyPairSync</span>(<span class="string">&quot;rsa&quot;</span>, &#123;  <span class="attr">modulusLength</span>: <span class="number">2048</span>,&#125;);<span class="comment">// 암호화 함수</span><span class="keyword">function</span> <span class="title function_">encrypt</span>(<span class="params">text, publicKey</span>) &#123;  <span class="keyword">const</span> encrypted = crypto.<span class="title function_">publicEncrypt</span>(publicKey, <span class="title class_">Buffer</span>.<span class="title function_">from</span>(text));  <span class="keyword">return</span> encrypted.<span class="title function_">toString</span>(<span class="string">&quot;hex&quot;</span>);&#125;<span class="comment">// 복호화 함수</span><span class="keyword">function</span> <span class="title function_">decrypt</span>(<span class="params">encrypted, privateKey</span>) &#123;  <span class="keyword">const</span> decrypted = crypto.<span class="title function_">privateDecrypt</span>(    privateKey,    <span class="title class_">Buffer</span>.<span class="title function_">from</span>(encrypted, <span class="string">&quot;hex&quot;</span>)  );  <span class="keyword">return</span> decrypted.<span class="title function_">toString</span>(<span class="string">&quot;utf8&quot;</span>);&#125;<span class="comment">// 테스트</span><span class="keyword">const</span> plainText = <span class="string">&quot;Hello, World!&quot;</span>;<span class="keyword">const</span> encryptedText = <span class="title function_">encrypt</span>(plainText, publicKey);<span class="keyword">const</span> decryptedText = <span class="title function_">decrypt</span>(encryptedText, privateKey);<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Plain Text:&quot;</span>, plainText);<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Encrypted Text:&quot;</span>, encryptedText);<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Decrypted Text:&quot;</span>, decryptedText);</code></pre><h3 id="설명-1"><a href="#설명-1" class="headerlink" title="설명"></a>설명</h3><ol><li><strong>키 쌍 생성</strong>: <code>crypto.generateKeyPairSync(&#39;rsa&#39;, &#123; modulusLength: 2048 &#125;)</code>를 사용하여 RSA 공개키와 개인키 쌍을 생성합니다.</li><li><strong>암호화 함수</strong>: <code>crypto.publicEncrypt</code>를 사용하여 공개키로 데이터를 암호화합니다.</li><li><strong>복호화 함수</strong>: <code>crypto.privateDecrypt</code>를 사용하여 개인키로 데이터를 복호화합니다.</li></ol><h2 id="대칭키와-비대칭키의-차이점"><a href="#대칭키와-비대칭키의-차이점" class="headerlink" title="대칭키와 비대칭키의 차이점"></a>대칭키와 비대칭키의 차이점</h2><ul><li><strong>대칭키 암호화</strong>:<ul><li>장점: 빠르고 효율적입니다.</li><li>단점: 키를 안전하게 공유해야 하는 어려움이 있습니다.</li><li>사용 예: 데이터베이스 암호화, 파일 암호화</li></ul></li><li><strong>비대칭키 암호화</strong>:<ul><li>장점: 키를 안전하게 공유할 수 있습니다.</li><li>단점: 대칭키에 비해 느리고 복잡합니다.</li><li>사용 예: SSL&#x2F;TLS 인증서, 디지털 서명</li></ul></li></ul><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 Node.js를 사용하여 대칭키 및 비대칭키 암호화를 실습해보았습니다.<br>대칭키 암호화는 하나의 비밀키를 사용하고, 비대칭키 암호화는 공개키와 개인키 쌍을 사용하여 보안 통신을 구현합니다.<br>이 두 가지 암호화 방식을 이해하고 적절히 활용하면, 애플리케이션의 보안을 강화할 수 있습니다.<br>이제 대칭키 암호화와 비대칭키 암호화를 프로젝트에 적용해보세요!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> web_필수 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Javascript 나머지 매개변수 (Rest Parameters)</title>
      <link href="/javascript/detail/6/"/>
      <url>/javascript/detail/6/</url>
      
        <content type="html"><![CDATA[<h1 id="Javascript-나머지-매개변수-Rest-Parameters"><a href="#Javascript-나머지-매개변수-Rest-Parameters" class="headerlink" title="Javascript 나머지 매개변수 (Rest Parameters)"></a>Javascript 나머지 매개변수 (Rest Parameters)</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 JavaScript에서 나머지 매개변수(Rest Parameters)에 대해 알아보겠습니다. 나머지 매개변수는 함수 매개변수에서 나머지 값을 하나의 배열로 수집하는 방법을 제공합니다.</p><h2 id="나머지-매개변수-사용법"><a href="#나머지-매개변수-사용법" class="headerlink" title="나머지 매개변수 사용법"></a>나머지 매개변수 사용법</h2><p>나머지 매개변수는 <code>...</code> 문법을 사용하여 정의합니다:</p><pre><code class="highlight javascript"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">...numbers</span>) &#123;  <span class="keyword">return</span> numbers.<span class="title function_">reduce</span>(<span class="function">(<span class="params">total, num</span>) =&gt;</span> total + num, <span class="number">0</span>);&#125;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// 출력: 6</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>)); <span class="comment">// 출력: 22</span></code></pre><h2 id="나머지-매개변수와-일반-매개변수-함께-사용"><a href="#나머지-매개변수와-일반-매개변수-함께-사용" class="headerlink" title="나머지 매개변수와 일반 매개변수 함께 사용"></a>나머지 매개변수와 일반 매개변수 함께 사용</h2><p>나머지 매개변수는 일반 매개변수와 함께 사용할 수 있습니다:</p><pre><code class="highlight javascript"><span class="keyword">function</span> <span class="title function_">introduce</span>(<span class="params">greeting, ...names</span>) &#123;  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;greeting&#125;</span>, <span class="subst">$&#123;names.join(<span class="string">&quot;, &quot;</span>)&#125;</span>`</span>;&#125;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">introduce</span>(<span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;John&quot;</span>, <span class="string">&quot;Jane&quot;</span>, <span class="string">&quot;Doe&quot;</span>));<span class="comment">// 출력: Hello, John, Jane, Doe</span></code></pre><h2 id="나머지-매개변수의-유효성-검사"><a href="#나머지-매개변수의-유효성-검사" class="headerlink" title="나머지 매개변수의 유효성 검사"></a>나머지 매개변수의 유효성 검사</h2><p>나머지 매개변수를 사용하여 함수의 매개변수 수를 동적으로 처리할 수 있습니다:</p><pre><code class="highlight javascript"><span class="keyword">function</span> <span class="title function_">minMax</span>(<span class="params">...numbers</span>) &#123;  <span class="keyword">if</span> (numbers.<span class="property">length</span> === <span class="number">0</span>) &#123;    <span class="keyword">return</span> <span class="string">&quot;No numbers provided&quot;</span>;  &#125;  <span class="keyword">return</span> &#123;    <span class="attr">min</span>: <span class="title class_">Math</span>.<span class="title function_">min</span>(...numbers),    <span class="attr">max</span>: <span class="title class_">Math</span>.<span class="title function_">max</span>(...numbers),  &#125;;&#125;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">minMax</span>(<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>));<span class="comment">// 출력: &#123; min: 1, max: 9 &#125;</span></code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 Javascript에서 나머지 매개변수를 사용하는 방법에 대해 알아보았습니다. 나머지 매개변수는 함수 매개변수에서 나머지 값을 하나의 배열로 수집하는 유용한 도구입니다. 다음 시간에는 <code>for...of</code> 루프와 <code>for...in</code> 루프에 대해 알아보겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> JS_디테일 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Node.js mysql2 모듈을 사용한 트랜잭션 실습</title>
      <link href="/database/8/"/>
      <url>/database/8/</url>
      
        <content type="html"><![CDATA[<h1 id="Node-js-mysql2-모듈을-사용한-트랜잭션-실습"><a href="#Node-js-mysql2-모듈을-사용한-트랜잭션-실습" class="headerlink" title="Node.js mysql2 모듈을 사용한 트랜잭션 실습"></a>Node.js mysql2 모듈을 사용한 트랜잭션 실습</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 Node.js의 mysql2 모듈을 사용하여 트랜잭션을 관리하는 방법에 대해 알아보겠습니다.<br>트랜잭션을 아직 잘 모르신다면 <a href="/database/basic/7">이전 글</a>을 참고해주세요!<br>트랜잭션은 데이터베이스의 일관성을 유지하기 위해 여러 개의 작업을 하나의 단위로 묶어 처리하는 기능입니다. RPG 게임의 캐릭터와 아이템 데이터를 예제로 사용하여 트랜잭션을 실습해보겠습니다.</p><h2 id="트랜잭션의-개념"><a href="#트랜잭션의-개념" class="headerlink" title="트랜잭션의 개념"></a>트랜잭션의 개념</h2><p>트랜잭션(Transaction)의 개념을 간략히 다시 한번 짚고 넘어가겠습니다.<br>트랜잭션은 데이터베이스에서 여러 작업을 하나의 단위로 묶어 처리하는 것을 의미합니다.<br>ACID 특성을 가지고 있으며, 이 특성을 통해 데이터의 일관성과 무결성을 보장합니다.</p><ul><li><strong>Atomicity (원자성)</strong>: 트랜잭션 내의 모든 작업이 완전히 수행되거나 전혀 수행되지 않아야 합니다.</li><li><strong>Consistency (일관성)</strong>: 트랜잭션이 성공적으로 완료되면 데이터베이스는 일관된 상태로 유지되어야 합니다.</li><li><strong>Isolation (고립성)</strong>: 트랜잭션은 서로 독립적으로 수행되어야 하며, 다른 트랜잭션의 영향을 받아서는 안 됩니다.</li><li><strong>Durability (지속성)</strong>: 트랜잭션이 완료된 후에는 시스템 오류가 발생하더라도 결과가 영구적으로 유지되어야 합니다.</li></ul><h2 id="트랜잭션-실습"><a href="#트랜잭션-실습" class="headerlink" title="트랜잭션 실습"></a>트랜잭션 실습</h2><p>MySQL2 모듈을 사용하여 트랜잭션을 관리하는 방법을 알아보겠습니다. 캐릭터가 아이템을 구매하는 시나리오를 통해 실습해보겠습니다.</p><h3 id="데이터베이스-설정"><a href="#데이터베이스-설정" class="headerlink" title="데이터베이스 설정"></a>데이터베이스 설정</h3><p>먼저 MySQL2 모듈과 데이터베이스 설정을 준비합니다.</p><p><strong>src&#x2F;db.js</strong></p><pre><code class="highlight javascript"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">&quot;mysql2/promise&quot;</span>);<span class="keyword">const</span> pool = mysql.<span class="title function_">createPool</span>(&#123;  <span class="attr">host</span>: <span class="string">&quot;localhost&quot;</span>,  <span class="attr">user</span>: <span class="string">&quot;root&quot;</span>,  <span class="attr">password</span>: <span class="string">&quot;password&quot;</span>,  <span class="attr">database</span>: <span class="string">&quot;rpg_game&quot;</span>,  <span class="attr">waitForConnections</span>: <span class="literal">true</span>,  <span class="attr">connectionLimit</span>: <span class="number">10</span>,  <span class="attr">queueLimit</span>: <span class="number">0</span>,&#125;);<span class="variable language_">module</span>.<span class="property">exports</span> = pool;</code></pre><h3 id="트랜잭션-예제-아이템-구매"><a href="#트랜잭션-예제-아이템-구매" class="headerlink" title="트랜잭션 예제: 아이템 구매"></a>트랜잭션 예제: 아이템 구매</h3><p>캐릭터가 아이템을 구매할 때 트랜잭션을 사용하여 데이터의 일관성을 보장합니다. 캐릭터의 골드가 감소하고, 아이템이 캐릭터에게 할당되는 두 작업을 하나의 트랜잭션으로 묶어 처리합니다.</p><p><strong>src&#x2F;buyItem.js</strong></p><pre><code class="highlight javascript"><span class="keyword">const</span> pool = <span class="built_in">require</span>(<span class="string">&quot;./db&quot;</span>);<span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">buyItem</span>(<span class="params">characterId, itemId, itemPrice</span>) &#123;  <span class="keyword">const</span> connection = <span class="keyword">await</span> pool.<span class="title function_">getConnection</span>();  <span class="keyword">try</span> &#123;    <span class="comment">// 트랜잭션 시작</span>    <span class="keyword">await</span> connection.<span class="title function_">beginTransaction</span>();    <span class="comment">// 캐릭터의 골드 조회</span>    <span class="keyword">const</span> [characterRows] = <span class="keyword">await</span> connection.<span class="title function_">query</span>(      <span class="string">&quot;SELECT gold FROM character WHERE id = ?&quot;</span>,      [characterId]    );    <span class="keyword">if</span> (characterRows.<span class="property">length</span> === <span class="number">0</span>) &#123;      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;캐릭터를 찾을 수 없습니다.&quot;</span>);    &#125;    <span class="keyword">const</span> characterGold = characterRows[<span class="number">0</span>].<span class="property">gold</span>;    <span class="comment">// 골드가 충분한지 확인</span>    <span class="keyword">if</span> (characterGold &lt; itemPrice) &#123;      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;골드가 충분하지 않습니다.&quot;</span>);    &#125;    <span class="comment">// 캐릭터의 골드 업데이트</span>    <span class="keyword">await</span> connection.<span class="title function_">query</span>(      <span class="string">&quot;UPDATE character SET gold = gold - ? WHERE id = ?&quot;</span>,      [itemPrice, characterId]    );    <span class="comment">// 아이템의 소유자 업데이트</span>    <span class="keyword">await</span> connection.<span class="title function_">query</span>(<span class="string">&quot;UPDATE item SET character_id = ? WHERE id = ?&quot;</span>, [      characterId,      itemId,    ]);    <span class="comment">// 트랜잭션 커밋</span>    <span class="keyword">await</span> connection.<span class="title function_">commit</span>();    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;아이템 구매가 완료되었습니다.&quot;</span>);  &#125; <span class="keyword">catch</span> (error) &#123;    <span class="comment">// 트랜잭션 롤백</span>    <span class="keyword">await</span> connection.<span class="title function_">rollback</span>();    <span class="variable language_">console</span>.<span class="title function_">error</span>(      <span class="string">&quot;아이템 구매 중 오류가 발생하여 롤백되었습니다:&quot;</span>,      error.<span class="property">message</span>    );  &#125; <span class="keyword">finally</span> &#123;    connection.<span class="title function_">release</span>();  &#125;&#125;<span class="title function_">buyItem</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">100</span>).<span class="title function_">catch</span>(<span class="variable language_">console</span>.<span class="property">error</span>);</code></pre><h3 id="트랜잭션-처리-흐름"><a href="#트랜잭션-처리-흐름" class="headerlink" title="트랜잭션 처리 흐름"></a>트랜잭션 처리 흐름</h3><ol><li><strong>트랜잭션 시작</strong>: <code>beginTransaction</code> 메서드를 사용하여 트랜잭션을 시작합니다.</li><li><strong>데이터 조회 및 검증</strong>: 캐릭터의 골드를 조회하고, 구매할 아이템의 가격과 비교하여 골드가 충분한지 확인합니다.</li><li><strong>데이터 업데이트</strong>: 캐릭터의 골드를 업데이트하고, 아이템의 소유자를 업데이트합니다.</li><li><strong>트랜잭션 커밋</strong>: <code>commit</code> 메서드를 사용하여 트랜잭션을 커밋합니다. 모든 작업이 성공적으로 완료되면 데이터베이스에 반영됩니다.</li><li><strong>오류 처리 및 롤백</strong>: 오류가 발생하면 <code>rollback</code> 메서드를 사용하여 트랜잭션을 롤백합니다. 모든 작업이 취소되고, 데이터베이스는 이전 상태로 돌아갑니다.</li></ol><h2 id="정리"><a href="#정리" class="headerlink" title="정리"></a>정리</h2><p>이번 시간에는 MySQL2 모듈을 사용하여 트랜잭션을 관리하는 방법에 대해 알아보았습니다. 트랜잭션은 데이터베이스의 일관성과 무결성을 보장하는 중요한 기능입니다. 트랜잭션을 사용하여 여러 개의 작업을 하나의 단위로 묶어 처리함으로써 데이터의 일관성을 유지할 수 있습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> database </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>트랜잭션(transaction) 관리</title>
      <link href="/database/7/"/>
      <url>/database/7/</url>
      
        <content type="html"><![CDATA[<h1 id="트랜잭션-transaction-관리"><a href="#트랜잭션-transaction-관리" class="headerlink" title="트랜잭션(transaction) 관리"></a>트랜잭션(transaction) 관리</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 데이터베이스에서 트랜잭션 관리 언어(TCL, Transaction Control Language)에 대해 알아보겠습니다.<br>TCL은 데이터베이스에서 트랜잭션을 제어하는 명령어입니다. RPG 게임 예제를 통해 트랜잭션 관리의 개념과 사용법을 익혀보겠습니다.</p><h2 id="트랜잭션의-개념"><a href="#트랜잭션의-개념" class="headerlink" title="트랜잭션의 개념"></a>트랜잭션의 개념</h2><h3 id="트랜잭션의-정의와-중요성"><a href="#트랜잭션의-정의와-중요성" class="headerlink" title="트랜잭션의 정의와 중요성"></a>트랜잭션의 정의와 중요성</h3><p>**트랜잭션(Transaction)**은 데이터베이스에서 하나의 논리적인 작업 단위를 의미합니다.<br>트랜잭션은 여러 개의 데이터베이스 연산을 하나로 묶어, 모든 연산이 성공적으로 수행되거나, 하나라도 실패하면 전체 트랜잭션이 취소되도록 합니다.<br>이는 데이터베이스의 일관성과 무결성을 유지하는 데 중요합니다.</p><p>예를 들어, RPG 게임에서 플레이어가 아이템을 구매하는 과정에서 골드를 차감하고 인벤토리에 아이템을 추가하는 두 가지 작업이 있다면, 이 두 작업은 하나의 트랜잭션으로 처리해야 합니다.<br>만약 골드가 차감되었으나 인벤토리에 아이템 추가가 실패한다면, 전체 트랜잭션을 취소하여 골드 차감 또한 무효화해야 합니다.</p><h3 id="트랜잭션의-속성-ACID"><a href="#트랜잭션의-속성-ACID" class="headerlink" title="트랜잭션의 속성(ACID)"></a>트랜잭션의 속성(ACID)</h3><p>트랜잭션은 다음 네 가지 속성을 가져야 합니다:<br>(이걸 처음 보시면 이해만 하면 됩니다. 오래 개발하다보면 외워집니다.)</p><ul><li><strong>Atomicity(원자성)</strong>: 트랜잭션 내의 모든 연산이 완전하게 수행되거나, 전혀 수행되지 않아야 합니다. 중간 단계에서 일부만 수행되는 일은 없어야 합니다.</li><li><strong>Consistency(일관성)</strong>: 트랜잭션이 완료되면 데이터베이스는 일관성 있는 상태를 유지해야 합니다. 일관성 규칙이 트랜잭션 전후로 보장되어야 합니다.</li><li><strong>Isolation(고립성)</strong>: 하나의 트랜잭션이 완료되기 전까지는 다른 트랜잭션이 접근할 수 없습니다. 각 트랜잭션은 독립적으로 수행되어야 합니다.</li><li><strong>Durability(지속성)</strong>: 트랜잭션이 완료되면 그 결과는 영구적으로 반영되어야 합니다. 시스템 장애가 발생하더라도 결과는 보존되어야 합니다.</li></ul><h2 id="트랜잭션-제어"><a href="#트랜잭션-제어" class="headerlink" title="트랜잭션 제어"></a>트랜잭션 제어</h2><h3 id="COMMIT과-ROLLBACK"><a href="#COMMIT과-ROLLBACK" class="headerlink" title="COMMIT과 ROLLBACK"></a>COMMIT과 ROLLBACK</h3><p><strong>COMMIT</strong>과 <strong>ROLLBACK</strong>은 트랜잭션을 제어하는 두 가지 주요 명령어입니다.</p><ul><li><strong>COMMIT</strong>: 트랜잭션 내의 모든 변경 사항을 데이터베이스에 영구적으로 반영합니다. 트랜잭션이 성공적으로 완료되었음을 알리는 명령어입니다.</li><li><strong>ROLLBACK</strong>: 트랜잭션 내의 모든 변경 사항을 취소하고, 트랜잭션이 시작되기 전 상태로 되돌립니다. 트랜잭션 수행 중 오류가 발생하거나, 논리적인 문제가 있을 때 사용합니다.</li></ul><h3 id="SAVEPOINT"><a href="#SAVEPOINT" class="headerlink" title="SAVEPOINT"></a>SAVEPOINT</h3><p><strong>SAVEPOINT</strong>는 트랜잭션 내에서 특정 지점(Savepoint)을 설정하여, 트랜잭션을 부분적으로 롤백할 수 있게 합니다. 복잡한 트랜잭션에서 여러 SAVEPOINT를 설정하여 유연하게 롤백할 수 있습니다.</p><h2 id="예제-RPG-게임에서의-트랜잭션-관리"><a href="#예제-RPG-게임에서의-트랜잭션-관리" class="headerlink" title="예제: RPG 게임에서의 트랜잭션 관리"></a>예제: RPG 게임에서의 트랜잭션 관리</h2><p>RPG 게임에서 플레이어가 아이템을 구매하는 시나리오를 예로 들어, 트랜잭션을 관리해보겠습니다.</p><h3 id="1-트랜잭션-시작"><a href="#1-트랜잭션-시작" class="headerlink" title="1. 트랜잭션 시작"></a>1. 트랜잭션 시작</h3><p>먼저, 트랜잭션을 시작합니다.</p><pre><code class="highlight sql"><span class="keyword">START</span> TRANSACTION;</code></pre><h3 id="2-아이템-구매"><a href="#2-아이템-구매" class="headerlink" title="2. 아이템 구매"></a>2. 아이템 구매</h3><p>플레이어가 아이템을 구매할 때, 플레이어의 골드가 차감되고, 인벤토리에 아이템이 추가됩니다. 이 두 작업을 하나의 트랜잭션으로 묶어 처리합니다.</p><pre><code class="highlight sql"><span class="comment">-- 플레이어의 골드 차감</span><span class="keyword">UPDATE</span> players<span class="keyword">SET</span> gold <span class="operator">=</span> gold <span class="operator">-</span> <span class="number">100</span><span class="keyword">WHERE</span> player_id <span class="operator">=</span> <span class="number">1</span>;<span class="comment">-- 인벤토리에 아이템 추가</span><span class="keyword">INSERT</span> <span class="keyword">INTO</span> inventory (player_id, item_name)<span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;Sword of Destiny&#x27;</span>);</code></pre><h3 id="3-트랜잭션-완료"><a href="#3-트랜잭션-완료" class="headerlink" title="3. 트랜잭션 완료"></a>3. 트랜잭션 완료</h3><p>트랜잭션이 성공적으로 완료되면, 변경 사항을 영구적으로 반영합니다.</p><pre><code class="highlight sql"><span class="keyword">COMMIT</span>;</code></pre><h3 id="4-오류-발생-시-롤백"><a href="#4-오류-발생-시-롤백" class="headerlink" title="4. 오류 발생 시 롤백"></a>4. 오류 발생 시 롤백</h3><p>아이템 구매 중 오류가 발생하면, 모든 변경 사항을 취소하고, 트랜잭션 시작 전 상태로 되돌립니다.</p><pre><code class="highlight sql"><span class="keyword">ROLLBACK</span>;</code></pre><h3 id="5-SAVEPOINT-설정"><a href="#5-SAVEPOINT-설정" class="headerlink" title="5. SAVEPOINT 설정"></a>5. SAVEPOINT 설정</h3><p>트랜잭션 내에서 SAVEPOINT를 설정하여, 특정 지점까지의 변경 사항만 롤백할 수 있습니다.</p><pre><code class="highlight sql"><span class="comment">-- 트랜잭션 시작</span><span class="keyword">START</span> TRANSACTION;<span class="comment">-- 플레이어의 골드 차감</span><span class="keyword">UPDATE</span> players<span class="keyword">SET</span> gold <span class="operator">=</span> gold <span class="operator">-</span> <span class="number">100</span><span class="keyword">WHERE</span> player_id <span class="operator">=</span> <span class="number">1</span>;<span class="comment">-- SAVEPOINT 설정</span><span class="keyword">SAVEPOINT</span> before_inventory_update;<span class="comment">-- 인벤토리에 아이템 추가 (여기서 오류 발생 시 롤백 가능)</span><span class="keyword">INSERT</span> <span class="keyword">INTO</span> inventory (player_id, item_name)<span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;Sword of Destiny&#x27;</span>);<span class="comment">-- 오류 발생 시 롤백</span><span class="keyword">ROLLBACK</span> <span class="keyword">TO</span> before_inventory_update;<span class="comment">-- 트랜잭션 완료</span><span class="keyword">COMMIT</span>;</code></pre><h3 id="6-Node-js와-MySQL을-사용한-트랜잭션-예제"><a href="#6-Node-js와-MySQL을-사용한-트랜잭션-예제" class="headerlink" title="6. Node.js와 MySQL을 사용한 트랜잭션 예제"></a>6. Node.js와 MySQL을 사용한 트랜잭션 예제</h3><p>Node.js와 MySQL을 사용하여 트랜잭션을 관리하는 방법을 실습해보겠습니다.</p><p><strong>설치 및 설정</strong></p><pre><code class="highlight bash">npm install mysql2</code></pre><p><strong>트랜잭션 코드 예제</strong></p><pre><code class="highlight javascript"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">&quot;mysql2/promise&quot;</span>);<span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">buyItem</span>(<span class="params">playerId, itemName, itemCost</span>) &#123;  <span class="keyword">const</span> connection = <span class="keyword">await</span> mysql.<span class="title function_">createConnection</span>(&#123;    <span class="attr">host</span>: <span class="string">&quot;localhost&quot;</span>,    <span class="attr">user</span>: <span class="string">&quot;root&quot;</span>,    <span class="attr">database</span>: <span class="string">&quot;rpg_game&quot;</span>,    <span class="attr">password</span>: <span class="string">&quot;password&quot;</span>,  &#125;);  <span class="keyword">try</span> &#123;    <span class="comment">// 트랜잭션 시작</span>    <span class="keyword">await</span> connection.<span class="title function_">beginTransaction</span>();    <span class="comment">// 플레이어의 골드 차감</span>    <span class="keyword">const</span> [rows] = <span class="keyword">await</span> connection.<span class="title function_">execute</span>(      <span class="string">&quot;UPDATE players SET gold = gold - ? WHERE player_id = ?&quot;</span>,      [itemCost, playerId]    );    <span class="keyword">if</span> (rows.<span class="property">affectedRows</span> === <span class="number">0</span>) &#123;      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Player not found or insufficient gold&quot;</span>);    &#125;    <span class="comment">// SAVEPOINT 설정</span>    <span class="keyword">await</span> connection.<span class="title function_">query</span>(<span class="string">&quot;SAVEPOINT before_inventory_update&quot;</span>);    <span class="comment">// 인벤토리에 아이템 추가</span>    <span class="keyword">await</span> connection.<span class="title function_">execute</span>(      <span class="string">&quot;INSERT INTO inventory (player_id, item_name) VALUES (?, ?)&quot;</span>,      [playerId, itemName]    );    <span class="comment">// 트랜잭션 완료</span>    <span class="keyword">await</span> connection.<span class="title function_">commit</span>();    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Transaction completed successfully&quot;</span>);  &#125; <span class="keyword">catch</span> (error) &#123;    <span class="comment">// 오류 발생 시 롤백</span>    <span class="keyword">await</span> connection.<span class="title function_">rollback</span>();    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;Transaction failed, rolled back to previous state&quot;</span>, error);  &#125; <span class="keyword">finally</span> &#123;    <span class="keyword">await</span> connection.<span class="title function_">end</span>();  &#125;&#125;<span class="comment">// 아이템 구매 시도</span><span class="title function_">buyItem</span>(<span class="number">1</span>, <span class="string">&quot;Sword of Destiny&quot;</span>, <span class="number">100</span>);</code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 트랜잭션 관리 언어(TCL)의 개념과 사용법에 대해 알아보았습니다.<br>트랜잭션은 데이터베이스의 일관성과 무결성을 유지하는 데 중요한 역할을 합니다. 오늘 익힌 트랜잭션 관리의 기본 원리를 실제 데이터베이스에서도 이를 활용해보세요!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> database </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>관계형 데이터베이스 이해 및 Express와 Sequelize로 연동하기</title>
      <link href="/web/essential/18/"/>
      <url>/web/essential/18/</url>
      
        <content type="html"><![CDATA[<h1 id="관계형-데이터베이스-이해-및-Express와-Sequelize로-연동하기"><a href="#관계형-데이터베이스-이해-및-Express와-Sequelize로-연동하기" class="headerlink" title="관계형 데이터베이스 이해 및 Express와 Sequelize로 연동하기"></a>관계형 데이터베이스 이해 및 Express와 Sequelize로 연동하기</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 관계형 데이터베이스의 개념과 원리에 대해 알아보고, Express와 Sequelize를 사용하여 관계형 데이터베이스를 연동하는 방법을 실습해보겠습니다. 관계형 데이터베이스는 구조화된 데이터를 효율적으로 관리하는 중요한 기술입니다.</p><h2 id="관계형-데이터베이스의-개념"><a href="#관계형-데이터베이스의-개념" class="headerlink" title="관계형 데이터베이스의 개념"></a>관계형 데이터베이스의 개념</h2><h3 id="관계형-데이터베이스란"><a href="#관계형-데이터베이스란" class="headerlink" title="관계형 데이터베이스란?"></a>관계형 데이터베이스란?</h3><p>관계형 데이터베이스(Relational Database)는 데이터를 표(Table) 형태로 저장하고, 이러한 표 간의 관계를 정의하여 데이터를 관리하는 데이터베이스 시스템입니다. 가장 널리 사용되는 관계형 데이터베이스 관리 시스템(RDBMS)으로는 MySQL, PostgreSQL, SQLite 등이 있습니다.</p><h3 id="관계형-데이터베이스의-주요-특징"><a href="#관계형-데이터베이스의-주요-특징" class="headerlink" title="관계형 데이터베이스의 주요 특징"></a>관계형 데이터베이스의 주요 특징</h3><ol><li><strong>테이블 기반</strong>: 데이터는 행(Row)과 열(Column)로 구성된 테이블에 저장됩니다.</li><li><strong>스키마 정의</strong>: 테이블의 구조와 데이터 타입을 사전에 정의하는 스키마가 존재합니다.</li><li><strong>SQL 사용</strong>: 데이터를 조회, 삽입, 갱신, 삭제하기 위해 SQL(Structured Query Language)을 사용합니다.</li><li><strong>데이터 무결성</strong>: 데이터의 정확성과 일관성을 보장하기 위한 제약 조건(Constraints)을 지원합니다.</li><li><strong>관계 설정</strong>: 테이블 간의 관계를 설정하여 데이터 간의 연관성을 정의합니다.</li></ol><h3 id="관계형-데이터베이스와-NoSQL-데이터베이스-비교"><a href="#관계형-데이터베이스와-NoSQL-데이터베이스-비교" class="headerlink" title="관계형 데이터베이스와 NoSQL 데이터베이스 비교"></a>관계형 데이터베이스와 NoSQL 데이터베이스 비교</h3><table><thead><tr><th>특징</th><th>관계형 데이터베이스</th><th>NoSQL 데이터베이스</th></tr></thead><tbody><tr><td>데이터 구조</td><td>고정된 스키마를 가진 테이블</td><td>유연한 스키마를 가진 도큐먼트, 컬렉션 등</td></tr><tr><td>데이터 조회</td><td>SQL 사용</td><td>다양한 쿼리 언어 사용</td></tr><tr><td>스케일링</td><td>수직 스케일링(단일 서버 성능 향상)</td><td>수평 스케일링(다중 서버 분산)</td></tr><tr><td>데이터 무결성 및 일관성</td><td>높은 무결성과 일관성 보장</td><td>분산 환경에서의 가용성 강조</td></tr><tr><td>사용 사례</td><td>전통적인 비즈니스 애플리케이션, 금융 시스템</td><td>빅데이터, 실시간 분석, 분산 시스템</td></tr></tbody></table><h2 id="준비하기"><a href="#준비하기" class="headerlink" title="준비하기"></a>준비하기</h2><p>먼저 필요한 패키지를 설치합니다:</p><pre><code class="highlight bash">npm init -ynpm install express sequelize sqlite3</code></pre><h2 id="서버-설정"><a href="#서버-설정" class="headerlink" title="서버 설정"></a>서버 설정</h2><p>다음은 필요한 모듈을 가져오고 서버를 설정하는 코드입니다. 자세한 부분은 뒤에서 알아보겠습니다.</p><pre><code class="highlight javascript"><span class="comment">// server.js</span><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);<span class="keyword">const</span> &#123; <span class="title class_">Sequelize</span>, <span class="title class_">DataTypes</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;sequelize&quot;</span>);<span class="keyword">const</span> app = <span class="title function_">express</span>();<span class="keyword">const</span> port = <span class="number">3000</span>;<span class="comment">// Sequelize 인스턴스 생성 (SQLite 사용)</span><span class="keyword">const</span> sequelize = <span class="keyword">new</span> <span class="title class_">Sequelize</span>(&#123;  <span class="attr">dialect</span>: <span class="string">&quot;sqlite&quot;</span>,  <span class="attr">storage</span>: <span class="string">&quot;database.sqlite&quot;</span>,&#125;);<span class="comment">// 사용자 모델 정의</span><span class="keyword">const</span> <span class="title class_">User</span> = sequelize.<span class="title function_">define</span>(<span class="string">&quot;User&quot;</span>, &#123;  <span class="attr">name</span>: &#123;    <span class="attr">type</span>: <span class="title class_">DataTypes</span>.<span class="property">STRING</span>,    <span class="attr">allowNull</span>: <span class="literal">false</span>,  &#125;,  <span class="attr">email</span>: &#123;    <span class="attr">type</span>: <span class="title class_">DataTypes</span>.<span class="property">STRING</span>,    <span class="attr">allowNull</span>: <span class="literal">false</span>,    <span class="attr">unique</span>: <span class="literal">true</span>,  &#125;,&#125;);<span class="comment">// 데이터베이스와 동기화</span>sequelize  .<span class="title function_">sync</span>()  .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Database synced&quot;</span>);  &#125;)  .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;Unable to sync the database:&quot;</span>, err);  &#125;);<span class="comment">// 미들웨어 설정</span>app.<span class="title function_">use</span>(express.<span class="title function_">json</span>());<span class="comment">// 사용자 생성 엔드포인트</span>app.<span class="title function_">post</span>(<span class="string">&quot;/users&quot;</span>, <span class="title function_">async</span> (req, res) =&gt; &#123;  <span class="keyword">try</span> &#123;    <span class="keyword">const</span> user = <span class="keyword">await</span> <span class="title class_">User</span>.<span class="title function_">create</span>(req.<span class="property">body</span>);    res.<span class="title function_">status</span>(<span class="number">201</span>).<span class="title function_">json</span>(user);  &#125; <span class="keyword">catch</span> (err) &#123;    res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">json</span>(&#123; <span class="attr">error</span>: err.<span class="property">message</span> &#125;);  &#125;&#125;);<span class="comment">// 사용자 조회 엔드포인트</span>app.<span class="title function_">get</span>(<span class="string">&quot;/users&quot;</span>, <span class="title function_">async</span> (req, res) =&gt; &#123;  <span class="keyword">try</span> &#123;    <span class="keyword">const</span> users = <span class="keyword">await</span> <span class="title class_">User</span>.<span class="title function_">findAll</span>();    res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">json</span>(users);  &#125; <span class="keyword">catch</span> (err) &#123;    res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">json</span>(&#123; <span class="attr">error</span>: err.<span class="property">message</span> &#125;);  &#125;&#125;);<span class="comment">// 서버 시작</span>app.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Server is running on http://localhost:<span class="subst">$&#123;port&#125;</span>`</span>);&#125;);</code></pre><h2 id="설정-설명"><a href="#설정-설명" class="headerlink" title="설정 설명"></a>설정 설명</h2><p>Express와 Sequelize를 사용하여 관계형 데이터베이스를 연동하는 방법을 설명합니다.</p><ol><li><p><strong>Sequelize 인스턴스 생성</strong>:</p><pre><code class="highlight javascript"><span class="keyword">const</span> &#123; <span class="title class_">Sequelize</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;sequelize&quot;</span>);<span class="keyword">const</span> sequelize = <span class="keyword">new</span> <span class="title class_">Sequelize</span>(&#123;  <span class="attr">dialect</span>: <span class="string">&quot;sqlite&quot;</span>,  <span class="attr">storage</span>: <span class="string">&quot;database.sqlite&quot;</span>,&#125;);</code></pre><p><code>Sequelize</code> 인스턴스를 생성하고, SQLite를 사용하여 데이터베이스를 설정합니다. 다른 데이터베이스(MySQL, PostgreSQL 등)를 사용하려면 해당 데이터베이스의 설정을 추가합니다.</p></li><li><p><strong>모델 정의</strong>:</p><pre><code class="highlight javascript"><span class="keyword">const</span> <span class="title class_">User</span> = sequelize.<span class="title function_">define</span>(<span class="string">&quot;User&quot;</span>, &#123;  <span class="attr">name</span>: &#123;    <span class="attr">type</span>: <span class="title class_">DataTypes</span>.<span class="property">STRING</span>,    <span class="attr">allowNull</span>: <span class="literal">false</span>,  &#125;,  <span class="attr">email</span>: &#123;    <span class="attr">type</span>: <span class="title class_">DataTypes</span>.<span class="property">STRING</span>,    <span class="attr">allowNull</span>: <span class="literal">false</span>,    <span class="attr">unique</span>: <span class="literal">true</span>,  &#125;,&#125;);</code></pre><p><code>User</code> 모델을 정의하여 데이터베이스의 <code>User</code> 테이블을 생성합니다. 여기서는 <code>name</code>과 <code>email</code> 필드를 가지며, <code>email</code>은 고유(unique)해야 합니다.</p></li><li><p><strong>데이터베이스와 동기화</strong>:</p><pre><code class="highlight javascript">sequelize  .<span class="title function_">sync</span>()  .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Database synced&quot;</span>);  &#125;)  .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;Unable to sync the database:&quot;</span>, err);  &#125;);</code></pre><p><code>sequelize.sync()</code>를 호출하여 데이터베이스와 모델을 동기화합니다. 이를 통해 테이블이 생성되고, 모델 구조와 일치하도록 데이터베이스가 설정됩니다.</p></li><li><p><strong>사용자 생성 엔드포인트</strong>:</p><pre><code class="highlight javascript">app.<span class="title function_">post</span>(<span class="string">&quot;/users&quot;</span>, <span class="title function_">async</span> (req, res) =&gt; &#123;  <span class="keyword">try</span> &#123;    <span class="keyword">const</span> user = <span class="keyword">await</span> <span class="title class_">User</span>.<span class="title function_">create</span>(req.<span class="property">body</span>);    res.<span class="title function_">status</span>(<span class="number">201</span>).<span class="title function_">json</span>(user);  &#125; <span class="keyword">catch</span> (err) &#123;    res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">json</span>(&#123; <span class="attr">error</span>: err.<span class="property">message</span> &#125;);  &#125;&#125;);</code></pre><p>POST 요청을 통해 새로운 사용자를 생성하는 엔드포인트를 정의합니다. 요청 본문(req.body)에 포함된 데이터를 사용하여 새로운 사용자를 데이터베이스에 추가합니다.</p></li><li><p><strong>사용자 조회 엔드포인트</strong>:</p><pre><code class="highlight javascript">app.<span class="title function_">get</span>(<span class="string">&quot;/users&quot;</span>, <span class="title function_">async</span> (req, res) =&gt; &#123;  <span class="keyword">try</span> &#123;    <span class="keyword">const</span> users = <span class="keyword">await</span> <span class="title class_">User</span>.<span class="title function_">findAll</span>();    res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">json</span>(users);  &#125; <span class="keyword">catch</span> (err) &#123;    res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">json</span>(&#123; <span class="attr">error</span>: err.<span class="property">message</span> &#125;);  &#125;&#125;);</code></pre><p>GET 요청을 통해 모든 사용자를 조회하는 엔드포인트를 정의합니다. 데이터베이스에서 모든 사용자 데이터를 가져와 응답으로 반환합니다.</p></li></ol><h2 id="테스트"><a href="#테스트" class="headerlink" title="테스트"></a>테스트</h2><p>이렇게 하면 Express와 Sequelize를 사용하여 관계형 데이터베이스를 연동할 수 있습니다. 이 코드를 실행하기 전에 <code>server.js</code> 파일을 실행하여 서버를 시작하세요.</p><pre><code class="highlight bash">node server.js</code></pre><p>서버가 성공적으로 실행되면, <code>http://localhost:3000</code>에서 API를 테스트할 수 있습니다.</p><h3 id="테스트-방법"><a href="#테스트-방법" class="headerlink" title="테스트 방법"></a>테스트 방법</h3><ol><li><p><strong>사용자 생성</strong>:</p><pre><code class="highlight bash">curl -X POST http://localhost:3000/users -H <span class="string">&quot;Content-Type: application/json&quot;</span> -d <span class="string">&#x27;&#123;&quot;name&quot;:&quot;John Doe&quot;, &quot;email&quot;:&quot;john@example.com&quot;&#125;&#x27;</span></code></pre><p>이 명령어를 사용하여 새로운 사용자를 생성할 수 있습니다.</p></li><li><p><strong>사용자 조회</strong>:</p><pre><code class="highlight bash">curl http://localhost:3000/users</code></pre><p>이 명령어를 사용하여 모든 사용자 목록을 조회할 수 있습니다.</p></li></ol><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 관계형 데이터베이스의 개념과 필요성을 이해하고, Express와 Sequelize를 사용하여 관계형 데이터베이스를 연동하는 방법을 알아보았습니다. 이를 바탕으로 구조화된 데이터를 효율적으로 관리할 수 있는 웹 애플리케이션을 개발해보세요!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> web_필수 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Node.js Mocha</title>
      <link href="/cli/12/"/>
      <url>/cli/12/</url>
      
        <content type="html"><![CDATA[<h1 id="Mocha-자바스크립트-테스트-프레임워크"><a href="#Mocha-자바스크립트-테스트-프레임워크" class="headerlink" title="Mocha: 자바스크립트 테스트 프레임워크"></a>Mocha: 자바스크립트 테스트 프레임워크</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 자바스크립트 테스트 프레임워크인 Mocha에 대해 알아보겠습니다. Mocha의 역할과 필요성, 설치 및 설정 방법, 기본 사용법과 고급 옵션을 알아보겠습니다.</p><h2 id="1-Mocha-소개"><a href="#1-Mocha-소개" class="headerlink" title="1. Mocha 소개"></a>1. Mocha 소개</h2><h3 id="Mocha란-무엇인가"><a href="#Mocha란-무엇인가" class="headerlink" title="Mocha란 무엇인가?"></a>Mocha란 무엇인가?</h3><p>Mocha는 Node.js 및 브라우저에서 동작하는 자바스크립트 테스트 프레임워크입니다. Mocha는 비동기 테스트를 지원하며, 다양한 테스트 스타일과 풍부한 기능을 제공합니다. 주로 유닛 테스트 및 통합 테스트를 작성하는 데 사용됩니다.</p><h3 id="Mocha의-역할과-필요성"><a href="#Mocha의-역할과-필요성" class="headerlink" title="Mocha의 역할과 필요성"></a>Mocha의 역할과 필요성</h3><ul><li><strong>테스트 자동화</strong>: 코드 변경 시 자동으로 테스트를 실행하여 버그를 미리 발견할 수 있습니다.</li><li><strong>비동기 테스트 지원</strong>: 비동기 코드를 테스트하는 데 유용합니다.</li><li><strong>유연한 테스트 스타일</strong>: BDD(Behavior Driven Development) 및 TDD(Test Driven Development) 스타일을 지원합니다.</li></ul><h2 id="2-설치-및-설정"><a href="#2-설치-및-설정" class="headerlink" title="2. 설치 및 설정"></a>2. 설치 및 설정</h2><h3 id="Mocha-설치-방법"><a href="#Mocha-설치-방법" class="headerlink" title="Mocha 설치 방법"></a>Mocha 설치 방법</h3><p>Mocha를 설치하려면 다음 명령어를 사용합니다.</p><pre><code class="highlight bash">npm install --save-dev mocha</code></pre><h3 id="Mocha-설정-방법"><a href="#Mocha-설정-방법" class="headerlink" title="Mocha 설정 방법"></a>Mocha 설정 방법</h3><p>Mocha를 설정하려면 <code>package.json</code> 파일에 다음과 같은 설정을 추가합니다.</p><pre><code class="highlight json"><span class="punctuation">&#123;</span>  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mocha&quot;</span>  <span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></code></pre><h2 id="3-기본-사용법"><a href="#3-기본-사용법" class="headerlink" title="3. 기본 사용법"></a>3. 기본 사용법</h2><h3 id="테스트-파일-작성"><a href="#테스트-파일-작성" class="headerlink" title="테스트 파일 작성"></a>테스트 파일 작성</h3><p>테스트 파일은 프로젝트 디렉토리에 <code>test</code> 디렉토리를 생성하고 그 안에 작성할 수 있습니다.</p><p><strong>test&#x2F;sum.test.js</strong></p><pre><code class="highlight javascript"><span class="keyword">const</span> assert = <span class="built_in">require</span>(<span class="string">&quot;assert&quot;</span>);<span class="keyword">const</span> <span class="title function_">sum</span> = (<span class="params">a, b</span>) =&gt; a + b;<span class="title function_">describe</span>(<span class="string">&quot;Sum Function&quot;</span>, <span class="function">() =&gt;</span> &#123;  <span class="title function_">it</span>(<span class="string">&quot;should return 3 when adding 1 and 2&quot;</span>, <span class="function">() =&gt;</span> &#123;    assert.<span class="title function_">strictEqual</span>(<span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>), <span class="number">3</span>);  &#125;);&#125;);</code></pre><h3 id="테스트-실행"><a href="#테스트-실행" class="headerlink" title="테스트 실행"></a>테스트 실행</h3><p>테스트를 실행하려면 다음 명령어를 사용합니다.</p><pre><code class="highlight bash">npm <span class="built_in">test</span></code></pre><h2 id="4-고급-사용법"><a href="#4-고급-사용법" class="headerlink" title="4. 고급 사용법"></a>4. 고급 사용법</h2><h3 id="비동기-테스트"><a href="#비동기-테스트" class="headerlink" title="비동기 테스트"></a>비동기 테스트</h3><p>Mocha는 비동기 코드를 테스트하는 데 유용합니다. <code>done</code> 콜백을 사용하거나, <code>async/await</code>를 사용할 수 있습니다.</p><p><strong>test&#x2F;async.test.js</strong></p><pre><code class="highlight javascript"><span class="keyword">const</span> assert = <span class="built_in">require</span>(<span class="string">&quot;assert&quot;</span>);<span class="title function_">describe</span>(<span class="string">&quot;Async Function&quot;</span>, <span class="function">() =&gt;</span> &#123;  <span class="title function_">it</span>(<span class="string">&quot;should return true after 1 second&quot;</span>, <span class="function">(<span class="params">done</span>) =&gt;</span> &#123;    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;      assert.<span class="title function_">strictEqual</span>(<span class="literal">true</span>, <span class="literal">true</span>);      <span class="title function_">done</span>();    &#125;, <span class="number">1000</span>);  &#125;);  <span class="title function_">it</span>(<span class="string">&quot;should return true with async/await&quot;</span>, <span class="title function_">async</span> () =&gt; &#123;    <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> <span class="built_in">setTimeout</span>(resolve, <span class="number">1000</span>));    assert.<span class="title function_">strictEqual</span>(<span class="literal">true</span>, <span class="literal">true</span>);  &#125;);&#125;);</code></pre><h3 id="mocha-watch-옵션"><a href="#mocha-watch-옵션" class="headerlink" title="mocha --watch 옵션"></a><code>mocha --watch</code> 옵션</h3><p>코드 변경 시 자동으로 테스트를 실행하려면 <code>--watch</code> 옵션을 사용할 수 있습니다.</p><pre><code class="highlight bash">mocha --watch</code></pre><h2 id="5-실습-예제"><a href="#5-실습-예제" class="headerlink" title="5. 실습 예제"></a>5. 실습 예제</h2><h3 id="간단한-유닛-테스트-작성"><a href="#간단한-유닛-테스트-작성" class="headerlink" title="간단한 유닛 테스트 작성"></a>간단한 유닛 테스트 작성</h3><ol><li><strong>프로젝트 디렉토리 생성</strong>: 새로운 디렉토리를 만들고 이동합니다.</li></ol><pre><code class="highlight bash"><span class="built_in">mkdir</span> my-mocha-project<span class="built_in">cd</span> my-mocha-project</code></pre><ol start="2"><li><strong>프로젝트 초기화</strong>: <code>npm init -y</code> 명령어를 사용하여 프로젝트를 초기화합니다.</li></ol><pre><code class="highlight bash">npm init -y</code></pre><ol start="3"><li><strong>Mocha 설치</strong>: Mocha를 설치합니다.</li></ol><pre><code class="highlight bash">npm install --save-dev mocha</code></pre><ol start="4"><li><strong>테스트 디렉토리 생성</strong>: <code>test</code> 디렉토리를 생성하고 테스트 파일을 작성합니다.</li></ol><p><strong>test&#x2F;sum.test.js</strong></p><pre><code class="highlight javascript"><span class="keyword">const</span> assert = <span class="built_in">require</span>(<span class="string">&quot;assert&quot;</span>);<span class="keyword">const</span> <span class="title function_">sum</span> = (<span class="params">a, b</span>) =&gt; a + b;<span class="title function_">describe</span>(<span class="string">&quot;Sum Function&quot;</span>, <span class="function">() =&gt;</span> &#123;  <span class="title function_">it</span>(<span class="string">&quot;should return 3 when adding 1 and 2&quot;</span>, <span class="function">() =&gt;</span> &#123;    assert.<span class="title function_">strictEqual</span>(<span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>), <span class="number">3</span>);  &#125;);&#125;);</code></pre><ol start="5"><li><strong>테스트 실행</strong>: <code>npm test</code> 명령어를 사용하여 테스트를 실행합니다.</li></ol><pre><code class="highlight bash">npm <span class="built_in">test</span></code></pre><h3 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h3><p>이번 시간에는 Mocha의 기본 개념부터 설치 방법, 기본 및 고급 사용법, 추가 명령어까지 다루었습니다. Mocha를 통해 자바스크립트 코드를 효율적으로 테스트하고 안정성을 높일 수 있습니다. 다음 시간에는 또 다른 유용한 CLI 도구를 소개하겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> CLI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Node.js Jest</title>
      <link href="/cli/11/"/>
      <url>/cli/11/</url>
      
        <content type="html"><![CDATA[<h1 id="Jest-자바스크립트-테스트-프레임워크"><a href="#Jest-자바스크립트-테스트-프레임워크" class="headerlink" title="Jest: 자바스크립트 테스트 프레임워크"></a>Jest: 자바스크립트 테스트 프레임워크</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 자바스크립트 테스트 프레임워크인 Jest에 대해 알아보겠습니다. Jest의 역할과 필요성, 설치 및 설정 방법, 기본 사용법과 고급 옵션을 알아보겠습니다.</p><h2 id="1-Jest-소개"><a href="#1-Jest-소개" class="headerlink" title="1. Jest 소개"></a>1. Jest 소개</h2><h3 id="Jest란-무엇인가"><a href="#Jest란-무엇인가" class="headerlink" title="Jest란 무엇인가?"></a>Jest란 무엇인가?</h3><p>Jest는 자바스크립트 코드의 테스트를 작성하고 실행하기 위한 강력한 프레임워크입니다. Facebook에서 개발한 Jest는 유닛 테스트, 통합 테스트 및 스냅샷 테스트를 지원하며, React 애플리케이션을 포함한 다양한 자바스크립트 프로젝트에서 널리 사용됩니다.</p><h3 id="Jest의-역할과-필요성"><a href="#Jest의-역할과-필요성" class="headerlink" title="Jest의 역할과 필요성"></a>Jest의 역할과 필요성</h3><ul><li><strong>테스트 자동화</strong>: 코드 변경 시 자동으로 테스트를 실행하여 버그를 미리 발견할 수 있습니다.</li><li><strong>테스트 커버리지</strong>: 코드의 테스트 커버리지를 제공하여 테스트되지 않은 코드를 쉽게 확인할 수 있습니다.</li><li><strong>간편한 설정</strong>: 설정이 간편하고 사용하기 쉽습니다.</li><li><strong>스냅샷 테스트</strong>: UI 컴포넌트의 출력이 이전과 동일한지 확인할 수 있습니다.</li></ul><h2 id="2-설치-및-설정"><a href="#2-설치-및-설정" class="headerlink" title="2. 설치 및 설정"></a>2. 설치 및 설정</h2><h3 id="Jest-설치-방법"><a href="#Jest-설치-방법" class="headerlink" title="Jest 설치 방법"></a>Jest 설치 방법</h3><p>Jest를 설치하려면 다음 명령어를 사용합니다.</p><pre><code class="highlight bash">npm install --save-dev jest</code></pre><h3 id="Jest-설정-방법"><a href="#Jest-설정-방법" class="headerlink" title="Jest 설정 방법"></a>Jest 설정 방법</h3><p>Jest를 설정하려면 <code>package.json</code> 파일에 다음과 같은 설정을 추가합니다.</p><pre><code class="highlight json"><span class="punctuation">&#123;</span>  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;jest&quot;</span>  <span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></code></pre><h2 id="3-기본-사용법"><a href="#3-기본-사용법" class="headerlink" title="3. 기본 사용법"></a>3. 기본 사용법</h2><h3 id="테스트-파일-작성"><a href="#테스트-파일-작성" class="headerlink" title="테스트 파일 작성"></a>테스트 파일 작성</h3><p>테스트 파일은 <code>__tests__</code> 디렉토리에 생성하거나, 파일 이름에 <code>.test.js</code> 또는 <code>.spec.js</code>를 추가하여 작성할 수 있습니다.</p><p><strong>sum.test.js</strong></p><pre><code class="highlight javascript"><span class="keyword">const</span> <span class="title function_">sum</span> = (<span class="params">a, b</span>) =&gt; a + b;<span class="title function_">test</span>(<span class="string">&quot;adds 1 + 2 to equal 3&quot;</span>, <span class="function">() =&gt;</span> &#123;  <span class="title function_">expect</span>(<span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>)).<span class="title function_">toBe</span>(<span class="number">3</span>);&#125;);</code></pre><h3 id="테스트-실행"><a href="#테스트-실행" class="headerlink" title="테스트 실행"></a>테스트 실행</h3><p>테스트를 실행하려면 다음 명령어를 사용합니다.</p><pre><code class="highlight bash">npm <span class="built_in">test</span></code></pre><h3 id="기타-옵션"><a href="#기타-옵션" class="headerlink" title="기타 옵션"></a>기타 옵션</h3><ul><li><strong>자동 실행</strong>: 코드 변경 시 자동으로 테스트를 실행합니다.</li></ul><pre><code class="highlight bash">npm <span class="built_in">test</span> -- --watch</code></pre><ul><li><strong>테스트 커버리지</strong>: 코드의 테스트 커버리지를 출력합니다.</li></ul><pre><code class="highlight bash">npm <span class="built_in">test</span> -- --coverage</code></pre><h2 id="4-고급-사용법"><a href="#4-고급-사용법" class="headerlink" title="4. 고급 사용법"></a>4. 고급 사용법</h2><h3 id="Mocking"><a href="#Mocking" class="headerlink" title="Mocking"></a>Mocking</h3><p>Jest는 함수, 모듈 및 타이머를 쉽게 mock할 수 있습니다.</p><p><strong>fetchData.js</strong></p><pre><code class="highlight javascript"><span class="keyword">const</span> <span class="title function_">fetchData</span> = (<span class="params">callback</span>) =&gt; &#123;  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;    <span class="title function_">callback</span>(<span class="string">&quot;peanut butter&quot;</span>);  &#125;, <span class="number">1000</span>);&#125;;<span class="variable language_">module</span>.<span class="property">exports</span> = fetchData;</code></pre><p><strong>fetchData.test.js</strong></p><pre><code class="highlight javascript"><span class="keyword">const</span> fetchData = <span class="built_in">require</span>(<span class="string">&quot;./fetchData&quot;</span>);jest.<span class="title function_">useFakeTimers</span>();<span class="title function_">test</span>(<span class="string">&quot;fetches data&quot;</span>, <span class="function">() =&gt;</span> &#123;  <span class="keyword">const</span> callback = jest.<span class="title function_">fn</span>();  <span class="title function_">fetchData</span>(callback);  jest.<span class="title function_">runAllTimers</span>();  <span class="title function_">expect</span>(callback).<span class="title function_">toHaveBeenCalledWith</span>(<span class="string">&quot;peanut butter&quot;</span>);&#125;);</code></pre><h3 id="스냅샷-테스트"><a href="#스냅샷-테스트" class="headerlink" title="스냅샷 테스트"></a>스냅샷 테스트</h3><p>스냅샷 테스트를 사용하여 UI 컴포넌트의 출력을 확인할 수 있습니다.</p><p><strong>Link.js</strong></p><pre><code class="highlight javascript"><span class="keyword">const</span> <span class="title function_">Link</span> = (<span class="params">&#123; page, children &#125;</span>) =&gt; &#123;  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#123;page&#125;</span>&gt;</span>&#123;children&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span>;&#125;;<span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">Link</span>;</code></pre><p><strong>Link.test.js</strong></p><pre><code class="highlight javascript"><span class="keyword">const</span> <span class="title class_">React</span> = <span class="built_in">require</span>(<span class="string">&quot;react&quot;</span>);<span class="keyword">const</span> renderer = <span class="built_in">require</span>(<span class="string">&quot;react-test-renderer&quot;</span>);<span class="keyword">const</span> <span class="title class_">Link</span> = <span class="built_in">require</span>(<span class="string">&quot;./Link&quot;</span>);<span class="title function_">test</span>(<span class="string">&quot;Link changes the class when hovered&quot;</span>, <span class="function">() =&gt;</span> &#123;  <span class="keyword">const</span> component = renderer.<span class="title function_">create</span>(    <span class="language-xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">page</span>=<span class="string">&quot;http://www.facebook.com&quot;</span>&gt;</span>Facebook<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span>  );  <span class="keyword">let</span> tree = component.<span class="title function_">toJSON</span>();  <span class="title function_">expect</span>(tree).<span class="title function_">toMatchSnapshot</span>();&#125;);</code></pre><h2 id="5-실습-예제"><a href="#5-실습-예제" class="headerlink" title="5. 실습 예제"></a>5. 실습 예제</h2><h3 id="간단한-유닛-테스트-작성"><a href="#간단한-유닛-테스트-작성" class="headerlink" title="간단한 유닛 테스트 작성"></a>간단한 유닛 테스트 작성</h3><ol><li><strong>프로젝트 디렉토리 생성</strong>: 새로운 디렉토리를 만들고 이동합니다.</li></ol><pre><code class="highlight bash"><span class="built_in">mkdir</span> my-jest-project<span class="built_in">cd</span> my-jest-project</code></pre><ol start="2"><li><strong>프로젝트 초기화</strong>: <code>npm init -y</code> 명령어를 사용하여 프로젝트를 초기화합니다.</li></ol><pre><code class="highlight bash">npm init -y</code></pre><ol start="3"><li><strong>Jest 설치</strong>: Jest를 설치합니다.</li></ol><pre><code class="highlight bash">npm install --save-dev jest</code></pre><ol start="4"><li><strong>테스트 파일 작성</strong>: <code>sum.test.js</code> 파일을 작성합니다.</li></ol><p><strong>sum.test.js</strong></p><pre><code class="highlight javascript"><span class="keyword">const</span> <span class="title function_">sum</span> = (<span class="params">a, b</span>) =&gt; a + b;<span class="title function_">test</span>(<span class="string">&quot;adds 1 + 2 to equal 3&quot;</span>, <span class="function">() =&gt;</span> &#123;  <span class="title function_">expect</span>(<span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>)).<span class="title function_">toBe</span>(<span class="number">3</span>);&#125;);</code></pre><ol start="5"><li><strong>테스트 실행</strong>: <code>npm test</code> 명령어를 사용하여 테스트를 실행합니다.</li></ol><pre><code class="highlight bash">npm <span class="built_in">test</span></code></pre><h3 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h3><p>이번 시간에는 Jest의 기본 개념부터 설치 방법, 기본 및 고급 사용법, 추가 명령어까지 다루었습니다. Jest를 통해 자바스크립트 코드를 효율적으로 테스트하고 안정성을 높일 수 있습니다. 다음 시간에는 또 다른 유용한 CLI 도구를 소개하겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> CLI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript tsconfig - 프로젝트 설정 및 관리</title>
      <link href="/typescript/special/15/"/>
      <url>/typescript/special/15/</url>
      
        <content type="html"><![CDATA[<h1 id="TypeScript-tsconfig-프로젝트-설정-및-관리"><a href="#TypeScript-tsconfig-프로젝트-설정-및-관리" class="headerlink" title="TypeScript tsconfig - 프로젝트 설정 및 관리"></a>TypeScript tsconfig - 프로젝트 설정 및 관리</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 TypeScript 프로젝트를 효과적으로 설정하고 관리하는 방법에 대해 알아보겠습니다. 특히 <code>tsconfig.json</code> 파일을 통해 TypeScript 컴파일러의 옵션을 설정하고, 프로젝트 빌드 전략을 구성하는 방법을 중점적으로 다뤄보겠습니다.</p><h2 id="tsconfig-json-파일"><a href="#tsconfig-json-파일" class="headerlink" title="tsconfig.json 파일"></a><code>tsconfig.json</code> 파일</h2><h3 id="1-tsconfig-json이란"><a href="#1-tsconfig-json이란" class="headerlink" title="1. tsconfig.json이란?"></a>1. <code>tsconfig.json</code>이란?</h3><p><code>tsconfig.json</code> 파일은 TypeScript 프로젝트의 설정을 관리하는 데 사용되는 파일입니다. 이 파일은 TypeScript 컴파일러에게 프로젝트의 컴파일 옵션과 파일 경로 등을 알려주는 역할을 합니다. 프로젝트의 루트 디렉토리에 위치하며, <code>tsc</code> 명령어를 실행할 때 이 파일을 참조하여 프로젝트를 빌드합니다.</p><h3 id="2-기본-tsconfig-json-설정"><a href="#2-기본-tsconfig-json-설정" class="headerlink" title="2. 기본 tsconfig.json 설정"></a>2. 기본 <code>tsconfig.json</code> 설정</h3><p>TypeScript 프로젝트를 초기화하면 기본적인 <code>tsconfig.json</code> 파일이 생성됩니다. 이 파일에는 여러 설정 옵션이 포함되어 있으며, 각 옵션을 통해 컴파일러의 동작 방식을 제어할 수 있습니다.</p><pre><code class="highlight json"><span class="punctuation">&#123;</span>  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;es6&quot;</span><span class="punctuation">,</span> <span class="comment">// 컴파일된 JavaScript의 버전</span>    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;commonjs&quot;</span><span class="punctuation">,</span> <span class="comment">// 모듈 시스템 설정</span>    <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 엄격한 타입 검사 옵션 활성화</span>    <span class="attr">&quot;esModuleInterop&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// ES 모듈 호환성 설정</span>    <span class="attr">&quot;skipLibCheck&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 라이브러리 타입 검사 생략</span>    <span class="attr">&quot;forceConsistentCasingInFileNames&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span> <span class="comment">// 파일명 대소문자 일관성 강제</span>  <span class="punctuation">&#125;</span><span class="punctuation">,</span>  <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;src&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="comment">// 컴파일 대상 파일 경로</span>  <span class="attr">&quot;exclude&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;node_modules&quot;</span><span class="punctuation">]</span> <span class="comment">// 컴파일에서 제외할 파일 경로</span><span class="punctuation">&#125;</span></code></pre><h3 id="3-주요-컴파일러-옵션"><a href="#3-주요-컴파일러-옵션" class="headerlink" title="3. 주요 컴파일러 옵션"></a>3. 주요 컴파일러 옵션</h3><p><code>tsconfig.json</code>에서 자주 사용되는 몇 가지 주요 컴파일러 옵션을 살펴보겠습니다.</p><ul><li><strong><code>target</code></strong>: 컴파일된 JavaScript 코드가 호환될 ECMAScript 버전을 지정합니다. 예를 들어, <code>es5</code>, <code>es6</code>, <code>es2017</code> 등을 설정할 수 있습니다.</li><li><strong><code>module</code></strong>: 모듈 시스템을 설정합니다. Node.js 환경에서는 주로 <code>commonjs</code>를 사용하며, 웹 환경에서는 <code>esnext</code>, <code>umd</code> 등을 사용할 수 있습니다.</li><li><strong><code>strict</code></strong>: 엄격한 타입 검사를 활성화합니다. 이 옵션을 활성화하면 TypeScript의 모든 엄격한 검사 모드(<code>strictNullChecks</code>, <code>strictFunctionTypes</code> 등)가 활성화되어 타입 안전성이 높아집니다.</li><li><strong><code>esModuleInterop</code></strong>: CommonJS 모듈을 ES6 모듈과 호환되게 합니다. 이 옵션은 <code>import</code> 구문을 사용할 때 호환성을 보장해줍니다.</li><li><strong><code>sourceMap</code></strong>: JavaScript 디버깅을 위해 소스 맵 파일을 생성할지를 결정합니다. 이 옵션을 활성화하면 디버깅 시 TypeScript 소스 코드와 컴파일된 JavaScript 코드 간의 매핑이 가능합니다.</li><li><strong><code>outDir</code></strong>: 컴파일된 JavaScript 파일의 출력 디렉토리를 지정합니다. 예를 들어, <code>dist</code> 디렉토리에 컴파일된 파일을 저장하도록 설정할 수 있습니다.</li></ul><h2 id="프로젝트-빌드-전략"><a href="#프로젝트-빌드-전략" class="headerlink" title="프로젝트 빌드 전략"></a>프로젝트 빌드 전략</h2><h3 id="1-프로젝트-디렉토리-구조"><a href="#1-프로젝트-디렉토리-구조" class="headerlink" title="1. 프로젝트 디렉토리 구조"></a>1. 프로젝트 디렉토리 구조</h3><p>TypeScript 프로젝트를 효율적으로 관리하기 위해 디렉토리 구조를 잘 설계하는 것이 중요합니다. 일반적으로 다음과 같은 구조를 따릅니다.</p><pre><code class="highlight bash">my-project/├── src/                 <span class="comment"># 소스 파일 디렉토리</span>│   ├── index.ts         <span class="comment"># 진입점 파일</span>│   ├── components/      <span class="comment"># 컴포넌트 관련 파일</span>│   └── utils/           <span class="comment"># 유틸리티 함수 파일</span>├── dist/                <span class="comment"># 컴파일된 출력 파일 디렉토리</span>├── node_modules/        <span class="comment"># npm 패키지 디렉토리</span>├── tsconfig.json        <span class="comment"># TypeScript 설정 파일</span>└── package.json         <span class="comment"># npm 설정 파일</span></code></pre><p>이 구조는 소스 파일과 컴파일된 파일을 명확히 구분하여 관리할 수 있게 해주며, 프로젝트의 확장성을 높여줍니다.</p><h3 id="2-다중-tsconfig-json-설정"><a href="#2-다중-tsconfig-json-설정" class="headerlink" title="2. 다중 tsconfig.json 설정"></a>2. 다중 <code>tsconfig.json</code> 설정</h3><p>큰 규모의 프로젝트에서는 여러 개의 <code>tsconfig.json</code> 파일을 사용하여 프로젝트의 서브 파트별로 별도의 설정을 적용할 수 있습니다. 이를 통해 빌드 시간을 단축하고, 다양한 환경에 맞는 설정을 쉽게 관리할 수 있습니다.</p><p>예를 들어, 다음과 같이 루트 <code>tsconfig.json</code> 파일을 기본 설정으로 사용하고, 각각의 하위 프로젝트 또는 서브 파트에 대해 별도의 <code>tsconfig.app.json</code>, <code>tsconfig.lib.json</code> 파일을 정의할 수 있습니다.</p><p><strong>루트 <code>tsconfig.json</code>:</strong></p><pre><code class="highlight json"><span class="punctuation">&#123;</span>  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;es6&quot;</span><span class="punctuation">,</span>    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;commonjs&quot;</span><span class="punctuation">,</span>    <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span>    <span class="attr">&quot;esModuleInterop&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span>  <span class="punctuation">&#125;</span><span class="punctuation">,</span>  <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;src&quot;</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></code></pre><p><strong>앱용 <code>tsconfig.app.json</code>:</strong></p><pre><code class="highlight json"><span class="punctuation">&#123;</span>  <span class="attr">&quot;extends&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./tsconfig.json&quot;</span><span class="punctuation">,</span>  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>    <span class="attr">&quot;outDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dist/app&quot;</span>  <span class="punctuation">&#125;</span><span class="punctuation">,</span>  <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;src/app&quot;</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></code></pre><p><strong>라이브러리용 <code>tsconfig.lib.json</code>:</strong></p><pre><code class="highlight json"><span class="punctuation">&#123;</span>  <span class="attr">&quot;extends&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./tsconfig.json&quot;</span><span class="punctuation">,</span>  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>    <span class="attr">&quot;outDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dist/lib&quot;</span><span class="punctuation">,</span>    <span class="attr">&quot;declaration&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span>  <span class="punctuation">&#125;</span><span class="punctuation">,</span>  <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;src/lib&quot;</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></code></pre><p>이렇게 설정하면, 앱 코드와 라이브러리 코드를 각각 다른 출력 디렉토리에 컴파일하고, 라이브러리 코드에 대해서는 <code>.d.ts</code> 타입 선언 파일을 생성하도록 관리할 수 있습니다.</p><h3 id="3-빌드-스크립트-관리"><a href="#3-빌드-스크립트-관리" class="headerlink" title="3. 빌드 스크립트 관리"></a>3. 빌드 스크립트 관리</h3><p><code>npm</code> 또는 <code>yarn</code>을 사용해 빌드 스크립트를 관리하면, 프로젝트 빌드를 일관되게 수행할 수 있습니다. <code>package.json</code> 파일에 빌드 스크립트를 정의하여, 한 번의 명령어로 프로젝트를 빌드할 수 있도록 설정합니다.</p><p><strong><code>package.json</code> 예시:</strong></p><pre><code class="highlight json"><span class="punctuation">&#123;</span>  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tsc --build&quot;</span><span class="punctuation">,</span>    <span class="attr">&quot;build:app&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tsc --project tsconfig.app.json&quot;</span><span class="punctuation">,</span>    <span class="attr">&quot;build:lib&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tsc --project tsconfig.lib.json&quot;</span>  <span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></code></pre><p>위 스크립트를 사용하면 전체 프로젝트를 빌드하거나, 특정 파트를 선택적으로 빌드할 수 있습니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 TypeScript 프로젝트를 설정하고 관리하는 방법에 대해 알아보았습니다. <code>tsconfig.json</code> 파일을 통해 컴파일러 옵션을 세밀하게 제어하고, 프로젝트의 디렉토리 구조와 빌드 전략을 적절히 구성함으로써, TypeScript 프로젝트의 효율성과 유지보수성을 크게 향상시킬 수 있습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> TS_필살기 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Node.js ESLint</title>
      <link href="/cli/10/"/>
      <url>/cli/10/</url>
      
        <content type="html"><![CDATA[<h1 id="ESLint-JavaScript-코드-품질-도구"><a href="#ESLint-JavaScript-코드-품질-도구" class="headerlink" title="ESLint: JavaScript 코드 품질 도구"></a>ESLint: JavaScript 코드 품질 도구</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 JavaScript 코드 품질 도구인 ESLint에 대해 알아보겠습니다. ESLint의 역할과 필요성, 설치 및 설정 방법, 기본 사용법과 고급 옵션, 그리고 실제 프로젝트에서 ESLint를 활용하는 방법을 알아보겠습니다.</p><h2 id="1-ESLint-소개"><a href="#1-ESLint-소개" class="headerlink" title="1. ESLint 소개"></a>1. ESLint 소개</h2><h3 id="ESLint란-무엇인가"><a href="#ESLint란-무엇인가" class="headerlink" title="ESLint란 무엇인가?"></a>ESLint란 무엇인가?</h3><p>ESLint는 JavaScript 및 JSX 코드의 품질과 스타일을 검사하고 수정할 수 있는 정적 분석 도구입니다. 코드 일관성을 유지하고 잠재적인 오류를 줄이는 데 도움을 줍니다.</p><h3 id="ESLint의-역할과-중요성"><a href="#ESLint의-역할과-중요성" class="headerlink" title="ESLint의 역할과 중요성"></a>ESLint의 역할과 중요성</h3><ul><li><strong>코드 일관성 유지</strong>: 팀 내에서 코드 스타일을 통일하여 일관된 코딩 스타일을 유지할 수 있습니다.</li><li><strong>잠재적 오류 검출</strong>: 코드 작성 중 발생할 수 있는 잠재적인 오류를 사전에 검출하여 디버깅 시간을 절약할 수 있습니다.</li><li><strong>코드 품질 향상</strong>: 정적 분석을 통해 코드의 품질을 향상시키고 유지 보수를 용이하게 합니다.</li></ul><h2 id="2-설치-및-설정"><a href="#2-설치-및-설정" class="headerlink" title="2. 설치 및 설정"></a>2. 설치 및 설정</h2><h3 id="ESLint-설치-방법"><a href="#ESLint-설치-방법" class="headerlink" title="ESLint 설치 방법"></a>ESLint 설치 방법</h3><p>ESLint를 프로젝트에 설치하려면 다음 명령어를 사용합니다.</p><pre><code class="highlight bash">npm install eslint --save-dev</code></pre><h3 id="ESLint-초기화"><a href="#ESLint-초기화" class="headerlink" title="ESLint 초기화"></a>ESLint 초기화</h3><p>프로젝트 루트 디렉토리에서 ESLint를 초기화합니다.</p><pre><code class="highlight bash">npx eslint --init</code></pre><p>이 명령어는 인터랙티브 셸을 통해 설정을 도와줍니다. 프로젝트에 맞는 설정을 선택하면 <code>.eslintrc</code> 파일이 생성됩니다.</p><h2 id="3-기본-사용법"><a href="#3-기본-사용법" class="headerlink" title="3. 기본 사용법"></a>3. 기본 사용법</h2><h3 id="ESLint-실행"><a href="#ESLint-실행" class="headerlink" title="ESLint 실행"></a>ESLint 실행</h3><p>ESLint를 실행하여 코드를 검사할 수 있습니다.</p><pre><code class="highlight bash">npx eslint &lt;파일 또는 디렉토리 경로&gt;</code></pre><p>예를 들어, <code>src</code> 디렉토리의 모든 파일을 검사하려면 다음 명령어를 사용합니다.</p><pre><code class="highlight bash">npx eslint src/</code></pre><h3 id="eslintrc-파일-설정"><a href="#eslintrc-파일-설정" class="headerlink" title=".eslintrc 파일 설정"></a><code>.eslintrc</code> 파일 설정</h3><p><code>.eslintrc</code> 파일은 ESLint의 설정을 정의합니다. 예시 설정 파일은 다음과 같습니다.</p><p><strong>.eslintrc</strong></p><pre><code class="highlight json"><span class="punctuation">&#123;</span>  <span class="attr">&quot;env&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>    <span class="attr">&quot;browser&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span>    <span class="attr">&quot;es2021&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span>  <span class="punctuation">&#125;</span><span class="punctuation">,</span>  <span class="attr">&quot;extends&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eslint:recommended&quot;</span><span class="punctuation">,</span>  <span class="attr">&quot;parserOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>    <span class="attr">&quot;ecmaVersion&quot;</span><span class="punctuation">:</span> <span class="number">12</span><span class="punctuation">,</span>    <span class="attr">&quot;sourceType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;module&quot;</span>  <span class="punctuation">&#125;</span><span class="punctuation">,</span>  <span class="attr">&quot;rules&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>    <span class="attr">&quot;semi&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;error&quot;</span><span class="punctuation">,</span> <span class="string">&quot;always&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span>    <span class="attr">&quot;quotes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;error&quot;</span><span class="punctuation">,</span> <span class="string">&quot;single&quot;</span><span class="punctuation">]</span>  <span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></code></pre><h3 id="ESLint-규칙-설정"><a href="#ESLint-규칙-설정" class="headerlink" title="ESLint 규칙 설정"></a>ESLint 규칙 설정</h3><ul><li><strong><code>semi</code></strong>: 세미콜론 사용 여부를 설정합니다.</li><li><strong><code>quotes</code></strong>: 따옴표 스타일을 설정합니다.</li></ul><h2 id="4-기타-옵션"><a href="#4-기타-옵션" class="headerlink" title="4. 기타 옵션"></a>4. 기타 옵션</h2><h3 id="자동-수정"><a href="#자동-수정" class="headerlink" title="자동 수정"></a>자동 수정</h3><p>ESLint는 자동으로 코드를 수정할 수 있습니다.</p><pre><code class="highlight bash">npx eslint &lt;파일 또는 디렉토리 경로&gt; --fix</code></pre><h3 id="초기-설정"><a href="#초기-설정" class="headerlink" title="초기 설정"></a>초기 설정</h3><p>ESLint 초기 설정을 다시 실행할 수 있습니다.</p><pre><code class="highlight bash">npx eslint --init</code></pre><h2 id="5-실습-예제"><a href="#5-실습-예제" class="headerlink" title="5. 실습 예제"></a>5. 실습 예제</h2><h3 id="프로젝트-생성-및-ESLint-사용"><a href="#프로젝트-생성-및-ESLint-사용" class="headerlink" title="프로젝트 생성 및 ESLint 사용"></a>프로젝트 생성 및 ESLint 사용</h3><ol><li><strong>새 프로젝트 생성</strong>: 새로운 디렉토리를 만들고 이동합니다.</li></ol><pre><code class="highlight bash"><span class="built_in">mkdir</span> my-eslint-project<span class="built_in">cd</span> my-eslint-project</code></pre><ol start="2"><li><strong>프로젝트 초기화</strong>: <code>npm init -y</code> 명령어를 사용하여 프로젝트를 초기화합니다.</li></ol><pre><code class="highlight bash">npm init -y</code></pre><ol start="3"><li><strong>ESLint 설치</strong>: ESLint를 설치합니다.</li></ol><pre><code class="highlight bash">npm install eslint --save-dev</code></pre><ol start="4"><li><strong>ESLint 초기화</strong>: ESLint 초기 설정을 실행합니다.</li></ol><pre><code class="highlight bash">npx eslint --init</code></pre><ol start="5"><li><strong>예제 파일 생성</strong></li></ol><p><strong>index.js</strong></p><pre><code class="highlight javascript"><span class="keyword">const</span> message = <span class="string">&quot;Hello, ESLint!&quot;</span>;<span class="variable language_">console</span>.<span class="title function_">log</span>(message);</code></pre><ol start="6"><li><strong>ESLint 실행 및 수정</strong></li></ol><p>코드를 검사하고 자동으로 수정합니다.</p><pre><code class="highlight bash">npx eslint index.js --fix</code></pre><h3 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h3><p>이번 시간에는 ESLint의 기본 개념부터 설치 방법, 기본 및 고급 사용법, 그리고 실제 프로젝트에서의 활용 방법까지 다루었습니다. ESLint를 통해 코드의 품질을 높이고 일관된 코딩 스타일을 유지할 수 있습니다. 다음 시간에는 또 다른 유용한 CLI 도구를 소개하겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> CLI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Node.js gulp</title>
      <link href="/cli/9/"/>
      <url>/cli/9/</url>
      
        <content type="html"><![CDATA[<h1 id="gulp-스트림-기반-빌드-시스템"><a href="#gulp-스트림-기반-빌드-시스템" class="headerlink" title="gulp: 스트림 기반 빌드 시스템"></a>gulp: 스트림 기반 빌드 시스템</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 JavaScript의 스트림 기반 빌드 시스템인 gulp에 대해 알아보겠습니다. gulp의 역할과 필요성, 설치 방법, 기본 사용법과 고급 플러그인 사용법, 그리고 실제 프로젝트에서 gulp를 활용하는 방법을 알아보겠습니다.</p><h2 id="1-gulp-소개"><a href="#1-gulp-소개" class="headerlink" title="1. gulp 소개"></a>1. gulp 소개</h2><h3 id="gulp란-무엇인가"><a href="#gulp란-무엇인가" class="headerlink" title="gulp란 무엇인가?"></a>gulp란 무엇인가?</h3><p>gulp는 스트림 기반의 빌드 시스템으로, 파일 변환, 파일 병합, 코드 검증 등의 작업을 자동화하는 데 사용됩니다. 개발자가 반복적으로 수행해야 하는 작업을 자동화하여 생산성을 높이는 데 도움을 줍니다.</p><h3 id="gulp의-역할과-필요성"><a href="#gulp의-역할과-필요성" class="headerlink" title="gulp의 역할과 필요성"></a>gulp의 역할과 필요성</h3><ul><li><strong>작업 자동화</strong>: 코드 변환, 파일 병합, 이미지 최적화 등 반복적인 작업을 자동화합니다.</li><li><strong>스트림 처리</strong>: 스트림 기반으로 파일을 처리하여 메모리 사용을 최적화합니다.</li><li><strong>플러그인 확장성</strong>: 다양한 플러그인을 통해 기능을 확장할 수 있습니다.</li></ul><h2 id="2-설치-및-설정"><a href="#2-설치-및-설정" class="headerlink" title="2. 설치 및 설정"></a>2. 설치 및 설정</h2><h3 id="gulp-설치-방법"><a href="#gulp-설치-방법" class="headerlink" title="gulp 설치 방법"></a>gulp 설치 방법</h3><p>gulp CLI와 gulp를 프로젝트의 devDependencies로 설치합니다.</p><pre><code class="highlight bash">npm install --global gulp-clinpm install --save-dev gulp</code></pre><h3 id="gulp-설정-파일"><a href="#gulp-설정-파일" class="headerlink" title="gulp 설정 파일"></a>gulp 설정 파일</h3><p>gulp의 설정 파일인 <code>gulpfile.js</code>를 프로젝트 루트에 생성합니다.</p><p><strong>gulpfile.js</strong></p><pre><code class="highlight javascript"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">&quot;gulp&quot;</span>);<span class="comment">// 기본 작업 설정</span>gulp.<span class="title function_">task</span>(<span class="string">&quot;default&quot;</span>, <span class="function">() =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;gulp is running...&quot;</span>);&#125;);</code></pre><h2 id="3-기본-사용법"><a href="#3-기본-사용법" class="headerlink" title="3. 기본 사용법"></a>3. 기본 사용법</h2><h3 id="gulp-명령어"><a href="#gulp-명령어" class="headerlink" title="gulp 명령어"></a>gulp 명령어</h3><ul><li><strong>gulp</strong>: 기본 작업을 실행합니다.</li></ul><pre><code class="highlight bash">gulp</code></pre><h3 id="gulp-task"><a href="#gulp-task" class="headerlink" title="gulp.task"></a>gulp.task</h3><ul><li><strong>gulp.task</strong>: gulp 작업을 정의합니다.</li></ul><pre><code class="highlight javascript">gulp.<span class="title function_">task</span>(<span class="string">&quot;message&quot;</span>, <span class="function">(<span class="params">done</span>) =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello, gulp!&quot;</span>);  <span class="title function_">done</span>();&#125;);</code></pre><h3 id="gulp-watch"><a href="#gulp-watch" class="headerlink" title="gulp.watch"></a>gulp.watch</h3><ul><li><strong>gulp.watch</strong>: 파일 변화를 감지하여 작업을 실행합니다.</li></ul><pre><code class="highlight javascript">gulp.<span class="title function_">task</span>(<span class="string">&quot;watch&quot;</span>, <span class="function">() =&gt;</span> &#123;  gulp.<span class="title function_">watch</span>(<span class="string">&quot;src/js/*.js&quot;</span>, gulp.<span class="title function_">series</span>(<span class="string">&quot;message&quot;</span>));&#125;);</code></pre><h2 id="4-기타-플러그인"><a href="#4-기타-플러그인" class="headerlink" title="4. 기타 플러그인"></a>4. 기타 플러그인</h2><h3 id="gulp-sass"><a href="#gulp-sass" class="headerlink" title="gulp-sass"></a>gulp-sass</h3><ul><li><strong>설치</strong>: gulp-sass 플러그인을 설치합니다.</li></ul><pre><code class="highlight bash">npm install --save-dev gulp-sass</code></pre><ul><li><strong>사용 예제</strong>: Sass 파일을 CSS 파일로 변환합니다.</li></ul><p><strong>gulpfile.js</strong></p><pre><code class="highlight javascript"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">&quot;gulp&quot;</span>);<span class="keyword">const</span> sass = <span class="built_in">require</span>(<span class="string">&quot;gulp-sass&quot;</span>)(<span class="built_in">require</span>(<span class="string">&quot;sass&quot;</span>));gulp.<span class="title function_">task</span>(<span class="string">&quot;sass&quot;</span>, <span class="function">() =&gt;</span> &#123;  <span class="keyword">return</span> gulp    .<span class="title function_">src</span>(<span class="string">&quot;src/scss/*.scss&quot;</span>)    .<span class="title function_">pipe</span>(<span class="title function_">sass</span>().<span class="title function_">on</span>(<span class="string">&quot;error&quot;</span>, sass.<span class="property">logError</span>))    .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&quot;dist/css&quot;</span>));&#125;);</code></pre><h3 id="gulp-uglify"><a href="#gulp-uglify" class="headerlink" title="gulp-uglify"></a>gulp-uglify</h3><ul><li><strong>설치</strong>: gulp-uglify 플러그인을 설치합니다.</li></ul><pre><code class="highlight bash">npm install --save-dev gulp-uglify</code></pre><ul><li><strong>사용 예제</strong>: JavaScript 파일을 압축합니다.</li></ul><p><strong>gulpfile.js</strong></p><pre><code class="highlight javascript"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">&quot;gulp&quot;</span>);<span class="keyword">const</span> uglify = <span class="built_in">require</span>(<span class="string">&quot;gulp-uglify&quot;</span>);gulp.<span class="title function_">task</span>(<span class="string">&quot;compress&quot;</span>, <span class="function">() =&gt;</span> &#123;  <span class="keyword">return</span> gulp.<span class="title function_">src</span>(<span class="string">&quot;src/js/*.js&quot;</span>).<span class="title function_">pipe</span>(<span class="title function_">uglify</span>()).<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&quot;dist/js&quot;</span>));&#125;);</code></pre><h2 id="5-실습-예제"><a href="#5-실습-예제" class="headerlink" title="5. 실습 예제"></a>5. 실습 예제</h2><h3 id="프로젝트-생성-및-gulp-사용"><a href="#프로젝트-생성-및-gulp-사용" class="headerlink" title="프로젝트 생성 및 gulp 사용"></a>프로젝트 생성 및 gulp 사용</h3><ol><li><strong>새 프로젝트 생성</strong>: 새로운 디렉토리를 만들고 이동합니다.</li></ol><pre><code class="highlight bash"><span class="built_in">mkdir</span> my-gulp-project<span class="built_in">cd</span> my-gulp-project</code></pre><ol start="2"><li><strong>프로젝트 초기화</strong>: <code>npm init -y</code> 명령어를 사용하여 프로젝트를 초기화합니다.</li></ol><pre><code class="highlight bash">npm init -y</code></pre><ol start="3"><li><strong>필요한 패키지 설치</strong>: gulp, gulp-sass, gulp-uglify를 설치합니다.</li></ol><pre><code class="highlight bash">npm install --save-dev gulp gulp-sass gulp-uglify</code></pre><ol start="4"><li><strong>프로젝트 구조 설정</strong>: 다음과 같은 프로젝트 구조를 만듭니다.</li></ol><pre><code class="highlight plaintext">my-gulp-project/├── dist/├── node_modules/├── src/│   ├── js/│   │   └── script.js│   └── scss/│       └── style.scss├── package.json└── gulpfile.js</code></pre><ol start="5"><li><strong>gulpfile.js 파일 생성 및 설정</strong></li></ol><p><strong>gulpfile.js</strong></p><pre><code class="highlight javascript"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">&quot;gulp&quot;</span>);<span class="keyword">const</span> sass = <span class="built_in">require</span>(<span class="string">&quot;gulp-sass&quot;</span>)(<span class="built_in">require</span>(<span class="string">&quot;sass&quot;</span>));<span class="keyword">const</span> uglify = <span class="built_in">require</span>(<span class="string">&quot;gulp-uglify&quot;</span>);gulp.<span class="title function_">task</span>(<span class="string">&quot;sass&quot;</span>, <span class="function">() =&gt;</span> &#123;  <span class="keyword">return</span> gulp    .<span class="title function_">src</span>(<span class="string">&quot;src/scss/*.scss&quot;</span>)    .<span class="title function_">pipe</span>(<span class="title function_">sass</span>().<span class="title function_">on</span>(<span class="string">&quot;error&quot;</span>, sass.<span class="property">logError</span>))    .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&quot;dist/css&quot;</span>));&#125;);gulp.<span class="title function_">task</span>(<span class="string">&quot;compress&quot;</span>, <span class="function">() =&gt;</span> &#123;  <span class="keyword">return</span> gulp.<span class="title function_">src</span>(<span class="string">&quot;src/js/*.js&quot;</span>).<span class="title function_">pipe</span>(<span class="title function_">uglify</span>()).<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&quot;dist/js&quot;</span>));&#125;);gulp.<span class="title function_">task</span>(<span class="string">&quot;watch&quot;</span>, <span class="function">() =&gt;</span> &#123;  gulp.<span class="title function_">watch</span>(<span class="string">&quot;src/scss/*.scss&quot;</span>, gulp.<span class="title function_">series</span>(<span class="string">&quot;sass&quot;</span>));  gulp.<span class="title function_">watch</span>(<span class="string">&quot;src/js/*.js&quot;</span>, gulp.<span class="title function_">series</span>(<span class="string">&quot;compress&quot;</span>));&#125;);gulp.<span class="title function_">task</span>(<span class="string">&quot;default&quot;</span>, gulp.<span class="title function_">series</span>(<span class="string">&quot;sass&quot;</span>, <span class="string">&quot;compress&quot;</span>, <span class="string">&quot;watch&quot;</span>));</code></pre><ol start="6"><li><strong>실행 및 결과 확인</strong></li></ol><pre><code class="highlight bash">gulp</code></pre><p>이제 <code>src/scss/style.scss</code> 파일과 <code>src/js/script.js</code> 파일을 편집하면 자동으로 변환 및 압축 작업이 실행됩니다.</p><h3 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h3><p>이번 시간에는 gulp의 기본 개념부터 설치 방법, 기본 및 고급 사용법, 플러그인 사용법까지 다루었습니다. gulp를 통해 개발 프로세스를 자동화하고 효율성을 높일 수 있습니다. 다음 시간에는 또 다른 유용한 CLI 도구를 소개하겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> CLI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript 제네릭 사용 시 타입 추론 문제 해결</title>
      <link href="/typescript/troubleshooting/2/"/>
      <url>/typescript/troubleshooting/2/</url>
      
        <content type="html"><![CDATA[<h1 id="TypeScript-제네릭-사용-시-타입-추론-문제-해결"><a href="#TypeScript-제네릭-사용-시-타입-추론-문제-해결" class="headerlink" title="TypeScript 제네릭 사용 시 타입 추론 문제 해결"></a>TypeScript 제네릭 사용 시 타입 추론 문제 해결</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 TypeScript에서 제네릭(Generic) 사용 시 발생할 수 있는 타입 추론 문제와 그 해결 방법에 대해 알아보겠습니다. 제네릭은 재사용 가능한 컴포넌트를 작성할 수 있게 해주지만, 올바른 타입 추론을 하지 못하면 예기치 않은 에러가 발생할 수 있습니다.</p><h2 id="TypeScript-제네릭의-개념"><a href="#TypeScript-제네릭의-개념" class="headerlink" title="TypeScript 제네릭의 개념"></a>TypeScript 제네릭의 개념</h2><h3 id="제네릭이란"><a href="#제네릭이란" class="headerlink" title="제네릭이란?"></a>제네릭이란?</h3><p>제네릭(Generic)은 함수, 클래스, 인터페이스 등을 정의할 때 타입을 매개변수로 사용할 수 있게 해주는 기능입니다. 이를 통해 다양한 타입에 대해 동작할 수 있는 재사용 가능한 컴포넌트를 작성할 수 있습니다.</p><pre><code class="highlight typescript"><span class="keyword">function</span> identity&lt;T&gt;(<span class="attr">arg</span>: T): T &#123;  <span class="keyword">return</span> arg;&#125;<span class="keyword">const</span> num = identity&lt;<span class="built_in">number</span>&gt;(<span class="number">10</span>); <span class="comment">// 10</span><span class="keyword">const</span> str = identity&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;hello&quot;</span>); <span class="comment">// &quot;hello&quot;</span></code></pre><h2 id="제네릭-사용-시-발생할-수-있는-타입-추론-문제"><a href="#제네릭-사용-시-발생할-수-있는-타입-추론-문제" class="headerlink" title="제네릭 사용 시 발생할 수 있는 타입 추론 문제"></a>제네릭 사용 시 발생할 수 있는 타입 추론 문제</h2><p>제네릭을 사용할 때 TypeScript가 올바르게 타입을 추론하지 못하는 경우가 발생할 수 있습니다. 이로 인해 코드의 가독성과 안정성이 떨어질 수 있습니다.</p><h3 id="문제-상황-타입-추론-문제"><a href="#문제-상황-타입-추론-문제" class="headerlink" title="문제 상황: 타입 추론 문제"></a>문제 상황: 타입 추론 문제</h3><p>다음 예제는 제네릭을 사용하여 타입을 추론하는 과정에서 발생할 수 있는 문제를 시뮬레이션합니다.</p><pre><code class="highlight typescript"><span class="keyword">function</span> getFirstElement&lt;T&gt;(<span class="attr">arr</span>: T[]): T &#123;  <span class="keyword">return</span> arr[<span class="number">0</span>];&#125;<span class="keyword">const</span> numArray = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];<span class="keyword">const</span> strArray = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>];<span class="keyword">const</span> firstNum = <span class="title function_">getFirstElement</span>(numArray); <span class="comment">// 1</span><span class="keyword">const</span> firstStr = <span class="title function_">getFirstElement</span>(strArray); <span class="comment">// &quot;a&quot;</span><span class="comment">// 타입 추론 문제 발생</span><span class="keyword">const</span> mixedArray = [<span class="number">1</span>, <span class="string">&quot;a&quot;</span>, <span class="literal">true</span>];<span class="keyword">const</span> firstMixed = <span class="title function_">getFirstElement</span>(mixedArray); <span class="comment">// 타입이 any로 추론됨</span></code></pre><p>위 예제에서 <code>mixedArray</code>의 타입은 <code>any[]</code>로 추론되므로, <code>getFirstElement</code> 함수의 반환 타입도 <code>any</code>가 됩니다. 이는 타입 안전성을 해치게 됩니다.</p><h2 id="해결-방안"><a href="#해결-방안" class="headerlink" title="해결 방안"></a>해결 방안</h2><ol><li><p><strong>명시적 타입 지정</strong></p><p>타입 추론이 올바르게 되지 않을 경우, 제네릭 타입을 명시적으로 지정하여 문제를 해결할 수 있습니다.</p><pre><code class="highlight typescript"><span class="keyword">const</span> firstMixed = getFirstElement&lt;<span class="built_in">string</span> | <span class="built_in">number</span> | <span class="built_in">boolean</span>&gt;(mixedArray);</code></pre></li><li><p><strong>제네릭 타입 제한</strong></p><p>제네릭 타입에 제한을 두어 특정 타입만 받을 수 있도록 설정합니다.</p><pre><code class="highlight typescript"><span class="keyword">function</span> getFirstElement&lt;T <span class="keyword">extends</span> <span class="built_in">number</span> | <span class="built_in">string</span>&gt;(<span class="attr">arr</span>: T[]): T &#123;  <span class="keyword">return</span> arr[<span class="number">0</span>];&#125;<span class="keyword">const</span> firstNum = <span class="title function_">getFirstElement</span>(numArray); <span class="comment">// 1</span><span class="keyword">const</span> firstStr = <span class="title function_">getFirstElement</span>(strArray); <span class="comment">// &quot;a&quot;</span><span class="comment">// const firstMixed = getFirstElement(mixedArray); // 에러 발생</span></code></pre></li><li><p><strong>유니온 타입 사용</strong></p><p>다양한 타입을 허용해야 하는 경우, 유니온 타입을 사용하여 타입을 명확하게 정의합니다.</p><pre><code class="highlight typescript"><span class="keyword">type</span> <span class="title class_">Mixed</span> = <span class="built_in">number</span> | <span class="built_in">string</span> | <span class="built_in">boolean</span>;<span class="keyword">const</span> <span class="attr">mixedArray</span>: <span class="title class_">Mixed</span>[] = [<span class="number">1</span>, <span class="string">&quot;a&quot;</span>, <span class="literal">true</span>];<span class="keyword">const</span> firstMixed = getFirstElement&lt;<span class="title class_">Mixed</span>&gt;(mixedArray);</code></pre></li></ol><h2 id="실습-예제"><a href="#실습-예제" class="headerlink" title="실습 예제"></a>실습 예제</h2><h3 id="프로젝트-구조"><a href="#프로젝트-구조" class="headerlink" title="프로젝트 구조"></a>프로젝트 구조</h3><p>다음과 같은 프로젝트 구조를 가정합니다:</p><pre><code class="highlight bash">src/├── generics.ts└── main.ts</code></pre><h3 id="파일-내용"><a href="#파일-내용" class="headerlink" title="파일 내용"></a>파일 내용</h3><p><strong>generics.ts</strong></p><pre><code class="highlight typescript"><span class="keyword">export</span> <span class="keyword">function</span> getFirstElement&lt;T&gt;(<span class="attr">arr</span>: T[]): T &#123;  <span class="keyword">return</span> arr[<span class="number">0</span>];&#125;</code></pre><p><strong>main.ts</strong></p><pre><code class="highlight typescript"><span class="keyword">import</span> &#123; getFirstElement &#125; <span class="keyword">from</span> <span class="string">&quot;./generics&quot;</span>;<span class="keyword">const</span> numArray = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];<span class="keyword">const</span> strArray = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>];<span class="keyword">const</span> firstNum = <span class="title function_">getFirstElement</span>(numArray); <span class="comment">// 1</span><span class="keyword">const</span> firstStr = <span class="title function_">getFirstElement</span>(strArray); <span class="comment">// &quot;a&quot;</span><span class="keyword">type</span> <span class="title class_">Mixed</span> = <span class="built_in">number</span> | <span class="built_in">string</span> | <span class="built_in">boolean</span>;<span class="keyword">const</span> <span class="attr">mixedArray</span>: <span class="title class_">Mixed</span>[] = [<span class="number">1</span>, <span class="string">&quot;a&quot;</span>, <span class="literal">true</span>];<span class="keyword">const</span> firstMixed = getFirstElement&lt;<span class="title class_">Mixed</span>&gt;(mixedArray); <span class="comment">// 1</span></code></pre><h3 id="TypeScript-빌드-설정"><a href="#TypeScript-빌드-설정" class="headerlink" title="TypeScript 빌드 설정"></a>TypeScript 빌드 설정</h3><p><code>tsconfig.json</code> 파일을 설정합니다.</p><pre><code class="highlight json"><span class="punctuation">&#123;</span>  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>    <span class="attr">&quot;outDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./lib&quot;</span><span class="punctuation">,</span>    <span class="attr">&quot;rootDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./src&quot;</span><span class="punctuation">,</span>    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;commonjs&quot;</span><span class="punctuation">,</span>    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;es6&quot;</span><span class="punctuation">,</span>    <span class="attr">&quot;esModuleInterop&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span>  <span class="punctuation">&#125;</span><span class="punctuation">,</span>  <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;src&quot;</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></code></pre><h3 id="빌드-및-실행"><a href="#빌드-및-실행" class="headerlink" title="빌드 및 실행"></a>빌드 및 실행</h3><p>다음 명령어를 사용하여 빌드를 실행하고 결과를 확인합니다:</p><pre><code class="highlight bash">npm run buildnode lib/main.js</code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 TypeScript에서 제네릭을 사용할 때 발생할 수 있는 타입 추론 문제와 그 해결 방안에 대해 알아보았습니다. 제네릭 타입을 명시적으로 지정하거나, 타입 제한을 두거나, 유니온 타입을 사용하는 등의 방법을 통해 타입 추론 문제를 해결할 수 있습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> TS_트러블슈팅 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Javascript 스프레드 연산자 (Spread Operator)</title>
      <link href="/javascript/detail/5/"/>
      <url>/javascript/detail/5/</url>
      
        <content type="html"><![CDATA[<h1 id="Javascript-스프레드-연산자-Spread-Operator"><a href="#Javascript-스프레드-연산자-Spread-Operator" class="headerlink" title="Javascript 스프레드 연산자 (Spread Operator)"></a>Javascript 스프레드 연산자 (Spread Operator)</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 JavaScript에서 스프레드 연산자(Spread Operator)에 대해 알아보겠습니다. 스프레드 연산자는 배열이나 객체를 쉽게 복사하거나 결합하는 방법을 제공합니다.</p><h2 id="배열에서의-스프레드-연산자"><a href="#배열에서의-스프레드-연산자" class="headerlink" title="배열에서의 스프레드 연산자"></a>배열에서의 스프레드 연산자</h2><p>배열을 복사하거나 결합할 때 스프레드 연산자를 사용할 수 있습니다:</p><pre><code class="highlight javascript"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];<span class="keyword">const</span> moreNumbers = [...numbers, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];<span class="variable language_">console</span>.<span class="title function_">log</span>(moreNumbers); <span class="comment">// 출력: [1, 2, 3, 4, 5, 6]</span></code></pre><h2 id="객체에서의-스프레드-연산자"><a href="#객체에서의-스프레드-연산자" class="headerlink" title="객체에서의 스프레드 연산자"></a>객체에서의 스프레드 연산자</h2><p>객체를 복사하거나 결합할 때도 스프레드 연산자를 사용할 수 있습니다:</p><pre><code class="highlight javascript"><span class="keyword">const</span> person = &#123;  <span class="attr">name</span>: <span class="string">&quot;John Doe&quot;</span>,  <span class="attr">age</span>: <span class="number">30</span>,&#125;;<span class="keyword">const</span> updatedPerson = &#123;  ...person,  <span class="attr">job</span>: <span class="string">&quot;developer&quot;</span>,&#125;;<span class="variable language_">console</span>.<span class="title function_">log</span>(updatedPerson);<span class="comment">// 출력: &#123; name: &#x27;John Doe&#x27;, age: 30, job: &#x27;developer&#x27; &#125;</span></code></pre><h2 id="함수-호출에서의-스프레드-연산자"><a href="#함수-호출에서의-스프레드-연산자" class="headerlink" title="함수 호출에서의 스프레드 연산자"></a>함수 호출에서의 스프레드 연산자</h2><p>스프레드 연산자를 사용하여 배열을 함수의 인수로 전달할 수 있습니다:</p><pre><code class="highlight javascript"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b, c</span>) &#123;  <span class="keyword">return</span> a + b + c;&#125;<span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(...numbers)); <span class="comment">// 출력: 6</span></code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이이번 시간에는 JavaScript에서 스프레드 연산자를 사용하는 방법에 대해 알아보았습니다.<br>스프레드 연산자는 배열이나 객체를 쉽게 복사하거나 결합할 수 있는 유용한 도구입니다.<br>다음 시간에는 나머지 매개변수에 대해 알아보겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> JS_디테일 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript 테스트</title>
      <link href="/typescript/special/14/"/>
      <url>/typescript/special/14/</url>
      
        <content type="html"><![CDATA[<h1 id="TypeScript-테스트"><a href="#TypeScript-테스트" class="headerlink" title="TypeScript 테스트"></a>TypeScript 테스트</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 TypeScript로 작성된 코드를 테스트하는 방법에 대해 알아보겠습니다. TypeScript는 정적 타입 시스템을 제공해 코드의 안정성을 높여주지만, 테스트를 통해 런타임에서의 동작을 보장하는 것이 중요합니다. 이번 글에서는 유닛 테스트(Unit Test) 도구인 <strong>Jest</strong>와 <strong>Mocha</strong>를 사용해 TypeScript 코드를 테스트하는 방법을 소개하겠습니다.</p><h2 id="TypeScript로-작성된-코드의-유닛-테스트"><a href="#TypeScript로-작성된-코드의-유닛-테스트" class="headerlink" title="TypeScript로 작성된 코드의 유닛 테스트"></a>TypeScript로 작성된 코드의 유닛 테스트</h2><h3 id="1-유닛-테스트란"><a href="#1-유닛-테스트란" class="headerlink" title="1. 유닛 테스트란?"></a>1. 유닛 테스트란?</h3><p>유닛 테스트는 애플리케이션의 가장 작은 단위(함수나 클래스 등)를 독립적으로 검증하는 테스트 방법입니다. 유닛 테스트를 통해 개별 구성 요소가 의도한 대로 작동하는지 확인할 수 있으며, 코드의 신뢰성을 높이는 데 기여합니다.</p><h3 id="2-TypeScript-테스트-설정"><a href="#2-TypeScript-테스트-설정" class="headerlink" title="2. TypeScript 테스트 설정"></a>2. TypeScript 테스트 설정</h3><p>TypeScript 코드의 유닛 테스트를 위해 <strong>Jest</strong>와 <strong>Mocha</strong> 같은 테스트 프레임워크를 사용할 수 있습니다. 이 프레임워크들은 TypeScript와 쉽게 통합되며, 테스트 기능을 제공합니다.</p><h2 id="Jest를-사용한-유닛-테스트"><a href="#Jest를-사용한-유닛-테스트" class="headerlink" title="Jest를 사용한 유닛 테스트"></a>Jest를 사용한 유닛 테스트</h2><h3 id="1-Jest-설치-및-설정"><a href="#1-Jest-설치-및-설정" class="headerlink" title="1. Jest 설치 및 설정"></a>1. Jest 설치 및 설정</h3><p>먼저 Jest를 설치하고, TypeScript와 함께 사용할 수 있도록 설정합니다.</p><pre><code class="highlight bash">npm install --save-dev jest ts-jest @types/jest</code></pre><p>설치 후 Jest 설정 파일인 <code>jest.config.js</code>를 생성합니다.</p><pre><code class="highlight jsx"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;  <span class="attr">preset</span>: <span class="string">&quot;ts-jest&quot;</span>,  <span class="attr">testEnvironment</span>: <span class="string">&quot;node&quot;</span>,  <span class="attr">testMatch</span>: [<span class="string">&quot;**/tests/**/*.test.ts&quot;</span>],&#125;;</code></pre><h3 id="2-Jest로-테스트-작성"><a href="#2-Jest로-테스트-작성" class="headerlink" title="2. Jest로 테스트 작성"></a>2. Jest로 테스트 작성</h3><p>이제 간단한 TypeScript 코드를 테스트하는 예제를 작성해 보겠습니다.</p><p><strong><code>src/warrior.ts</code></strong></p><pre><code class="highlight tsx"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Warrior</span> &#123;  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="attr">name</span>: <span class="built_in">string</span>, <span class="keyword">private</span> <span class="attr">level</span>: <span class="built_in">number</span></span>) &#123;&#125;  <span class="title function_">attack</span>(): <span class="built_in">string</span> &#123;    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> attacks with a sword at level <span class="subst">$&#123;<span class="variable language_">this</span>.level&#125;</span>!`</span>;  &#125;  <span class="title function_">levelUp</span>(): <span class="built_in">void</span> &#123;    <span class="variable language_">this</span>.<span class="property">level</span>++;  &#125;  <span class="title function_">getLevel</span>(): <span class="built_in">number</span> &#123;    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">level</span>;  &#125;&#125;</code></pre><p><strong><code>tests/warrior.test.ts</code></strong></p><pre><code class="highlight tsx"><span class="keyword">import</span> &#123; <span class="title class_">Warrior</span> &#125; <span class="keyword">from</span> <span class="string">&quot;../src/warrior&quot;</span>;<span class="title function_">describe</span>(<span class="string">&quot;Warrior Class&quot;</span>, <span class="function">() =&gt;</span> &#123;  <span class="title function_">it</span>(<span class="string">&quot;should return the correct attack message&quot;</span>, <span class="function">() =&gt;</span> &#123;    <span class="keyword">const</span> warrior = <span class="keyword">new</span> <span class="title class_">Warrior</span>(<span class="string">&quot;Aragorn&quot;</span>, <span class="number">10</span>);    <span class="title function_">expect</span>(warrior.<span class="title function_">attack</span>()).<span class="title function_">toBe</span>(<span class="string">&quot;Aragorn attacks with a sword at level 10!&quot;</span>);  &#125;);  <span class="title function_">it</span>(<span class="string">&quot;should level up correctly&quot;</span>, <span class="function">() =&gt;</span> &#123;    <span class="keyword">const</span> warrior = <span class="keyword">new</span> <span class="title class_">Warrior</span>(<span class="string">&quot;Aragorn&quot;</span>, <span class="number">10</span>);    warrior.<span class="title function_">levelUp</span>();    <span class="title function_">expect</span>(warrior.<span class="title function_">getLevel</span>()).<span class="title function_">toBe</span>(<span class="number">11</span>);  &#125;);&#125;);</code></pre><h3 id="3-Jest-테스트-실행"><a href="#3-Jest-테스트-실행" class="headerlink" title="3. Jest 테스트 실행"></a>3. Jest 테스트 실행</h3><p>Jest는 설정된 모든 테스트 파일을 자동으로 찾고 실행합니다. 아래 명령어로 테스트를 실행할 수 있습니다.</p><pre><code class="highlight bash">npm run <span class="built_in">test</span></code></pre><p>테스트가 성공적으로 실행되면, Jest는 각 테스트 케이스의 결과를 출력해줍니다.</p><h2 id="Mocha를-사용한-유닛-테스트"><a href="#Mocha를-사용한-유닛-테스트" class="headerlink" title="Mocha를 사용한 유닛 테스트"></a>Mocha를 사용한 유닛 테스트</h2><h3 id="1-Mocha-설치-및-설정"><a href="#1-Mocha-설치-및-설정" class="headerlink" title="1. Mocha 설치 및 설정"></a>1. Mocha 설치 및 설정</h3><p>Mocha는 또 다른 유닛 테스트 프레임워크로, TypeScript와 함께 사용할 수 있습니다. 먼저 Mocha와 관련 패키지를 설치합니다.</p><pre><code class="highlight bash">npm install --save-dev mocha ts-node @types/mocha</code></pre><p><code>mocha</code> 명령어를 사용해 테스트를 실행하기 위해 <code>ts-node/register</code>를 추가해줍니다. 이 설정은 Mocha가 TypeScript 코드를 실행할 수 있도록 도와줍니다.</p><h3 id="2-Mocha로-테스트-작성"><a href="#2-Mocha로-테스트-작성" class="headerlink" title="2. Mocha로 테스트 작성"></a>2. Mocha로 테스트 작성</h3><p>Mocha를 사용하여 TypeScript 코드를 테스트하는 예제를 작성해 보겠습니다.</p><p><strong><code>tests/warrior.test.ts</code></strong></p><pre><code class="highlight tsx"><span class="keyword">import</span> &#123; <span class="title class_">Warrior</span> &#125; <span class="keyword">from</span> <span class="string">&quot;../src/warrior&quot;</span>;<span class="keyword">import</span> &#123; expect &#125; <span class="keyword">from</span> <span class="string">&quot;chai&quot;</span>;<span class="title function_">describe</span>(<span class="string">&quot;Warrior Class&quot;</span>, <span class="function">() =&gt;</span> &#123;  <span class="title function_">it</span>(<span class="string">&quot;should return the correct attack message&quot;</span>, <span class="function">() =&gt;</span> &#123;    <span class="keyword">const</span> warrior = <span class="keyword">new</span> <span class="title class_">Warrior</span>(<span class="string">&quot;Aragorn&quot;</span>, <span class="number">10</span>);    <span class="title function_">expect</span>(warrior.<span class="title function_">attack</span>()).<span class="property">to</span>.<span class="title function_">equal</span>(      <span class="string">&quot;Aragorn attacks with a sword at level 10!&quot;</span>    );  &#125;);  <span class="title function_">it</span>(<span class="string">&quot;should level up correctly&quot;</span>, <span class="function">() =&gt;</span> &#123;    <span class="keyword">const</span> warrior = <span class="keyword">new</span> <span class="title class_">Warrior</span>(<span class="string">&quot;Aragorn&quot;</span>, <span class="number">10</span>);    warrior.<span class="title function_">levelUp</span>();    <span class="title function_">expect</span>(warrior.<span class="title function_">getLevel</span>()).<span class="property">to</span>.<span class="title function_">equal</span>(<span class="number">11</span>);  &#125;);&#125;);</code></pre><h3 id="3-Mocha-테스트-실행"><a href="#3-Mocha-테스트-실행" class="headerlink" title="3. Mocha 테스트 실행"></a>3. Mocha 테스트 실행</h3><p>Mocha는 아래 명령어로 테스트를 실행할 수 있습니다.</p><pre><code class="highlight bash">npx mocha -r ts-node/register tests/**/*.test.ts</code></pre><p>Mocha는 설정된 모든 테스트 파일을 자동으로 찾고 실행하며, <code>chai</code> 라이브러리를 사용해 가독성 높은 테스트 코드를 작성할 수 있습니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 TypeScript로 작성된 코드를 Jest와 Mocha를 사용해 테스트하는 방법에 대해 알아보았습니다. TypeScript의 정적 타입 시스템과 함께 유닛 테스트를 결합하면, 코드의 안정성과 신뢰성을 크게 높일 수 있습니다. 테스트를 통해 코드가 의도한 대로 동작하는지 확인하고, 더욱 견고한 애플리케이션을 개발해보세요!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> TS_필살기 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>웹 스크래핑의 개념과 Node.js에서 Cheerio.js 사용법 실습</title>
      <link href="/web/essential/17/"/>
      <url>/web/essential/17/</url>
      
        <content type="html"><![CDATA[<h1 id="웹-스크래핑의-개념과-Node-js에서-Cheerio-js-사용법-실습"><a href="#웹-스크래핑의-개념과-Node-js에서-Cheerio-js-사용법-실습" class="headerlink" title="웹 스크래핑의 개념과 Node.js에서 Cheerio.js 사용법 실습"></a>웹 스크래핑의 개념과 Node.js에서 Cheerio.js 사용법 실습</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 웹 스크래핑의 개념과 원리에 대해 알아보고, Node.js에서 Cheerio.js를 사용하여 웹 스크래핑을 실습해보겠습니다. 웹 스크래핑은 데이터 수집과 분석을 위한 중요한 기술입니다.</p><h2 id="웹-스크래핑의-개념"><a href="#웹-스크래핑의-개념" class="headerlink" title="웹 스크래핑의 개념"></a>웹 스크래핑의 개념</h2><h3 id="웹-스크래핑이란"><a href="#웹-스크래핑이란" class="headerlink" title="웹 스크래핑이란?"></a>웹 스크래핑이란?</h3><p>웹 스크래핑(Web Scraping)은 웹사이트의 데이터를 추출하여 저장하고 분석하는 기술입니다. 이를 통해 자동화된 방식으로 필요한 정보를 수집할 수 있습니다.</p><h3 id="웹-스크래핑의-필요성"><a href="#웹-스크래핑의-필요성" class="headerlink" title="웹 스크래핑의 필요성"></a>웹 스크래핑의 필요성</h3><ol><li><strong>데이터 수집</strong>: 웹사이트에서 제공하는 데이터를 자동으로 수집하여 저장할 수 있습니다.</li><li><strong>정보 분석</strong>: 수집한 데이터를 분석하여 유용한 정보를 얻을 수 있습니다.</li><li><strong>자동화</strong>: 반복적인 데이터 수집 작업을 자동화하여 효율성을 높일 수 있습니다.</li><li><strong>시장 조사</strong>: 경쟁사 웹사이트의 정보를 수집하여 시장 동향을 파악할 수 있습니다.</li></ol><h3 id="웹-스크래핑의-원리"><a href="#웹-스크래핑의-원리" class="headerlink" title="웹 스크래핑의 원리"></a>웹 스크래핑의 원리</h3><ol><li><strong>HTTP 요청</strong>: 스크래핑할 웹페이지에 HTTP 요청을 보내 페이지의 HTML 코드를 가져옵니다.</li><li><strong>HTML 파싱</strong>: 가져온 HTML 코드를 파싱하여 원하는 데이터를 추출합니다.</li><li><strong>데이터 저장</strong>: 추출한 데이터를 원하는 형식으로 저장합니다.</li></ol><h2 id="준비하기"><a href="#준비하기" class="headerlink" title="준비하기"></a>준비하기</h2><p>먼저 필요한 패키지를 설치합니다:</p><pre><code class="highlight bash">npm init -ynpm install axios cheerio</code></pre><h2 id="서버-설정"><a href="#서버-설정" class="headerlink" title="서버 설정"></a>서버 설정</h2><p>다음은 필요한 모듈을 가져오고 웹 스크래핑을 설정하는 코드입니다. 자세한 부분은 뒤에서 알아보겠습니다.</p><pre><code class="highlight javascript"><span class="comment">// scraper.js</span><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">&quot;axios&quot;</span>);<span class="keyword">const</span> cheerio = <span class="built_in">require</span>(<span class="string">&quot;cheerio&quot;</span>);<span class="keyword">const</span> url = <span class="string">&quot;https://example.com&quot;</span>; <span class="comment">// 스크래핑할 웹페이지 URL</span>axios  .<span class="title function_">get</span>(url)  .<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;    <span class="keyword">const</span> html = response.<span class="property">data</span>;    <span class="keyword">const</span> $ = cheerio.<span class="title function_">load</span>(html);    <span class="comment">// 예제: 웹페이지의 제목(title) 추출</span>    <span class="keyword">const</span> title = $(<span class="string">&quot;title&quot;</span>).<span class="title function_">text</span>();    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Title: <span class="subst">$&#123;title&#125;</span>`</span>);    <span class="comment">// 예제: 특정 클래스(.example-class) 요소의 텍스트 추출</span>    <span class="keyword">const</span> exampleText = $(<span class="string">&quot;.example-class&quot;</span>).<span class="title function_">text</span>();    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Example Text: <span class="subst">$&#123;exampleText&#125;</span>`</span>);  &#125;)  .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`Error: <span class="subst">$&#123;error&#125;</span>`</span>);  &#125;);</code></pre><h2 id="설정-설명"><a href="#설정-설명" class="headerlink" title="설정 설명"></a>설정 설명</h2><p>Node.js에서 Cheerio.js를 사용하여 웹 스크래핑을 설정하는 방법을 설명합니다.</p><ol><li><p><strong>HTTP 요청 보내기</strong>:</p><pre><code class="highlight javascript"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">&#x27;axios&#x27;</span>);<span class="keyword">const</span> url = <span class="string">&#x27;https://example.com&#x27;</span>; <span class="comment">// 스크래핑할 웹페이지 URL</span>axios.<span class="title function_">get</span>(url)  .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;    <span class="keyword">const</span> html = response.<span class="property">data</span>;</code></pre><p><code>axios</code>를 사용하여 스크래핑할 웹페이지에 HTTP GET 요청을 보냅니다. 요청이 성공하면 응답 데이터에서 HTML 코드를 가져옵니다.</p></li><li><p><strong>HTML 파싱 및 데이터 추출</strong>:</p><pre><code class="highlight javascript"><span class="keyword">const</span> cheerio = <span class="built_in">require</span>(<span class="string">&quot;cheerio&quot;</span>);<span class="keyword">const</span> $ = cheerio.<span class="title function_">load</span>(html);<span class="comment">// 예제: 웹페이지의 제목(title) 추출</span><span class="keyword">const</span> title = $(<span class="string">&quot;title&quot;</span>).<span class="title function_">text</span>();<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Title: <span class="subst">$&#123;title&#125;</span>`</span>);<span class="comment">// 예제: 특정 클래스(.example-class) 요소의 텍스트 추출</span><span class="keyword">const</span> exampleText = $(<span class="string">&quot;.example-class&quot;</span>).<span class="title function_">text</span>();<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Example Text: <span class="subst">$&#123;exampleText&#125;</span>`</span>);</code></pre><p><code>cheerio</code>를 사용하여 HTML 코드를 파싱하고, jQuery와 유사한 문법으로 원하는 데이터를 추출합니다. 여기서는 웹페이지의 제목과 특정 클래스 요소의 텍스트를 추출합니다.</p></li><li><p><strong>에러 처리</strong>:</p><pre><code class="highlight javascript">.<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`Error: <span class="subst">$&#123;error&#125;</span>`</span>);&#125;);</code></pre><p>HTTP 요청이나 HTML 파싱 중에 에러가 발생하면 콘솔에 에러 메시지를 출력합니다.</p></li></ol><h2 id="테스트"><a href="#테스트" class="headerlink" title="테스트"></a>테스트</h2><p>이렇게 하면 Node.js에서 Cheerio.js를 사용하여 웹 스크래핑을 설정할 수 있습니다. 이 코드를 실행하기 전에 <code>scraper.js</code> 파일을 실행하여 웹 스크래핑을 시작하세요.</p><pre><code class="highlight bash">node scraper.js</code></pre><p>스크립트가 성공적으로 실행되면, 콘솔에 스크래핑한 데이터가 출력됩니다.</p><h3 id="테스트-방법"><a href="#테스트-방법" class="headerlink" title="테스트 방법"></a>테스트 방법</h3><ol><li><strong>스크래핑할 웹페이지 URL 설정</strong>: <code>url</code> 변수를 원하는 웹페이지 URL로 설정합니다.</li><li><strong>데이터 추출 요소 설정</strong>: <code>$(&#39;요소&#39;)</code> 문법을 사용하여 추출할 데이터를 설정합니다. 예를 들어, 특정 클래스나 ID를 가진 요소의 텍스트를 추출할 수 있습니다.</li><li><strong>스크립트 실행</strong>: <code>node scraper.js</code> 명령어를 사용하여 스크립트를 실행하고, 콘솔에 출력된 데이터를 확인합니다.</li></ol><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 웹 스크래핑의 개념과 필요성을 이해하고, Node.js에서 Cheerio.js를 사용하여 웹 스크래핑을 구현하는 방법을 알아보았습니다. 이를 바탕으로 필요한 데이터를 효율적으로 수집하고 분석할 수 있는 웹 애플리케이션을 개발해보세요!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> web_필수 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JWT(JSON Web Token)을 사용한 로그인 그리고 권한 체크</title>
      <link href="/web/essential/16/"/>
      <url>/web/essential/16/</url>
      
        <content type="html"><![CDATA[<h1 id="JWT-JSON-Web-Token-을-사용한-로그인-그리고-권한-체크"><a href="#JWT-JSON-Web-Token-을-사용한-로그인-그리고-권한-체크" class="headerlink" title="JWT(JSON Web Token)을 사용한 로그인 그리고 권한 체크"></a>JWT(JSON Web Token)을 사용한 로그인 그리고 권한 체크</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 <code>jsonwebtoken</code>의 개념을 알아보고<br><code>Express</code>를 사용하여 JWT를 활용한 로그인 및 사용자 권한 체크 예제를 만들어보겠습니다.<br>이 예제에서는 로컬에 JSON 파일을 사용하여 mock 데이터베이스를 설정합니다.</p><h2 id="JWT란"><a href="#JWT란" class="headerlink" title="JWT란?"></a>JWT란?</h2><p>JWT(JSON Web Token)는 JSON 객체를 사용하여 정보를 안전하게 전달하는 방식입니다.<br>마치 여러분이 친구와 비밀 쪽지를 주고받을 때, 쪽지가 중간에서 바뀌지 않았다는 것을 보장받는 것과 비슷합니다.<br>JWT는 세 부분으로 나뉩니다: 헤더(Header), 페이로드(Payload), 서명(Signature).</p><h3 id="1-헤더-Header"><a href="#1-헤더-Header" class="headerlink" title="1. 헤더(Header)"></a>1. 헤더(Header)</h3><p>헤더는 토큰의 메타데이터를 포함합니다. 어떤 알고리즘으로 서명이 생성되었는지 등의 정보를 담고 있습니다.<br>예를 들어, 편지 봉투에 있는 “이 편지는 암호화되었습니다”라는 라벨과 비슷합니다.</p><h3 id="2-페이로드-Payload"><a href="#2-페이로드-Payload" class="headerlink" title="2. 페이로드(Payload)"></a>2. 페이로드(Payload)</h3><p>페이로드는 실제로 전달하고자 하는 정보를 담고 있습니다. 사용자 ID, 권한 등과 같은 정보가 들어갑니다.<br>이 정보는 암호화되지 않지만, 서명으로 보호됩니다. 마치 편지 봉투 안에 있는 내용물과 같습니다.</p><h3 id="3-서명-Signature"><a href="#3-서명-Signature" class="headerlink" title="3. 서명(Signature)"></a>3. 서명(Signature)</h3><p>서명은 토큰의 무결성을 보장합니다. 헤더와 페이로드, 그리고 비밀키를 조합하여 생성됩니다.<br>이 서명을 통해, 중간에 누군가가 내용을 바꾸지 않았음을 확인할 수 있습니다.<br>비밀키는 편지를 보낸 사람과 받는 사람만 알고 있는 비밀번호와 같아서, 편지가 오염되지 않았는지 확인하는 역할을 합니다.<br>서명이 있는 이유는, 중간에 누군가가 페이로드의 내용을 바꿔도 서버가 이를 알아차릴 수 있도록 하기 위해서입니다.<br>서명이 올바르지 않으면, 서버는 이 토큰이 변조되었음을 알아차리고 요청을 거부합니다.</p><h3 id="비유로-이해하기"><a href="#비유로-이해하기" class="headerlink" title="비유로 이해하기"></a>비유로 이해하기</h3><p>비유를 들어 설명하자면, JWT는 일종의 디지털 신분증과 같습니다. 이 신분증에는 세 가지 중요한 정보가 있습니다.</p><ol><li><strong>헤더(Header)</strong>: “이 신분증은 어떤 종류인지”와 “어떻게 만들어졌는지”를 설명하는 부분입니다. 마치 신분증 맨 위에 “학생증” 혹은 “운전면허증”이라고 적혀 있는 것과 같습니다.</li><li><strong>페이로드(Payload)</strong>: 신분증을 가진 사람의 실제 정보가 들어 있습니다. 이름, 나이, 소속 학교 또는 운전면허 번호 등이 여기에 해당합니다. 이 부분은 실제로 우리가 전달하고자 하는 정보입니다.</li><li><strong>서명(Signature)</strong>: 신분증의 진위를 확인하기 위한 서명입니다. 이는 신분증이 진짜인지 확인하기 위한 방식으로, 변조되지 않았음을 보장합니다. 마치 학교장이나 정부 기관의 공식 도장이 찍혀 있는 것과 같습니다. 이 도장이 있어야만 이 신분증이 진짜임을 신뢰할 수 있습니다.</li></ol><h3 id="JWT의-활용"><a href="#JWT의-활용" class="headerlink" title="JWT의 활용"></a>JWT의 활용</h3><p>서버와 클라이언트가 통신할 때, 서버는 사용자가 올바른 신분증(JWT)을 가지고 있는지 확인합니다.<br>클라이언트는 로그인 후 받은 JWT를 요청 헤더에 포함시켜 서버에 보냅니다.<br>서버는 이 토큰을 검증하고, 토큰이 유효하면 요청을 처리합니다. 만약 토큰이 변조되었거나 만료되었다면 요청을 거부합니다.<br>이렇게 JWT를 사용하면, 서버는 사용자의 신원을 매번 확인할 필요 없이, JWT를 통해 신속하게 인증할 수 있습니다.<br>이는 세션 관리보다 효율적이며, 확장성이 뛰어납니다.<br>이제 JWT의 개념을 이해하셨으니, 이를 활용하여 Express와 jsonwebtoken을 사용한 로그인 및 권한 체크 시스템을 구현해보겠습니다.</p><h2 id="준비하기"><a href="#준비하기" class="headerlink" title="준비하기"></a>준비하기</h2><p>먼저 필요한 패키지를 설치합니다:</p><pre><code class="highlight bash">npm init -ynpm install express jsonwebtoken body-parser fs</code></pre><h2 id="서버-설정"><a href="#서버-설정" class="headerlink" title="서버 설정"></a>서버 설정</h2><p>다음은 필요한 모듈을 가져오고 서버를 설정하는 코드입니다.<br>자세한 파트 별 기능은 뒤에 자세히 알아보겠습니다.</p><pre><code class="highlight javascript"><span class="comment">// server.js</span><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);<span class="keyword">const</span> jwt = <span class="built_in">require</span>(<span class="string">&quot;jsonwebtoken&quot;</span>);<span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&quot;body-parser&quot;</span>);<span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);<span class="keyword">const</span> app = <span class="title function_">express</span>();<span class="keyword">const</span> port = <span class="number">3000</span>;<span class="keyword">const</span> secretKey = <span class="string">&quot;your_secret_key&quot;</span>;app.<span class="title function_">use</span>(bodyParser.<span class="title function_">json</span>());<span class="keyword">const</span> users = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(fs.<span class="title function_">readFileSync</span>(<span class="string">&quot;users.json&quot;</span>, <span class="string">&quot;utf-8&quot;</span>));<span class="keyword">function</span> <span class="title function_">generateToken</span>(<span class="params">user</span>) &#123;  <span class="keyword">return</span> jwt.<span class="title function_">sign</span>(&#123; <span class="attr">id</span>: user.<span class="property">id</span>, <span class="attr">role</span>: user.<span class="property">role</span> &#125;, secretKey, &#123;    <span class="attr">expiresIn</span>: <span class="string">&quot;1h&quot;</span>,  &#125;);&#125;<span class="keyword">function</span> <span class="title function_">authenticateToken</span>(<span class="params">req, res, next</span>) &#123;  <span class="keyword">const</span> token = req.<span class="title function_">header</span>(<span class="string">&quot;Authorization&quot;</span>)?.<span class="title function_">split</span>(<span class="string">&quot; &quot;</span>)[<span class="number">1</span>];  <span class="keyword">if</span> (!token) <span class="keyword">return</span> res.<span class="title function_">sendStatus</span>(<span class="number">401</span>);  jwt.<span class="title function_">verify</span>(token, secretKey, <span class="function">(<span class="params">err, user</span>) =&gt;</span> &#123;    <span class="keyword">if</span> (err) <span class="keyword">return</span> res.<span class="title function_">sendStatus</span>(<span class="number">403</span>);    req.<span class="property">user</span> = user;    <span class="title function_">next</span>();  &#125;);&#125;<span class="keyword">function</span> <span class="title function_">authorizeRole</span>(<span class="params">role</span>) &#123;  <span class="keyword">return</span> <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;    <span class="keyword">if</span> (req.<span class="property">user</span>.<span class="property">role</span> !== role) &#123;      <span class="keyword">return</span> res.<span class="title function_">sendStatus</span>(<span class="number">403</span>);    &#125;    <span class="title function_">next</span>();  &#125;;&#125;app.<span class="title function_">post</span>(<span class="string">&quot;/login&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  <span class="keyword">const</span> &#123; username, password &#125; = req.<span class="property">body</span>;  <span class="keyword">const</span> user = users.<span class="title function_">find</span>(    <span class="function">(<span class="params">u</span>) =&gt;</span> u.<span class="property">username</span> === username &amp;&amp; u.<span class="property">password</span> === password  );  <span class="keyword">if</span> (!user) &#123;    <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">401</span>).<span class="title function_">send</span>(<span class="string">&quot;Invalid credentials&quot;</span>);  &#125;  <span class="keyword">const</span> token = <span class="title function_">generateToken</span>(user);  res.<span class="title function_">json</span>(&#123; token &#125;);&#125;);app.<span class="title function_">get</span>(<span class="string">&quot;/admin&quot;</span>, authenticateToken, <span class="title function_">authorizeRole</span>(<span class="string">&quot;admin&quot;</span>), <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  res.<span class="title function_">send</span>(<span class="string">&quot;This is the admin panel&quot;</span>);&#125;);app.<span class="title function_">get</span>(<span class="string">&quot;/user&quot;</span>, authenticateToken, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  res.<span class="title function_">send</span>(<span class="string">`Hello <span class="subst">$&#123;req.user.id&#125;</span>, this is your profile`</span>);&#125;);app.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Server is running on http://localhost:<span class="subst">$&#123;port&#125;</span>`</span>);&#125;);</code></pre><h2 id="사용자-데이터-설정"><a href="#사용자-데이터-설정" class="headerlink" title="사용자 데이터 설정"></a>사용자 데이터 설정</h2><p>다음으로 <code>users.json</code> 파일을 생성하여 사용자 데이터를 저장합니다.</p><pre><code class="highlight json"><span class="comment">// users.json</span><span class="punctuation">[</span>  <span class="punctuation">&#123;</span> <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;admin&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;admin123&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;admin&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span>  <span class="punctuation">&#123;</span> <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span> <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user1&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user123&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">]</span></code></pre><h2 id="예제-흐름-설명"><a href="#예제-흐름-설명" class="headerlink" title="예제 흐름 설명"></a>예제 흐름 설명</h2><p>위 예제는 다음과 같은 흐름을 따릅니다:</p><ol><li><p><strong>로그인 엔드포인트</strong>: <code>/login</code> 엔드포인트를 통해 사용자가 로그인할 수 있습니다. 로그인에 성공하면 JWT 토큰을 반환합니다.</p><pre><code class="highlight javascript">app.<span class="title function_">post</span>(<span class="string">&quot;/login&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  <span class="keyword">const</span> &#123; username, password &#125; = req.<span class="property">body</span>;  <span class="keyword">const</span> user = users.<span class="title function_">find</span>(    <span class="function">(<span class="params">u</span>) =&gt;</span> u.<span class="property">username</span> === username &amp;&amp; u.<span class="property">password</span> === password  );  <span class="keyword">if</span> (!user) &#123;    <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">401</span>).<span class="title function_">send</span>(<span class="string">&quot;Invalid credentials&quot;</span>);  &#125;  <span class="keyword">const</span> token = <span class="title function_">generateToken</span>(user);  res.<span class="title function_">json</span>(&#123; token &#125;);&#125;);</code></pre></li><li><p><strong>토큰 인증 미들웨어</strong>: <code>authenticateToken</code> 미들웨어는 모든 보호된 엔드포인트에서 JWT 토큰을 검사하고 유효성을 검증합니다.</p><pre><code class="highlight javascript"><span class="keyword">function</span> <span class="title function_">authenticateToken</span>(<span class="params">req, res, next</span>) &#123;  <span class="keyword">const</span> token = req.<span class="title function_">header</span>(<span class="string">&quot;Authorization&quot;</span>)?.<span class="title function_">split</span>(<span class="string">&quot; &quot;</span>)[<span class="number">1</span>];  <span class="keyword">if</span> (!token) <span class="keyword">return</span> res.<span class="title function_">sendStatus</span>(<span class="number">401</span>);  jwt.<span class="title function_">verify</span>(token, secretKey, <span class="function">(<span class="params">err, user</span>) =&gt;</span> &#123;    <span class="keyword">if</span> (err) <span class="keyword">return</span> res.<span class="title function_">sendStatus</span>(<span class="number">403</span>);    req.<span class="property">user</span> = user;    <span class="title function_">next</span>();  &#125;);&#125;</code></pre></li><li><p><strong>역할 기반 접근 제어 미들웨어</strong>: <code>authorizeRole</code> 미들웨어는 특정 역할을 가진 사용자만 접근할 수 있도록 합니다. 예제에서는 <code>/admin</code> 엔드포인트에 대해 관리자 권한을 요구합니다.</p><pre><code class="highlight javascript"><span class="keyword">function</span> <span class="title function_">authorizeRole</span>(<span class="params">role</span>) &#123;  <span class="keyword">return</span> <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;    <span class="keyword">if</span> (req.<span class="property">user</span>.<span class="property">role</span> !== role) &#123;      <span class="keyword">return</span> res.<span class="title function_">sendStatus</span>(<span class="number">403</span>);    &#125;    <span class="title function_">next</span>();  &#125;;&#125;</code></pre></li><li><p><strong>관리자 패널 엔드포인트</strong>: <code>/admin</code> 엔드포인트는 관리자 권한을 가진 사용자만 접근할 수 있습니다.</p><pre><code class="highlight javascript">app.<span class="title function_">get</span>(<span class="string">&quot;/admin&quot;</span>, authenticateToken, <span class="title function_">authorizeRole</span>(<span class="string">&quot;admin&quot;</span>), <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  res.<span class="title function_">send</span>(<span class="string">&quot;This is the admin panel&quot;</span>);&#125;);</code></pre></li><li><p><strong>사용자 프로필 엔드포인트</strong>: <code>/user</code> 엔드포인트는 인증된 모든 사용자가 접근할 수 있습니다.</p><pre><code class="highlight javascript">app.<span class="title function_">get</span>(<span class="string">&quot;/user&quot;</span>, authenticateToken, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  res.<span class="title function_">send</span>(<span class="string">`Hello <span class="subst">$&#123;req.user.id&#125;</span>, this is your profile`</span>);&#125;);</code></pre></li></ol><h2 id="테스트"><a href="#테스트" class="headerlink" title="테스트"></a>테스트</h2><p>이렇게 하면 JWT를 활용한 간단한 로그인 및 권한 체크 시스템을 구현할 수 있습니다.<br>이 코드를 실행하기 전에 <code>users.json</code> 파일이 있는지 확인하고, <code>server.js</code> 파일을 실행하여 서버를 시작하세요.</p><pre><code class="highlight bash">node server.js</code></pre><p>서버가 성공적으로 실행되면, <code>http://localhost:3000</code>에서 로그인 및 사용자 권한 체크를 테스트할 수 있습니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 JWT를 사용하여 Express 서버에서 로그인 및 권한 체크를 구현하는 방법을 알아보았습니다.<br>이를 활용하여 더 안전하고 효율적인 애플리케이션을 개발해보세요!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> web_필수 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>알고리즘[초급] 소인수 분해(Prime Factorization)</title>
      <link href="/algorithm/newb/14/"/>
      <url>/algorithm/newb/14/</url>
      
        <content type="html"><![CDATA[<h1 id="알고리즘-초급-소인수-분해-Prime-Factorization"><a href="#알고리즘-초급-소인수-분해-Prime-Factorization" class="headerlink" title="알고리즘[초급] 소인수 분해(Prime Factorization)"></a>알고리즘[초급] 소인수 분해(Prime Factorization)</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간은 알고리즘 초급의 마지막 주제인 소인수 분해(Prime Factorization)에 대해 알아보겠습니다!</p><h2 id="소인수-분해-Prime-Factorization-란-무엇인가"><a href="#소인수-분해-Prime-Factorization-란-무엇인가" class="headerlink" title="소인수 분해(Prime Factorization)란 무엇인가?"></a>소인수 분해(Prime Factorization)란 무엇인가?</h2><p>소인수 분해는 주어진 수를 소수들의 곱으로 표현하는 과정입니다. 예를 들어, 60을 소인수 분해하면 ( 2^2 \times 3 \times 5 )가 됩니다. 소인수 분해는 수학에서 중요한 개념으로, 다양한 문제 해결에 사용됩니다.</p><h3 id="소인수-분해의-특징"><a href="#소인수-분해의-특징" class="headerlink" title="소인수 분해의 특징"></a>소인수 분해의 특징</h3><ul><li><strong>소수들의 곱</strong>: 주어진 수를 소수들의 곱으로 표현합니다.</li><li><strong>유일성</strong>: 소인수 분해는 유일하며, 같은 수에 대해 항상 동일한 소수들의 곱으로 표현됩니다.</li></ul><h3 id="소인수-분해의-구현"><a href="#소인수-분해의-구현" class="headerlink" title="소인수 분해의 구현"></a>소인수 분해의 구현</h3><p>JavaScript로 소인수 분해를 구현하는 방법은 다음과 같습니다:</p><h4 id="소인수-분해-함수"><a href="#소인수-분해-함수" class="headerlink" title="소인수 분해 함수"></a>소인수 분해 함수</h4><pre><code class="highlight javascript"><span class="keyword">function</span> <span class="title function_">primeFactors</span>(<span class="params">n</span>) &#123;  <span class="keyword">const</span> factors = [];  <span class="comment">// 2로 나누기</span>  <span class="keyword">while</span> (n % <span class="number">2</span> === <span class="number">0</span>) &#123;    factors.<span class="title function_">push</span>(<span class="number">2</span>);    n = n / <span class="number">2</span>;  &#125;  <span class="comment">// 홀수 소수로 나누기</span>  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">3</span>; i * i &lt;= n; i += <span class="number">2</span>) &#123;    <span class="keyword">while</span> (n % i === <span class="number">0</span>) &#123;      factors.<span class="title function_">push</span>(i);      n = n / i;    &#125;  &#125;  <span class="comment">// n이 소수인 경우</span>  <span class="keyword">if</span> (n &gt; <span class="number">2</span>) &#123;    factors.<span class="title function_">push</span>(n);  &#125;  <span class="keyword">return</span> factors;&#125;<span class="comment">// 테스트</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">primeFactors</span>(<span class="number">60</span>)); <span class="comment">// [2, 2, 3, 5]</span></code></pre><h3 id="예제-RPG-게임에서의-소인수-분해-사용"><a href="#예제-RPG-게임에서의-소인수-분해-사용" class="headerlink" title="예제: RPG 게임에서의 소인수 분해 사용"></a>예제: RPG 게임에서의 소인수 분해 사용</h3><p>RPG 게임에서 캐릭터의 경험치를 소인수 분해하는 작업을 소인수 분해 알고리즘으로 구현해봅시다.</p><pre><code class="highlight javascript"><span class="keyword">function</span> <span class="title function_">primeFactors</span>(<span class="params">n</span>) &#123;  <span class="keyword">const</span> factors = [];  <span class="comment">// 2로 나누기</span>  <span class="keyword">while</span> (n % <span class="number">2</span> === <span class="number">0</span>) &#123;    factors.<span class="title function_">push</span>(<span class="number">2</span>);    n = n / <span class="number">2</span>;  &#125;  <span class="comment">// 홀수 소수로 나누기</span>  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">3</span>; i * i &lt;= n; i += <span class="number">2</span>) &#123;    <span class="keyword">while</span> (n % i === <span class="number">0</span>) &#123;      factors.<span class="title function_">push</span>(i);      n = n / i;    &#125;  &#125;  <span class="comment">// n이 소수인 경우</span>  <span class="keyword">if</span> (n &gt; <span class="number">2</span>) &#123;    factors.<span class="title function_">push</span>(n);  &#125;  <span class="keyword">return</span> factors;&#125;<span class="comment">// 캐릭터의 경험치 목록</span><span class="keyword">const</span> experiencePoints = [<span class="number">60</span>, <span class="number">100</span>, <span class="number">45</span>, <span class="number">75</span>];<span class="comment">// 각 경험치를 소인수 분해</span>experiencePoints.<span class="title function_">forEach</span>(<span class="function">(<span class="params">xp</span>) =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Prime factors of <span class="subst">$&#123;xp&#125;</span>: <span class="subst">$&#123;primeFactors(xp).join(<span class="string">&quot;, &quot;</span>)&#125;</span>`</span>);&#125;);<span class="comment">// Prime factors of 60: 2, 2, 3, 5</span><span class="comment">// Prime factors of 100: 2, 2, 5, 5</span><span class="comment">// Prime factors of 45: 3, 3, 5</span><span class="comment">// Prime factors of 75: 3, 5, 5</span></code></pre><h3 id="퀴즈-소인수-분해-이해하기"><a href="#퀴즈-소인수-분해-이해하기" class="headerlink" title="퀴즈: 소인수 분해 이해하기"></a>퀴즈: 소인수 분해 이해하기</h3><p>다음의 숫자에 대해 소인수 분해를 수행해보세요!</p><ol><li>84를 소인수 분해하세요.</li><li>105를 소인수 분해하세요.</li></ol><details><summary>정답</summary><ol><li><p>84를 소인수 분해합니다.</p><pre><code class="highlight javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">primeFactors</span>(<span class="number">84</span>)); <span class="comment">// [2, 2, 3, 7]</span></code></pre></li><li><p>105를 소인수 분해합니다.</p><pre><code class="highlight javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">primeFactors</span>(<span class="number">105</span>)); <span class="comment">// [3, 5, 7]</span></code></pre></li></ol></details><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>소인수 분해는 주어진 수를 소수들의 곱으로 표현하는 중요한 수학적 개념입니다. 소인수 분해를 이해하고 구현하면, 다양한 수학적 및 컴퓨터 과학적 문제를 해결하는 데 유용할 것입니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> 알고리즘_초급 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue 테스트 - Jest, Cypress</title>
      <link href="/vue/23/"/>
      <url>/vue/23/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-테스트-Jest-Cypress"><a href="#Vue-테스트-Jest-Cypress" class="headerlink" title="Vue 테스트 - Jest, Cypress"></a>Vue 테스트 - Jest, Cypress</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 Vue.js 애플리케이션의 품질을 보장하는 데 필수적인 <strong>테스트</strong>에 대해 알아보겠습니다. Vue.js에서 단위 테스트와 E2E(End-to-End) 테스트를 각각 어떻게 설정하고 실행할 수 있는지 구체적으로 살펴보겠습니다.</p><blockquote><p>이번 글에서는 Vue와 관련된 예제를 구성해본것으로, 전체적인 내용은 <a href="https://jestjs.io/docs/getting-started">Jest 공식 Docs</a>, <a href="https://docs.cypress.io/guides/overview/why-cypress">Cypress 공식 Docs</a>를 참고해주세요!</p></blockquote><h2 id="1-단위-테스트-Jest-Vue-Test-Utils"><a href="#1-단위-테스트-Jest-Vue-Test-Utils" class="headerlink" title="1. 단위 테스트 (Jest, Vue Test Utils)"></a>1. 단위 테스트 (Jest, Vue Test Utils)</h2><h3 id="단위-테스트란"><a href="#단위-테스트란" class="headerlink" title="단위 테스트란?"></a>단위 테스트란?</h3><p>단위 테스트(Unit Test)는 애플리케이션의 가장 작은 단위인 컴포넌트나 함수가 올바르게 동작하는지 확인하는 테스트입니다. 단위 테스트를 통해 개별 컴포넌트의 기능을 독립적으로 검증할 수 있으며, 코드의 안정성을 높일 수 있습니다.</p><h3 id="Jest와-Vue-Test-Utils"><a href="#Jest와-Vue-Test-Utils" class="headerlink" title="Jest와 Vue Test Utils"></a>Jest와 Vue Test Utils</h3><ul><li><strong>Jest</strong>: Facebook에서 개발한 JavaScript 테스트 프레임워크로, 강력한 기능과 성능을 제공하며, Vue.js를 포함한 다양한 JavaScript 프로젝트에서 널리 사용됩니다.</li><li><strong>Vue Test Utils</strong>: Vue.js 컴포넌트를 테스트하기 위해 공식적으로 제공되는 유틸리티 라이브러리로, 컴포넌트를 렌더링하고 상호작용하는 테스트를 작성하는 데 사용됩니다.</li></ul><h3 id="단위-테스트-설정"><a href="#단위-테스트-설정" class="headerlink" title="단위 테스트 설정"></a>단위 테스트 설정</h3><h4 id="Jest와-Vue-Test-Utils-설치"><a href="#Jest와-Vue-Test-Utils-설치" class="headerlink" title="Jest와 Vue Test Utils 설치"></a>Jest와 Vue Test Utils 설치</h4><pre><code class="highlight bash">npm install --save-dev jest vue-jest @vue/test-utils</code></pre><h4 id="Jest-설정-파일-생성"><a href="#Jest-설정-파일-생성" class="headerlink" title="Jest 설정 파일 생성"></a>Jest 설정 파일 생성</h4><p>프로젝트의 루트에 <code>jest.config.js</code> 파일을 생성하여 Jest 설정을 추가합니다.</p><pre><code class="highlight javascript"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;  <span class="attr">moduleFileExtensions</span>: [<span class="string">&quot;js&quot;</span>, <span class="string">&quot;json&quot;</span>, <span class="string">&quot;vue&quot;</span>],  <span class="attr">transform</span>: &#123;    <span class="string">&quot;^.+\\.vue$&quot;</span>: <span class="string">&quot;vue-jest&quot;</span>,    <span class="string">&quot;^.+\\.js$&quot;</span>: <span class="string">&quot;babel-jest&quot;</span>,  &#125;,  <span class="attr">testMatch</span>: [<span class="string">&quot;**/tests/unit/**/*.spec.js&quot;</span>],&#125;;</code></pre><h4 id="단위-테스트-작성-예제"><a href="#단위-테스트-작성-예제" class="headerlink" title="단위 테스트 작성 예제"></a>단위 테스트 작성 예제</h4><p>이제 간단한 Vue 컴포넌트를 테스트하는 예제를 만들어보겠습니다.</p><p><strong><code>src/components/Character.vue</code></strong></p><pre><code class="highlight vue">&lt;template&gt;  &lt;div&gt;    &lt;p&gt;&#123;&#123; name &#125;&#125; (레벨: &#123;&#123; level &#125;&#125;)&lt;/p&gt;    &lt;button @click=&quot;levelUp&quot;&gt;레벨 업&lt;/button&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123;  data() &#123;    return &#123;      name: &quot;전사&quot;,      level: 1,    &#125;;  &#125;,  methods: &#123;    levelUp() &#123;      this.level++;    &#125;,  &#125;,&#125;;&lt;/script&gt;</code></pre><p><strong><code>tests/unit/Character.spec.js</code></strong></p><pre><code class="highlight javascript"><span class="keyword">import</span> &#123; shallowMount &#125; <span class="keyword">from</span> <span class="string">&quot;@vue/test-utils&quot;</span>;<span class="keyword">import</span> <span class="title class_">Character</span> <span class="keyword">from</span> <span class="string">&quot;@/components/Character.vue&quot;</span>;<span class="title function_">describe</span>(<span class="string">&quot;Character.vue&quot;</span>, <span class="function">() =&gt;</span> &#123;  <span class="title function_">it</span>(<span class="string">&quot;캐릭터 초기 레벨은 1입니다.&quot;</span>, <span class="function">() =&gt;</span> &#123;    <span class="keyword">const</span> wrapper = <span class="title function_">shallowMount</span>(<span class="title class_">Character</span>);    <span class="title function_">expect</span>(wrapper.<span class="title function_">text</span>()).<span class="title function_">toContain</span>(<span class="string">&quot;레벨: 1&quot;</span>);  &#125;);  <span class="title function_">it</span>(<span class="string">&quot;레벨 업 버튼을 클릭하면 캐릭터 레벨이 증가합니다.&quot;</span>, <span class="title function_">async</span> () =&gt; &#123;    <span class="keyword">const</span> wrapper = <span class="title function_">shallowMount</span>(<span class="title class_">Character</span>);    <span class="keyword">await</span> wrapper.<span class="title function_">find</span>(<span class="string">&quot;button&quot;</span>).<span class="title function_">trigger</span>(<span class="string">&quot;click&quot;</span>);    <span class="title function_">expect</span>(wrapper.<span class="title function_">text</span>()).<span class="title function_">toContain</span>(<span class="string">&quot;레벨: 2&quot;</span>);  &#125;);&#125;);</code></pre><h3 id="단위-테스트-실행"><a href="#단위-테스트-실행" class="headerlink" title="단위 테스트 실행"></a>단위 테스트 실행</h3><pre><code class="highlight bash">npm run <span class="built_in">test</span>:unit</code></pre><p>이 명령어를 실행하면 Jest가 설정된 모든 단위 테스트를 실행하고 결과를 출력합니다.</p><h2 id="2-E2E-테스트-Cypress"><a href="#2-E2E-테스트-Cypress" class="headerlink" title="2. E2E 테스트 (Cypress)"></a>2. E2E 테스트 (Cypress)</h2><h3 id="E2E-테스트란"><a href="#E2E-테스트란" class="headerlink" title="E2E 테스트란?"></a>E2E 테스트란?</h3><p>E2E(End-to-End) 테스트는 애플리케이션의 시작부터 끝까지 사용자가 실제로 애플리케이션을 사용하는 것처럼 시뮬레이션하는 테스트입니다. 이는 전체 애플리케이션이 예상대로 동작하는지 확인하는 데 사용됩니다.</p><h3 id="Cypress"><a href="#Cypress" class="headerlink" title="Cypress"></a>Cypress</h3><p>Cypress는 현대적인 웹 애플리케이션을 테스트하기 위한 강력한 E2E 테스트 프레임워크입니다. Cypress는 테스트 작성, 실행, 디버깅이 간편하며, Vue.js와 같은 SPA(Single Page Application) 테스트에 특히 유용합니다.</p><h3 id="Cypress-설정"><a href="#Cypress-설정" class="headerlink" title="Cypress 설정"></a>Cypress 설정</h3><h4 id="Cypress-설치"><a href="#Cypress-설치" class="headerlink" title="Cypress 설치"></a>Cypress 설치</h4><pre><code class="highlight bash">npm install --save-dev cypress</code></pre><h4 id="Cypress-설정-파일-생성"><a href="#Cypress-설정-파일-생성" class="headerlink" title="Cypress 설정 파일 생성"></a>Cypress 설정 파일 생성</h4><p>Cypress 설치 후, 다음 명령어를 실행하여 Cypress 설정 파일을 생성하고 초기화합니다.</p><pre><code class="highlight bash">npx cypress open</code></pre><p>이 명령어는 Cypress 대시보드를 열고, 기본 테스트 파일 구조를 설정합니다.</p><h3 id="E2E-테스트-작성-예제"><a href="#E2E-테스트-작성-예제" class="headerlink" title="E2E 테스트 작성 예제"></a>E2E 테스트 작성 예제</h3><p>Cypress를 사용해 간단한 E2E 테스트를 작성해보겠습니다.</p><p><strong><code>cypress/integration/character_spec.js</code></strong></p><pre><code class="highlight javascript"><span class="title function_">describe</span>(<span class="string">&quot;Character E2E 테스트&quot;</span>, <span class="function">() =&gt;</span> &#123;  <span class="title function_">it</span>(<span class="string">&quot;캐릭터의 초기 레벨이 1인지 확인&quot;</span>, <span class="function">() =&gt;</span> &#123;    cy.<span class="title function_">visit</span>(<span class="string">&quot;/&quot;</span>);    cy.<span class="title function_">contains</span>(<span class="string">&quot;레벨: 1&quot;</span>);  &#125;);  <span class="title function_">it</span>(<span class="string">&quot;레벨 업 버튼을 클릭하여 캐릭터 레벨을 증가시킴&quot;</span>, <span class="function">() =&gt;</span> &#123;    cy.<span class="title function_">visit</span>(<span class="string">&quot;/&quot;</span>);    cy.<span class="title function_">get</span>(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>();    cy.<span class="title function_">contains</span>(<span class="string">&quot;레벨: 2&quot;</span>);  &#125;);&#125;);</code></pre><h3 id="E2E-테스트-실행"><a href="#E2E-테스트-실행" class="headerlink" title="E2E 테스트 실행"></a>E2E 테스트 실행</h3><p>Cypress 대시보드에서 테스트 파일을 선택하거나, 다음 명령어로 테스트를 실행할 수 있습니다.</p><pre><code class="highlight bash">npx cypress run</code></pre><p>이 명령어를 실행하면 Cypress가 브라우저를 열고, 설정된 E2E 테스트를 자동으로 실행합니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 Vue.js 애플리케이션에서 단위 테스트와 E2E 테스트를 각각 Jest와 Vue Test Utils, Cypress를 사용하여 설정하고 실행하는 방법에 대해 알아보았습니다. 테스트는 애플리케이션의 품질을 보장하는 중요한 과정으로, 이를 통해 코드의 안정성을 높이고, 유지보수를 쉽게 할 수 있습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Javascript 디폴트 파라미터 (Default Parameters)</title>
      <link href="/javascript/detail/4/"/>
      <url>/javascript/detail/4/</url>
      
        <content type="html"><![CDATA[<h1 id="Javascript-디폴트-파라미터-Default-Parameters"><a href="#Javascript-디폴트-파라미터-Default-Parameters" class="headerlink" title="Javascript 디폴트 파라미터 (Default Parameters)"></a>Javascript 디폴트 파라미터 (Default Parameters)</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 JavaScript에서 디폴트 파라미터(Default Parameters)에 대해 알아보겠습니다. 디폴트 파라미터는 함수 매개변수의 기본값을 설정하는 방법을 제공합니다.</p><h2 id="디폴트-파라미터-사용법"><a href="#디폴트-파라미터-사용법" class="headerlink" title="디폴트 파라미터 사용법"></a>디폴트 파라미터 사용법</h2><p>함수 매개변수에 기본값을 설정할 수 있습니다:</p><pre><code class="highlight javascript"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params">name = <span class="string">&quot;Guest&quot;</span></span>) &#123;  <span class="keyword">return</span> <span class="string">`Hello, <span class="subst">$&#123;name&#125;</span>!`</span>;&#125;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">greet</span>()); <span class="comment">// 출력: Hello, Guest!</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">greet</span>(<span class="string">&quot;John&quot;</span>)); <span class="comment">// 출력: Hello, John!</span></code></pre><h2 id="여러-개의-디폴트-파라미터"><a href="#여러-개의-디폴트-파라미터" class="headerlink" title="여러 개의 디폴트 파라미터"></a>여러 개의 디폴트 파라미터</h2><p>여러 개의 디폴트 파라미터를 설정할 수 있습니다:</p><pre><code class="highlight javascript"><span class="keyword">function</span> <span class="title function_">multiply</span>(<span class="params">a, b = <span class="number">1</span></span>) &#123;  <span class="keyword">return</span> a * b;&#125;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">multiply</span>(<span class="number">5</span>)); <span class="comment">// 출력: 5</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">multiply</span>(<span class="number">5</span>, <span class="number">2</span>)); <span class="comment">// 출력: 10</span></code></pre><h2 id="객체를-인수로-사용하는-디폴트-파라미터"><a href="#객체를-인수로-사용하는-디폴트-파라미터" class="headerlink" title="객체를 인수로 사용하는 디폴트 파라미터"></a>객체를 인수로 사용하는 디폴트 파라미터</h2><p>객체를 인수로 사용하는 경우에도 디폴트 파라미터를 설정할 수 있습니다:</p><pre><code class="highlight javascript"><span class="keyword">function</span> <span class="title function_">createUser</span>(<span class="params">&#123; name = <span class="string">&quot;Guest&quot;</span>, age = <span class="number">18</span> &#125; = &#123;&#125;</span>) &#123;  <span class="keyword">return</span> <span class="string">`Name: <span class="subst">$&#123;name&#125;</span>, Age: <span class="subst">$&#123;age&#125;</span>`</span>;&#125;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">createUser</span>()); <span class="comment">// 출력: Name: Guest, Age: 18</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">createUser</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;John&quot;</span> &#125;)); <span class="comment">// 출력: Name: John, Age: 18</span></code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 JavaScript에서 디폴트 파라미터를 사용하는 방법에 대해 알아보았습니다. 디폴트 파라미터는 함수 매개변수의 기본값을 설정하여 코드의 유연성을 높이는 데 유용합니다. 다음 시간에는 스프레드 연산자에 대해 알아보겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> JS_디테일 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>알고리즘[초급] 소수 판별(Prime Number Check)</title>
      <link href="/algorithm/newb/13/"/>
      <url>/algorithm/newb/13/</url>
      
        <content type="html"><![CDATA[<h1 id="알고리즘-초급-소수-판별-Prime-Number-Check"><a href="#알고리즘-초급-소수-판별-Prime-Number-Check" class="headerlink" title="알고리즘[초급] 소수 판별(Prime Number Check)"></a>알고리즘[초급] 소수 판별(Prime Number Check)</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 소수(Prime Number)에 대해 알아보겠습니다.</p><h2 id="소수-Prime-Number-란-무엇인가"><a href="#소수-Prime-Number-란-무엇인가" class="headerlink" title="소수(Prime Number)란 무엇인가?"></a>소수(Prime Number)란 무엇인가?</h2><p>소수는 1과 자기 자신만을 약수로 가지는 1보다 큰 자연수입니다. 예를 들어, 2, 3, 5, 7, 11 등은 소수입니다. 소수는 수학 및 컴퓨터 과학에서 중요한 개념으로, 다양한 알고리즘의 기초가 됩니다.</p><h3 id="소수의-특징"><a href="#소수의-특징" class="headerlink" title="소수의 특징"></a>소수의 특징</h3><ul><li><strong>약수의 개수</strong>: 소수는 1과 자기 자신만을 약수로 가집니다.</li><li><strong>최소 소수</strong>: 2는 가장 작은 소수이며, 유일한 짝수 소수입니다.</li><li><strong>홀수 소수</strong>: 2를 제외한 모든 소수는 홀수입니다.</li></ul><h3 id="소수-판별의-구현"><a href="#소수-판별의-구현" class="headerlink" title="소수 판별의 구현"></a>소수 판별의 구현</h3><p>소수를 판별하기 위해서는 주어진 수가 1과 자기 자신을 제외한 다른 수로 나누어 떨어지는지 확인해야 합니다. 이를 위해 여러 가지 알고리즘을 사용할 수 있으며, 가장 간단한 방법은 주어진 수의 제곱근까지의 수로 나누어 보는 것입니다.</p><h4 id="소수-판별-함수"><a href="#소수-판별-함수" class="headerlink" title="소수 판별 함수"></a>소수 판별 함수</h4><pre><code class="highlight javascript"><span class="keyword">function</span> <span class="title function_">isPrime</span>(<span class="params">n</span>) &#123;  <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) &#123;    <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 1 이하의 수는 소수가 아님</span>  &#125;  <span class="keyword">if</span> (n &lt;= <span class="number">3</span>) &#123;    <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 2와 3은 소수</span>  &#125;  <span class="keyword">if</span> (n % <span class="number">2</span> === <span class="number">0</span> || n % <span class="number">3</span> === <span class="number">0</span>) &#123;    <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 2와 3으로 나누어 떨어지는 수는 소수가 아님</span>  &#125;  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">5</span>; i * i &lt;= n; i += <span class="number">6</span>) &#123;    <span class="keyword">if</span> (n % i === <span class="number">0</span> || n % (i + <span class="number">2</span>) === <span class="number">0</span>) &#123;      <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 제곱근까지 검사</span>    &#125;  &#125;  <span class="keyword">return</span> <span class="literal">true</span>;&#125;<span class="comment">// 테스트</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isPrime</span>(<span class="number">11</span>)); <span class="comment">// true</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isPrime</span>(<span class="number">15</span>)); <span class="comment">// false</span></code></pre><h3 id="예제-RPG-게임에서의-소수-사용"><a href="#예제-RPG-게임에서의-소수-사용" class="headerlink" title="예제: RPG 게임에서의 소수 사용"></a>예제: RPG 게임에서의 소수 사용</h3><p>RPG 게임에서 캐릭터의 경험치가 소수인지 확인하는 작업을 소수 판별 알고리즘으로 구현해봅시다.</p><pre><code class="highlight javascript"><span class="keyword">function</span> <span class="title function_">isPrime</span>(<span class="params">n</span>) &#123;  <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) &#123;    <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 1 이하의 수는 소수가 아님</span>  &#125;  <span class="keyword">if</span> (n &lt;= <span class="number">3</span>) &#123;    <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 2와 3은 소수</span>  &#125;  <span class="keyword">if</span> (n % <span class="number">2</span> === <span class="number">0</span> || n % <span class="number">3</span> === <span class="number">0</span>) &#123;    <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 2와 3으로 나누어 떨어지는 수는 소수가 아님</span>  &#125;  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">5</span>; i * i &lt;= n; i += <span class="number">6</span>) &#123;    <span class="keyword">if</span> (n % i === <span class="number">0</span> || n % (i + <span class="number">2</span>) === <span class="number">0</span>) &#123;      <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 제곱근까지 검사</span>    &#125;  &#125;  <span class="keyword">return</span> <span class="literal">true</span>;&#125;<span class="comment">// 캐릭터의 경험치 목록</span><span class="keyword">const</span> experiencePoints = [<span class="number">10</span>, <span class="number">17</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">29</span>];<span class="comment">// 각 경험치가 소수인지 확인</span>experiencePoints.<span class="title function_">forEach</span>(<span class="function">(<span class="params">xp</span>) =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Experience points <span class="subst">$&#123;xp&#125;</span> is prime: <span class="subst">$&#123;isPrime(xp)&#125;</span>`</span>);&#125;);<span class="comment">// Experience points 10 is prime: false</span><span class="comment">// Experience points 17 is prime: true</span><span class="comment">// Experience points 23 is prime: true</span><span class="comment">// Experience points 24 is prime: false</span><span class="comment">// Experience points 29 is prime: true</span></code></pre><h3 id="퀴즈-소수-판별-이해하기"><a href="#퀴즈-소수-판별-이해하기" class="headerlink" title="퀴즈: 소수 판별 이해하기"></a>퀴즈: 소수 판별 이해하기</h3><p>다음의 숫자에 대해 소수인지 판별해보세요!</p><ol><li>31이 소수인지 확인하세요.</li><li>40이 소수인지 확인하세요.</li></ol><details><summary>정답</summary><ol><li><p>31이 소수인지 확인합니다.</p><pre><code class="highlight javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isPrime</span>(<span class="number">31</span>)); <span class="comment">// true</span></code></pre></li><li><p>40이 소수인지 확인합니다.</p><pre><code class="highlight javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isPrime</span>(<span class="number">40</span>)); <span class="comment">// false</span></code></pre></li></ol></details><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>소수는 1과 자기 자신만을 약수로 가지는 중요한 수학적 개념입니다. 꼭 외우고 있을 필요는 없지만 한번만 개념을 이해해두면 나중에 활용하기 좋을 것 같습니다!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> 알고리즘_초급 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue Lazy Loading</title>
      <link href="/vue/22/"/>
      <url>/vue/22/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-Lazy-Loading"><a href="#Vue-Lazy-Loading" class="headerlink" title="Vue Lazy Loading"></a>Vue Lazy Loading</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 Vue.js 애플리케이션에서 성능 최적화의 중요한 기법 중 하나인 <strong>Lazy Loading</strong>에 대해 알아보겠습니다.<br>Lazy Loading은 페이지 로드 시간을 단축시키고, 초기 로드 시 사용자가 실제로 필요로 하는 부분만 불러오도록 하는 효율적인 방법입니다.</p><h2 id="1-Lazy-Loading의-개념"><a href="#1-Lazy-Loading의-개념" class="headerlink" title="1. Lazy Loading의 개념"></a>1. Lazy Loading의 개념</h2><h3 id="Lazy-Loading이란"><a href="#Lazy-Loading이란" class="headerlink" title="Lazy Loading이란?"></a>Lazy Loading이란?</h3><p>Lazy Loading은 웹 페이지나 애플리케이션이 처음 로드될 때, 모든 리소스를 한꺼번에 불러오지 않고, 사용자가 필요로 할 때 해당 리소스를 동적으로 불러오는 기법입니다. 이 방법은 초기 로드 시간을 줄이고, 사용자 경험을 향상시키는 데 큰 도움이 됩니다.</p><h3 id="Vue-js에서-Lazy-Loading의-이점"><a href="#Vue-js에서-Lazy-Loading의-이점" class="headerlink" title="Vue.js에서 Lazy Loading의 이점"></a>Vue.js에서 Lazy Loading의 이점</h3><ul><li><strong>초기 로드 시간 단축</strong>: 페이지 로딩 시 필요한 리소스만 불러와서 사용자에게 더 빠른 응답을 제공할 수 있습니다.</li><li><strong>메모리 사용 최적화</strong>: 필요한 순간에만 리소스를 로드하므로, 메모리 사용을 줄일 수 있습니다.</li><li><strong>네트워크 효율성</strong>: 대역폭을 절약하고, 네트워크 요청을 최소화하여 서버 부하를 줄입니다.</li></ul><h2 id="2-Vue-js에서-Lazy-Loading-설정"><a href="#2-Vue-js에서-Lazy-Loading-설정" class="headerlink" title="2. Vue.js에서 Lazy Loading 설정"></a>2. Vue.js에서 Lazy Loading 설정</h2><h3 id="컴포넌트의-Lazy-Loading"><a href="#컴포넌트의-Lazy-Loading" class="headerlink" title="컴포넌트의 Lazy Loading"></a>컴포넌트의 Lazy Loading</h3><p>Vue.js에서는 컴포넌트를 동적으로 불러오는 방식으로 Lazy Loading을 쉽게 구현할 수 있습니다. 이를 통해 사용자가 해당 컴포넌트를 요청하기 전까지는 컴포넌트의 코드를 로드하지 않습니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> <span class="title function_">UserProfile</span> = (<span class="params"></span>) =&gt;  <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: &quot;user-profile&quot; */</span> <span class="string">&quot;./components/UserProfile.vue&quot;</span>);</code></pre><p>위 예제에서 <code>import()</code> 문법을 사용하여 <code>UserProfile</code> 컴포넌트를 동적으로 불러옵니다. <code>/* webpackChunkName: &quot;user-profile&quot; */</code> 주석은 웹팩(Webpack) 번들링 시 별도의 청크 파일로 분리되도록 지정합니다.</p><h3 id="Vue-Router에서의-Lazy-Loading"><a href="#Vue-Router에서의-Lazy-Loading" class="headerlink" title="Vue Router에서의 Lazy Loading"></a>Vue Router에서의 Lazy Loading</h3><p>Vue Router를 사용한 SPA(Single Page Application)에서는 각 라우트에 대해 Lazy Loading을 적용할 수 있습니다. 이는 사용자가 특정 라우트에 접근할 때만 해당 페이지의 컴포넌트를 로드하게 합니다.</p><pre><code class="highlight javascript"><span class="keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;<span class="keyword">const</span> routes = [  &#123;    <span class="attr">path</span>: <span class="string">&quot;/home&quot;</span>,    <span class="attr">name</span>: <span class="string">&quot;Home&quot;</span>,    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: &quot;home&quot; */</span> <span class="string">&quot;./views/Home.vue&quot;</span>),  &#125;,  &#123;    <span class="attr">path</span>: <span class="string">&quot;/about&quot;</span>,    <span class="attr">name</span>: <span class="string">&quot;About&quot;</span>,    <span class="attr">component</span>: <span class="function">() =&gt;</span>      <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: &quot;about&quot; */</span> <span class="string">&quot;./views/About.vue&quot;</span>),  &#125;,];<span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;  <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(),  routes,&#125;);<span class="keyword">export</span> <span class="keyword">default</span> router;</code></pre><p>위 예제에서 <code>Home</code>과 <code>About</code> 페이지는 사용자가 해당 경로에 접근할 때만 로드되며, 이로 인해 초기 로드 시간이 단축됩니다.</p><h3 id="Lazy-Loading과-함께-Suspense-사용"><a href="#Lazy-Loading과-함께-Suspense-사용" class="headerlink" title="Lazy Loading과 함께 Suspense 사용"></a>Lazy Loading과 함께 <code>Suspense</code> 사용</h3><p>Vue3에서 추가된 <code>Suspense</code> 컴포넌트는 Lazy Loading된 컴포넌트를 로드하는 동안 로딩 스피너나 대체 UI를 표시할 수 있게 해줍니다.</p><pre><code class="highlight html"><span class="tag">&lt;<span class="name">template</span>&gt;</span>  <span class="tag">&lt;<span class="name">Suspense</span>&gt;</span>    <span class="tag">&lt;<span class="name">template</span> #<span class="attr">default</span>&gt;</span>      <span class="tag">&lt;<span class="name">LazyComponent</span> /&gt;</span>    <span class="tag">&lt;/<span class="name">template</span>&gt;</span>    <span class="tag">&lt;<span class="name">template</span> #<span class="attr">fallback</span>&gt;</span>      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">div</span>&gt;</span>    <span class="tag">&lt;/<span class="name">template</span>&gt;</span>  <span class="tag">&lt;/<span class="name">Suspense</span>&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><span class="language-javascript">    <span class="attr">components</span>: &#123;</span><span class="language-javascript">      <span class="title class_">LazyComponent</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;./components/LazyComponent.vue&quot;</span>),</span><span class="language-javascript">    &#125;,</span><span class="language-javascript">  &#125;;</span><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></code></pre><p>위 예제에서 <code>Suspense</code> 컴포넌트는 <code>LazyComponent</code>를 로드하는 동안 “Loading…” 메시지를 보여줍니다. 이로 인해 사용자는 컴포넌트가 로드될 때까지 빈 화면을 보지 않게 됩니다.</p><h2 id="3-Lazy-Loading-예제"><a href="#3-Lazy-Loading-예제" class="headerlink" title="3. Lazy Loading 예제"></a>3. Lazy Loading 예제</h2><p>RPG 게임에서 여러 캐릭터 프로필 페이지가 있다고 가정해봅시다. 사용자가 각 캐릭터의 프로필 페이지에 접근할 때만 해당 컴포넌트를 로드하도록 Lazy Loading을 적용할 수 있습니다.</p><h3 id="프로젝트-구조"><a href="#프로젝트-구조" class="headerlink" title="프로젝트 구조"></a>프로젝트 구조</h3><pre><code class="highlight plaintext">src/├── components/│   ├── WarriorProfile.vue│   ├── MageProfile.vue│   └── RogueProfile.vue├── router/│   └── index.js└── App.vue</code></pre><h3 id="라우터-설정"><a href="#라우터-설정" class="headerlink" title="라우터 설정"></a>라우터 설정</h3><pre><code class="highlight javascript"><span class="keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;<span class="keyword">const</span> routes = [  &#123;    <span class="attr">path</span>: <span class="string">&quot;/warrior&quot;</span>,    <span class="attr">name</span>: <span class="string">&quot;WarriorProfile&quot;</span>,    <span class="attr">component</span>: <span class="function">() =&gt;</span>      <span class="keyword">import</span>(        <span class="comment">/* webpackChunkName: &quot;warrior&quot; */</span> <span class="string">&quot;../components/WarriorProfile.vue&quot;</span>      ),  &#125;,  &#123;    <span class="attr">path</span>: <span class="string">&quot;/mage&quot;</span>,    <span class="attr">name</span>: <span class="string">&quot;MageProfile&quot;</span>,    <span class="attr">component</span>: <span class="function">() =&gt;</span>      <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: &quot;mage&quot; */</span> <span class="string">&quot;../components/MageProfile.vue&quot;</span>),  &#125;,  &#123;    <span class="attr">path</span>: <span class="string">&quot;/rogue&quot;</span>,    <span class="attr">name</span>: <span class="string">&quot;RogueProfile&quot;</span>,    <span class="attr">component</span>: <span class="function">() =&gt;</span>      <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: &quot;rogue&quot; */</span> <span class="string">&quot;../components/RogueProfile.vue&quot;</span>),  &#125;,];<span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;  <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(),  routes,&#125;);<span class="keyword">export</span> <span class="keyword">default</span> router;</code></pre><h3 id="App-vue"><a href="#App-vue" class="headerlink" title="App.vue"></a><code>App.vue</code></h3><pre><code class="highlight html"><span class="tag">&lt;<span class="name">template</span>&gt;</span>  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>    <span class="tag">&lt;<span class="name">nav</span>&gt;</span>      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/warrior&quot;</span>&gt;</span>전사 프로필<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span>      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/mage&quot;</span>&gt;</span>마법사 프로필<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span>      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/rogue&quot;</span>&gt;</span>도적 프로필<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span>    <span class="tag">&lt;/<span class="name">nav</span>&gt;</span>    <span class="tag">&lt;<span class="name">Suspense</span>&gt;</span>      <span class="tag">&lt;<span class="name">template</span> #<span class="attr">default</span>&gt;</span>        <span class="tag">&lt;<span class="name">router-view</span> /&gt;</span>      <span class="tag">&lt;/<span class="name">template</span>&gt;</span>      <span class="tag">&lt;<span class="name">template</span> #<span class="attr">fallback</span>&gt;</span>        <span class="tag">&lt;<span class="name">div</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">div</span>&gt;</span>      <span class="tag">&lt;/<span class="name">template</span>&gt;</span>    <span class="tag">&lt;/<span class="name">Suspense</span>&gt;</span>  <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><span class="language-javascript">    <span class="attr">name</span>: <span class="string">&quot;App&quot;</span>,</span><span class="language-javascript">  &#125;;</span><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></code></pre><p>이 예제에서는 각 캐릭터의 프로필 페이지가 Lazy Loading으로 설정되어, 해당 경로에 접근할 때만 관련 컴포넌트가 로드됩니다. <code>Suspense</code>를 사용하여 컴포넌트가 로드되는 동안 로딩 메시지를 보여줍니다.</p><h2 id="4-Composition-API로의-전환"><a href="#4-Composition-API로의-전환" class="headerlink" title="4. Composition API로의 전환"></a>4. Composition API로의 전환</h2><blockquote><p>만약 Vue가 처음이시라면 이 섹션은 건너 뛰어주세요!</p></blockquote><p>Vue3에 추가된 <a href="/vue/24/">Composition API</a>를 사용하여 컴포넌트를 더욱 유연하고 모듈화된 방식으로 작성할 수 있습니다.</p><h3 id="Vue-js에서-Lazy-Loading-설정-Composition-API-적용"><a href="#Vue-js에서-Lazy-Loading-설정-Composition-API-적용" class="headerlink" title="Vue.js에서 Lazy Loading 설정 (Composition API 적용)"></a>Vue.js에서 Lazy Loading 설정 (Composition API 적용)</h3><p><strong>Composition API</strong>를 사용하면 컴포넌트의 Lazy Loading을 더욱 간결하고 모듈화된 방식으로 구현할 수 있습니다.</p><h4 id="기존-코드-Options-API"><a href="#기존-코드-Options-API" class="headerlink" title="기존 코드 (Options API):"></a>기존 코드 (Options API):</h4><pre><code class="highlight javascript"><span class="keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;<span class="keyword">const</span> routes = [  &#123;    <span class="attr">path</span>: <span class="string">&quot;/home&quot;</span>,    <span class="attr">name</span>: <span class="string">&quot;Home&quot;</span>,    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: &quot;home&quot; */</span> <span class="string">&quot;./views/Home.vue&quot;</span>),  &#125;,  &#123;    <span class="attr">path</span>: <span class="string">&quot;/about&quot;</span>,    <span class="attr">name</span>: <span class="string">&quot;About&quot;</span>,    <span class="attr">component</span>: <span class="function">() =&gt;</span>      <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: &quot;about&quot; */</span> <span class="string">&quot;./views/About.vue&quot;</span>),  &#125;,];<span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;  <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(),  routes,&#125;);<span class="keyword">export</span> <span class="keyword">default</span> router;</code></pre><h4 id="Composition-API로-개선"><a href="#Composition-API로-개선" class="headerlink" title="Composition API로 개선:"></a>Composition API로 개선:</h4><pre><code class="highlight javascript"><span class="keyword">import</span> &#123; defineAsyncComponent &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;<span class="keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;<span class="keyword">const</span> <span class="title class_">Home</span> = <span class="title function_">defineAsyncComponent</span>(<span class="function">() =&gt;</span>  <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: &quot;home&quot; */</span> <span class="string">&quot;./views/Home.vue&quot;</span>));<span class="keyword">const</span> <span class="title class_">About</span> = <span class="title function_">defineAsyncComponent</span>(<span class="function">() =&gt;</span>  <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: &quot;about&quot; */</span> <span class="string">&quot;./views/About.vue&quot;</span>));<span class="keyword">const</span> routes = [  &#123;    <span class="attr">path</span>: <span class="string">&quot;/home&quot;</span>,    <span class="attr">name</span>: <span class="string">&quot;Home&quot;</span>,    <span class="attr">component</span>: <span class="title class_">Home</span>,  &#125;,  &#123;    <span class="attr">path</span>: <span class="string">&quot;/about&quot;</span>,    <span class="attr">name</span>: <span class="string">&quot;About&quot;</span>,    <span class="attr">component</span>: <span class="title class_">About</span>,  &#125;,];<span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;  <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(),  routes,&#125;);<span class="keyword">export</span> <span class="keyword">default</span> router;</code></pre><p><strong>Composition API</strong>를 사용하여 <code>defineAsyncComponent</code>를 활용하면 Lazy Loading을 더 직관적으로 처리할 수 있습니다. <code>defineAsyncComponent</code>는 컴포넌트의 비동기 로딩을 더 쉽게 처리할 수 있게 도와줍니다.</p><h3 id="Lazy-Loading과-함께-Suspense-사용-Composition-API-적용"><a href="#Lazy-Loading과-함께-Suspense-사용-Composition-API-적용" class="headerlink" title="Lazy Loading과 함께 Suspense 사용 (Composition API 적용)"></a>Lazy Loading과 함께 <code>Suspense</code> 사용 (Composition API 적용)</h3><p>Vue3에서 추가된 <code>Suspense</code> 컴포넌트를 사용할 때도 Composition API를 사용할 수 있습니다.</p><h4 id="기존-코드-Options-API-1"><a href="#기존-코드-Options-API-1" class="headerlink" title="기존 코드 (Options API):"></a>기존 코드 (Options API):</h4><pre><code class="highlight javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;  <span class="attr">components</span>: &#123;    <span class="title class_">LazyComponent</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;./components/LazyComponent.vue&quot;</span>),  &#125;,&#125;;</code></pre><h4 id="Composition-API로-개선-1"><a href="#Composition-API로-개선-1" class="headerlink" title="Composition API로 개선:"></a>Composition API로 개선:</h4><pre><code class="highlight javascript"><span class="keyword">import</span> &#123; defineAsyncComponent &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;<span class="keyword">export</span> <span class="keyword">default</span> &#123;  <span class="attr">components</span>: &#123;    <span class="title class_">LazyComponent</span>: <span class="title function_">defineAsyncComponent</span>(<span class="function">() =&gt;</span>      <span class="keyword">import</span>(<span class="string">&quot;./components/LazyComponent.vue&quot;</span>)    ),  &#125;,&#125;;</code></pre><p><code>defineAsyncComponent</code>를 사용하여 동적으로 컴포넌트를 불러올 수 있으며, Composition API의 다른 기능들과 함께 사용할 때 더 일관된 코드 구조를 유지할 수 있습니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 Vue.js 애플리케이션에서 성능 최적화를 위한 Lazy Loading 기법에 대해 알아보았습니다. Lazy Loading은 초기 로드 시간을 줄이고, 불필요한 리소스 로드를 방지하여 사용자 경험을 크게 향상시킬 수 있습니다. Lazy Loading을 적절히 활용하여 더욱 빠르고 효율적인 애플리케이션을 개발해보세요!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript와 web 프레임워크</title>
      <link href="/typescript/special/13/"/>
      <url>/typescript/special/13/</url>
      
        <content type="html"><![CDATA[<h1 id="TypeScript와-web-프레임워크"><a href="#TypeScript와-web-프레임워크" class="headerlink" title="TypeScript와 web 프레임워크"></a>TypeScript와 web 프레임워크</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 <strong>TypeScript</strong>가 다양한 프레임워크에서 사용되는 경우를 확인해보겠습니다. TypeScript는 정적 타입 시스템을 제공하여 코드의 안정성과 유지보수성을 높이기 때문에, 이를 프레임워크에서 활용할수록 좋습니다.<br>쓸수록 좋은데 안 쓰는 곳은 왜 안 쓰냐?라고 하면.. “굳이” 쓸 필요까지는 없는 경우도 있기때문입니다. 프로젝트의 초기 설정이 JavaScript로 되어 있어 TypeScript로의 전환이 부담스럽거나, 토이 프로젝트(혹은 그 정도의 규모)일 경우 오버스펙이 되기 때문입니다.<br>이번 글에서는 React, Angular, 그리고 Express.js에서 TypeScript를 활용하는 방법을 살펴보겠습니다.</p><h2 id="React와-TypeScript"><a href="#React와-TypeScript" class="headerlink" title="React와 TypeScript"></a>React와 TypeScript</h2><h3 id="1-React-프로젝트에서-TypeScript-설정"><a href="#1-React-프로젝트에서-TypeScript-설정" class="headerlink" title="1. React 프로젝트에서 TypeScript 설정"></a>1. React 프로젝트에서 TypeScript 설정</h3><p>React는 JavaScript를 기반으로 하는 라이브러리지만, TypeScript를 사용하여 더 안전하고 효율적으로 코드를 작성할 수 있습니다. 새로운 React 프로젝트를 생성할 때 TypeScript를 설정하는 방법을 알아보겠습니다.</p><pre><code class="highlight bash">npx create-react-app my-app --template typescript</code></pre><p>위 명령어를 사용하면 TypeScript가 미리 설정된 상태로 React 프로젝트가 생성됩니다.</p><h3 id="2-기본적인-React-컴포넌트-작성"><a href="#2-기본적인-React-컴포넌트-작성" class="headerlink" title="2. 기본적인 React 컴포넌트 작성"></a>2. 기본적인 React 컴포넌트 작성</h3><p>TypeScript와 함께 React 컴포넌트를 작성할 때, 각 컴포넌트의 <code>props</code>에 타입을 지정하여 컴포넌트의 안정성을 높일 수 있습니다.</p><pre><code class="highlight tsx"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;<span class="keyword">type</span> <span class="title class_">CharacterProps</span> = &#123;  <span class="attr">name</span>: <span class="built_in">string</span>;  <span class="attr">level</span>: <span class="built_in">number</span>;&#125;;<span class="keyword">const</span> <span class="title class_">CharacterCard</span>: <span class="title class_">React</span>.<span class="property">FC</span>&lt;<span class="title class_">CharacterProps</span>&gt; = <span class="function">(<span class="params">&#123; name, level &#125;</span>) =&gt;</span> &#123;  <span class="keyword">return</span> (    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;name&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Level: &#123;level&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>  );&#125;;<span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">CharacterCard</span>;</code></pre><p>위 예제에서 <code>CharacterProps</code> 타입을 사용하여 <code>name</code>과 <code>level</code>이라는 두 개의 속성을 가진 <code>CharacterCard</code> 컴포넌트를 정의했습니다. 이와 같이 명시적으로 타입을 지정함으로써 컴포넌트 사용 시 발생할 수 있는 타입 오류를 미리 방지할 수 있습니다.</p><h3 id="3-React와-TypeScript의-장점"><a href="#3-React와-TypeScript의-장점" class="headerlink" title="3. React와 TypeScript의 장점"></a>3. React와 TypeScript의 장점</h3><ul><li><strong>컴파일 타임 체크</strong>: 타입 시스템을 통해 컴파일 타임에 오류를 미리 감지할 수 있습니다.</li><li><strong>자동 완성 및 IntelliSense</strong>: 타입 정의를 통해 코드 편집기에서 자동 완성과 인텔리센스를 활용할 수 있습니다.</li><li><strong>안정성</strong>: 명시적 타입 정의로 인해 코드의 안정성이 증가하고, 유지보수가 용이해집니다.</li></ul><h2 id="Angular와-TypeScript"><a href="#Angular와-TypeScript" class="headerlink" title="Angular와 TypeScript"></a>Angular와 TypeScript</h2><h3 id="1-Angular-프로젝트에서-TypeScript-설정"><a href="#1-Angular-프로젝트에서-TypeScript-설정" class="headerlink" title="1. Angular 프로젝트에서 TypeScript 설정"></a>1. Angular 프로젝트에서 TypeScript 설정</h3><p>Angular는 TypeScript를 기본 언어로 사용하며, 프레임워크가 TypeScript를 중심으로 설계되었습니다. Angular CLI를 사용하여 프로젝트를 생성하면 TypeScript가 자동으로 설정됩니다.</p><pre><code class="highlight bash">ng new my-angular-app</code></pre><p>위 명령어를 실행하면 Angular CLI가 새로운 프로젝트를 생성하고 TypeScript 설정을 자동으로 구성합니다.</p><h3 id="2-기본적인-Angular-컴포넌트-작성"><a href="#2-기본적인-Angular-컴포넌트-작성" class="headerlink" title="2. 기본적인 Angular 컴포넌트 작성"></a>2. 기본적인 Angular 컴포넌트 작성</h3><p>Angular에서는 컴포넌트를 생성할 때 TypeScript의 타입 시스템을 활용할 수 있습니다.</p><pre><code class="highlight tsx"><span class="keyword">import</span> &#123; <span class="title class_">Component</span>, <span class="title class_">Input</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@angular/core&quot;</span>;<span class="meta">@Component</span>(&#123;  <span class="attr">selector</span>: <span class="string">&quot;app-character-card&quot;</span>,  <span class="attr">template</span>: <span class="string">`</span><span class="string">    &lt;div&gt;</span><span class="string">      &lt;h2&gt;&#123;&#123; name &#125;&#125;&lt;/h2&gt;</span><span class="string">      &lt;p&gt;Level: &#123;&#123; level &#125;&#125;&lt;/p&gt;</span><span class="string">    &lt;/div&gt;</span><span class="string">  `</span>,&#125;)<span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">CharacterCardComponent</span> &#123;  <span class="meta">@Input</span>() name!: <span class="built_in">string</span>;  <span class="meta">@Input</span>() level!: <span class="built_in">number</span>;&#125;</code></pre><p>위 예제에서 <code>CharacterCardComponent</code>는 <code>@Input()</code> 데코레이터를 사용해 부모 컴포넌트로부터 <code>name</code>과 <code>level</code> 값을 받아옵니다. TypeScript의 타입 정의를 통해 이 값들의 타입을 명시적으로 지정하였으며, 이를 통해 컴포넌트의 안정성을 높였습니다.</p><h3 id="3-Angular와-TypeScript의-장점"><a href="#3-Angular와-TypeScript의-장점" class="headerlink" title="3. Angular와 TypeScript의 장점"></a>3. Angular와 TypeScript의 장점</h3><ul><li><strong>구조적 타이핑</strong>: Angular의 서비스와 컴포넌트 간 의존성을 명확히 정의하고 관리할 수 있습니다.</li><li><strong>더 나은 유지보수성</strong>: 타입 정의를 통해 코드의 의도를 명확히 하고, 유지보수를 쉽게 할 수 있습니다.</li><li><strong>개발 도구 지원</strong>: Angular와 TypeScript를 함께 사용하면, IDE의 자동 완성과 리팩토링 기능을 효과적으로 활용할 수 있습니다.</li></ul><h2 id="Express-js와-TypeScript"><a href="#Express-js와-TypeScript" class="headerlink" title="Express.js와 TypeScript"></a>Express.js와 TypeScript</h2><h3 id="1-Express-js-프로젝트에서-TypeScript-설정"><a href="#1-Express-js-프로젝트에서-TypeScript-설정" class="headerlink" title="1. Express.js 프로젝트에서 TypeScript 설정"></a>1. Express.js 프로젝트에서 TypeScript 설정</h3><p>Express.js는 Node.js를 기반으로 하는 웹 프레임워크로, TypeScript와 함께 사용하여 백엔드 애플리케이션을 더 근본있게 만들 수 있습니다.</p><p>먼저 TypeScript를 설정하고, 필요한 타입 정의 파일들을 설치합니다.</p><pre><code class="highlight bash"><span class="built_in">mkdir</span> my-express-app<span class="built_in">cd</span> my-express-appnpm init -ynpm install expressnpm install --save-dev typescript @types/node @types/express ts-node</code></pre><p>그런 다음 <code>tsconfig.json</code> 파일을 생성하여 TypeScript 설정을 추가합니다.</p><pre><code class="highlight bash">npx tsc --init</code></pre><h3 id="2-기본적인-Express-js-서버-작성"><a href="#2-기본적인-Express-js-서버-작성" class="headerlink" title="2. 기본적인 Express.js 서버 작성"></a>2. 기본적인 Express.js 서버 작성</h3><p>TypeScript를 사용하여 기본적인 Express.js 서버를 설정하는 방법을 알아보겠습니다.</p><pre><code class="highlight tsx"><span class="keyword">import</span> express, &#123; <span class="title class_">Request</span>, <span class="title class_">Response</span> &#125; <span class="keyword">from</span> <span class="string">&quot;express&quot;</span>;<span class="keyword">const</span> app = <span class="title function_">express</span>();<span class="keyword">const</span> port = <span class="number">3000</span>;app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params"><span class="attr">req</span>: <span class="title class_">Request</span>, <span class="attr">res</span>: <span class="title class_">Response</span></span>) =&gt;</span> &#123;  res.<span class="title function_">send</span>(<span class="string">&quot;Hello, TypeScript with Express!&quot;</span>);&#125;);app.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Server is running on port <span class="subst">$&#123;port&#125;</span>`</span>);&#125;);</code></pre><p>위 코드에서는 <code>Request</code>와 <code>Response</code> 타입을 명시적으로 지정하여 Express.js 서버의 안정성을 높였습니다. 또한, TypeScript의 타입 시스템을 활용하여 HTTP 요청과 응답 객체의 타입을 엄격하게 관리할 수 있습니다.</p><h3 id="3-Express-js와-TypeScript의-장점"><a href="#3-Express-js와-TypeScript의-장점" class="headerlink" title="3. Express.js와 TypeScript의 장점"></a>3. Express.js와 TypeScript의 장점</h3><ul><li><strong>타입 안정성</strong>: TypeScript를 사용해 Express.js 애플리케이션의 요청과 응답 객체에 대해 타입을 정의함으로써 코드의 타입 안정성을 높일 수 있습니다.</li><li><strong>더 나은 개발자 경험</strong>: 타입 정의를 통해 개발 도중 발생할 수 있는 오류를 줄이고, 코드 작성 시 자동 완성 기능을 효과적으로 활용할 수 있습니다.</li><li><strong>향상된 코드 품질</strong>: 타입 시스템을 통해 코드의 품질을 높이고, 유지보수를 용이하게 할 수 있습니다.</li></ul><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 TypeScript가 React, Angular, Express.js와 같은 다양한 프레임워크에 사용되는 예시를 보았습니다. TypeScript는 프런트엔드와 백엔드 모두에서 코드의 안정성과 유지보수성을 향상시키는 데 큰 도움이 되며, 이를 통해 더욱 견고한 애플리케이션을 개발할 수 있습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> TS_필살기 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue 성능 최적화</title>
      <link href="/vue/21/"/>
      <url>/vue/21/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-js-성능-최적화"><a href="#Vue-js-성능-최적화" class="headerlink" title="Vue.js 성능 최적화"></a>Vue.js 성능 최적화</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 Vue.js 애플리케이션의 성능을 최적화하는 방법에 대해 알아보겠습니다.</p><h2 id="1-성능-최적화의-필요성"><a href="#1-성능-최적화의-필요성" class="headerlink" title="1. 성능 최적화의 필요성"></a>1. 성능 최적화의 필요성</h2><p>Vue.js 애플리케이션이 초기에는 작고 가볍지만, 기능이 추가되고 규모가 커질수록 성능 문제를 겪을 수 있습니다. 느린 로드 시간, 반응성 저하, 메모리 누수 등은 사용자 경험을 저하시킬 수 있으며, 이러한 문제를 방지하기 위해 성능 최적화는 필수입니다.</p><h2 id="2-성능-최적화-기법"><a href="#2-성능-최적화-기법" class="headerlink" title="2. 성능 최적화 기법"></a>2. 성능 최적화 기법</h2><h3 id="2-1-컴포넌트-최적화"><a href="#2-1-컴포넌트-최적화" class="headerlink" title="2-1. 컴포넌트 최적화"></a>2-1. 컴포넌트 최적화</h3><h4 id="컴포넌트-재사용과-분리"><a href="#컴포넌트-재사용과-분리" class="headerlink" title="컴포넌트 재사용과 분리"></a>컴포넌트 재사용과 분리</h4><ul><li><p><strong>컴포넌트 분리</strong>: 하나의 컴포넌트가 너무 많은 기능을 담당하면 성능이 저하될 수 있습니다. 컴포넌트를 적절히 분리하여 재사용성을 높이고, 필요한 경우에만 렌더링되도록 설계합니다.</p></li><li><p><strong>컴포넌트 캐싱</strong>: <code>v-once</code> 디렉티브를 사용해 한 번 렌더링된 컴포넌트를 캐싱할 수 있습니다. 캐싱된 컴포넌트는 다시 렌더링되지 않아 성능이 향상됩니다.</p></li></ul><pre><code class="highlight html"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-once</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></code></pre><h4 id="keep-alive를-사용한-컴포넌트-상태-유지"><a href="#keep-alive를-사용한-컴포넌트-상태-유지" class="headerlink" title="keep-alive를 사용한 컴포넌트 상태 유지"></a><code>keep-alive</code>를 사용한 컴포넌트 상태 유지</h4><ul><li><code>keep-alive</code>는 동적 컴포넌트나 라우트 컴포넌트를 캐싱하여 성능을 최적화합니다. 이를 사용하면 컴포넌트가 비활성화된 후에도 상태를 유지할 수 있습니다.</li></ul><pre><code class="highlight html"><span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span>  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;currentComponent&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></code></pre><h3 id="2-2-지연-로딩과-코드-분할"><a href="#2-2-지연-로딩과-코드-분할" class="headerlink" title="2-2. 지연 로딩과 코드 분할"></a>2-2. 지연 로딩과 코드 분할</h3><h4 id="코드-분할-Code-Splitting"><a href="#코드-분할-Code-Splitting" class="headerlink" title="코드 분할(Code Splitting)"></a>코드 분할(Code Splitting)</h4><p>코드 분할은 애플리케이션의 각 부분을 독립적으로 로드할 수 있게 하여 초기 로드 시간을 줄여줍니다. Vue Router와 같은 도구를 사용할 때 코드 분할을 적용할 수 있습니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> <span class="title function_">Home</span> = (<span class="params"></span>) =&gt;  <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: &quot;home&quot; */</span> <span class="string">&quot;./components/Home.vue&quot;</span>);</code></pre><p>이렇게 하면 초기 로드 시 전체 코드를 불러오는 대신, 사용자가 특정 페이지에 접근할 때 필요한 코드만 로드할 수 있습니다.</p><h4 id="지연-로딩-Lazy-Loading"><a href="#지연-로딩-Lazy-Loading" class="headerlink" title="지연 로딩(Lazy Loading)"></a>지연 로딩(Lazy Loading)</h4><p>지연 로딩은 필요할 때만 리소스를 로드하여 초기 로드 시간을 줄이는 기술입니다. 컴포넌트나 이미지, 스크립트 등을 지연 로딩하여 초기 렌더링 성능을 향상시킬 수 있습니다.</p><pre><code class="highlight html"><span class="tag">&lt;<span class="name">img</span> <span class="attr">v-lazy</span>=<span class="string">&quot;imageSrc&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Example&quot;</span> /&gt;</span></code></pre><h3 id="2-3-템플릿-최적화"><a href="#2-3-템플릿-최적화" class="headerlink" title="2-3. 템플릿 최적화"></a>2-3. 템플릿 최적화</h3><h4 id="템플릿의-조건부-렌더링-최적화"><a href="#템플릿의-조건부-렌더링-최적화" class="headerlink" title="템플릿의 조건부 렌더링 최적화"></a>템플릿의 조건부 렌더링 최적화</h4><ul><li><strong><code>v-if</code>와 <code>v-show</code>의 적절한 사용</strong>: <code>v-if</code>는 조건이 참일 때만 DOM에 요소를 추가하므로 성능에 부담이 됩니다. 자주 토글되는 요소에는 <code>v-show</code>를 사용해 CSS로 표시 여부를 제어하는 것이 더 효율적입니다.</li></ul><h4 id="리스트-렌더링-최적화"><a href="#리스트-렌더링-최적화" class="headerlink" title="리스트 렌더링 최적화"></a>리스트 렌더링 최적화</h4><ul><li><strong>고유 키 사용</strong>: <code>v-for</code>로 리스트를 렌더링할 때, <code>key</code> 속성을 반드시 지정하여 Vue가 각 항목을 고유하게 식별할 수 있도록 합니다. 이로 인해 렌더링 성능이 최적화됩니다.</li></ul><pre><code class="highlight html"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span>&#123;&#123; item.name &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></code></pre><h3 id="2-4-메모리-최적화"><a href="#2-4-메모리-최적화" class="headerlink" title="2-4. 메모리 최적화"></a>2-4. 메모리 최적화</h3><h4 id="메모리-누수-방지"><a href="#메모리-누수-방지" class="headerlink" title="메모리 누수 방지"></a>메모리 누수 방지</h4><ul><li><strong>이벤트 리스너 제거</strong>: 컴포넌트가 파괴될 때 이벤트 리스너를 제거하여 메모리 누수를 방지합니다.</li></ul><pre><code class="highlight javascript"><span class="title function_">beforeDestroy</span>(<span class="params"></span>) &#123;  <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, <span class="variable language_">this</span>.<span class="property">handleResize</span>);&#125;</code></pre><ul><li><strong>타이머 및 인터벌 정리</strong>: 컴포넌트가 제거될 때 <code>setInterval</code>, <code>setTimeout</code> 등을 정리하여 불필요한 메모리 사용을 줄입니다.</li></ul><h3 id="2-5-렌더링-최적화"><a href="#2-5-렌더링-최적화" class="headerlink" title="2-5. 렌더링 최적화"></a>2-5. 렌더링 최적화</h3><h4 id="가상-스크롤-Virtual-Scrolling"><a href="#가상-스크롤-Virtual-Scrolling" class="headerlink" title="가상 스크롤(Virtual Scrolling)"></a>가상 스크롤(Virtual Scrolling)</h4><p>많은 양의 데이터를 한꺼번에 렌더링하는 대신, 가상 스크롤을 사용해 사용자에게 보이는 부분만 렌더링합니다. 이 기법은 대량의 리스트 렌더링에서 성능을 크게 향상시킬 수 있습니다.</p><h4 id="서버-사이드-렌더링-SSR"><a href="#서버-사이드-렌더링-SSR" class="headerlink" title="서버 사이드 렌더링(SSR)"></a>서버 사이드 렌더링(SSR)</h4><p>서버 사이드 렌더링을 사용해 초기 렌더링 속도를 높이고, SEO를 개선할 수 있습니다. Nuxt.js와 같은 프레임워크를 사용하면 Vue.js 애플리케이션에 쉽게 SSR을 도입할 수 있습니다.</p><h3 id="2-6-빌드-최적화"><a href="#2-6-빌드-최적화" class="headerlink" title="2-6. 빌드 최적화"></a>2-6. 빌드 최적화</h3><h4 id="압축-및-난독화"><a href="#압축-및-난독화" class="headerlink" title="압축 및 난독화"></a>압축 및 난독화</h4><p>프로덕션 빌드에서 코드를 압축하고 난독화하여 파일 크기를 줄이고, 로드 속도를 향상시킵니다. Vue CLI는 기본적으로 압축과 난독화를 지원합니다.</p><pre><code class="highlight bash">npm run build</code></pre><h4 id="캐싱-전략"><a href="#캐싱-전략" class="headerlink" title="캐싱 전략"></a>캐싱 전략</h4><p>HTTP 캐싱, 서비스 워커, PWA 등 다양한 캐싱 전략을 통해 애플리케이션의 성능을 최적화할 수 있습니다. HTTP 캐싱 헤더를 설정하거나, PWA 설정을 통해 오프라인 캐싱을 활용할 수 있습니다.</p><pre><code class="highlight javascript"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;  <span class="attr">pwa</span>: &#123;    <span class="attr">workboxOptions</span>: &#123;      <span class="attr">runtimeCaching</span>: [        &#123;          <span class="attr">urlPattern</span>: <span class="regexp">/\/api\//</span>,          <span class="attr">handler</span>: <span class="string">&quot;NetworkFirst&quot;</span>,        &#125;,      ],    &#125;,  &#125;,&#125;;</code></pre><h3 id="2-7-성능-모니터링"><a href="#2-7-성능-모니터링" class="headerlink" title="2-7. 성능 모니터링"></a>2-7. 성능 모니터링</h3><h4 id="Vue-Devtools"><a href="#Vue-Devtools" class="headerlink" title="Vue Devtools"></a>Vue Devtools</h4><p>Vue Devtools를 사용해 애플리케이션의 성능을 모니터링하고, 성능 병목 지점을 식별할 수 있습니다.</p><h4 id="Webpack-Bundle-Analyzer"><a href="#Webpack-Bundle-Analyzer" class="headerlink" title="Webpack Bundle Analyzer"></a>Webpack Bundle Analyzer</h4><p>Webpack Bundle Analyzer를 사용해 번들 파일의 크기와 구성을 시각화하여, 불필요한 의존성을 식별하고 제거할 수 있습니다.</p><pre><code class="highlight bash">npm install --save-dev webpack-bundle-analyzer</code></pre><h2 id="3-Composition-API로의-전환"><a href="#3-Composition-API로의-전환" class="headerlink" title="3. Composition API로의 전환"></a>3. Composition API로의 전환</h2><blockquote><p>만약 Vue가 처음이시라면 이 섹션은 건너 뛰어주세요!</p></blockquote><p>Vue3에 추가된 <a href="/vue/24/">Composition API</a>를 사용하여 컴포넌트를 더욱 유연하고 모듈화된 방식으로 작성할 수 있습니다.</p><h3 id="기존-옵션-API의-코드-변환"><a href="#기존-옵션-API의-코드-변환" class="headerlink" title="기존 옵션 API의 코드 변환"></a>기존 옵션 API의 코드 변환</h3><ul><li><strong>옵션 API</strong>에서 사용하던 <code>data</code>, <code>methods</code>, <code>computed</code> 등의 옵션을 <strong>Composition API</strong>로 변환할 수 있습니다.</li><li><code>setup()</code> 함수 내부에서 <strong>Composition API</strong>의 <code>reactive</code>, <code>ref</code>, <code>computed</code> 등을 활용하여 상태와 로직을 관리할 수 있습니다.</li></ul><h4 id="예시-v-once와-keep-alive-사용"><a href="#예시-v-once와-keep-alive-사용" class="headerlink" title="예시: v-once와 keep-alive 사용"></a>예시: <code>v-once</code>와 <code>keep-alive</code> 사용</h4><p>기존에 <code>data</code>를 사용해 상태를 관리하던 부분을 <strong>Composition API</strong>의 <code>ref</code>나 <code>reactive</code>를 활용하여 변환할 수 있습니다.</p><pre><code class="highlight javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;<span class="keyword">export</span> <span class="keyword">default</span> &#123;  <span class="title function_">setup</span>(<span class="params"></span>) &#123;    <span class="keyword">const</span> message = <span class="title function_">ref</span>(<span class="string">&quot;Hello Vue 3 with Composition API!&quot;</span>);    <span class="keyword">return</span> &#123; message &#125;;  &#125;,&#125;;</code></pre><h4 id="예시-setup-함수에서-keep-alive-활용"><a href="#예시-setup-함수에서-keep-alive-활용" class="headerlink" title="예시: setup 함수에서 keep-alive 활용"></a>예시: <code>setup</code> 함수에서 <code>keep-alive</code> 활용</h4><p><code>keep-alive</code>를 사용한 동적 컴포넌트 캐싱 예제를 <strong>Composition API</strong>로 변환합니다.</p><pre><code class="highlight javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;<span class="keyword">export</span> <span class="keyword">default</span> &#123;  <span class="attr">components</span>: &#123;    <span class="title class_">BattleComponent</span>,    <span class="title class_">DialogueComponent</span>,  &#125;,  <span class="title function_">setup</span>(<span class="params"></span>) &#123;    <span class="keyword">const</span> currentComponent = <span class="title function_">ref</span>(<span class="string">&quot;BattleComponent&quot;</span>);    <span class="keyword">const</span> <span class="title function_">switchComponent</span> = (<span class="params"></span>) =&gt; &#123;      currentComponent.<span class="property">value</span> =        currentComponent.<span class="property">value</span> === <span class="string">&quot;BattleComponent&quot;</span>          ? <span class="string">&quot;DialogueComponent&quot;</span>          : <span class="string">&quot;BattleComponent&quot;</span>;    &#125;;    <span class="keyword">return</span> &#123; currentComponent, switchComponent &#125;;  &#125;,&#125;;</code></pre><h3 id="비동기-로직의-Composition-API로의-전환"><a href="#비동기-로직의-Composition-API로의-전환" class="headerlink" title="비동기 로직의 Composition API로의 전환"></a>비동기 로직의 Composition API로의 전환</h3><h4 id="기존의-mounted-라이프사이클-훅-변환"><a href="#기존의-mounted-라이프사이클-훅-변환" class="headerlink" title="기존의 mounted 라이프사이클 훅 변환"></a>기존의 <code>mounted</code> 라이프사이클 훅 변환</h4><p>비동기 API 호출을 <code>setup()</code> 함수 내에서 처리할 수 있습니다.</p><pre><code class="highlight javascript"><span class="keyword">import</span> &#123; ref, onMounted &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;<span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;<span class="keyword">export</span> <span class="keyword">default</span> &#123;  <span class="title function_">setup</span>(<span class="params"></span>) &#123;    <span class="keyword">const</span> items = <span class="title function_">ref</span>([]);    <span class="title function_">onMounted</span>(<span class="title function_">async</span> () =&gt; &#123;      <span class="keyword">try</span> &#123;        <span class="keyword">const</span> response = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&quot;https://api.example.com/items&quot;</span>);        items.<span class="property">value</span> = response.<span class="property">data</span>;      &#125; <span class="keyword">catch</span> (error) &#123;        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;API 호출 중 오류 발생:&quot;</span>, error);      &#125;    &#125;);    <span class="keyword">return</span> &#123; items &#125;;  &#125;,&#125;;</code></pre><h3 id="성능-최적화-기법의-Composition-API-적용"><a href="#성능-최적화-기법의-Composition-API-적용" class="headerlink" title="성능 최적화 기법의 Composition API 적용"></a>성능 최적화 기법의 Composition API 적용</h3><h4 id="컴포넌트-최적화-v-once-및-v-show-활용"><a href="#컴포넌트-최적화-v-once-및-v-show-활용" class="headerlink" title="컴포넌트 최적화 - v-once 및 v-show 활용"></a>컴포넌트 최적화 - <code>v-once</code> 및 <code>v-show</code> 활용</h4><p>이 부분은 <strong>Composition API</strong>로 전환하더라도 기존의 지침을 따릅니다.</p><ul><li><strong>컴포넌트 분리</strong>: <code>setup()</code> 함수에서 <code>ref</code>와 <code>reactive</code>를 사용해 컴포넌트를 분리하고, 필요할 때만 렌더링되도록 합니다.</li></ul><h4 id="상태-관리-provide-inject-활용"><a href="#상태-관리-provide-inject-활용" class="headerlink" title="상태 관리 - provide, inject 활용"></a>상태 관리 - <code>provide</code>, <code>inject</code> 활용</h4><p>상위-하위 컴포넌트 간의 상태 공유를 <strong>Composition API</strong>로 관리할 수 있습니다.</p><pre><code class="highlight javascript"><span class="keyword">import</span> &#123; provide, inject &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;<span class="keyword">export</span> <span class="keyword">default</span> &#123;  <span class="title function_">setup</span>(<span class="params"></span>) &#123;    <span class="keyword">const</span> state = <span class="title function_">ref</span>(<span class="string">&#x27;some value&#x27;</span>);    <span class="title function_">provide</span>(<span class="string">&#x27;sharedState&#x27;</span>, state);    <span class="keyword">return</span> &#123; state &#125;;  &#125;&#125;;<span class="comment">// 다른 컴포넌트에서 상태를 주입받음</span><span class="title function_">setup</span>(<span class="params"></span>) &#123;  <span class="keyword">const</span> sharedState = <span class="title function_">inject</span>(<span class="string">&#x27;sharedState&#x27;</span>);  <span class="keyword">return</span> &#123; sharedState &#125;;&#125;</code></pre><h3 id="Vue-Router와-Composition-API"><a href="#Vue-Router와-Composition-API" class="headerlink" title="Vue Router와 Composition API"></a>Vue Router와 Composition API</h3><p>Vue Router와 함께 <strong>Composition API</strong>를 사용해 코드 분할과 지연 로딩을 구현할 수 있습니다.</p><pre><code class="highlight javascript"><span class="keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;<span class="keyword">const</span> routes = [  &#123;    <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>,    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;./views/Home.vue&quot;</span>),  &#125;,  &#123;    <span class="attr">path</span>: <span class="string">&quot;/about&quot;</span>,    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;./views/About.vue&quot;</span>),  &#125;,];<span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;  <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(),  routes,&#125;);<span class="keyword">export</span> <span class="keyword">default</span> router;</code></pre><h3 id="성능-모니터링-및-Devtools-사용"><a href="#성능-모니터링-및-Devtools-사용" class="headerlink" title="성능 모니터링 및 Devtools 사용"></a>성능 모니터링 및 Devtools 사용</h3><p>Vue Devtools와 같은 도구는 <strong>Composition API</strong>로 전환된 코드에서도 동일하게 활용할 수 있습니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 Vue.js 애플리케이션의 성능을 최적화하는 다양한 방법에 대해 알아보았습니다. 성능 최적화는 사용자 경험을 향상시키는 중요한 요소로, Vue.js의 기능을 최대한 활용해 애플리케이션의 성능을 극대화할 수 있습니다. 소개한 기법들을 활용해 빠르고 효율적인 Vue.js 애플리케이션을 개발해보세요!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue Transition - 애니메이션과 전환 효과</title>
      <link href="/vue/20/"/>
      <url>/vue/20/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-Transition-애니메이션과-전환-효과"><a href="#Vue-Transition-애니메이션과-전환-효과" class="headerlink" title="Vue Transition - 애니메이션과 전환 효과"></a>Vue Transition - 애니메이션과 전환 효과</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 Vue.js에서 애니메이션과 전환(Transition)을 다루는 방법에 대해 알아보겠습니다.<br>Vue.js는 복잡한 설정 없이도 쉽게 애니메이션과 전환 효과를 적용할 수 있는 강력한 전환 시스템을 제공합니다.<br>또한, Tailwind CSS와 같은 유틸리티 클래스, Transition 그룹, 애니메이션 라이브러리와의 연동 방법도 다루어보겠습니다.</p><h2 id="1-Vue의-전환-시스템"><a href="#1-Vue의-전환-시스템" class="headerlink" title="1. Vue의 전환 시스템"></a>1. Vue의 전환 시스템</h2><h3 id="Vue의-전환-시스템이란"><a href="#Vue의-전환-시스템이란" class="headerlink" title="Vue의 전환 시스템이란?"></a>Vue의 전환 시스템이란?</h3><p>Vue.js의 전환 시스템은 요소가 DOM에 추가되거나 제거될 때 발생하는 상태 변화를 시각적으로 보여주기 위한 시스템입니다. Vue는 CSS 전환과 애니메이션을 간단하게 적용할 수 있는 방법을 제공합니다. 특히, Vue의 <code>&lt;transition&gt;</code>과 <code>&lt;transition-group&gt;</code> 컴포넌트를 사용해 요소의 상태 변화를 시각적으로 부드럽게 처리할 수 있습니다.</p><h3 id="기본-전환-예제"><a href="#기본-전환-예제" class="headerlink" title="기본 전환 예제"></a>기본 전환 예제</h3><pre><code class="highlight html"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">head</span>&gt;</span>    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span>    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span>    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue 전환 예제<span class="tag">&lt;/<span class="name">title</span>&gt;</span>    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span><span class="language-css">      <span class="selector-class">.fade-enter-active</span>,</span><span class="language-css">      <span class="selector-class">.fade-leave-active</span> &#123;</span><span class="language-css">        <span class="attribute">transition</span>: opacity <span class="number">0.5s</span>;</span><span class="language-css">      &#125;</span><span class="language-css">      <span class="selector-class">.fade-enter</span>,</span><span class="language-css">      <span class="selector-class">.fade-leave-to</span> &#123;</span><span class="language-css">        <span class="attribute">opacity</span>: <span class="number">0</span>;</span><span class="language-css">      &#125;</span><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span>  <span class="tag">&lt;/<span class="name">head</span>&gt;</span>  <span class="tag">&lt;<span class="name">body</span>&gt;</span>    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;toggle&quot;</span>&gt;</span>전환<span class="tag">&lt;/<span class="name">button</span>&gt;</span>      <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;fade&quot;</span>&gt;</span>        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;show&quot;</span>&gt;</span>안녕하세요, Vue.js!<span class="tag">&lt;/<span class="name">p</span>&gt;</span>      <span class="tag">&lt;/<span class="name">transition</span>&gt;</span>    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@3/dist/vue.global.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">      <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><span class="language-javascript">          <span class="keyword">return</span> &#123;</span><span class="language-javascript">            <span class="attr">show</span>: <span class="literal">true</span>,</span><span class="language-javascript">          &#125;;</span><span class="language-javascript">        &#125;,</span><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span><span class="language-javascript">          <span class="title function_">toggle</span>(<span class="params"></span>) &#123;</span><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">show</span> = !<span class="variable language_">this</span>.<span class="property">show</span>;</span><span class="language-javascript">          &#125;,</span><span class="language-javascript">        &#125;,</span><span class="language-javascript">      &#125;);</span><span class="language-javascript"></span><span class="language-javascript">      app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  <span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></code></pre><h3 id="예제-설명"><a href="#예제-설명" class="headerlink" title="예제 설명"></a>예제 설명</h3><p>위 예제에서 <code>&lt;transition&gt;</code> 컴포넌트를 사용해 <code>v-if</code> 디렉티브와 함께 전환 효과를 적용했습니다. CSS 클래스 <code>.fade-enter-active</code>, <code>.fade-leave-active</code>, <code>.fade-enter</code>, <code>.fade-leave-to</code>를 정의하여 요소가 추가되거나 제거될 때의 전환 효과를 설정했습니다. 버튼을 클릭하면 텍스트가 부드럽게 사라지거나 나타나는 것을 볼 수 있습니다.</p><h3 id="컴포넌트의-동작"><a href="#컴포넌트의-동작" class="headerlink" title="&lt;transition&gt; 컴포넌트의 동작"></a><code>&lt;transition&gt;</code> 컴포넌트의 동작</h3><ul><li><strong>name</strong>: 전환 효과에 적용할 기본 클래스 이름을 지정합니다. 예제에서는 <code>&quot;fade&quot;</code>로 지정했습니다.</li><li><strong>CSS 클래스</strong>: Vue는 전환 상태에 따라 자동으로 CSS 클래스를 추가합니다. <code>-enter</code>, <code>-enter-active</code>, <code>-leave</code>, <code>-leave-active</code> 등의 접미사가 붙은 클래스가 자동으로 적용됩니다.</li><li><strong>hooks</strong>: 전환의 시작과 끝을 제어하는 JavaScript 훅을 제공하며, 보다 복잡한 전환 로직을 구현할 수 있습니다.</li></ul><h2 id="2-CSS-전환과-애니메이션"><a href="#2-CSS-전환과-애니메이션" class="headerlink" title="2. CSS 전환과 애니메이션"></a>2. CSS 전환과 애니메이션</h2><h3 id="CSS-전환-Transition"><a href="#CSS-전환-Transition" class="headerlink" title="CSS 전환 (Transition)"></a>CSS 전환 (Transition)</h3><p>CSS 전환은 요소의 상태가 변할 때 발생하는 시각적 효과를 정의하는 데 사용됩니다. Vue의 전환 시스템과 함께 사용하면 매우 부드러운 사용자 경험을 제공할 수 있습니다.</p><pre><code class="highlight css"><span class="selector-class">.fade-enter-active</span>,<span class="selector-class">.fade-leave-active</span> &#123;  <span class="attribute">transition</span>: opacity <span class="number">0.5s</span>;&#125;<span class="selector-class">.fade-enter</span>,<span class="selector-class">.fade-leave-to</span> &#123;  <span class="attribute">opacity</span>: <span class="number">0</span>;&#125;</code></pre><p>위 CSS 코드는 요소가 DOM에 삽입되거나 제거될 때 발생하는 전환 효과를 정의합니다. <code>opacity</code> 속성이 0에서 1로 변하거나 그 반대로 변하는 동안 0.5초의 전환 효과가 적용됩니다.</p><h3 id="CSS-애니메이션-Animation"><a href="#CSS-애니메이션-Animation" class="headerlink" title="CSS 애니메이션 (Animation)"></a>CSS 애니메이션 (Animation)</h3><p>CSS 애니메이션을 사용하면 전환보다 복잡한 시각적 효과를 구현할 수 있습니다. 애니메이션은 여러 단계로 구성되어 특정 시간 동안 진행됩니다.</p><pre><code class="highlight css"><span class="keyword">@keyframes</span> bounce &#123;  <span class="number">0%</span>,  <span class="number">100%</span> &#123;    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">0</span>);  &#125;  <span class="number">50%</span> &#123;    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">30px</span>);  &#125;&#125;<span class="selector-class">.bounce-enter-active</span> &#123;  <span class="attribute">animation</span>: bounce <span class="number">1s</span>;&#125;</code></pre><p>위 예제에서 <code>@keyframes</code>를 사용해 요소가 위아래로 튕기는 애니메이션을 정의했습니다. <code>.bounce-enter-active</code> 클래스가 적용될 때, 요소는 1초 동안 <code>bounce</code> 애니메이션을 수행합니다.</p><h3 id="애니메이션과-전환의-차이점"><a href="#애니메이션과-전환의-차이점" class="headerlink" title="애니메이션과 전환의 차이점"></a>애니메이션과 전환의 차이점</h3><table><thead><tr><th>특징</th><th>CSS 전환 (Transition)</th><th>CSS 애니메이션 (Animation)</th></tr></thead><tbody><tr><td><strong>목적</strong></td><td>상태 변화에 따른 부드러운 전환 효과</td><td>복잡한 시각적 효과, 여러 단계의 애니메이션</td></tr><tr><td><strong>트리거 방식</strong></td><td>상태 변화에 따라 자동으로 트리거됨</td><td>CSS 규칙에 따라 애니메이션이 시작됨</td></tr><tr><td><strong>사용 용도</strong></td><td>단순한 상태 변화 (예: 보이기&#x2F;숨기기)</td><td>복잡한 효과, 반복 애니메이션, 순차적 변화</td></tr></tbody></table><h2 id="3-유틸리티-클래스를-활용한-전환-효과"><a href="#3-유틸리티-클래스를-활용한-전환-효과" class="headerlink" title="3. 유틸리티 클래스를 활용한 전환 효과"></a>3. 유틸리티 클래스를 활용한 전환 효과</h2><h3 id="Tailwind-CSS와의-연동"><a href="#Tailwind-CSS와의-연동" class="headerlink" title="Tailwind CSS와의 연동"></a>Tailwind CSS와의 연동</h3><p>Tailwind CSS와 같은 유틸리티 클래스 프레임워크를 사용하면 전환 효과를 더욱 간편하게 적용할 수 있습니다. 이미 정의된 클래스를 사용하여 빠르게 전환 효과를 설정할 수 있으며, 이를 Vue의 전환 시스템과 함께 사용할 수 있습니다.</p><pre><code class="highlight html"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">head</span>&gt;</span>    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span>    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span>    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue Tailwind 전환 예제<span class="tag">&lt;/<span class="name">title</span>&gt;</span>    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.tailwindcss.com&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  <span class="tag">&lt;/<span class="name">head</span>&gt;</span>  <span class="tag">&lt;<span class="name">body</span>&gt;</span>    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> <span class="attr">class</span>=<span class="string">&quot;p-6&quot;</span>&gt;</span>      <span class="tag">&lt;<span class="name">button</span></span><span class="tag">        @<span class="attr">click</span>=<span class="string">&quot;toggle&quot;</span></span><span class="tag">        <span class="attr">class</span>=<span class="string">&quot;bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded&quot;</span></span><span class="tag">      &gt;</span>        전환      <span class="tag">&lt;/<span class="name">button</span>&gt;</span>      <span class="tag">&lt;<span class="name">transition</span></span><span class="tag">        <span class="attr">enter-active-class</span>=<span class="string">&quot;transition-opacity duration-500&quot;</span></span><span class="tag">        <span class="attr">leave-active-class</span>=<span class="string">&quot;transition-opacity duration-500&quot;</span></span><span class="tag">        <span class="attr">enter-from-class</span>=<span class="string">&quot;opacity-0&quot;</span></span><span class="tag">        <span class="attr">leave-to-class</span>=<span class="string">&quot;opacity-0&quot;</span></span><span class="tag">      &gt;</span>        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;show&quot;</span> <span class="attr">class</span>=<span class="string">&quot;mt-4 text-lg text-gray-700&quot;</span>&gt;</span>          안녕하세요, Vue.js!        <span class="tag">&lt;/<span class="name">p</span>&gt;</span>      <span class="tag">&lt;/<span class="name">transition</span>&gt;</span>    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@3/dist/vue.global.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">      <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><span class="language-javascript">          <span class="keyword">return</span> &#123;</span><span class="language-javascript">            <span class="attr">show</span>: <span class="literal">true</span>,</span><span class="language-javascript">          &#125;;</span><span class="language-javascript">        &#125;,</span><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span><span class="language-javascript">          <span class="title function_">toggle</span>(<span class="params"></span>) &#123;</span><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">show</span> = !<span class="variable language_">this</span>.<span class="property">show</span>;</span><span class="language-javascript">          &#125;,</span><span class="language-javascript">        &#125;,</span><span class="language-javascript">      &#125;);</span><span class="language-javascript"></span><span class="language-javascript">      app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  <span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></code></pre><h3 id="예제-설명-1"><a href="#예제-설명-1" class="headerlink" title="예제 설명"></a>예제 설명</h3><p>위 예제에서는 Tailwind CSS의 유틸리티 클래스를 사용해 전환 효과를 정의했습니다. Tailwind CSS의 <code>transition-opacity</code>, <code>duration-500</code>, <code>opacity-0</code> 등의 클래스를 사용하여 요소가 추가되거나 제거될 때의 시각적 효과를 설정했습니다. 이 방식은 CSS를 직접 작성하지 않고도 빠르게 전환 효과를 적용할 수 있습니다.</p><h2 id="4-Transition-그룹을-사용한-리스트-전환"><a href="#4-Transition-그룹을-사용한-리스트-전환" class="headerlink" title="4. Transition 그룹을 사용한 리스트 전환"></a>4. Transition 그룹을 사용한 리스트 전환</h2><h3 id="Transition-그룹의-개념"><a href="#Transition-그룹의-개념" class="headerlink" title="Transition 그룹의 개념"></a>Transition 그룹의 개념</h3><p><code>&lt;transition-group&gt;</code> 컴포넌트를 사용하면 여러 요소를 동시에 전환할 수 있습니다. 리스트가 동적으로 변경될 때, 아이템들이 추가되거나 제거될 때 전환 효과를 적용할 수 있습니다.</p><pre><code class="highlight html"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">head</span>&gt;</span>    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span>    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span>    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue Transition Group 예제<span class="tag">&lt;/<span class="name">title</span>&gt;</span>    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span><span class="language-css">      <span class="selector-class">.list-enter-active</span>,</span><span class="language-css">      <span class="selector-class">.list-leave-active</span> &#123;</span><span class="language-css">        <span class="attribute">transition</span>: all <span class="number">0.5s</span> ease;</span><span class="language-css">      &#125;</span><span class="language-css">      <span class="selector-class">.list-enter</span>,</span><span class="language-css">      <span class="selector-class">.list-leave-to</span> &#123;</span><span class="language-css">        <span class="attribute">opacity</span>: <span class="number">0</span>;</span><span class="language-css">        <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">30px</span>);</span><span class="language-css">      &#125;</span><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span>  <span class="tag">&lt;/<span class="name">head</span>&gt;</span>  <span class="tag">&lt;<span class="name">body</span>&gt;</span>    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addItem&quot;</span>&gt;</span>아이템 추가<span class="tag">&lt;/<span class="name">button</span>&gt;</span>      <span class="tag">&lt;<span class="name">transition-group</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span> <span class="attr">tag</span>=<span class="string">&quot;ul&quot;</span>&gt;</span>        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item&quot;</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span>      <span class="tag">&lt;/<span class="name">transition-group</span>&gt;</span>    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https</span></span><span class="string"><span class="tag"></span></span><span class="string"><span class="tag">://cdn.jsdelivr.net/npm/vue@3/dist/vue.global.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">      <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><span class="language-javascript">          <span class="keyword">return</span> &#123;</span><span class="language-javascript">            <span class="attr">items</span>: [<span class="string">&quot;아이템 1&quot;</span>, <span class="string">&quot;아이템 2&quot;</span>, <span class="string">&quot;아이템 3&quot;</span>],</span><span class="language-javascript">          &#125;;</span><span class="language-javascript">        &#125;,</span><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span><span class="language-javascript">          <span class="title function_">addItem</span>(<span class="params"></span>) &#123;</span><span class="language-javascript">            <span class="keyword">const</span> newItem = <span class="string">`아이템 <span class="subst">$&#123;<span class="variable language_">this</span>.items.length + <span class="number">1</span>&#125;</span>`</span>;</span><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">push</span>(newItem);</span><span class="language-javascript">          &#125;,</span><span class="language-javascript">        &#125;,</span><span class="language-javascript">      &#125;);</span><span class="language-javascript"></span><span class="language-javascript">      app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  <span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></code></pre><h3 id="예제-설명-2"><a href="#예제-설명-2" class="headerlink" title="예제 설명"></a>예제 설명</h3><p>위 예제에서 <code>&lt;transition-group&gt;</code> 컴포넌트를 사용해 리스트 아이템들이 추가될 때 부드러운 전환 효과를 적용했습니다. 새로운 아이템이 리스트에 추가될 때, 모든 리스트 아이템이 부드럽게 아래로 밀려나는 애니메이션이 적용됩니다.</p><h3 id="tag-속성"><a href="#tag-속성" class="headerlink" title="tag 속성"></a><code>tag</code> 속성</h3><ul><li><strong>tag</strong>: <code>&lt;transition-group&gt;</code> 컴포넌트는 기본적으로 <code>span</code> 태그로 렌더링됩니다. 다른 HTML 요소로 렌더링되도록 하려면 <code>tag</code> 속성을 사용합니다. 예제에서는 <code>ul</code> 요소로 렌더링했습니다.</li></ul><h3 id="key-속성"><a href="#key-속성" class="headerlink" title="key 속성"></a><code>key</code> 속성</h3><ul><li><strong>key</strong>: Vue는 요소의 고유성을 유지하기 위해 <code>v-for</code> 루프 안의 각 요소에 고유한 <code>key</code>를 부여할 것을 권장합니다. 이 <code>key</code>를 통해 Vue는 각 요소를 식별하고 올바르게 전환 효과를 적용할 수 있습니다.</li></ul><h2 id="5-애니메이션-라이브러리와의-연동"><a href="#5-애니메이션-라이브러리와의-연동" class="headerlink" title="5. 애니메이션 라이브러리와의 연동"></a>5. 애니메이션 라이브러리와의 연동</h2><h3 id="Animate-css-사용하기"><a href="#Animate-css-사용하기" class="headerlink" title="Animate.css 사용하기"></a>Animate.css 사용하기</h3><p><a href="https://animate.style/">Animate.css</a>는 다양한 애니메이션 효과를 간단하게 적용할 수 있는 CSS 라이브러리입니다. Vue의 전환 시스템과 함께 사용하면 더욱 풍부한 애니메이션을 구현할 수 있습니다.</p><pre><code class="highlight html"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">head</span>&gt;</span>    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span>    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span>    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue Animate.css 예제<span class="tag">&lt;/<span class="name">title</span>&gt;</span>    <span class="tag">&lt;<span class="name">link</span></span><span class="tag">      <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span></span><span class="tag">      <span class="attr">href</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css&quot;</span></span><span class="tag">    /&gt;</span>  <span class="tag">&lt;/<span class="name">head</span>&gt;</span>  <span class="tag">&lt;<span class="name">body</span>&gt;</span>    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> <span class="attr">class</span>=<span class="string">&quot;p-6&quot;</span>&gt;</span>      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;toggle&quot;</span>&gt;</span>애니메이션 전환<span class="tag">&lt;/<span class="name">button</span>&gt;</span>      <span class="tag">&lt;<span class="name">transition</span></span><span class="tag">        <span class="attr">enter-active-class</span>=<span class="string">&quot;animate__animated animate__bounceIn&quot;</span></span><span class="tag">        <span class="attr">leave-active-class</span>=<span class="string">&quot;animate__animated animate__bounceOut&quot;</span></span><span class="tag">      &gt;</span>        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;show&quot;</span> <span class="attr">class</span>=<span class="string">&quot;mt-4 text-lg text-gray-700&quot;</span>&gt;</span>          안녕하세요, Vue.js!        <span class="tag">&lt;/<span class="name">p</span>&gt;</span>      <span class="tag">&lt;/<span class="name">transition</span>&gt;</span>    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@3/dist/vue.global.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">      <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><span class="language-javascript">          <span class="keyword">return</span> &#123;</span><span class="language-javascript">            <span class="attr">show</span>: <span class="literal">true</span>,</span><span class="language-javascript">          &#125;;</span><span class="language-javascript">        &#125;,</span><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span><span class="language-javascript">          <span class="title function_">toggle</span>(<span class="params"></span>) &#123;</span><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">show</span> = !<span class="variable language_">this</span>.<span class="property">show</span>;</span><span class="language-javascript">          &#125;,</span><span class="language-javascript">        &#125;,</span><span class="language-javascript">      &#125;);</span><span class="language-javascript"></span><span class="language-javascript">      app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  <span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></code></pre><h3 id="예제-설명-3"><a href="#예제-설명-3" class="headerlink" title="예제 설명"></a>예제 설명</h3><p>위 예제에서 <code>animate__bounceIn</code>, <code>animate__bounceOut</code> 클래스를 사용해 요소가 나타나거나 사라질 때 튕기는 애니메이션 효과를 적용했습니다. Animate.css를 활용하면 복잡한 애니메이션을 쉽게 적용할 수 있으며, Vue의 전환 시스템과 잘 어울립니다.</p><h3 id="GreenSock-GSAP-와의-연동"><a href="#GreenSock-GSAP-와의-연동" class="headerlink" title="GreenSock (GSAP)와의 연동"></a>GreenSock (GSAP)와의 연동</h3><p>GreenSock Animation Platform(GSAP)은 매우 강력하고 유연한 애니메이션 라이브러리입니다. Vue와 함께 사용하면 정교한 애니메이션을 구현할 수 있습니다.</p><pre><code class="highlight html"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">head</span>&gt;</span>    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span>    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span>    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue GSAP 예제<span class="tag">&lt;/<span class="name">title</span>&gt;</span>    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/gsap/3.9.1/gsap.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  <span class="tag">&lt;/<span class="name">head</span>&gt;</span>  <span class="tag">&lt;<span class="name">body</span>&gt;</span>    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> <span class="attr">class</span>=<span class="string">&quot;p-6&quot;</span>&gt;</span>      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;toggle&quot;</span>&gt;</span>GSAP 전환<span class="tag">&lt;/<span class="name">button</span>&gt;</span>      <span class="tag">&lt;<span class="name">transition</span> @<span class="attr">before-enter</span>=<span class="string">&quot;beforeEnter&quot;</span> @<span class="attr">enter</span>=<span class="string">&quot;enter&quot;</span> @<span class="attr">leave</span>=<span class="string">&quot;leave&quot;</span>&gt;</span>        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;show&quot;</span> <span class="attr">class</span>=<span class="string">&quot;mt-4 text-lg text-gray-700&quot;</span>&gt;</span>          안녕하세요, Vue.js!        <span class="tag">&lt;/<span class="name">p</span>&gt;</span>      <span class="tag">&lt;/<span class="name">transition</span>&gt;</span>    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@3/dist/vue.global.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">      <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><span class="language-javascript">          <span class="keyword">return</span> &#123;</span><span class="language-javascript">            <span class="attr">show</span>: <span class="literal">true</span>,</span><span class="language-javascript">          &#125;;</span><span class="language-javascript">        &#125;,</span><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span><span class="language-javascript">          <span class="title function_">toggle</span>(<span class="params"></span>) &#123;</span><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">show</span> = !<span class="variable language_">this</span>.<span class="property">show</span>;</span><span class="language-javascript">          &#125;,</span><span class="language-javascript">          <span class="title function_">beforeEnter</span>(<span class="params">el</span>) &#123;</span><span class="language-javascript">            gsap.<span class="title function_">set</span>(el, &#123; <span class="attr">opacity</span>: <span class="number">0</span>, <span class="attr">y</span>: -<span class="number">100</span> &#125;);</span><span class="language-javascript">          &#125;,</span><span class="language-javascript">          <span class="title function_">enter</span>(<span class="params">el, done</span>) &#123;</span><span class="language-javascript">            gsap.<span class="title function_">to</span>(el, &#123; <span class="attr">opacity</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">0</span>, <span class="attr">duration</span>: <span class="number">1</span>, <span class="attr">onComplete</span>: done &#125;);</span><span class="language-javascript">          &#125;,</span><span class="language-javascript">          <span class="title function_">leave</span>(<span class="params">el, done</span>) &#123;</span><span class="language-javascript">            gsap.<span class="title function_">to</span>(el, &#123; <span class="attr">opacity</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">100</span>, <span class="attr">duration</span>: <span class="number">1</span>, <span class="attr">onComplete</span>: done &#125;);</span><span class="language-javascript">          &#125;,</span><span class="language-javascript">        &#125;,</span><span class="language-javascript">      &#125;);</span><span class="language-javascript"></span><span class="language-javascript">      app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  <span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></code></pre><h3 id="예제-설명-4"><a href="#예제-설명-4" class="headerlink" title="예제 설명"></a>예제 설명</h3><p>위 예제에서는 GSAP를 사용해 전환 효과를 적용했습니다. <code>beforeEnter</code>, <code>enter</code>, <code>leave</code> 훅을 사용해 요소가 추가되거나 제거될 때의 애니메이션을 제어할 수 있습니다. GSAP를 사용하면 더욱 세밀하고 복잡한 애니메이션을 구현할 수 있습니다.</p><h2 id="8-Composition-API로의-전환"><a href="#8-Composition-API로의-전환" class="headerlink" title="8. Composition API로의 전환"></a>8. Composition API로의 전환</h2><blockquote><p>만약 Vue가 처음이시라면 이 섹션은 건너 뛰어주세요!</p></blockquote><p>Vue3에 추가된 <a href="/vue/24/">Composition API</a>를 사용하여 컴포넌트를 더욱 유연하고 모듈화된 방식으로 작성할 수 있습니다.</p><h3 id="기본-전환-예제-1"><a href="#기본-전환-예제-1" class="headerlink" title="기본 전환 예제"></a>기본 전환 예제</h3><p>기존의 Options API를 사용하는 코드에서 Composition API로 변환해보겠습니다.</p><h4 id="기존-코드-Options-API"><a href="#기존-코드-Options-API" class="headerlink" title="기존 코드 (Options API):"></a>기존 코드 (Options API):</h4><pre><code class="highlight javascript"><span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;  <span class="title function_">data</span>(<span class="params"></span>) &#123;    <span class="keyword">return</span> &#123;      <span class="attr">show</span>: <span class="literal">true</span>,    &#125;;  &#125;,  <span class="attr">methods</span>: &#123;    <span class="title function_">toggle</span>(<span class="params"></span>) &#123;      <span class="variable language_">this</span>.<span class="property">show</span> = !<span class="variable language_">this</span>.<span class="property">show</span>;    &#125;,  &#125;,&#125;);app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</code></pre><h4 id="Composition-API로-변환"><a href="#Composition-API로-변환" class="headerlink" title="Composition API로 변환:"></a>Composition API로 변환:</h4><pre><code class="highlight javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;<span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;  <span class="title function_">setup</span>(<span class="params"></span>) &#123;    <span class="keyword">const</span> show = <span class="title function_">ref</span>(<span class="literal">true</span>);    <span class="keyword">const</span> <span class="title function_">toggle</span> = (<span class="params"></span>) =&gt; &#123;      show.<span class="property">value</span> = !show.<span class="property">value</span>;    &#125;;    <span class="keyword">return</span> &#123;      show,      toggle,    &#125;;  &#125;,&#125;);app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</code></pre><h3 id="Tailwind-CSS와의-연동-예제"><a href="#Tailwind-CSS와의-연동-예제" class="headerlink" title="Tailwind CSS와의 연동 예제"></a>Tailwind CSS와의 연동 예제</h3><p>Tailwind CSS와의 연동 예제도 Composition API로 변환할 수 있습니다.</p><h4 id="기존-코드-Options-API-1"><a href="#기존-코드-Options-API-1" class="headerlink" title="기존 코드 (Options API):"></a>기존 코드 (Options API):</h4><pre><code class="highlight javascript"><span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;  <span class="title function_">data</span>(<span class="params"></span>) &#123;    <span class="keyword">return</span> &#123;      <span class="attr">show</span>: <span class="literal">true</span>,    &#125;;  &#125;,  <span class="attr">methods</span>: &#123;    <span class="title function_">toggle</span>(<span class="params"></span>) &#123;      <span class="variable language_">this</span>.<span class="property">show</span> = !<span class="variable language_">this</span>.<span class="property">show</span>;    &#125;,  &#125;,&#125;);app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</code></pre><h4 id="Composition-API로-변환-1"><a href="#Composition-API로-변환-1" class="headerlink" title="Composition API로 변환:"></a>Composition API로 변환:</h4><pre><code class="highlight javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;<span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;  <span class="title function_">setup</span>(<span class="params"></span>) &#123;    <span class="keyword">const</span> show = <span class="title function_">ref</span>(<span class="literal">true</span>);    <span class="keyword">const</span> <span class="title function_">toggle</span> = (<span class="params"></span>) =&gt; &#123;      show.<span class="property">value</span> = !show.<span class="property">value</span>;    &#125;;    <span class="keyword">return</span> &#123;      show,      toggle,    &#125;;  &#125;,&#125;);app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</code></pre><h3 id="GSAP와의-연동-예제"><a href="#GSAP와의-연동-예제" class="headerlink" title="GSAP와의 연동 예제"></a>GSAP와의 연동 예제</h3><p>GSAP와의 연동 예제에서도 Composition API를 사용할 수 있습니다.</p><h4 id="기존-코드-Options-API-2"><a href="#기존-코드-Options-API-2" class="headerlink" title="기존 코드 (Options API):"></a>기존 코드 (Options API):</h4><pre><code class="highlight javascript"><span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;  <span class="title function_">data</span>(<span class="params"></span>) &#123;    <span class="keyword">return</span> &#123;      <span class="attr">show</span>: <span class="literal">true</span>,    &#125;;  &#125;,  <span class="attr">methods</span>: &#123;    <span class="title function_">toggle</span>(<span class="params"></span>) &#123;      <span class="variable language_">this</span>.<span class="property">show</span> = !<span class="variable language_">this</span>.<span class="property">show</span>;    &#125;,    <span class="title function_">beforeEnter</span>(<span class="params">el</span>) &#123;      gsap.<span class="title function_">set</span>(el, &#123; <span class="attr">opacity</span>: <span class="number">0</span>, <span class="attr">y</span>: -<span class="number">100</span> &#125;);    &#125;,    <span class="title function_">enter</span>(<span class="params">el, done</span>) &#123;      gsap.<span class="title function_">to</span>(el, &#123; <span class="attr">opacity</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">0</span>, <span class="attr">duration</span>: <span class="number">1</span>, <span class="attr">onComplete</span>: done &#125;);    &#125;,    <span class="title function_">leave</span>(<span class="params">el, done</span>) &#123;      gsap.<span class="title function_">to</span>(el, &#123; <span class="attr">opacity</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">100</span>, <span class="attr">duration</span>: <span class="number">1</span>, <span class="attr">onComplete</span>: done &#125;);    &#125;,  &#125;,&#125;);app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</code></pre><h4 id="Composition-API로-변환-2"><a href="#Composition-API로-변환-2" class="headerlink" title="Composition API로 변환:"></a>Composition API로 변환:</h4><pre><code class="highlight javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;<span class="keyword">import</span> gsap <span class="keyword">from</span> <span class="string">&quot;gsap&quot;</span>;<span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;  <span class="title function_">setup</span>(<span class="params"></span>) &#123;    <span class="keyword">const</span> show = <span class="title function_">ref</span>(<span class="literal">true</span>);    <span class="keyword">const</span> <span class="title function_">toggle</span> = (<span class="params"></span>) =&gt; &#123;      show.<span class="property">value</span> = !show.<span class="property">value</span>;    &#125;;    <span class="keyword">const</span> <span class="title function_">beforeEnter</span> = (<span class="params">el</span>) =&gt; &#123;      gsap.<span class="title function_">set</span>(el, &#123; <span class="attr">opacity</span>: <span class="number">0</span>, <span class="attr">y</span>: -<span class="number">100</span> &#125;);    &#125;;    <span class="keyword">const</span> <span class="title function_">enter</span> = (<span class="params">el, done</span>) =&gt; &#123;      gsap.<span class="title function_">to</span>(el, &#123; <span class="attr">opacity</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">0</span>, <span class="attr">duration</span>: <span class="number">1</span>, <span class="attr">onComplete</span>: done &#125;);    &#125;;    <span class="keyword">const</span> <span class="title function_">leave</span> = (<span class="params">el, done</span>) =&gt; &#123;      gsap.<span class="title function_">to</span>(el, &#123; <span class="attr">opacity</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">100</span>, <span class="attr">duration</span>: <span class="number">1</span>, <span class="attr">onComplete</span>: done &#125;);    &#125;;    <span class="keyword">return</span> &#123;      show,      toggle,      beforeEnter,      enter,      leave,    &#125;;  &#125;,&#125;);app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 Vue.js에서 애니메이션과 전환을 다루는 방법에 대해 알아보았습니다. Vue의 전환 시스템은 CSS 전환과 애니메이션을 쉽게 적용할 수 있게 해주며, Tailwind CSS와 같은 유틸리티 클래스, Transition 그룹, Animate.css나 GSAP와 같은 라이브러리와 함께 사용하면 더욱 풍부한 사용자 경험을 제공할 수 있습니다.<br>상황에 맞는 적절한 전환 효과를 추가하고 더 생동감 있는 앱을 만들어보세요!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>알고리즘[초급] 최대공약수(GCD)와 최소공배수(LCM)</title>
      <link href="/algorithm/newb/12/"/>
      <url>/algorithm/newb/12/</url>
      
        <content type="html"><![CDATA[<h1 id="알고리즘-초급-최대공약수-GCD-와-최소공배수-LCM"><a href="#알고리즘-초급-최대공약수-GCD-와-최소공배수-LCM" class="headerlink" title="알고리즘[초급] 최대공약수(GCD)와 최소공배수(LCM)"></a>알고리즘[초급] 최대공약수(GCD)와 최소공배수(LCM)</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 최대공약수(GCD)와 최소공배수(LCM)에 대해 알아보겠습니다. 최대공약수와 최소공배수는 두 수의 약수와 배수를 이용해 중요한 수학적 개념을 다룹니다. 이제 최대공약수와 최소공배수의 개념과 계산 방법에 대해 자세히 알아보겠습니다.</p><h2 id="최대공약수-GCD-란-무엇인가"><a href="#최대공약수-GCD-란-무엇인가" class="headerlink" title="최대공약수(GCD)란 무엇인가?"></a>최대공약수(GCD)란 무엇인가?</h2><p>최대공약수(GCD, Greatest Common Divisor)는 두 수의 공통된 약수 중에서 가장 큰 값을 의미합니다. 예를 들어, 48과 18의 최대공약수는 6입니다. 최대공약수를 구하는 가장 효율적인 방법은 유클리드 알고리즘을 사용하는 것입니다.</p><h3 id="유클리드-알고리즘을-사용한-GCD-계산"><a href="#유클리드-알고리즘을-사용한-GCD-계산" class="headerlink" title="유클리드 알고리즘을 사용한 GCD 계산"></a>유클리드 알고리즘을 사용한 GCD 계산</h3><p>유클리드 알고리즘은 두 수의 최대공약수를 구하는 빠르고 효율적인 방법입니다. 다음과 같은 과정을 반복합니다:</p><ol><li>a를 b로 나눈 나머지를 구합니다.</li><li>a를 b로, b를 나머지로 바꾸고 이 과정을 반복합니다.</li><li>나머지가 0이 되면, 그때의 b가 최대공약수입니다.</li></ol><h4 id="GCD-함수"><a href="#GCD-함수" class="headerlink" title="GCD 함수"></a>GCD 함수</h4><pre><code class="highlight javascript"><span class="keyword">function</span> <span class="title function_">gcd</span>(<span class="params">a, b</span>) &#123;  <span class="keyword">if</span> (b === <span class="number">0</span>) &#123;    <span class="keyword">return</span> a; <span class="comment">// 종료 조건</span>  &#125;  <span class="keyword">return</span> <span class="title function_">gcd</span>(b, a % b); <span class="comment">// 재귀 호출</span>&#125;<span class="comment">// 테스트</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">gcd</span>(<span class="number">48</span>, <span class="number">18</span>)); <span class="comment">// 6</span></code></pre><h2 id="최소공배수-LCM-란-무엇인가"><a href="#최소공배수-LCM-란-무엇인가" class="headerlink" title="최소공배수(LCM)란 무엇인가?"></a>최소공배수(LCM)란 무엇인가?</h2><p>최소공배수(LCM, Least Common Multiple)는 두 수의 공통된 배수 중에서 가장 작은 값을 의미합니다. 예를 들어, 4와 6의 최소공배수는 12입니다. 최소공배수는 두 수의 곱을 최대공약수로 나누어 구할 수 있습니다.</p><h3 id="LCM-계산"><a href="#LCM-계산" class="headerlink" title="LCM 계산"></a>LCM 계산</h3><p>두 수 a와 b의 최소공배수는 다음과 같이 구할 수 있습니다:<br>[ \text{LCM}(a, b) &#x3D; \frac{|a \times b|}{\text{GCD}(a, b)} ]</p><h4 id="LCM-함수"><a href="#LCM-함수" class="headerlink" title="LCM 함수"></a>LCM 함수</h4><pre><code class="highlight javascript"><span class="keyword">function</span> <span class="title function_">lcm</span>(<span class="params">a, b</span>) &#123;  <span class="keyword">return</span> (a * b) / <span class="title function_">gcd</span>(a, b);&#125;<span class="comment">// 테스트</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">lcm</span>(<span class="number">4</span>, <span class="number">6</span>)); <span class="comment">// 12</span></code></pre><h3 id="예제-RPG-게임에서의-GCD와-LCM-사용"><a href="#예제-RPG-게임에서의-GCD와-LCM-사용" class="headerlink" title="예제: RPG 게임에서의 GCD와 LCM 사용"></a>예제: RPG 게임에서의 GCD와 LCM 사용</h3><p>RPG 게임에서 두 캐릭터의 레벨 업 주기를 최대공약수와 최소공배수로 계산한다고 가정해봅시다.</p><pre><code class="highlight javascript"><span class="keyword">function</span> <span class="title function_">gcd</span>(<span class="params">a, b</span>) &#123;  <span class="keyword">if</span> (b === <span class="number">0</span>) &#123;    <span class="keyword">return</span> a; <span class="comment">// 종료 조건</span>  &#125;  <span class="keyword">return</span> <span class="title function_">gcd</span>(b, a % b); <span class="comment">// 재귀 호출</span>&#125;<span class="keyword">function</span> <span class="title function_">lcm</span>(<span class="params">a, b</span>) &#123;  <span class="keyword">return</span> (a * b) / <span class="title function_">gcd</span>(a, b);&#125;<span class="comment">// 캐릭터 A와 B의 레벨 업 주기</span><span class="keyword">const</span> levelUpA = <span class="number">12</span>;<span class="keyword">const</span> levelUpB = <span class="number">18</span>;<span class="keyword">const</span> gcdValue = <span class="title function_">gcd</span>(levelUpA, levelUpB);<span class="keyword">const</span> lcmValue = <span class="title function_">lcm</span>(levelUpA, levelUpB);<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`GCD: <span class="subst">$&#123;gcdValue&#125;</span>`</span>); <span class="comment">// GCD: 6</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`LCM: <span class="subst">$&#123;lcmValue&#125;</span>`</span>); <span class="comment">// LCM: 36</span></code></pre><h3 id="퀴즈-GCD와-LCM-이해하기"><a href="#퀴즈-GCD와-LCM-이해하기" class="headerlink" title="퀴즈: GCD와 LCM 이해하기"></a>퀴즈: GCD와 LCM 이해하기</h3><p>다음의 숫자 쌍에 대해 최대공약수(GCD)와 최소공배수(LCM)를 계산해보세요!</p><ol><li>24와 36의 최대공약수를 계산하세요.</li><li>24와 36의 최소공배수를 계산하세요.</li></ol><details><summary>정답</summary><ol><li><p>24와 36의 최대공약수(GCD)를 계산합니다.</p><pre><code class="highlight javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">gcd</span>(<span class="number">24</span>, <span class="number">36</span>)); <span class="comment">// 12</span></code></pre></li><li><p>24와 36의 최소공배수(LCM)를 계산합니다.</p><pre><code class="highlight javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">lcm</span>(<span class="number">24</span>, <span class="number">36</span>)); <span class="comment">// 72</span></code></pre></li></ol></details><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>최대공약수와 최소공배수는 두 수의 약수와 배수를 이용한 중요한 수학적 개념입니다. 유클리드 알고리즘을 사용하여 효율적으로 GCD를 구하고, 이를 바탕으로 LCM을 계산할 수 있습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> 알고리즘_초급 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue 렌더 함수와 JSX</title>
      <link href="/vue/19/"/>
      <url>/vue/19/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-렌더-함수와-JSX"><a href="#Vue-렌더-함수와-JSX" class="headerlink" title="Vue 렌더 함수와 JSX"></a>Vue 렌더 함수와 JSX</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 Vue.js에서 컴포넌트를 렌더링하는 고급 방법인 **렌더 함수(Render Function)**와 <strong>JSX</strong>에 대해 알아보겠습니다. Vue.js는 템플릿 문법을 기본으로 사용하지만, 렌더 함수와 JSX를 사용하면 더 유연하고 강력한 방식으로 컴포넌트를 렌더링할 수 있습니다.</p><h2 id="1-렌더-함수-Render-Function-란"><a href="#1-렌더-함수-Render-Function-란" class="headerlink" title="1. 렌더 함수(Render Function)란?"></a>1. 렌더 함수(Render Function)란?</h2><h3 id="렌더-함수의-개념"><a href="#렌더-함수의-개념" class="headerlink" title="렌더 함수의 개념"></a>렌더 함수의 개념</h3><p>Vue.js에서 컴포넌트는 기본적으로 템플릿 문법을 사용해 렌더링됩니다. 하지만 템플릿 문법 대신 JavaScript 코드로 DOM을 생성하고 조작할 수 있는 렌더 함수를 사용할 수도 있습니다. 렌더 함수는 특히 복잡한 조건부 렌더링이나 동적 컴포넌트 생성에 유용합니다.</p><h3 id="렌더-함수-기본-예제"><a href="#렌더-함수-기본-예제" class="headerlink" title="렌더 함수 기본 예제"></a>렌더 함수 기본 예제</h3><pre><code class="highlight javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;  <span class="title function_">render</span>(<span class="params">h</span>) &#123;    <span class="keyword">return</span> <span class="title function_">h</span>(<span class="string">&quot;div&quot;</span>, &#123; <span class="attr">class</span>: <span class="string">&quot;container&quot;</span> &#125;, [      <span class="title function_">h</span>(<span class="string">&quot;h1&quot;</span>, <span class="string">&quot;렌더 함수 예제&quot;</span>),      <span class="title function_">h</span>(<span class="string">&quot;p&quot;</span>, <span class="string">&quot;이것은 렌더 함수로 생성된 콘텐츠입니다.&quot;</span>),    ]);  &#125;,&#125;;</code></pre><p>위 예제에서 <code>render</code> 함수는 <code>h</code>(createElement) 함수를 사용해 <code>&lt;div&gt;</code> 요소와 그 안의 <code>&lt;h1&gt;</code>, <code>&lt;p&gt;</code> 요소를 생성합니다. <code>h</code> 함수는 DOM 요소를 생성하며, 첫 번째 인자로 태그 이름을, 두 번째 인자로 속성 객체를, 세 번째 인자로 자식 요소 배열을 받습니다.</p><h2 id="2-렌더-함수의-활용"><a href="#2-렌더-함수의-활용" class="headerlink" title="2. 렌더 함수의 활용"></a>2. 렌더 함수의 활용</h2><h3 id="동적-콘텐츠-생성"><a href="#동적-콘텐츠-생성" class="headerlink" title="동적 콘텐츠 생성"></a>동적 콘텐츠 생성</h3><p>렌더 함수를 사용하면 동적으로 콘텐츠를 생성하고 렌더링할 수 있습니다.</p><pre><code class="highlight javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;  <span class="title function_">data</span>(<span class="params"></span>) &#123;    <span class="keyword">return</span> &#123;      <span class="attr">items</span>: [<span class="string">&quot;검&quot;</span>, <span class="string">&quot;방패&quot;</span>, <span class="string">&quot;포션&quot;</span>],    &#125;;  &#125;,  <span class="title function_">render</span>(<span class="params">h</span>) &#123;    <span class="keyword">return</span> <span class="title function_">h</span>(      <span class="string">&quot;ul&quot;</span>,      <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">map</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> <span class="title function_">h</span>(<span class="string">&quot;li&quot;</span>, item))    );  &#125;,&#125;;</code></pre><p>위 예제에서는 <code>items</code> 배열을 순회하며 각각의 아이템을 <code>&lt;li&gt;</code> 요소로 생성하여 <code>&lt;ul&gt;</code> 요소에 포함시킵니다. 이는 <code>v-for</code>를 사용한 템플릿 기반 렌더링과 유사하지만, JavaScript 코드로 직접 제어할 수 있습니다.</p><h3 id="조건부-렌더링"><a href="#조건부-렌더링" class="headerlink" title="조건부 렌더링"></a>조건부 렌더링</h3><p>렌더 함수를 사용해 복잡한 조건부 렌더링을 구현할 수도 있습니다.</p><pre><code class="highlight javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;  <span class="title function_">data</span>(<span class="params"></span>) &#123;    <span class="keyword">return</span> &#123;      <span class="attr">isLoggedIn</span>: <span class="literal">false</span>,    &#125;;  &#125;,  <span class="title function_">render</span>(<span class="params">h</span>) &#123;    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">isLoggedIn</span>      ? <span class="title function_">h</span>(<span class="string">&quot;p&quot;</span>, <span class="string">&quot;환영합니다!&quot;</span>)      : <span class="title function_">h</span>(<span class="string">&quot;p&quot;</span>, <span class="string">&quot;로그인이 필요합니다.&quot;</span>);  &#125;,&#125;;</code></pre><p>위 예제에서 <code>isLoggedIn</code> 상태에 따라 다른 내용을 렌더링하는 조건부 로직을 렌더 함수로 구현했습니다.</p><h2 id="3-JSX란"><a href="#3-JSX란" class="headerlink" title="3. JSX란?"></a>3. JSX란?</h2><h3 id="JSX의-개념"><a href="#JSX의-개념" class="headerlink" title="JSX의 개념"></a>JSX의 개념</h3><p>JSX(JavaScript XML)는 JavaScript 코드 안에서 HTML과 유사한 구문을 사용해 UI를 정의할 수 있는 문법입니다.<br>Vue.js는 기본적으로 템플릿 문법을 사용하지만, JSX를 사용하면 보다 직관적이고 강력한 방법으로 컴포넌트를 작성할 수 있습니다. JSX는 렌더 함수를 간결하게 작성할 수 있게 해줍니다.</p><h3 id="Vue-프로젝트에서-JSX-사용하기"><a href="#Vue-프로젝트에서-JSX-사용하기" class="headerlink" title="Vue 프로젝트에서 JSX 사용하기"></a>Vue 프로젝트에서 JSX 사용하기</h3><p>Vue CLI로 생성된 프로젝트에서 JSX를 사용하려면 <code>@vitejs/plugin-vue-jsx</code> 패키지를 설치해야 합니다.</p><pre><code class="highlight bash">npm install @vitejs/plugin-vue-jsx --save-dev</code></pre><p>이후 <code>vite.config.js</code> 파일을 다음과 같이 수정합니다.</p><pre><code class="highlight javascript"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&quot;vite&quot;</span>;<span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&quot;@vitejs/plugin-vue&quot;</span>;<span class="keyword">import</span> vueJsx <span class="keyword">from</span> <span class="string">&quot;@vitejs/plugin-vue-jsx&quot;</span>;<span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;  <span class="attr">plugins</span>: [<span class="title function_">vue</span>(), <span class="title function_">vueJsx</span>()],&#125;);</code></pre><h3 id="JSX-기본-예제"><a href="#JSX-기본-예제" class="headerlink" title="JSX 기본 예제"></a>JSX 기본 예제</h3><pre><code class="highlight jsx"><span class="keyword">export</span> <span class="keyword">default</span> &#123;  <span class="title function_">data</span>(<span class="params"></span>) &#123;    <span class="keyword">return</span> &#123;      <span class="attr">items</span>: [<span class="string">&quot;검&quot;</span>, <span class="string">&quot;방패&quot;</span>, <span class="string">&quot;포션&quot;</span>],    &#125;;  &#125;,  <span class="title function_">render</span>(<span class="params"></span>) &#123;    <span class="keyword">return</span> (      <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><span class="language-xml">        &#123;this.items.map((item) =&gt; (</span><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;item&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><span class="language-xml">        ))&#125;</span><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span>    );  &#125;,&#125;;</code></pre><p>위 예제에서 JSX를 사용해 <code>&lt;ul&gt;</code> 요소와 그 안의 <code>&lt;li&gt;</code> 요소들을 간결하게 작성할 수 있습니다. JSX는 HTML과 유사한 문법으로, <code>render</code> 함수보다 직관적입니다.</p><h3 id="JSX의-장점"><a href="#JSX의-장점" class="headerlink" title="JSX의 장점"></a>JSX의 장점</h3><ol><li><strong>직관적인 문법</strong>: JSX는 HTML과 유사한 문법을 사용하여 템플릿을 작성할 수 있어, 직관적이고 가독성이 좋습니다.</li><li><strong>강력한 표현력</strong>: JSX는 JavaScript의 모든 기능을 사용할 수 있어, 복잡한 조건부 렌더링이나 동적 콘텐츠 생성에 매우 유용합니다.</li><li><strong>유연한 사용</strong>: JSX를 사용하면 렌더 함수의 모든 기능을 간결한 문법으로 사용할 수 있습니다.</li></ol><h2 id="4-렌더-함수와-JSX의-비교"><a href="#4-렌더-함수와-JSX의-비교" class="headerlink" title="4. 렌더 함수와 JSX의 비교"></a>4. 렌더 함수와 JSX의 비교</h2><h3 id="렌더-함수와-JSX의-차이점"><a href="#렌더-함수와-JSX의-차이점" class="headerlink" title="렌더 함수와 JSX의 차이점"></a>렌더 함수와 JSX의 차이점</h3><table><thead><tr><th>특징</th><th>렌더 함수</th><th>JSX</th></tr></thead><tbody><tr><td><strong>문법</strong></td><td>JavaScript 코드로 작성</td><td>HTML과 유사한 문법</td></tr><tr><td><strong>가독성</strong></td><td>복잡한 로직에서 코드가 길어질 수 있음</td><td>직관적이고 간결한 문법</td></tr><tr><td><strong>JavaScript 활용</strong></td><td>모든 JavaScript 기능을 자유롭게 사용 가능</td><td>모든 JavaScript 기능을 자유롭게 사용 가능</td></tr><tr><td><strong>유연성</strong></td><td>매우 유연하지만 코드가 다소 복잡할 수 있음</td><td>유연하고 직관적임</td></tr></tbody></table><p>JSX는 Vue.js에서 렌더링 로직을 더 직관적이고 간결하게 작성할 수 있게 해줍니다. 반면, 렌더 함수는 JavaScript 코드로 직접 DOM 요소를 생성하고 조작할 수 있는 유연성을 제공합니다. 개발자의 선호도나 특정 요구사항에 따라 둘 중 하나를 선택해 사용할 수 있습니다.</p><h3 id="사용할만한-상황"><a href="#사용할만한-상황" class="headerlink" title="사용할만한 상황?"></a>사용할만한 상황?</h3><ul><li><strong>렌더 함수</strong>: 매우 동적인 UI나 복잡한 조건부 로직을 처리할 때 유용합니다.</li><li><strong>JSX</strong>: 템플릿 기반 문법이 직관적인 프로젝트에서 사용하기 좋으며, React 개발 경험이 있는 개발자에게 익숙할 수 있습니다.</li></ul><h2 id="5-Composition-API에서-렌더-함수와-JSX-사용"><a href="#5-Composition-API에서-렌더-함수와-JSX-사용" class="headerlink" title="5. Composition API에서 렌더 함수와 JSX 사용"></a>5. Composition API에서 렌더 함수와 JSX 사용</h2><blockquote><p>만약 Vue가 처음이시라면 이 섹션은 건너 뛰어주세요!</p></blockquote><p>Vue3에 추가된 <a href="/vue/24/">Composition API</a>를 사용하여 컴포넌트를 더욱 유연하고 모듈화된 방식으로 작성할 수 있습니다.</p><h3 id="Composition-API에서-렌더-함수-사용"><a href="#Composition-API에서-렌더-함수-사용" class="headerlink" title="Composition API에서 렌더 함수 사용"></a>Composition API에서 렌더 함수 사용</h3><p>렌더 함수를 Composition API와 함께 사용할 때는 <code>setup</code> 함수 내에서 <code>h</code> 함수를 반환하는 방식으로 렌더링 로직을 작성할 수 있습니다.</p><pre><code class="highlight javascript"><span class="keyword">import</span> &#123; h, defineComponent &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;<span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;  <span class="title function_">setup</span>(<span class="params"></span>) &#123;    <span class="keyword">const</span> items = [<span class="string">&quot;검&quot;</span>, <span class="string">&quot;방패&quot;</span>, <span class="string">&quot;포션&quot;</span>];    <span class="keyword">return</span> <span class="function">() =&gt;</span>      <span class="title function_">h</span>(        <span class="string">&quot;ul&quot;</span>,        items.<span class="title function_">map</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> <span class="title function_">h</span>(<span class="string">&quot;li&quot;</span>, item))      );  &#125;,&#125;);</code></pre><p>위 예제에서 <code>setup</code> 함수는 <code>items</code> 배열을 사용해 동적으로 <code>&lt;li&gt;</code> 요소를 생성하고, 이를 <code>&lt;ul&gt;</code> 요소에 포함시킵니다. 렌더링 로직이 <code>setup</code> 함수 내부에서 명확하게 관리되고 있습니다.</p><h3 id="Composition-API에서-JSX-사용"><a href="#Composition-API에서-JSX-사용" class="headerlink" title="Composition API에서 JSX 사용"></a>Composition API에서 JSX 사용</h3><p>Composition API를 활용하면 JSX를 더 직관적으로 사용할 수 있습니다. JSX를 사용하면 HTML과 유사한 문법으로 렌더링 로직을 작성할 수 있으며, 이를 <code>setup</code> 함수 내에서 처리할 수 있습니다.</p><pre><code class="highlight jsx"><span class="keyword">import</span> &#123; defineComponent &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;<span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;  <span class="title function_">setup</span>(<span class="params"></span>) &#123;    <span class="keyword">const</span> items = [<span class="string">&quot;검&quot;</span>, <span class="string">&quot;방패&quot;</span>, <span class="string">&quot;포션&quot;</span>];    <span class="keyword">return</span> <span class="function">() =&gt;</span> (      <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><span class="language-xml">        &#123;items.map((item) =&gt; (</span><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;item&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><span class="language-xml">        ))&#125;</span><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span>    );  &#125;,&#125;);</code></pre><p>위 예제에서는 JSX를 사용해 <code>&lt;ul&gt;</code> 요소와 <code>&lt;li&gt;</code> 요소들을 직관적으로 렌더링하고 있습니다. JSX를 사용하면 HTML과 유사한 문법으로 컴포넌트를 정의할 수 있어 코드의 가독성을 높일 수 있습니다.</p><h3 id="Composition-API를-활용한-동적-컴포넌트"><a href="#Composition-API를-활용한-동적-컴포넌트" class="headerlink" title="Composition API를 활용한 동적 컴포넌트"></a>Composition API를 활용한 동적 컴포넌트</h3><p>Composition API와 JSX를 결합하여 동적 컴포넌트를 구현할 수도 있습니다.</p><pre><code class="highlight jsx"><span class="keyword">import</span> &#123; ref, defineComponent &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;<span class="keyword">import</span> <span class="title class_">BattleComponent</span> <span class="keyword">from</span> <span class="string">&quot;./BattleComponent.vue&quot;</span>;<span class="keyword">import</span> <span class="title class_">DialogueComponent</span> <span class="keyword">from</span> <span class="string">&quot;./DialogueComponent.vue&quot;</span>;<span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;  <span class="attr">components</span>: &#123;    <span class="title class_">BattleComponent</span>,    <span class="title class_">DialogueComponent</span>,  &#125;,  <span class="title function_">setup</span>(<span class="params"></span>) &#123;    <span class="keyword">const</span> currentComponent = <span class="title function_">ref</span>(<span class="string">&quot;BattleComponent&quot;</span>);    <span class="keyword">function</span> <span class="title function_">switchComponent</span>(<span class="params"></span>) &#123;      currentComponent.<span class="property">value</span> =        currentComponent.<span class="property">value</span> === <span class="string">&quot;BattleComponent&quot;</span>          ? <span class="string">&quot;DialogueComponent&quot;</span>          : <span class="string">&quot;BattleComponent&quot;</span>;    &#125;    <span class="keyword">return</span> <span class="function">() =&gt;</span> (      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="language-xml">        <span class="tag">&lt;<span class="name">component</span> <span class="attr">is</span>=<span class="string">&#123;currentComponent.value&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;switchComponent&#125;</span>&gt;</span>컴포넌트 전환<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>    );  &#125;,&#125;);</code></pre><p>위 예제에서 <code>component</code> 태그와 JSX를 사용해 동적으로 컴포넌트를 전환하고 있으며, Composition API를 활용해 상태와 로직을 관리하고 있습니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 Vue.js에서 컴포넌트를 렌더링하는 고급 방법인 <strong>렌더 함수</strong>와 <strong>JSX</strong>에 대해 알아보았습니다. 렌더 함수와 JSX는 Vue.js 애플리케이션의 UI를 더 유연하고 동적으로 구성할 수 있는 강력한 도구입니다. 상황에 따라 적절한 방법을 선택해 사용하며, 더욱 효율적인 Vue.js 애플리케이션을 만들어 보세요!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>알고리즘[초급] 재귀를 사용한 기초 문제 해결</title>
      <link href="/algorithm/newb/11/"/>
      <url>/algorithm/newb/11/</url>
      
        <content type="html"><![CDATA[<h1 id="알고리즘-초급-재귀를-사용한-기초-문제-해결"><a href="#알고리즘-초급-재귀를-사용한-기초-문제-해결" class="headerlink" title="알고리즘[초급] 재귀를 사용한 기초 문제 해결"></a>알고리즘[초급] 재귀를 사용한 기초 문제 해결</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 전에 다루었던 <a href="/algorithm/newb/10">재귀(Recursion)</a>를 사용한 기초 문제 해결 방법에 대해 알아보겠습니다.</p><h2 id="재귀의-기초-문제-해결"><a href="#재귀의-기초-문제-해결" class="headerlink" title="재귀의 기초 문제 해결"></a>재귀의 기초 문제 해결</h2><h3 id="문제-1-문자열-뒤집기"><a href="#문제-1-문자열-뒤집기" class="headerlink" title="문제 1: 문자열 뒤집기"></a>문제 1: 문자열 뒤집기</h3><p>주어진 문자열을 재귀적으로 뒤집는 함수를 작성하세요.</p><pre><code class="highlight javascript"><span class="keyword">function</span> <span class="title function_">reverseString</span>(<span class="params">str</span>) &#123;  <span class="keyword">if</span> (str === <span class="string">&quot;&quot;</span>) &#123;    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>; <span class="comment">// 종료 조건</span>  &#125;  <span class="keyword">return</span> <span class="title function_">reverseString</span>(str.<span class="title function_">substr</span>(<span class="number">1</span>)) + str[<span class="number">0</span>]; <span class="comment">// 재귀 호출</span>&#125;<span class="comment">// 테스트</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">reverseString</span>(<span class="string">&quot;hello&quot;</span>)); <span class="comment">// &quot;olleh&quot;</span></code></pre><h3 id="문제-2-배열의-합-계산"><a href="#문제-2-배열의-합-계산" class="headerlink" title="문제 2: 배열의 합 계산"></a>문제 2: 배열의 합 계산</h3><p>주어진 배열의 모든 요소의 합을 재귀적으로 계산하는 함수를 작성하세요.</p><pre><code class="highlight javascript"><span class="keyword">function</span> <span class="title function_">sumArray</span>(<span class="params">array</span>) &#123;  <span class="keyword">if</span> (array.<span class="property">length</span> === <span class="number">0</span>) &#123;    <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 종료 조건</span>  &#125;  <span class="keyword">return</span> array[<span class="number">0</span>] + <span class="title function_">sumArray</span>(array.<span class="title function_">slice</span>(<span class="number">1</span>)); <span class="comment">// 재귀 호출</span>&#125;<span class="comment">// 테스트</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sumArray</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])); <span class="comment">// 15</span></code></pre><h3 id="문제-3-최대-공약수-GCD-계산"><a href="#문제-3-최대-공약수-GCD-계산" class="headerlink" title="문제 3: 최대 공약수(GCD) 계산"></a>문제 3: 최대 공약수(GCD) 계산</h3><p>두 수의 최대 공약수(GCD)를 재귀적으로 계산하는 함수를 작성하세요.</p><pre><code class="highlight javascript"><span class="keyword">function</span> <span class="title function_">gcd</span>(<span class="params">a, b</span>) &#123;  <span class="keyword">if</span> (b === <span class="number">0</span>) &#123;    <span class="keyword">return</span> a; <span class="comment">// 종료 조건</span>  &#125;  <span class="keyword">return</span> <span class="title function_">gcd</span>(b, a % b); <span class="comment">// 재귀 호출</span>&#125;<span class="comment">// 테스트</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">gcd</span>(<span class="number">48</span>, <span class="number">18</span>)); <span class="comment">// 6</span></code></pre><h3 id="문제-4-이진수-변환"><a href="#문제-4-이진수-변환" class="headerlink" title="문제 4: 이진수 변환"></a>문제 4: 이진수 변환</h3><p>주어진 정수를 이진수로 변환하는 재귀 함수를 작성하세요.</p><pre><code class="highlight javascript"><span class="keyword">function</span> <span class="title function_">decimalToBinary</span>(<span class="params">n</span>) &#123;  <span class="keyword">if</span> (n === <span class="number">0</span>) &#123;    <span class="keyword">return</span> <span class="string">&quot;0&quot;</span>; <span class="comment">// 종료 조건</span>  &#125;  <span class="keyword">if</span> (n === <span class="number">1</span>) &#123;    <span class="keyword">return</span> <span class="string">&quot;1&quot;</span>; <span class="comment">// 종료 조건</span>  &#125;  <span class="keyword">return</span> <span class="title function_">decimalToBinary</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>(n / <span class="number">2</span>)) + (n % <span class="number">2</span>).<span class="title function_">toString</span>(); <span class="comment">// 재귀 호출</span>&#125;<span class="comment">// 테스트</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">decimalToBinary</span>(<span class="number">10</span>)); <span class="comment">// &quot;1010&quot;</span></code></pre><h3 id="예제-RPG-게임에서의-재귀-사용"><a href="#예제-RPG-게임에서의-재귀-사용" class="headerlink" title="예제: RPG 게임에서의 재귀 사용"></a>예제: RPG 게임에서의 재귀 사용</h3><p>RPG 게임에서 캐릭터가 여러 퀘스트를 완료하는 과정을 재귀적으로 구현한다고 가정해봅시다.</p><pre><code class="highlight javascript"><span class="keyword">function</span> <span class="title function_">completeQuests</span>(<span class="params">quests, index = <span class="number">0</span></span>) &#123;  <span class="keyword">if</span> (index === quests.<span class="property">length</span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;All quests completed!&quot;</span>); <span class="comment">// 종료 조건</span>    <span class="keyword">return</span>;  &#125;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Completing quest: <span class="subst">$&#123;quests[index]&#125;</span>`</span>);  <span class="title function_">completeQuests</span>(quests, index + <span class="number">1</span>); <span class="comment">// 재귀 호출</span>&#125;<span class="comment">// 테스트</span><span class="keyword">const</span> quests = [<span class="string">&quot;Find the sword&quot;</span>, <span class="string">&quot;Defeat the dragon&quot;</span>, <span class="string">&quot;Save the village&quot;</span>];<span class="title function_">completeQuests</span>(quests);<span class="comment">// Completing quest: Find the sword</span><span class="comment">// Completing quest: Defeat the dragon</span><span class="comment">// Completing quest: Save the village</span><span class="comment">// All quests completed!</span></code></pre><h3 id="퀴즈-재귀를-사용한-기초-문제-해결"><a href="#퀴즈-재귀를-사용한-기초-문제-해결" class="headerlink" title="퀴즈: 재귀를 사용한 기초 문제 해결"></a>퀴즈: 재귀를 사용한 기초 문제 해결</h3><p>다음의 문제들을 재귀를 사용하여 해결해보세요!</p><ol><li>주어진 문자열이 회문(앞뒤가 같은 문자열)인지 확인하는 함수를 작성하세요.</li><li>주어진 숫자의 각 자리수의 합을 계산하는 함수를 작성하세요.</li></ol><details><summary>정답</summary><ol><li><p>회문인지 확인하는 함수</p><pre><code class="highlight javascript"><span class="keyword">function</span> <span class="title function_">isPalindrome</span>(<span class="params">str</span>) &#123;  <span class="keyword">if</span> (str.<span class="property">length</span> &lt;= <span class="number">1</span>) &#123;    <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 종료 조건</span>  &#125;  <span class="keyword">if</span> (str[<span class="number">0</span>] !== str[str.<span class="property">length</span> - <span class="number">1</span>]) &#123;    <span class="keyword">return</span> <span class="literal">false</span>;  &#125;  <span class="keyword">return</span> <span class="title function_">isPalindrome</span>(str.<span class="title function_">slice</span>(<span class="number">1</span>, -<span class="number">1</span>)); <span class="comment">// 재귀 호출</span>&#125;<span class="comment">// 테스트</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isPalindrome</span>(<span class="string">&quot;racecar&quot;</span>)); <span class="comment">// true</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isPalindrome</span>(<span class="string">&quot;hello&quot;</span>)); <span class="comment">// false</span></code></pre></li><li><p>각 자리수의 합을 계산하는 함수</p><pre><code class="highlight javascript"><span class="keyword">function</span> <span class="title function_">sumOfDigits</span>(<span class="params">n</span>) &#123;  <span class="keyword">if</span> (n === <span class="number">0</span>) &#123;    <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 종료 조건</span>  &#125;  <span class="keyword">return</span> (n % <span class="number">10</span>) + <span class="title function_">sumOfDigits</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>(n / <span class="number">10</span>)); <span class="comment">// 재귀 호출</span>&#125;<span class="comment">// 테스트</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sumOfDigits</span>(<span class="number">1234</span>)); <span class="comment">// 10</span></code></pre></li></ol></details><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>재귀를 사용한 문제 해결은 복잡한 문제를 단순화하는 강력한 도구입니다. 이번 글에서 다룬 기초 예제들을 통해 재귀의 개념을 이해하고, 더 복잡한 문제에도 적용해보세요!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> 알고리즘_초급 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Node.js PM2</title>
      <link href="/cli/8/"/>
      <url>/cli/8/</url>
      
        <content type="html"><![CDATA[<h1 id="PM2-Node-js-애플리케이션-프로세스-관리자"><a href="#PM2-Node-js-애플리케이션-프로세스-관리자" class="headerlink" title="PM2: Node.js 애플리케이션 프로세스 관리자"></a>PM2: Node.js 애플리케이션 프로세스 관리자</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 Node.js 애플리케이션을 효율적으로 관리하고 모니터링할 수 있는 프로세스 관리자 도구인 PM2에 대해 알아보겠습니다. PM2의 역할과 필요성, 설치 방법, 기본 사용법과 고급 사용법, 그리고 실제 프로젝트에서 PM2를 활용하는 방법을 알아보겠습니다.</p><h2 id="1-PM2-소개"><a href="#1-PM2-소개" class="headerlink" title="1. PM2 소개"></a>1. PM2 소개</h2><h3 id="PM2란-무엇인가"><a href="#PM2란-무엇인가" class="headerlink" title="PM2란 무엇인가?"></a>PM2란 무엇인가?</h3><p>PM2는 Node.js 애플리케이션의 프로세스를 관리하고 모니터링하는 도구입니다. 애플리케이션의 가동 시간을 최대화하고 성능을 향상시키기 위해 사용됩니다.</p><h3 id="PM2의-역할과-중요성"><a href="#PM2의-역할과-중요성" class="headerlink" title="PM2의 역할과 중요성"></a>PM2의 역할과 중요성</h3><ul><li><strong>프로세스 관리</strong>: 애플리케이션의 시작, 중지, 재시작, 삭제 등의 작업을 쉽게 수행할 수 있습니다.</li><li><strong>로드 밸런싱</strong>: 클러스터 모드를 사용하여 멀티코어 CPU를 효율적으로 활용할 수 있습니다.</li><li><strong>자동 재시작</strong>: 애플리케이션이 비정상 종료되면 자동으로 재시작합니다.</li><li><strong>모니터링 및 로깅</strong>: 실시간으로 애플리케이션의 상태를 모니터링하고 로그를 관리할 수 있습니다.</li></ul><h2 id="2-설치-방법"><a href="#2-설치-방법" class="headerlink" title="2. 설치 방법"></a>2. 설치 방법</h2><h3 id="PM2-설치-방법"><a href="#PM2-설치-방법" class="headerlink" title="PM2 설치 방법"></a>PM2 설치 방법</h3><p>PM2는 Node.js 패키지 매니저인 npm을 통해 설치할 수 있습니다.</p><pre><code class="highlight bash">npm install pm2 -g</code></pre><p>설치가 완료되면 터미널에서 <code>pm2 -v</code> 명령어를 실행하여 설치가 제대로 되었는지 확인할 수 있습니다.</p><pre><code class="highlight bash">pm2 -v</code></pre><h2 id="3-기본-사용법"><a href="#3-기본-사용법" class="headerlink" title="3. 기본 사용법"></a>3. 기본 사용법</h2><h3 id="프로세스-관리"><a href="#프로세스-관리" class="headerlink" title="프로세스 관리"></a>프로세스 관리</h3><ul><li><strong>애플리케이션 시작</strong>: <code>pm2 start &lt;파일명&gt;</code>을 사용하여 애플리케이션을 시작합니다.</li></ul><pre><code class="highlight bash">pm2 start app.js</code></pre><ul><li><strong>애플리케이션 중지</strong>: <code>pm2 stop &lt;프로세스 이름 또는 ID&gt;</code>를 사용하여 애플리케이션을 중지합니다.</li></ul><pre><code class="highlight bash">pm2 stop app</code></pre><ul><li><strong>애플리케이션 재시작</strong>: <code>pm2 restart &lt;프로세스 이름 또는 ID&gt;</code>를 사용하여 애플리케이션을 재시작합니다.</li></ul><pre><code class="highlight bash">pm2 restart app</code></pre><ul><li><strong>프로세스 목록 확인</strong>: <code>pm2 list</code>를 사용하여 현재 실행 중인 모든 프로세스의 목록을 확인합니다.</li></ul><pre><code class="highlight bash">pm2 list</code></pre><ul><li><strong>프로세스 삭제</strong>: <code>pm2 delete &lt;프로세스 이름 또는 ID&gt;</code>를 사용하여 프로세스를 삭제합니다.</li></ul><pre><code class="highlight bash">pm2 delete app</code></pre><h2 id="4-고급-사용법"><a href="#4-고급-사용법" class="headerlink" title="4. 고급 사용법"></a>4. 고급 사용법</h2><h3 id="로그-관리"><a href="#로그-관리" class="headerlink" title="로그 관리"></a>로그 관리</h3><ul><li><strong>로그 확인</strong>: <code>pm2 logs</code>를 사용하여 애플리케이션의 로그를 실시간으로 확인할 수 있습니다.</li></ul><pre><code class="highlight bash">pm2 logs</code></pre><ul><li><strong>로그 정리</strong>: <code>pm2 flush</code>를 사용하여 모든 로그를 정리합니다.</li></ul><pre><code class="highlight bash">pm2 flush</code></pre><h3 id="기타-명령어"><a href="#기타-명령어" class="headerlink" title="기타 명령어"></a>기타 명령어</h3><ul><li><strong>현재 상태 저장</strong>: <code>pm2 save</code>를 사용하여 현재 실행 중인 프로세스 상태를 저장합니다.</li></ul><pre><code class="highlight bash">pm2 save</code></pre><ul><li><strong>상태 복원</strong>: <code>pm2 resurrect</code>를 사용하여 저장된 프로세스 상태를 복원합니다.</li></ul><pre><code class="highlight bash">pm2 resurrect</code></pre><ul><li><strong>부팅 시 자동 시작 설정</strong>: <code>pm2 startup</code>을 사용하여 시스템 부팅 시 PM2가 자동으로 시작되도록 설정합니다.</li></ul><pre><code class="highlight bash">pm2 startup</code></pre><h2 id="5-실습-예제"><a href="#5-실습-예제" class="headerlink" title="5. 실습 예제"></a>5. 실습 예제</h2><h3 id="프로젝트-생성-및-PM2-사용"><a href="#프로젝트-생성-및-PM2-사용" class="headerlink" title="프로젝트 생성 및 PM2 사용"></a>프로젝트 생성 및 PM2 사용</h3><ol><li><strong>새 프로젝트 생성</strong>: 새로운 디렉토리를 만들고 이동합니다.</li></ol><pre><code class="highlight bash"><span class="built_in">mkdir</span> my-pm2-project<span class="built_in">cd</span> my-pm2-project</code></pre><ol start="2"><li><strong>프로젝트 초기화</strong>: <code>npm init</code> 명령어를 사용하여 프로젝트를 초기화합니다.</li></ol><pre><code class="highlight bash">npm init -y</code></pre><ol start="3"><li><strong>Express 설치</strong>: 필요한 패키지를 설치합니다.</li></ol><pre><code class="highlight bash">npm install express</code></pre><ol start="4"><li><strong>애플리케이션 파일 생성</strong>: <code>app.js</code> 파일을 생성하고 기본 서버 코드를 작성합니다.</li></ol><pre><code class="highlight javascript"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);<span class="keyword">const</span> app = <span class="title function_">express</span>();<span class="keyword">const</span> port = process.<span class="property">env</span>.<span class="property">PORT</span> || <span class="number">3000</span>;app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  res.<span class="title function_">send</span>(<span class="string">&quot;Hello World!&quot;</span>);&#125;);app.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Server is running on port <span class="subst">$&#123;port&#125;</span>`</span>);&#125;);</code></pre><ol start="5"><li><strong>애플리케이션 실행</strong>: PM2를 사용하여 애플리케이션을 실행합니다.</li></ol><pre><code class="highlight bash">pm2 start app.js</code></pre><ol start="6"><li><strong>로그 확인 및 관리</strong>: PM2를 사용하여 애플리케이션의 로그를 확인하고 관리합니다.</li></ol><pre><code class="highlight bash">pm2 logspm2 flush</code></pre><ol start="7"><li><strong>프로세스 관리</strong>: PM2를 사용하여 애플리케이션을 중지, 재시작, 삭제합니다.</li></ol><pre><code class="highlight bash">pm2 stop apppm2 restart apppm2 delete app</code></pre><ol start="8"><li><strong>부팅 시 자동 시작 설정</strong>: 시스템 부팅 시 PM2가 자동으로 시작되도록 설정합니다.</li></ol><pre><code class="highlight bash">pm2 savepm2 startup</code></pre><h3 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h3><p>이번 시간에는 PM2의 기본 개념부터 설치 방법, 기본 및 고급 사용법, 추가 명령어까지 다루었습니다. PM2를 통해 Node.js 애플리케이션을 효율적으로 관리하고 개발할 수 있습니다. 다음 시간에는 또 다른 유용한 CLI 도구를 소개하겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> CLI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Node.js forever</title>
      <link href="/cli/7/"/>
      <url>/cli/7/</url>
      
        <content type="html"><![CDATA[<h1 id="forever-Node-js-애플리케이션의-영구-실행-도구"><a href="#forever-Node-js-애플리케이션의-영구-실행-도구" class="headerlink" title="forever: Node.js 애플리케이션의 영구 실행 도구"></a>forever: Node.js 애플리케이션의 영구 실행 도구</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 Node.js 애플리케이션을 영구적으로 실행해주는 도구인 forever에 대해 알아보겠습니다. forever의 역할과 필요성, 설치 방법, 기본 사용법과 고급 사용법, 그리고 실제 프로젝트에서 forever를 활용하는 방법을 알아보겠습니다.</p><h2 id="1-forever-소개"><a href="#1-forever-소개" class="headerlink" title="1. forever 소개"></a>1. forever 소개</h2><h3 id="forever란-무엇인가"><a href="#forever란-무엇인가" class="headerlink" title="forever란 무엇인가?"></a>forever란 무엇인가?</h3><p>forever는 Node.js 애플리케이션을 영구적으로 실행해주는 도구로, 서버가 종료되거나 크래시되었을 때 자동으로 재시작시켜주는 기능을 제공합니다.</p><h3 id="forever의-역할과-중요성"><a href="#forever의-역할과-중요성" class="headerlink" title="forever의 역할과 중요성"></a>forever의 역할과 중요성</h3><ul><li><strong>자동 재시작</strong>: 애플리케이션이 크래시되거나 종료되었을 때 자동으로 재시작합니다.</li><li><strong>프로세스 관리</strong>: 여러 애플리케이션을 동시에 관리할 수 있습니다.</li><li><strong>편리성</strong>: 간단한 명령어로 애플리케이션을 영구적으로 실행할 수 있습니다.</li></ul><h2 id="2-설치-및-설정"><a href="#2-설치-및-설정" class="headerlink" title="2. 설치 및 설정"></a>2. 설치 및 설정</h2><h3 id="forever-설치-방법"><a href="#forever-설치-방법" class="headerlink" title="forever 설치 방법"></a>forever 설치 방법</h3><p>forever는 npm을 통해 전역으로 설치할 수 있습니다.</p><pre><code class="highlight bash">npm install -g forever</code></pre><h2 id="3-프로세스-관리"><a href="#3-프로세스-관리" class="headerlink" title="3. 프로세스 관리"></a>3. 프로세스 관리</h2><h3 id="애플리케이션-실행"><a href="#애플리케이션-실행" class="headerlink" title="애플리케이션 실행"></a>애플리케이션 실행</h3><ul><li><strong>forever start</strong>: 애플리케이션을 백그라운드에서 실행합니다.</li></ul><pre><code class="highlight bash">forever start app.js</code></pre><h3 id="애플리케이션-중지"><a href="#애플리케이션-중지" class="headerlink" title="애플리케이션 중지"></a>애플리케이션 중지</h3><ul><li><strong>forever stop</strong>: 실행 중인 애플리케이션을 중지합니다.</li></ul><pre><code class="highlight bash">forever stop app.js</code></pre><h3 id="애플리케이션-재시작"><a href="#애플리케이션-재시작" class="headerlink" title="애플리케이션 재시작"></a>애플리케이션 재시작</h3><ul><li><strong>forever restart</strong>: 실행 중인 애플리케이션을 재시작합니다.</li></ul><pre><code class="highlight bash">forever restart app.js</code></pre><h2 id="4-로그-관리"><a href="#4-로그-관리" class="headerlink" title="4. 로그 관리"></a>4. 로그 관리</h2><h3 id="로그-확인"><a href="#로그-확인" class="headerlink" title="로그 확인"></a>로그 확인</h3><ul><li><strong>forever logs</strong>: 애플리케이션의 로그를 확인합니다.</li></ul><pre><code class="highlight bash">forever logs</code></pre><h3 id="실행-중인-애플리케이션-목록-확인"><a href="#실행-중인-애플리케이션-목록-확인" class="headerlink" title="실행 중인 애플리케이션 목록 확인"></a>실행 중인 애플리케이션 목록 확인</h3><ul><li><strong>forever list</strong>: 현재 실행 중인 애플리케이션 목록을 확인합니다.</li></ul><pre><code class="highlight bash">forever list</code></pre><h2 id="5-실습-예제"><a href="#5-실습-예제" class="headerlink" title="5. 실습 예제"></a>5. 실습 예제</h2><h3 id="프로젝트-생성-및-forever-사용"><a href="#프로젝트-생성-및-forever-사용" class="headerlink" title="프로젝트 생성 및 forever 사용"></a>프로젝트 생성 및 forever 사용</h3><ol><li><strong>새 프로젝트 생성</strong>: 새로운 디렉토리를 만들고 이동합니다.</li></ol><pre><code class="highlight bash"><span class="built_in">mkdir</span> my-forever-project<span class="built_in">cd</span> my-forever-project</code></pre><ol start="2"><li><strong>프로젝트 초기화</strong>: <code>npm init -y</code> 명령어를 사용하여 프로젝트를 초기화합니다.</li></ol><pre><code class="highlight bash">npm init -y</code></pre><ol start="3"><li><strong>애플리케이션 파일 생성</strong>: <code>app.js</code> 파일을 생성합니다.</li></ol><p><strong>app.js</strong></p><pre><code class="highlight javascript"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);<span class="keyword">const</span> app = <span class="title function_">express</span>();<span class="keyword">const</span> port = process.<span class="property">env</span>.<span class="property">PORT</span> || <span class="number">3000</span>;app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  res.<span class="title function_">send</span>(<span class="string">&quot;Hello World!&quot;</span>);&#125;);app.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Server is running on port <span class="subst">$&#123;port&#125;</span>`</span>);&#125;);</code></pre><ol start="4"><li><strong>애플리케이션 실행</strong>: forever를 사용하여 애플리케이션을 백그라운드에서 실행합니다.</li></ol><pre><code class="highlight bash">forever start app.js</code></pre><ol start="5"><li><strong>애플리케이션 상태 확인</strong>: 실행 중인 애플리케이션의 상태를 확인합니다.</li></ol><pre><code class="highlight bash">forever list</code></pre><ol start="6"><li><strong>로그 확인</strong>: 애플리케이션의 로그를 확인합니다.</li></ol><pre><code class="highlight bash">forever logs</code></pre><ol start="7"><li><strong>애플리케이션 중지</strong>: 실행 중인 애플리케이션을 중지합니다.</li></ol><pre><code class="highlight bash">forever stop app.js</code></pre><h2 id="6-forever-명령어-사전"><a href="#6-forever-명령어-사전" class="headerlink" title="6. forever 명령어 사전"></a>6. forever 명령어 사전</h2><ul><li><strong><code>forever start &lt;your-app.js&gt;</code></strong>: 애플리케이션을 백그라운드에서 실행합니다.</li></ul><pre><code class="highlight bash">forever start app.js</code></pre><ul><li><strong><code>forever stop &lt;your-app.js&gt;</code></strong>: 실행 중인 애플리케이션을 중지합니다.</li></ul><pre><code class="highlight bash">forever stop app.js</code></pre><ul><li><strong><code>forever restart &lt;your-app.js&gt;</code></strong>: 실행 중인 애플리케이션을 재시작합니다.</li></ul><pre><code class="highlight bash">forever restart app.js</code></pre><ul><li><strong><code>forever logs</code></strong>: 애플리케이션의 로그를 확인합니다.</li></ul><pre><code class="highlight bash">forever logs</code></pre><ul><li><strong><code>forever list</code></strong>: 현재 실행 중인 애플리케이션 목록을 확인합니다.</li></ul><pre><code class="highlight bash">forever list</code></pre><h3 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h3><p>이번 시간에는 forever의 기본 개념부터 설치 방법, 기본 및 고급 사용법, 추가 명령어까지 다루었습니다. forever를 통해 Node.js 애플리케이션을 안정적으로 실행하고 관리할 수 있습니다. 다음 시간에는 또 다른 유용한 CLI 도구를 소개하겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> CLI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>알고리즘[초급] 재귀의 개념과 기초 예제 (팩토리얼, 피보나치 수열)</title>
      <link href="/algorithm/newb/10/"/>
      <url>/algorithm/newb/10/</url>
      
        <content type="html"><![CDATA[<h1 id="알고리즘-초급-재귀의-개념과-기초-예제-팩토리얼-피보나치-수열"><a href="#알고리즘-초급-재귀의-개념과-기초-예제-팩토리얼-피보나치-수열" class="headerlink" title="알고리즘[초급] 재귀의 개념과 기초 예제 (팩토리얼, 피보나치 수열)"></a>알고리즘[초급] 재귀의 개념과 기초 예제 (팩토리얼, 피보나치 수열)</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 재귀(Recursion)에 대해 알아보겠습니다.</p><h2 id="재귀-Recursion-란-무엇인가"><a href="#재귀-Recursion-란-무엇인가" class="headerlink" title="재귀(Recursion)란 무엇인가?"></a>재귀(Recursion)란 무엇인가?</h2><p>재귀는 함수가 자기 자신을 호출하는 프로그래밍 기법입니다.<br>재귀 함수를 사용할 때는 반드시 종료 조건을 명확히 정의해야 합니다. 그렇지 않으면 함수가 무한히 호출되어 프로그램이 중단될 수 있습니다.<br>예를 들어, RPG 게임에서 특정 퀘스트를 완료하기 위한 단계적인 작업을 재귀적으로 구현할 수 있습니다.</p><h3 id="재귀의-특징"><a href="#재귀의-특징" class="headerlink" title="재귀의 특징"></a>재귀의 특징</h3><ul><li><strong>종료 조건</strong>: 재귀 함수는 반드시 종료 조건을 포함해야 합니다.</li><li><strong>분할 정복</strong>: 큰 문제를 작은 문제로 나누어 해결할 수 있습니다.</li><li><strong>스택 사용</strong>: 재귀 호출은 스택 메모리를 사용하여 함수 호출을 관리합니다.</li></ul><h3 id="재귀의-기초-예제-팩토리얼"><a href="#재귀의-기초-예제-팩토리얼" class="headerlink" title="재귀의 기초 예제: 팩토리얼"></a>재귀의 기초 예제: 팩토리얼</h3><p>팩토리얼은 1부터 n까지의 모든 정수를 곱한 값입니다. 팩토리얼 함수는 재귀적으로 정의될 수 있습니다.</p><h4 id="팩토리얼-함수"><a href="#팩토리얼-함수" class="headerlink" title="팩토리얼 함수"></a>팩토리얼 함수</h4><pre><code class="highlight javascript"><span class="keyword">function</span> <span class="title function_">factorial</span>(<span class="params">n</span>) &#123;  <span class="keyword">if</span> (n === <span class="number">0</span>) &#123;    <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">// 종료 조건</span>  &#125;  <span class="keyword">return</span> n * <span class="title function_">factorial</span>(n - <span class="number">1</span>); <span class="comment">// 재귀 호출</span>&#125;<span class="comment">// 테스트</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">factorial</span>(<span class="number">5</span>)); <span class="comment">// 120 (5! = 5 * 4 * 3 * 2 * 1)</span></code></pre><h3 id="재귀의-기초-예제-피보나치-수열"><a href="#재귀의-기초-예제-피보나치-수열" class="headerlink" title="재귀의 기초 예제: 피보나치 수열"></a>재귀의 기초 예제: 피보나치 수열</h3><p>피보나치 수열은 첫 두 항이 0과 1이며, 그 이후의 모든 항은 바로 앞의 두 항의 합인 수열입니다. 피보나치 함수는 재귀적으로 정의될 수 있습니다.</p><h4 id="피보나치-함수"><a href="#피보나치-함수" class="headerlink" title="피보나치 함수"></a>피보나치 함수</h4><pre><code class="highlight javascript"><span class="keyword">function</span> <span class="title function_">fibonacci</span>(<span class="params">n</span>) &#123;  <span class="keyword">if</span> (n === <span class="number">0</span>) &#123;    <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 종료 조건</span>  &#125;  <span class="keyword">if</span> (n === <span class="number">1</span>) &#123;    <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">// 종료 조건</span>  &#125;  <span class="keyword">return</span> <span class="title function_">fibonacci</span>(n - <span class="number">1</span>) + <span class="title function_">fibonacci</span>(n - <span class="number">2</span>); <span class="comment">// 재귀 호출</span>&#125;<span class="comment">// 테스트</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fibonacci</span>(<span class="number">6</span>)); <span class="comment">// 8 (피보나치 수열의 6번째 항은 8)</span></code></pre><h3 id="예제-RPG-게임에서의-재귀-사용"><a href="#예제-RPG-게임에서의-재귀-사용" class="headerlink" title="예제: RPG 게임에서의 재귀 사용"></a>예제: RPG 게임에서의 재귀 사용</h3><p>RPG 게임에서 캐릭터가 퀘스트를 완료하기 위해 여러 단계를 거치는 작업을 재귀적으로 구현한다고 가정해봅시다.</p><pre><code class="highlight javascript"><span class="keyword">function</span> <span class="title function_">completeQuest</span>(<span class="params">step</span>) &#123;  <span class="keyword">if</span> (step === <span class="number">0</span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Quest complete!&quot;</span>); <span class="comment">// 종료 조건</span>    <span class="keyword">return</span>;  &#125;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Complete step <span class="subst">$&#123;step&#125;</span>`</span>);  <span class="title function_">completeQuest</span>(step - <span class="number">1</span>); <span class="comment">// 재귀 호출</span>&#125;<span class="comment">// 테스트</span><span class="title function_">completeQuest</span>(<span class="number">5</span>);<span class="comment">// Complete step 5</span><span class="comment">// Complete step 4</span><span class="comment">// Complete step 3</span><span class="comment">// Complete step 2</span><span class="comment">// Complete step 1</span><span class="comment">// Quest complete!</span></code></pre><h3 id="퀴즈-재귀-이해하기"><a href="#퀴즈-재귀-이해하기" class="headerlink" title="퀴즈: 재귀 이해하기"></a>퀴즈: 재귀 이해하기</h3><p>다음의 작업을 수행하는 재귀 함수를 작성해보세요!</p><ol><li>주어진 숫자의 팩토리얼을 계산하는 함수 <code>factorial()</code>을 작성하세요.</li><li>주어진 숫자의 피보나치 수열의 값을 계산하는 함수 <code>fibonacci()</code>를 작성하세요.</li></ol><details><summary>정답</summary><ol><li><p>팩토리얼 함수를 작성합니다.</p><pre><code class="highlight javascript"><span class="keyword">function</span> <span class="title function_">factorial</span>(<span class="params">n</span>) &#123;  <span class="keyword">if</span> (n === <span class="number">0</span>) &#123;    <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">// 종료 조건</span>  &#125;  <span class="keyword">return</span> n * <span class="title function_">factorial</span>(n - <span class="number">1</span>); <span class="comment">// 재귀 호출</span>&#125;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">factorial</span>(<span class="number">5</span>)); <span class="comment">// 120</span></code></pre></li><li><p>피보나치 함수를 작성합니다.</p><pre><code class="highlight javascript"><span class="keyword">function</span> <span class="title function_">fibonacci</span>(<span class="params">n</span>) &#123;  <span class="keyword">if</span> (n === <span class="number">0</span>) &#123;    <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 종료 조건</span>  &#125;  <span class="keyword">if</span> (n === <span class="number">1</span>) &#123;    <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">// 종료 조건</span>  &#125;  <span class="keyword">return</span> <span class="title function_">fibonacci</span>(n - <span class="number">1</span>) + <span class="title function_">fibonacci</span>(n - <span class="number">2</span>); <span class="comment">// 재귀 호출</span>&#125;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fibonacci</span>(<span class="number">6</span>)); <span class="comment">// 8</span></code></pre></li></ol></details><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>재귀는 복잡한 문제를 작은 문제로 나누어 해결할 수 있는 강력한 프로그래밍 기법입니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> 알고리즘_초급 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>알고리즘[초급] 삽입 정렬(Insertion Sort)</title>
      <link href="/algorithm/newb/9/"/>
      <url>/algorithm/newb/9/</url>
      
        <content type="html"><![CDATA[<h1 id="알고리즘-초급-삽입-정렬-Insertion-Sort"><a href="#알고리즘-초급-삽입-정렬-Insertion-Sort" class="headerlink" title="알고리즘[초급] 삽입 정렬(Insertion Sort)"></a>알고리즘[초급] 삽입 정렬(Insertion Sort)</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 삽입 정렬(Insertion Sort)에 대해 알아보겠습니다.</p><h2 id="삽입-정렬-Insertion-Sort-란-무엇인가"><a href="#삽입-정렬-Insertion-Sort-란-무엇인가" class="headerlink" title="삽입 정렬(Insertion Sort)란 무엇인가?"></a>삽입 정렬(Insertion Sort)란 무엇인가?</h2><p>삽입 정렬은 리스트의 요소를 순차적으로 확인하면서, 각 요소를 이미 정렬된 부분과 비교하여 적절한 위치에 삽입하는 방식으로 리스트를 정렬하는 알고리즘입니다.<br>예를 들어, RPG 게임에서 캐릭터의 공격력을 정렬하는 작업을 삽입 정렬로 수행할 수 있습니다.</p><h3 id="삽입-정렬의-특징"><a href="#삽입-정렬의-특징" class="headerlink" title="삽입 정렬의 특징"></a>삽입 정렬의 특징</h3><ul><li><strong>단순성</strong>: 이해하고 구현하기 매우 쉽습니다.</li><li><strong>효율성</strong>: 대부분의 요소가 이미 정렬되어 있는 경우 매우 효율적입니다.</li><li><strong>시간 복잡도</strong>: 최악의 경우 O(n^2)으로, 작은 데이터 집합에서만 효율적입니다.</li><li><strong>안정성</strong>: 같은 값의 요소들이 정렬 후에도 원래 순서를 유지합니다.</li></ul><h3 id="삽입-정렬의-구현"><a href="#삽입-정렬의-구현" class="headerlink" title="삽입 정렬의 구현"></a>삽입 정렬의 구현</h3><p>JavaScript로 삽입 정렬을 구현하는 방법은 다음과 같습니다:</p><h4 id="삽입-정렬-함수"><a href="#삽입-정렬-함수" class="headerlink" title="삽입 정렬 함수"></a>삽입 정렬 함수</h4><pre><code class="highlight javascript"><span class="keyword">function</span> <span class="title function_">insertionSort</span>(<span class="params">array</span>) &#123;  <span class="keyword">let</span> n = array.<span class="property">length</span>;  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;    <span class="keyword">let</span> key = array[i];    <span class="keyword">let</span> j = i - <span class="number">1</span>;    <span class="comment">// 현재 요소보다 큰 요소들을 오른쪽으로 이동</span>    <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; array[j] &gt; key) &#123;      array[j + <span class="number">1</span>] = array[j];      j--;    &#125;    array[j + <span class="number">1</span>] = key;  &#125;  <span class="keyword">return</span> array;&#125;<span class="comment">// 테스트</span><span class="keyword">const</span> items = [<span class="number">5</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>];<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">insertionSort</span>(items)); <span class="comment">// [2, 3, 4, 5, 8]</span></code></pre><h3 id="예제-RPG-게임에서의-삽입-정렬-사용"><a href="#예제-RPG-게임에서의-삽입-정렬-사용" class="headerlink" title="예제: RPG 게임에서의 삽입 정렬 사용"></a>예제: RPG 게임에서의 삽입 정렬 사용</h3><p>RPG 게임에서 캐릭터의 공격력 목록을 삽입 정렬로 정렬한다고 가정해봅시다.</p><pre><code class="highlight javascript"><span class="keyword">function</span> <span class="title function_">insertionSort</span>(<span class="params">array</span>) &#123;  <span class="keyword">let</span> n = array.<span class="property">length</span>;  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;    <span class="keyword">let</span> key = array[i];    <span class="keyword">let</span> j = i - <span class="number">1</span>;    <span class="comment">// 현재 요소보다 큰 요소들을 오른쪽으로 이동</span>    <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; array[j] &gt; key) &#123;      array[j + <span class="number">1</span>] = array[j];      j--;    &#125;    array[j + <span class="number">1</span>] = key;  &#125;  <span class="keyword">return</span> array;&#125;<span class="comment">// 캐릭터의 공격력 목록</span><span class="keyword">const</span> attackPowers = [<span class="number">25</span>, <span class="number">10</span>, <span class="number">35</span>, <span class="number">20</span>, <span class="number">30</span>];<span class="comment">// 공격력 정렬</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">insertionSort</span>(attackPowers)); <span class="comment">// [10, 20, 25, 30, 35]</span></code></pre><h3 id="퀴즈-삽입-정렬-이해하기"><a href="#퀴즈-삽입-정렬-이해하기" class="headerlink" title="퀴즈: 삽입 정렬 이해하기"></a>퀴즈: 삽입 정렬 이해하기</h3><p>다음의 공격력 목록을 사용하여 주어진 작업을 수행해보세요!</p><ol><li>공격력 목록을 오름차순으로 정렬하세요.</li><li>정렬된 공격력 목록을 출력하세요.</li></ol><details><summary>정답</summary><ol><li><p>공격력 목록을 오름차순으로 정렬하려면 <code>insertionSort()</code> 함수를 사용합니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> sortedAttackPowers = <span class="title function_">insertionSort</span>(attackPowers);</code></pre></li><li><p>정렬된 공격력 목록을 출력합니다.</p><pre><code class="highlight javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(sortedAttackPowers); <span class="comment">// [10, 20, 25, 30, 35]</span></code></pre></li></ol></details><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>삽입 정렬은 이해하고 구현하기 쉬운 정렬 알고리즘으로, 대부분의 요소가 이미 정렬되어 있는 경우에 효율적으로 사용할 수 있습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> 알고리즘_초급 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue 동적 컴포넌트(Dynamic Components)</title>
      <link href="/vue/18/"/>
      <url>/vue/18/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-동적-컴포넌트-Dynamic-Components"><a href="#Vue-동적-컴포넌트-Dynamic-Components" class="headerlink" title="Vue 동적 컴포넌트(Dynamic Components)"></a>Vue 동적 컴포넌트(Dynamic Components)</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 Vue.js의 **동적 컴포넌트(Dynamic Components)**에 대해 알아보겠습니다.<br>동적 컴포넌트를 사용하면 하나의 자리에 여러 컴포넌트를 동적으로 전환하여 표시할 수 있습니다.</p><h2 id="1-동적-컴포넌트란"><a href="#1-동적-컴포넌트란" class="headerlink" title="1. 동적 컴포넌트란?"></a>1. 동적 컴포넌트란?</h2><h3 id="동적-컴포넌트의-개념"><a href="#동적-컴포넌트의-개념" class="headerlink" title="동적 컴포넌트의 개념"></a>동적 컴포넌트의 개념</h3><p>동적 컴포넌트는 Vue.js에서 여러 컴포넌트를 동적으로 전환하여 렌더링할 수 있는 기능을 제공합니다. <code>component</code> 태그를 사용하여 렌더링할 컴포넌트를 동적으로 결정할 수 있으며, 사용자 입력이나 애플리케이션 상태에 따라 컴포넌트를 변경할 수 있습니다.</p><h3 id="동적-컴포넌트의-예시"><a href="#동적-컴포넌트의-예시" class="headerlink" title="동적 컴포넌트의 예시"></a>동적 컴포넌트의 예시</h3><p>예를 들어, RPG 게임에서 캐릭터의 상태에 따라 다른 컴포넌트를 표시해야 하는 경우가 있을 수 있습니다. 전투 중에는 전투 관련 컴포넌트를, 대화 중에는 대화 관련 컴포넌트를 표시하는 식으로 활용할 수 있습니다.</p><pre><code class="highlight vue">&lt;template&gt;  &lt;div&gt;    &lt;component :is=&quot;currentComponent&quot;&gt;&lt;/component&gt;    &lt;button @click=&quot;switchComponent&quot;&gt;컴포넌트 전환&lt;/button&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import BattleComponent from &quot;./BattleComponent.vue&quot;;import DialogueComponent from &quot;./DialogueComponent.vue&quot;;export default &#123;  data() &#123;    return &#123;      currentComponent: &quot;BattleComponent&quot;,    &#125;;  &#125;,  components: &#123;    BattleComponent,    DialogueComponent,  &#125;,  methods: &#123;    switchComponent() &#123;      this.currentComponent =        this.currentComponent === &quot;BattleComponent&quot;          ? &quot;DialogueComponent&quot;          : &quot;BattleComponent&quot;;    &#125;,  &#125;,&#125;;&lt;/script&gt;</code></pre><p>위 예제에서 <code>component</code> 태그는 <code>currentComponent</code>의 값에 따라 <code>BattleComponent</code> 또는 <code>DialogueComponent</code>를 동적으로 렌더링합니다. 버튼을 클릭하면 <code>currentComponent</code>가 변경되어 표시되는 컴포넌트가 전환됩니다.</p><h2 id="2-keep-alive를-사용한-컴포넌트-상태-유지"><a href="#2-keep-alive를-사용한-컴포넌트-상태-유지" class="headerlink" title="2. keep-alive를 사용한 컴포넌트 상태 유지"></a>2. <code>keep-alive</code>를 사용한 컴포넌트 상태 유지</h2><h3 id="keep-alive의-개념"><a href="#keep-alive의-개념" class="headerlink" title="keep-alive의 개념"></a><code>keep-alive</code>의 개념</h3><p>Vue.js에서 동적 컴포넌트를 전환할 때, 컴포넌트가 전환되면 기본적으로 이전 컴포넌트의 상태가 사라집니다. 그러나 <code>keep-alive</code>를 사용하면 컴포넌트를 전환할 때 컴포넌트의 상태를 유지할 수 있습니다. 이는 비활성화된 컴포넌트를 캐싱하여 필요할 때 다시 활성화하는 방식으로 동작합니다.</p><h3 id="keep-alive-예시"><a href="#keep-alive-예시" class="headerlink" title="keep-alive 예시"></a><code>keep-alive</code> 예시</h3><pre><code class="highlight vue">&lt;template&gt;  &lt;div&gt;    &lt;keep-alive&gt;      &lt;component :is=&quot;currentComponent&quot;&gt;&lt;/component&gt;    &lt;/keep-alive&gt;    &lt;button @click=&quot;switchComponent&quot;&gt;컴포넌트 전환&lt;/button&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import BattleComponent from &quot;./BattleComponent.vue&quot;;import DialogueComponent from &quot;./DialogueComponent.vue&quot;;export default &#123;  data() &#123;    return &#123;      currentComponent: &quot;BattleComponent&quot;,    &#125;;  &#125;,  components: &#123;    BattleComponent,    DialogueComponent,  &#125;,  methods: &#123;    switchComponent() &#123;      this.currentComponent =        this.currentComponent === &quot;BattleComponent&quot;          ? &quot;DialogueComponent&quot;          : &quot;BattleComponent&quot;;    &#125;,  &#125;,&#125;;&lt;/script&gt;</code></pre><p>위 예제에서 <code>keep-alive</code>로 감싸진 <code>component</code> 태그는 컴포넌트를 전환할 때 이전 컴포넌트의 상태를 유지합니다. 이 기능은 자주 전환되는 컴포넌트의 상태를 유지해야 하는 상황에서 매우 유용합니다.</p><h2 id="3-동적-컴포넌트와-Prop-전달"><a href="#3-동적-컴포넌트와-Prop-전달" class="headerlink" title="3. 동적 컴포넌트와 Prop 전달"></a>3. 동적 컴포넌트와 Prop 전달</h2><p>동적 컴포넌트를 사용할 때도 <code>props</code>를 전달할 수 있습니다. 이는 일반적인 컴포넌트 사용과 마찬가지로 <code>component</code> 태그에 <code>v-bind</code>를 사용하여 구현할 수 있습니다.</p><h3 id="Prop-전달-예시"><a href="#Prop-전달-예시" class="headerlink" title="Prop 전달 예시"></a>Prop 전달 예시</h3><pre><code class="highlight vue">&lt;template&gt;  &lt;div&gt;    &lt;component :is=&quot;currentComponent&quot; :character=&quot;character&quot;&gt;&lt;/component&gt;    &lt;button @click=&quot;switchComponent&quot;&gt;컴포넌트 전환&lt;/button&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import BattleComponent from &quot;./BattleComponent.vue&quot;;import DialogueComponent from &quot;./DialogueComponent.vue&quot;;export default &#123;  data() &#123;    return &#123;      currentComponent: &quot;BattleComponent&quot;,      character: &#123;        name: &quot;전사&quot;,        level: 10,      &#125;,    &#125;;  &#125;,  components: &#123;    BattleComponent,    DialogueComponent,  &#125;,  methods: &#123;    switchComponent() &#123;      this.currentComponent =        this.currentComponent === &quot;BattleComponent&quot;          ? &quot;DialogueComponent&quot;          : &quot;BattleComponent&quot;;    &#125;,  &#125;,&#125;;&lt;/script&gt;</code></pre><p>위 예제에서 <code>character</code> 데이터를 <code>props</code>로 전달하여 동적 컴포넌트에서도 동일한 데이터를 사용할 수 있습니다.</p><h2 id="4-동적-컴포넌트-활용-예제"><a href="#4-동적-컴포넌트-활용-예제" class="headerlink" title="4. 동적 컴포넌트 활용 예제"></a>4. 동적 컴포넌트 활용 예제</h2><h3 id="RPG-게임에서-동적-컴포넌트-활용"><a href="#RPG-게임에서-동적-컴포넌트-활용" class="headerlink" title="RPG 게임에서 동적 컴포넌트 활용"></a>RPG 게임에서 동적 컴포넌트 활용</h3><p>RPG 게임에서 전투, 상점, 대화 등의 상태에 따라 다른 컴포넌트를 렌더링하는 예제를 만들어보겠습니다.</p><pre><code class="highlight vue">&lt;template&gt;  &lt;div&gt;    &lt;component :is=&quot;currentComponent&quot; :character=&quot;character&quot;&gt;&lt;/component&gt;    &lt;button @click=&quot;switchTo(&#x27;BattleComponent&#x27;)&quot;&gt;전투&lt;/button&gt;    &lt;button @click=&quot;switchTo(&#x27;ShopComponent&#x27;)&quot;&gt;상점&lt;/button&gt;    &lt;button @click=&quot;switchTo(&#x27;DialogueComponent&#x27;)&quot;&gt;대화&lt;/button&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import BattleComponent from &quot;./BattleComponent.vue&quot;;import ShopComponent from &quot;./ShopComponent.vue&quot;;import DialogueComponent from &quot;./DialogueComponent.vue&quot;;export default &#123;  data() &#123;    return &#123;      currentComponent: &quot;BattleComponent&quot;,      character: &#123;        name: &quot;전사&quot;,        level: 10,      &#125;,    &#125;;  &#125;,  components: &#123;    BattleComponent,    ShopComponent,    DialogueComponent,  &#125;,  methods: &#123;    switchTo(component) &#123;      this.currentComponent = component;    &#125;,  &#125;,&#125;;&lt;/script&gt;</code></pre><p>위 예제에서는 버튼을 클릭할 때마다 현재 렌더링되는 컴포넌트가 전환되며, 전투, 상점, 대화 상태를 동적으로 변경할 수 있습니다.</p><h2 id="5-Composition-API와-동적-컴포넌트-사용"><a href="#5-Composition-API와-동적-컴포넌트-사용" class="headerlink" title="5. Composition API와 동적 컴포넌트 사용"></a>5. Composition API와 동적 컴포넌트 사용</h2><blockquote><p>만약 Vue가 처음이시라면 이 섹션은 건너 뛰어주세요!</p></blockquote><p>Vue3에 추가된 <a href="/vue/24/">Composition API</a>를 사용하여 컴포넌트를 더욱 유연하고 모듈화된 방식으로 작성할 수 있습니다.<br>Composition API를 사용하면 <code>setup</code> 함수 내에서 동적 컴포넌트와 관련된 로직을 관리할 수 있습니다.</p><h3 id="Composition-API를-사용한-동적-컴포넌트"><a href="#Composition-API를-사용한-동적-컴포넌트" class="headerlink" title="Composition API를 사용한 동적 컴포넌트"></a>Composition API를 사용한 동적 컴포넌트</h3><pre><code class="highlight vue">&lt;template&gt;  &lt;div&gt;    &lt;component :is=&quot;currentComponent&quot; :character=&quot;character&quot;&gt;&lt;/component&gt;    &lt;button @click=&quot;switchComponent&quot;&gt;컴포넌트 전환&lt;/button&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import &#123; ref &#125; from &quot;vue&quot;;import BattleComponent from &quot;./BattleComponent.vue&quot;;import DialogueComponent from &quot;./DialogueComponent.vue&quot;;export default &#123;  components: &#123;    BattleComponent,    DialogueComponent,  &#125;,  setup() &#123;    const currentComponent = ref(&quot;BattleComponent&quot;);    const character = ref(&#123;      name: &quot;전사&quot;,      level: 10,    &#125;);    function switchComponent() &#123;      currentComponent.value =        currentComponent.value === &quot;BattleComponent&quot;          ? &quot;DialogueComponent&quot;          : &quot;BattleComponent&quot;;    &#125;    return &#123;      currentComponent,      character,      switchComponent,    &#125;;  &#125;,&#125;;&lt;/script&gt;</code></pre><p>이 예제에서 <code>ref</code>를 사용하여 <code>currentComponent</code>와 <code>character</code> 데이터를 반응형으로 설정하고, <code>setup</code> 함수 내에서 동적 컴포넌트를 제어하는 로직을 작성했습니다.</p><h3 id="Composition-API를-사용한-keep-alive"><a href="#Composition-API를-사용한-keep-alive" class="headerlink" title="Composition API를 사용한 keep-alive"></a>Composition API를 사용한 <code>keep-alive</code></h3><p>Composition API를 사용해 <code>keep-alive</code>와 함께 동적 컴포넌트를 사용하면, 상태 유지 기능을 더 유연하게 관리할 수 있습니다.</p><pre><code class="highlight vue">&lt;template&gt;  &lt;div&gt;    &lt;keep-alive&gt;      &lt;component :is=&quot;currentComponent&quot; :character=&quot;character&quot;&gt;&lt;/component&gt;    &lt;/keep-alive&gt;    &lt;button @click=&quot;switchComponent&quot;&gt;컴포넌트 전환&lt;/button&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import &#123; ref &#125; from &quot;vue&quot;;import BattleComponent from &quot;./BattleComponent.vue&quot;;import DialogueComponent from &quot;./DialogueComponent.vue&quot;;export default &#123;  components: &#123;    BattleComponent,    DialogueComponent,  &#125;,  setup() &#123;    const currentComponent = ref(&quot;BattleComponent&quot;);    const character = ref(&#123;      name: &quot;전사&quot;,      level: 10,    &#125;);    function switchComponent() &#123;      currentComponent.value =        currentComponent.value === &quot;BattleComponent&quot;          ? &quot;DialogueComponent&quot;          : &quot;BattleComponent&quot;;    &#125;    return &#123;      currentComponent,      character,      switchComponent,    &#125;;  &#125;,&#125;;&lt;/script&gt;</code></pre><p>이 예제에서는 <code>keep-alive</code>를 활용하여 컴포넌트 전환 시에도 상태를 유지하면서 동적 컴포넌트를 관리할 수 있습니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 Vue.js의 <strong>동적 컴포넌트</strong>에 대해 알아보았습니다. 동적 컴포넌트를 사용하면 애플리케이션의 UI를 더욱 유연하게 구성할 수 있으며, 다양한 상황에서 컴포넌트를 동적으로 전환하여 활용할 수 있습니다. <code>keep-alive</code>를 사용하여 컴포넌트 상태를 유지하고, 동적 컴포넌트와 <code>props</code>를 함께 사용하여 더욱 강력한 UI를 구현해 보세요!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>REST API 개념과 활용</title>
      <link href="/web/newb/7/"/>
      <url>/web/newb/7/</url>
      
        <content type="html"><![CDATA[<h1 id="REST-API-개념과-활용"><a href="#REST-API-개념과-활용" class="headerlink" title="REST API 개념과 활용"></a>REST API 개념과 활용</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간은 웹 입문 카테고리의 마지막 시간입니다!<br>이전 시간까지는 클라이언트 개발의 기초를 다뤄봤다면 이번 시간에는 서버를 간단히 찍먹만 해보려고 합니다.<br>찍먹 주제는 바로 REST API입니다. REST API는 웹 애플리케이션에서 데이터를 주고받을 때 널리 사용되는 아키텍처 스타일로, 클라이언트와 서버 간의 통신을 효율적으로 할 수 있게 해줍니다.</p><h2 id="REST-API란-무엇인가"><a href="#REST-API란-무엇인가" class="headerlink" title="REST API란 무엇인가?"></a>REST API란 무엇인가?</h2><h3 id="REST의-개념"><a href="#REST의-개념" class="headerlink" title="REST의 개념"></a>REST의 개념</h3><p>REST(Representational State Transfer)는 웹 기반의 분산 시스템을 위한 소프트웨어 아키텍처 스타일입니다. 쉽게 말해, REST는 클라이언트가 서버에 요청을 보내고, 서버가 이에 대한 응답을 보내는 방식으로 데이터를 주고받는 규칙입니다. 이 규칙을 따름으로써 서로 다른 시스템 간에도 통신이 원활하게 이루어질 수 있습니다.</p><h3 id="REST의-구성-요소"><a href="#REST의-구성-요소" class="headerlink" title="REST의 구성 요소"></a>REST의 구성 요소</h3><ul><li><strong>리소스(Resource)</strong>: URI(Uniform Resource Identifier)로 식별되는 데이터입니다. 예를 들어, RPG 게임에서 “캐릭터”나 “아이템” 같은 데이터가 리소스가 될 수 있습니다.</li><li><strong>HTTP 메서드</strong>: 리소스를 조작하기 위해 사용되는 메서드입니다. 대표적으로 GET, POST, PUT, DELETE가 있습니다.</li><li><strong>표현(Representation)</strong>: 리소스의 상태를 전달하는 방법으로, JSON이나 XML 형식이 주로 사용됩니다.</li><li><strong>상태 전이(State Transfer)</strong>: 클라이언트와 서버 간의 상태 정보를 주고받는 과정입니다.</li></ul><h3 id="REST의-특징"><a href="#REST의-특징" class="headerlink" title="REST의 특징"></a>REST의 특징</h3><ol><li><strong>자원 기반</strong>: URI를 통해 자원을 식별합니다.</li><li><strong>표현의 독립성</strong>: 클라이언트와 서버가 서로 독립적으로 동작합니다. 즉, 서버의 데이터 구조가 바뀌더라도 클라이언트에 영향을 주지 않습니다.</li><li><strong>무상태성</strong>: 각 요청이 독립적이며, 요청 간에 클라이언트의 상태를 저장하지 않습니다. 모든 요청은 필요한 모든 정보를 포함해야 합니다.</li><li><strong>캐시 가능</strong>: HTTP 응답을 캐시할 수 있어야 합니다. 이를 통해 네트워크 트래픽을 줄이고 응답 속도를 높일 수 있습니다.</li><li><strong>계층화</strong>: 클라이언트는 여러 중간 서버를 통해 서버에 접근할 수 있습니다. 중간 서버는 보안, 로드 밸런싱 등을 제공할 수 있습니다.</li><li><strong>코드 온 디맨드(Optional)</strong>: 서버는 클라이언트가 실행할 수 있는 코드를 전송할 수 있습니다. 예를 들어, 자바스크립트 코드를 클라이언트에 전송하여 실행할 수 있습니다.</li></ol><h3 id="HTTP-메서드와-CRUD-연산"><a href="#HTTP-메서드와-CRUD-연산" class="headerlink" title="HTTP 메서드와 CRUD 연산"></a>HTTP 메서드와 CRUD 연산</h3><p>HTTP 메서드는 REST API에서 리소스를 조작하는 데 사용됩니다. 각 메서드는 특정한 작업을 수행하며, 다음과 같은 CRUD(Create, Read, Update, Delete) 연산과 대응됩니다.</p><table><thead><tr><th>HTTP 메서드</th><th>설명</th><th>CRUD 연산</th><th>예시 URI</th></tr></thead><tbody><tr><td>GET</td><td>리소스 조회</td><td>Read</td><td>&#x2F;items</td></tr><tr><td>POST</td><td>리소스 생성</td><td>Create</td><td>&#x2F;items</td></tr><tr><td>PUT</td><td>리소스 전체 수정</td><td>Update (전체)</td><td>&#x2F;items&#x2F;{id}</td></tr><tr><td>PATCH</td><td>리소스 부분 수정</td><td>Update (부분)</td><td>&#x2F;items&#x2F;{id}</td></tr><tr><td>DELETE</td><td>리소스 삭제</td><td>Delete</td><td>&#x2F;items&#x2F;{id}</td></tr></tbody></table><h2 id="REST-API의-활용"><a href="#REST-API의-활용" class="headerlink" title="REST API의 활용"></a>REST API의 활용</h2><h3 id="REST-API의-장점"><a href="#REST-API의-장점" class="headerlink" title="REST API의 장점"></a>REST API의 장점</h3><ul><li><strong>일관성</strong>: 표준화된 규칙을 따르므로 API 설계가 일관성을 가집니다.</li><li><strong>유연성</strong>: 다양한 클라이언트(웹, 모바일 등)에서 쉽게 사용할 수 있습니다.</li><li><strong>확장성</strong>: 클라이언트와 서버가 독립적으로 확장될 수 있습니다.</li></ul><h3 id="REST-API-설계-원칙"><a href="#REST-API-설계-원칙" class="headerlink" title="REST API 설계 원칙"></a>REST API 설계 원칙</h3><ol><li><strong>자원 기반</strong>: URI를 통해 자원을 식별합니다.</li><li><strong>표현의 독립성</strong>: 클라이언트와 서버가 서로 독립적으로 동작합니다.</li><li><strong>무상태성</strong>: 요청 간에 클라이언트의 상태를 유지하지 않습니다.</li><li><strong>캐시 가능</strong>: HTTP 응답을 캐시할 수 있어야 합니다.</li><li><strong>계층화</strong>: API 서버는 여러 계층으로 구성될 수 있습니다.</li><li><strong>코드 온 디맨드(Optional)</strong>: 서버는 클라이언트가 실행할 수 있는 코드를 전송할 수 있습니다.</li></ol><h2 id="REST-API-활용-예제"><a href="#REST-API-활용-예제" class="headerlink" title="REST API 활용 예제"></a>REST API 활용 예제</h2><h3 id="RPG-게임-아이템-관리-REST-API"><a href="#RPG-게임-아이템-관리-REST-API" class="headerlink" title="RPG 게임 아이템 관리 REST API"></a>RPG 게임 아이템 관리 REST API</h3><p>RPG 게임에서 아이템을 관리하는 REST API를 설계해보겠습니다. 이 API를 통해 아이템을 조회, 생성, 수정, 삭제할 수 있습니다.</p><h4 id="1-리소스-정의"><a href="#1-리소스-정의" class="headerlink" title="1. 리소스 정의"></a>1. 리소스 정의</h4><ul><li><strong>아이템(Item)</strong>: 게임에서 사용되는 아이템을 의미합니다.<ul><li><strong>속성</strong>: <code>id</code>, <code>name</code>, <code>description</code>, <code>type</code></li></ul></li></ul><h4 id="2-엔드포인트와-HTTP-메서드"><a href="#2-엔드포인트와-HTTP-메서드" class="headerlink" title="2. 엔드포인트와 HTTP 메서드"></a>2. 엔드포인트와 HTTP 메서드</h4><table><thead><tr><th>엔드포인트</th><th>HTTP 메서드</th><th>설명</th></tr></thead><tbody><tr><td>&#x2F;items</td><td>GET</td><td>모든 아이템 조회</td></tr><tr><td>&#x2F;items&#x2F;{id}</td><td>GET</td><td>특정 아이템 조회</td></tr><tr><td>&#x2F;items</td><td>POST</td><td>새로운 아이템 생성</td></tr><tr><td>&#x2F;items&#x2F;{id}</td><td>PUT</td><td>특정 아이템 수정</td></tr><tr><td>&#x2F;items&#x2F;{id}</td><td>DELETE</td><td>특정 아이템 삭제</td></tr></tbody></table><h4 id="3-서버-코드-작성"><a href="#3-서버-코드-작성" class="headerlink" title="3. 서버 코드 작성"></a>3. 서버 코드 작성</h4><p>다음은 Node.js와 Express를 사용하여 REST API를 구현한 예제입니다.</p><p><strong>server.js</strong></p><pre><code class="highlight javascript"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);<span class="keyword">const</span> app = <span class="title function_">express</span>();app.<span class="title function_">use</span>(express.<span class="title function_">json</span>());<span class="keyword">let</span> items = [  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;Sword&quot;</span>, <span class="attr">description</span>: <span class="string">&quot;A sharp blade&quot;</span>, <span class="attr">type</span>: <span class="string">&quot;weapon&quot;</span> &#125;,  &#123;    <span class="attr">id</span>: <span class="number">2</span>,    <span class="attr">name</span>: <span class="string">&quot;Shield&quot;</span>,    <span class="attr">description</span>: <span class="string">&quot;Protects against attacks&quot;</span>,    <span class="attr">type</span>: <span class="string">&quot;armor&quot;</span>,  &#125;,];<span class="comment">// 모든 아이템 조회</span>app.<span class="title function_">get</span>(<span class="string">&quot;/items&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  res.<span class="title function_">json</span>(items);&#125;);<span class="comment">// 특정 아이템 조회</span>app.<span class="title function_">get</span>(<span class="string">&quot;/items/:id&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  <span class="keyword">const</span> item = items.<span class="title function_">find</span>(<span class="function">(<span class="params">i</span>) =&gt;</span> i.<span class="property">id</span> === <span class="built_in">parseInt</span>(req.<span class="property">params</span>.<span class="property">id</span>));  <span class="keyword">if</span> (!item) <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">404</span>).<span class="title function_">send</span>(<span class="string">&quot;Item not found&quot;</span>);  res.<span class="title function_">json</span>(item);&#125;);<span class="comment">// 새로운 아이템 생성</span>app.<span class="title function_">post</span>(<span class="string">&quot;/items&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  <span class="keyword">const</span> newItem = &#123;    <span class="attr">id</span>: items.<span class="property">length</span> + <span class="number">1</span>,    <span class="attr">name</span>: req.<span class="property">body</span>.<span class="property">name</span>,    <span class="attr">description</span>: req.<span class="property">body</span>.<span class="property">description</span>,    <span class="attr">type</span>: req.<span class="property">body</span>.<span class="property">type</span>,  &#125;;  items.<span class="title function_">push</span>(newItem);  res.<span class="title function_">status</span>(<span class="number">201</span>).<span class="title function_">json</span>(newItem);&#125;);<span class="comment">// 특정 아이템 수정</span>app.<span class="title function_">put</span>(<span class="string">&quot;/items/:id&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  <span class="keyword">const</span> item = items.<span class="title function_">find</span>(<span class="function">(<span class="params">i</span>) =&gt;</span> i.<span class="property">id</span> === <span class="built_in">parseInt</span>(req.<span class="property">params</span>.<span class="property">id</span>));  <span class="keyword">if</span> (!item) <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">404</span>).<span class="title function_">send</span>(<span class="string">&quot;Item not found&quot;</span>);  item.<span class="property">name</span> = req.<span class="property">body</span>.<span class="property">name</span>;  item.<span class="property">description</span> = req.<span class="property">body</span>.<span class="property">description</span>;  item.<span class="property">type</span> = req.<span class="property">body</span>.<span class="property">type</span>;  res.<span class="title function_">json</span>(item);&#125;);<span class="comment">// 특정 아이템 삭제</span>app.<span class="title function_">delete</span>(<span class="string">&quot;/items/:id&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  <span class="keyword">const</span> itemIndex = items.<span class="title function_">findIndex</span>(<span class="function">(<span class="params">i</span>) =&gt;</span> i.<span class="property">id</span> === <span class="built_in">parseInt</span>(req.<span class="property">params</span>.<span class="property">id</span>));  <span class="keyword">if</span> (itemIndex === -<span class="number">1</span>) <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">404</span>).<span class="title function_">send</span>(<span class="string">&quot;Item not found&quot;</span>);  <span class="keyword">const</span> deletedItem = items.<span class="title function_">splice</span>(itemIndex, <span class="number">1</span>);  res.<span class="title function_">json</span>(deletedItem);&#125;);<span class="keyword">const</span> <span class="variable constant_">PORT</span> = process.<span class="property">env</span>.<span class="property">PORT</span> || <span class="number">3000</span>;app.<span class="title function_">listen</span>(<span class="variable constant_">PORT</span>, <span class="function">() =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Server is running on port <span class="subst">$&#123;PORT&#125;</span>`</span>);&#125;);</code></pre><h3 id="설명"><a href="#설명" class="headerlink" title="설명"></a>설명</h3><ol><li><strong>모든 아이템 조회</strong>: <code>GET /items</code> 요청으로 모든 아이템을 조회할 수 있습니다.</li><li><strong>특정 아이템 조회</strong>: <code>GET /items/&#123;id&#125;</code> 요청으로 특정 아이템을 조회할 수 있습니다.</li><li><strong>새로운 아이템 생성</strong>: <code>POST /items</code> 요청으로 새로운 아이템을 생성할 수 있습니다.</li><li><strong>특정 아이템 수정</strong>: <code>PUT /items/&#123;id&#125;</code> 요청으로 특정 아이템을 수정할 수 있습니다.</li><li><strong>특정 아이템 삭제</strong>: <code>DELETE /items/&#123;id&#125;</code> 요청으로 특정 아이템을 삭제할 수 있습니다.</li></ol><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 REST API의 기본 개념과 원칙, 그리고 실제 활용 방법에 대해 알아보았습니다. REST API를 사용하면 클라이언트와 서버 간의 통신을 효율적으로 할 수 있으며, 다양한 애플리케이션에서 데이터를 주고받을 수 있습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> web_입문 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>알고리즘[초급] 선택 정렬(Selection Sort)</title>
      <link href="/algorithm/newb/8/"/>
      <url>/algorithm/newb/8/</url>
      
        <content type="html"><![CDATA[<h1 id="알고리즘-초급-선택-정렬-Selection-Sort"><a href="#알고리즘-초급-선택-정렬-Selection-Sort" class="headerlink" title="알고리즘[초급] 선택 정렬(Selection Sort)"></a>알고리즘[초급] 선택 정렬(Selection Sort)</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 선택 정렬(Selection Sort)에 대해 알아보겠습니다.</p><h2 id="선택-정렬-Selection-Sort-란-무엇인가"><a href="#선택-정렬-Selection-Sort-란-무엇인가" class="headerlink" title="선택 정렬(Selection Sort)란 무엇인가?"></a>선택 정렬(Selection Sort)란 무엇인가?</h2><p>선택 정렬은 리스트에서 가장 작은(또는 큰) 요소를 찾아 첫 번째 위치와 교환하고, 그 다음 작은 요소를 찾아 두 번째 위치와 교환하는 방식으로 리스트를 정렬하는 알고리즘입니다. 예를 들어, RPG 게임에서 캐릭터의 레벨을 정렬하는 작업을 선택 정렬로 수행할 수 있습니다.</p><h3 id="선택-정렬의-특징"><a href="#선택-정렬의-특징" class="headerlink" title="선택 정렬의 특징"></a>선택 정렬의 특징</h3><ul><li><strong>단순성</strong>: 이해하고 구현하기 매우 쉽습니다.</li><li><strong>시간 복잡도</strong>: 최악의 경우 O(n^2)으로, 작은 데이터 집합에서만 효율적입니다.</li><li><strong>비교 횟수 최소화</strong>: 다른 단순 정렬 알고리즘에 비해 비교 횟수가 적습니다.</li><li><strong>불안정성</strong>: 같은 값의 요소들이 정렬 후에 원래 순서가 유지되지 않을 수 있습니다.</li></ul><h3 id="선택-정렬의-구현"><a href="#선택-정렬의-구현" class="headerlink" title="선택 정렬의 구현"></a>선택 정렬의 구현</h3><p>JavaScript로 선택 정렬을 구현하는 방법은 다음과 같습니다:</p><h4 id="선택-정렬-함수"><a href="#선택-정렬-함수" class="headerlink" title="선택 정렬 함수"></a>선택 정렬 함수</h4><pre><code class="highlight javascript"><span class="keyword">function</span> <span class="title function_">selectionSort</span>(<span class="params">array</span>) &#123;  <span class="keyword">let</span> n = array.<span class="property">length</span>;  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;    <span class="keyword">let</span> minIndex = i;    <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; n; j++) &#123;      <span class="keyword">if</span> (array[j] &lt; array[minIndex]) &#123;        minIndex = j;      &#125;    &#125;    <span class="keyword">if</span> (minIndex !== i) &#123;      [array[i], array[minIndex]] = [array[minIndex], array[i]];    &#125;  &#125;  <span class="keyword">return</span> array;&#125;<span class="comment">// 테스트</span><span class="keyword">const</span> items = [<span class="number">5</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>];<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">selectionSort</span>(items)); <span class="comment">// [2, 3, 4, 5, 8]</span></code></pre><h3 id="예제-RPG-게임에서의-선택-정렬-사용"><a href="#예제-RPG-게임에서의-선택-정렬-사용" class="headerlink" title="예제: RPG 게임에서의 선택 정렬 사용"></a>예제: RPG 게임에서의 선택 정렬 사용</h3><p>RPG 게임에서 캐릭터의 레벨 목록을 선택 정렬로 정렬한다고 가정해봅시다.</p><pre><code class="highlight javascript"><span class="keyword">function</span> <span class="title function_">selectionSort</span>(<span class="params">array</span>) &#123;  <span class="keyword">let</span> n = array.<span class="property">length</span>;  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;    <span class="keyword">let</span> minIndex = i;    <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; n; j++) &#123;      <span class="keyword">if</span> (array[j] &lt; array[minIndex]) &#123;        minIndex = j;      &#125;    &#125;    <span class="keyword">if</span> (minIndex !== i) &#123;      [array[i], array[minIndex]] = [array[minIndex], array[i]];    &#125;  &#125;  <span class="keyword">return</span> array;&#125;<span class="comment">// 캐릭터의 레벨 목록</span><span class="keyword">const</span> levels = [<span class="number">15</span>, <span class="number">10</span>, <span class="number">25</span>, <span class="number">20</span>, <span class="number">30</span>];<span class="comment">// 레벨 정렬</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">selectionSort</span>(levels)); <span class="comment">// [10, 15, 20, 25, 30]</span></code></pre><h3 id="퀴즈-선택-정렬-이해하기"><a href="#퀴즈-선택-정렬-이해하기" class="headerlink" title="퀴즈: 선택 정렬 이해하기"></a>퀴즈: 선택 정렬 이해하기</h3><p>다음의 레벨 목록을 사용하여 주어진 작업을 수행해보세요!</p><ol><li>레벨 목록을 오름차순으로 정렬하세요.</li><li>정렬된 레벨 목록을 출력하세요.</li></ol><details><summary>정답</summary><ol><li><p>레벨 목록을 오름차순으로 정렬하려면 <code>selectionSort()</code> 함수를 사용합니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> sortedLevels = <span class="title function_">selectionSort</span>(levels);</code></pre></li><li><p>정렬된 레벨 목록을 출력합니다.</p><pre><code class="highlight javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(sortedLevels); <span class="comment">// [10, 15, 20, 25, 30]</span></code></pre></li></ol></details><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>선택 정렬은 이해하고 구현하기 쉬운 정렬 알고리즘으로, 작은 데이터 집합에서 사용하기 적합합니다.</p><p>감사합니다! 다음 시간에는 또 다른 흥미로운 주제로 찾아오겠습니다.</p>]]></content>
      
      
      <categories>
          
          <category> 알고리즘_초급 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Javascript 템플릿 리터럴과 태그드 템플릿(Template Literals and Tagged Templates)</title>
      <link href="/javascript/detail/3/"/>
      <url>/javascript/detail/3/</url>
      
        <content type="html"><![CDATA[<h1 id="Javascript-템플릿-리터럴과-태그드-템플릿-Template-Literals-and-Tagged-Templates"><a href="#Javascript-템플릿-리터럴과-태그드-템플릿-Template-Literals-and-Tagged-Templates" class="headerlink" title="Javascript 템플릿 리터럴과 태그드 템플릿(Template Literals and Tagged Templates)"></a>Javascript 템플릿 리터럴과 태그드 템플릿(Template Literals and Tagged Templates)</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 JavaScript의 템플릿 리터럴과 태그드 템플릿에 대해 알아보겠습니다.<br>템플릿 리터럴을 사용하면 문자열을 더욱 간편하게 조작할 수 있으며, 태그드 템플릿을 사용하면 동적 문자열 생성이 가능합니다.</p><h2 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h2><h3 id="템플릿-리터럴이란"><a href="#템플릿-리터럴이란" class="headerlink" title="템플릿 리터럴이란?"></a>템플릿 리터럴이란?</h3><p>템플릿 리터럴(Template Literals)은 백틱(&#96;&#96;)을 사용하여 문자열을 작성하는 방법입니다. 템플릿 리터럴을 사용하면 문자열 내에서 변수와 표현식을 쉽게 삽입할 수 있습니다.</p><h3 id="태그드-템플릿이란"><a href="#태그드-템플릿이란" class="headerlink" title="태그드 템플릿이란?"></a>태그드 템플릿이란?</h3><p>태그드 템플릿(Tagged Templates)은 템플릿 리터럴에 태그 함수(tag function)를 결합하여 동적 문자열 생성을 가능하게 합니다.</p><h2 id="템플릿-리터럴-사용법"><a href="#템플릿-리터럴-사용법" class="headerlink" title="템플릿 리터럴 사용법"></a>템플릿 리터럴 사용법</h2><p>템플릿 리터럴은 백틱(&#96;)을 사용하여 정의합니다:</p><pre><code class="highlight javascript"><span class="keyword">const</span> name = <span class="string">&quot;John&quot;</span>;<span class="keyword">const</span> greeting = <span class="string">`Hello, <span class="subst">$&#123;name&#125;</span>!`</span>;<span class="variable language_">console</span>.<span class="title function_">log</span>(greeting); <span class="comment">// 출력: Hello, John!</span></code></pre><h3 id="다중-행-문자열"><a href="#다중-행-문자열" class="headerlink" title="다중 행 문자열"></a>다중 행 문자열</h3><p>템플릿 리터럴을 사용하면 여러 줄의 문자열을 쉽게 작성할 수 있습니다:</p><pre><code class="highlight javascript"><span class="keyword">const</span> message = <span class="string">`This is a long message</span><span class="string">that spans multiple lines.`</span>;<span class="variable language_">console</span>.<span class="title function_">log</span>(message);</code></pre><h3 id="표현식-삽입"><a href="#표현식-삽입" class="headerlink" title="표현식 삽입"></a>표현식 삽입</h3><p>템플릿 리터럴 내에서 표현식을 삽입할 수 있습니다:</p><pre><code class="highlight javascript"><span class="keyword">const</span> a = <span class="number">5</span>;<span class="keyword">const</span> b = <span class="number">10</span>;<span class="keyword">const</span> result = <span class="string">`The sum of <span class="subst">$&#123;a&#125;</span> and <span class="subst">$&#123;b&#125;</span> is <span class="subst">$&#123;a + b&#125;</span>.`</span>;<span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 출력: The sum of 5 and 10 is 15.</span></code></pre><h3 id="함수-호출"><a href="#함수-호출" class="headerlink" title="함수 호출"></a>함수 호출</h3><p>템플릿 리터럴 내에서 함수 호출 결과를 삽입할 수 있습니다:</p><pre><code class="highlight javascript"><span class="keyword">function</span> <span class="title function_">capitalize</span>(<span class="params">word</span>) &#123;  <span class="keyword">return</span> word.<span class="title function_">charAt</span>(<span class="number">0</span>).<span class="title function_">toUpperCase</span>() + word.<span class="title function_">slice</span>(<span class="number">1</span>);&#125;<span class="keyword">const</span> name = <span class="string">&quot;john&quot;</span>;<span class="keyword">const</span> greeting = <span class="string">`Hello, <span class="subst">$&#123;capitalize(name)&#125;</span>!`</span>;<span class="variable language_">console</span>.<span class="title function_">log</span>(greeting); <span class="comment">// 출력: Hello, John!</span></code></pre><h3 id="태그드-템플릿-사용-예제"><a href="#태그드-템플릿-사용-예제" class="headerlink" title="태그드 템플릿 사용 예제"></a>태그드 템플릿 사용 예제</h3><h3 id="기본-태그-함수"><a href="#기본-태그-함수" class="headerlink" title="기본 태그 함수"></a>기본 태그 함수</h3><pre><code class="highlight javascript"><span class="keyword">function</span> <span class="title function_">tag</span>(<span class="params">strings, ...values</span>) &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(strings); <span class="comment">// [ &#x27;Hello, &#x27;, &#x27;!&#x27; ]</span>  <span class="variable language_">console</span>.<span class="title function_">log</span>(values); <span class="comment">// [ &#x27;John&#x27; ]</span>  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;strings[<span class="number">0</span>]&#125;</span><span class="subst">$&#123;values[<span class="number">0</span>]&#125;</span><span class="subst">$&#123;strings[<span class="number">1</span>]&#125;</span>`</span>;&#125;<span class="keyword">const</span> name = <span class="string">&quot;John&quot;</span>;<span class="keyword">const</span> message = tag<span class="string">`Hello, <span class="subst">$&#123;name&#125;</span>!`</span>;<span class="variable language_">console</span>.<span class="title function_">log</span>(message); <span class="comment">// Hello, John!</span></code></pre><h3 id="태그-함수로-HTML-escaping"><a href="#태그-함수로-HTML-escaping" class="headerlink" title="태그 함수로 HTML escaping"></a>태그 함수로 HTML escaping</h3><pre><code class="highlight javascript"><span class="keyword">function</span> <span class="title function_">escapeHTML</span>(<span class="params">strings, ...values</span>) &#123;  <span class="keyword">return</span> strings.<span class="title function_">reduce</span>(<span class="function">(<span class="params">result, string, i</span>) =&gt;</span> &#123;    <span class="keyword">const</span> value = values[i - <span class="number">1</span>];    <span class="keyword">const</span> escapedValue = <span class="title class_">String</span>(value)      .<span class="title function_">replace</span>(<span class="regexp">/&amp;/g</span>, <span class="string">&quot;&amp;amp;&quot;</span>)      .<span class="title function_">replace</span>(<span class="regexp">/&lt;/g</span>, <span class="string">&quot;&amp;lt;&quot;</span>)      .<span class="title function_">replace</span>(<span class="regexp">/&gt;/g</span>, <span class="string">&quot;&amp;gt;&quot;</span>)      .<span class="title function_">replace</span>(<span class="regexp">/&quot;/g</span>, <span class="string">&quot;&amp;quot;&quot;</span>)      .<span class="title function_">replace</span>(<span class="regexp">/&#x27;/g</span>, <span class="string">&quot;&amp;#39;&quot;</span>);    <span class="keyword">return</span> result + escapedValue + string;  &#125;);&#125;<span class="keyword">const</span> unsafeString = <span class="string">&quot;&lt;script&gt;alert(&#x27;Hello&#x27;)&lt;/script&gt;&quot;</span>;<span class="keyword">const</span> safeHTML = escapeHTML<span class="string">`&lt;div&gt;<span class="subst">$&#123;unsafeString&#125;</span>&lt;/div&gt;`</span>;<span class="variable language_">console</span>.<span class="title function_">log</span>(safeHTML); <span class="comment">// &lt;div&gt;&amp;lt;script&amp;gt;alert(&amp;#39;Hello&amp;#39;)&amp;lt;/script&amp;gt;&lt;/div&gt;</span></code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 JavaScript에서 템플릿 리터럴을 사용하는 방법에 대해 알아보았습니다.<br>템플릿 리터럴은 문자열 내에서 변수와 표현식을 쉽게 사용할 수 있는 편리한 방법을 제공합니다.<br>그리고 태그드 템플릿을 사용하면 동적 문자열 생성을 효율적으로 할 수 있습니다.<br>다음 시간에는 디폴트 파라미터에 대해 알아보겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> JS_디테일 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>알고리즘[초급] 버블 정렬(Bubble Sort)</title>
      <link href="/algorithm/newb/7/"/>
      <url>/algorithm/newb/7/</url>
      
        <content type="html"><![CDATA[<h1 id="알고리즘-초급-버블-정렬-Bubble-Sort"><a href="#알고리즘-초급-버블-정렬-Bubble-Sort" class="headerlink" title="알고리즘[초급] 버블 정렬(Bubble Sort)"></a>알고리즘[초급] 버블 정렬(Bubble Sort)</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 버블 정렬(Bubble Sort)에 대해 알아보겠습니다.</p><h2 id="버블-정렬-Bubble-Sort-란-무엇인가"><a href="#버블-정렬-Bubble-Sort-란-무엇인가" class="headerlink" title="버블 정렬(Bubble Sort)란 무엇인가?"></a>버블 정렬(Bubble Sort)란 무엇인가?</h2><p>버블 정렬은 인접한 두 요소를 비교하여 순서가 잘못된 경우 위치를 교환하는 방식으로 리스트를 정렬하는 알고리즘입니다.<br>이 과정이 리스트가 정렬될 때까지 반복되며, 가장 큰 값이 반복마다 리스트의 끝으로 이동하기 때문에 버블 정렬이라고 불립니다.<br>예를 들어, RPG 게임에서 캐릭터의 경험치를 정렬하는 작업을 버블 정렬로 수행할 수 있습니다.</p><h3 id="버블-정렬의-특징"><a href="#버블-정렬의-특징" class="headerlink" title="버블 정렬의 특징"></a>버블 정렬의 특징</h3><ul><li><strong>단순성</strong>: 이해하고 구현하기 매우 쉽습니다.</li><li><strong>시간 복잡도</strong>: 최악의 경우 O(n^2)으로, 작은 데이터 집합에서만 효율적입니다.</li><li><strong>안정성</strong>: 같은 값의 요소들이 정렬 후에도 원래 순서를 유지합니다.</li></ul><h3 id="버블-정렬의-구현"><a href="#버블-정렬의-구현" class="headerlink" title="버블 정렬의 구현"></a>버블 정렬의 구현</h3><p>JavaScript로 버블 정렬을 구현하는 방법은 다음과 같습니다:</p><h4 id="버블-정렬-함수"><a href="#버블-정렬-함수" class="headerlink" title="버블 정렬 함수"></a>버블 정렬 함수</h4><pre><code class="highlight javascript"><span class="keyword">function</span> <span class="title function_">bubbleSort</span>(<span class="params">array</span>) &#123;  <span class="keyword">let</span> n = array.<span class="property">length</span>;  <span class="keyword">let</span> swapped;  <span class="keyword">do</span> &#123;    swapped = <span class="literal">false</span>;    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;      <span class="keyword">if</span> (array[i] &gt; array[i + <span class="number">1</span>]) &#123;        <span class="comment">// 요소 교환</span>        [array[i], array[i + <span class="number">1</span>]] = [array[i + <span class="number">1</span>], array[i]];        swapped = <span class="literal">true</span>;      &#125;    &#125;    n--; <span class="comment">// 마지막 요소는 정렬이 완료된 상태이므로 제외</span>  &#125; <span class="keyword">while</span> (swapped);  <span class="keyword">return</span> array;&#125;<span class="comment">// 테스트</span><span class="keyword">const</span> items = [<span class="number">5</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>];<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">bubbleSort</span>(items)); <span class="comment">// [2, 3, 4, 5, 8]</span></code></pre><h3 id="예제-RPG-게임에서의-버블-정렬-사용"><a href="#예제-RPG-게임에서의-버블-정렬-사용" class="headerlink" title="예제: RPG 게임에서의 버블 정렬 사용"></a>예제: RPG 게임에서의 버블 정렬 사용</h3><p>RPG 게임에서 캐릭터의 경험치 목록을 버블 정렬로 정렬한다고 가정해봅시다.</p><pre><code class="highlight javascript"><span class="keyword">function</span> <span class="title function_">bubbleSort</span>(<span class="params">array</span>) &#123;  <span class="keyword">let</span> n = array.<span class="property">length</span>;  <span class="keyword">let</span> swapped;  <span class="keyword">do</span> &#123;    swapped = <span class="literal">false</span>;    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;      <span class="keyword">if</span> (array[i] &gt; array[i + <span class="number">1</span>]) &#123;        <span class="comment">// 요소 교환</span>        [array[i], array[i + <span class="number">1</span>]] = [array[i + <span class="number">1</span>], array[i]];        swapped = <span class="literal">true</span>;      &#125;    &#125;    n--; <span class="comment">// 마지막 요소는 정렬이 완료된 상태이므로 제외</span>  &#125; <span class="keyword">while</span> (swapped);  <span class="keyword">return</span> array;&#125;<span class="comment">// 캐릭터의 경험치 목록</span><span class="keyword">const</span> experiencePoints = [<span class="number">1200</span>, <span class="number">900</span>, <span class="number">1500</span>, <span class="number">800</span>, <span class="number">2000</span>];<span class="comment">// 경험치 정렬</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">bubbleSort</span>(experiencePoints)); <span class="comment">// [800, 900, 1200, 1500, 2000]</span></code></pre><h3 id="퀴즈-버블-정렬-이해하기"><a href="#퀴즈-버블-정렬-이해하기" class="headerlink" title="퀴즈: 버블 정렬 이해하기"></a>퀴즈: 버블 정렬 이해하기</h3><p>다음의 경험치 목록을 사용하여 주어진 작업을 수행해보세요!</p><ol><li>경험치 목록을 오름차순으로 정렬하세요.</li><li>정렬된 경험치 목록을 출력하세요.</li></ol><details><summary>정답</summary><ol><li><p>경험치 목록을 오름차순으로 정렬하려면 <code>bubbleSort()</code> 함수를 사용합니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> sortedExperience = <span class="title function_">bubbleSort</span>(experiencePoints);</code></pre></li><li><p>정렬된 경험치 목록을 출력합니다.</p><pre><code class="highlight javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(sortedExperience); <span class="comment">// [800, 900, 1200, 1500, 2000]</span></code></pre></li></ol></details><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>버블 정렬은 이해하고 구현하기 쉬운 정렬 알고리즘으로, 작은 데이터 집합에서 사용하기 적합합니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> 알고리즘_초급 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue 슬롯(Slots)</title>
      <link href="/vue/17/"/>
      <url>/vue/17/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-슬롯-Slots"><a href="#Vue-슬롯-Slots" class="headerlink" title="Vue 슬롯(Slots)"></a>Vue 슬롯(Slots)</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 Vue.js의 **슬롯(Slots)**에 대해 알아보겠습니다.<br>슬롯은 Vue 컴포넌트에서 부모 컴포넌트가 자식 컴포넌트에 콘텐츠를 전달할 수 있게 해주는 기능입니다. 이를 통해 컴포넌트를 더 유연하고 재사용 가능하게 만들 수 있습니다.</p><h2 id="1-슬롯-Slots-이란"><a href="#1-슬롯-Slots-이란" class="headerlink" title="1. 슬롯(Slots)이란?"></a>1. 슬롯(Slots)이란?</h2><h3 id="슬롯의-개념"><a href="#슬롯의-개념" class="headerlink" title="슬롯의 개념"></a>슬롯의 개념</h3><p>슬롯은 부모 컴포넌트가 자식 컴포넌트의 특정 위치에 HTML 콘텐츠를 삽입할 수 있는 방법을 제공합니다. 이를 통해 자식 컴포넌트를 더욱 유연하게 만들 수 있으며, 다양한 상황에서 재사용할 수 있습니다.</p><h3 id="기본-슬롯"><a href="#기본-슬롯" class="headerlink" title="기본 슬롯"></a>기본 슬롯</h3><p>기본 슬롯은 자식 컴포넌트에 콘텐츠를 삽입할 수 있는 가장 간단한 형태의 슬롯입니다.</p><pre><code class="highlight vue">&lt;!-- 부모 컴포넌트 --&gt;&lt;template&gt;  &lt;child-component&gt;    &lt;p&gt;이 콘텐츠는 부모 컴포넌트에서 전달되었습니다.&lt;/p&gt;  &lt;/child-component&gt;&lt;/template&gt;&lt;!-- 자식 컴포넌트 --&gt;&lt;template&gt;  &lt;div&gt;    &lt;slot&gt;&lt;/slot&gt;  &lt;/div&gt;&lt;/template&gt;</code></pre><p>위 예제에서 <code>&lt;slot&gt;&lt;/slot&gt;</code> 태그는 부모 컴포넌트에서 전달된 콘텐츠가 삽입될 위치를 나타냅니다.</p><h2 id="2-이름-있는-슬롯-Named-Slots"><a href="#2-이름-있는-슬롯-Named-Slots" class="headerlink" title="2. 이름 있는 슬롯(Named Slots)"></a>2. 이름 있는 슬롯(Named Slots)</h2><p>이름 있는 슬롯을 사용하면 여러 개의 슬롯을 정의할 수 있으며, 부모 컴포넌트에서 특정 슬롯에 콘텐츠를 삽입할 수 있습니다.</p><pre><code class="highlight vue">&lt;!-- 부모 컴포넌트 --&gt;&lt;template&gt;  &lt;child-component&gt;    &lt;template #header&gt;      &lt;h1&gt;헤더 콘텐츠&lt;/h1&gt;    &lt;/template&gt;    &lt;template #footer&gt;      &lt;p&gt;푸터 콘텐츠&lt;/p&gt;    &lt;/template&gt;  &lt;/child-component&gt;&lt;/template&gt;&lt;!-- 자식 컴포넌트 --&gt;&lt;template&gt;  &lt;div&gt;    &lt;header&gt;      &lt;slot name=&quot;header&quot;&gt;&lt;/slot&gt;    &lt;/header&gt;    &lt;footer&gt;      &lt;slot name=&quot;footer&quot;&gt;&lt;/slot&gt;    &lt;/footer&gt;  &lt;/div&gt;&lt;/template&gt;</code></pre><p>위 예제에서 부모 컴포넌트는 <code>#슬롯이름</code>을 사용해 각 슬롯에 콘텐츠를 전달합니다. 자식 컴포넌트는 <code>slot</code> 태그에 <code>name</code> 속성을 추가하여 이름 있는 슬롯을 정의합니다.</p><h2 id="3-슬롯-Props"><a href="#3-슬롯-Props" class="headerlink" title="3. 슬롯 Props"></a>3. 슬롯 Props</h2><p>슬롯 Props를 사용하면 자식 컴포넌트에서 부모 컴포넌트로 데이터를 전달할 수 있습니다. 이를 통해 부모 컴포넌트가 자식 컴포넌트의 데이터를 기반으로 렌더링을 제어할 수 있습니다.</p><pre><code class="highlight vue">&lt;!-- 자식 컴포넌트 --&gt;&lt;template&gt;  &lt;div&gt;    &lt;slot :message=&quot;greeting&quot;&gt;&lt;/slot&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123;  data() &#123;    return &#123;      greeting: &quot;안녕하세요, Vue.js!&quot;,    &#125;;  &#125;,&#125;;&lt;/script&gt;&lt;!-- 부모 컴포넌트 --&gt;&lt;template&gt;  &lt;child-component&gt;    &lt;template #default=&quot;slotProps&quot;&gt;      &lt;p&gt;&#123;&#123; slotProps.message &#125;&#125;&lt;/p&gt;    &lt;/template&gt;  &lt;/child-component&gt;&lt;/template&gt;</code></pre><p>위 예제에서 자식 컴포넌트는 <code>greeting</code> 데이터를 <code>message</code>라는 슬롯 Props로 전달하며, 부모 컴포넌트에서 이를 받아 화면에 출력합니다.</p><h2 id="4-스코프-슬롯-Scope-Slots-과-그-활용"><a href="#4-스코프-슬롯-Scope-Slots-과-그-활용" class="headerlink" title="4. 스코프 슬롯(Scope Slots)과 그 활용"></a>4. 스코프 슬롯(Scope Slots)과 그 활용</h2><h3 id="스코프-슬롯-Scope-Slots-의-개념"><a href="#스코프-슬롯-Scope-Slots-의-개념" class="headerlink" title="스코프 슬롯(Scope Slots)의 개념"></a>스코프 슬롯(Scope Slots)의 개념</h3><p>스코프 슬롯은 부모 컴포넌트가 자식 컴포넌트의 데이터를 기반으로 콘텐츠를 커스터마이징할 수 있는 기능을 제공합니다. 이를 통해 더 유연하고 강력한 컴포넌트를 만들 수 있습니다.</p><h3 id="스코프-슬롯-예제"><a href="#스코프-슬롯-예제" class="headerlink" title="스코프 슬롯 예제"></a>스코프 슬롯 예제</h3><pre><code class="highlight vue">&lt;!-- 자식 컴포넌트 --&gt;&lt;template&gt;  &lt;div&gt;    &lt;slot      :item=&quot;item&quot;      :index=&quot;index&quot;      v-for=&quot;(item, index) in items&quot;      :key=&quot;index&quot;    &gt;&lt;/slot&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123;  data() &#123;    return &#123;      items: [&quot;검&quot;, &quot;방패&quot;, &quot;포션&quot;],    &#125;;  &#125;,&#125;;&lt;/script&gt;&lt;!-- 부모 컴포넌트 --&gt;&lt;template&gt;  &lt;child-component&gt;    &lt;template #default=&quot;&#123; item, index &#125;&quot;&gt;      &lt;p&gt;&#123;&#123; index + 1 &#125;&#125;: &#123;&#123; item &#125;&#125;&lt;/p&gt;    &lt;/template&gt;  &lt;/child-component&gt;&lt;/template&gt;</code></pre><p>위 예제에서 자식 컴포넌트는 <code>items</code> 배열을 반복하면서 각 항목과 인덱스를 슬롯 Props로 전달하고, 부모 컴포넌트는 이를 기반으로 콘텐츠를 커스터마이징합니다.</p><h2 id="5-Composition-API와-슬롯-사용"><a href="#5-Composition-API와-슬롯-사용" class="headerlink" title="5. Composition API와 슬롯 사용"></a>5. Composition API와 슬롯 사용</h2><blockquote><p>만약 Vue가 처음이시라면 이 섹션은 건너 뛰어주세요!</p></blockquote><p>Vue3에 추가된 <a href="/vue/24/">Composition API</a>를 사용하여 컴포넌트를 더욱 유연하고 모듈화된 방식으로 작성할 수 있습니다.<br>Composition API를 사용하면 <code>setup</code> 함수 내에서 슬롯 콘텐츠와 Props를 다룰 수 있습니다.</p><h3 id="Composition-API를-사용한-기본-슬롯"><a href="#Composition-API를-사용한-기본-슬롯" class="headerlink" title="Composition API를 사용한 기본 슬롯"></a>Composition API를 사용한 기본 슬롯</h3><pre><code class="highlight vue">&lt;!-- 자식 컴포넌트 --&gt;&lt;template&gt;  &lt;div&gt;    &lt;slot&gt;&lt;/slot&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123;  setup(props, &#123; slots &#125;) &#123;    return &#123;      slots,    &#125;;  &#125;,&#125;;&lt;/script&gt;&lt;!-- 부모 컴포넌트 --&gt;&lt;template&gt;  &lt;child-component&gt;    &lt;p&gt;이 콘텐츠는 부모 컴포넌트에서 전달되었습니다.&lt;/p&gt;  &lt;/child-component&gt;&lt;/template&gt;</code></pre><p>이 예제에서 자식 컴포넌트는 <code>slots</code> 객체를 사용하여 슬롯을 관리하며, 부모 컴포넌트는 기본 슬롯을 통해 콘텐츠를 전달합니다.</p><h3 id="Composition-API를-사용한-스코프-슬롯"><a href="#Composition-API를-사용한-스코프-슬롯" class="headerlink" title="Composition API를 사용한 스코프 슬롯"></a>Composition API를 사용한 스코프 슬롯</h3><pre><code class="highlight vue">&lt;!-- 자식 컴포넌트 --&gt;&lt;template&gt;  &lt;div&gt;    &lt;slot      :item=&quot;item&quot;      :index=&quot;index&quot;      v-for=&quot;(item, index) in items&quot;      :key=&quot;index&quot;    &gt;&lt;/slot&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import &#123; ref &#125; from &quot;vue&quot;;export default &#123;  setup() &#123;    const items = ref([&quot;검&quot;, &quot;방패&quot;, &quot;포션&quot;]);    return &#123;      items,    &#125;;  &#125;,&#125;;&lt;/script&gt;&lt;!-- 부모 컴포넌트 --&gt;&lt;template&gt;  &lt;child-component&gt;    &lt;template #default=&quot;&#123; item, index &#125;&quot;&gt;      &lt;p&gt;&#123;&#123; index + 1 &#125;&#125;: &#123;&#123; item &#125;&#125;&lt;/p&gt;    &lt;/template&gt;  &lt;/child-component&gt;&lt;/template&gt;</code></pre><p>이 예제에서는 <code>ref</code>를 사용해 반응형 <code>items</code> 배열을 선언하고, 스코프 슬롯을 통해 부모 컴포넌트에서 이를 기반으로 콘텐츠를 렌더링합니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 Vue.js의 <strong>슬롯(Slots)</strong> 기능에 대해 알아보았습니다. 슬롯은 컴포넌트 간의 콘텐츠 전달을 가능하게 하여 컴포넌트를 더 유연하고 재사용 가능하게 만들어 줍니다.<br><strong>기본 슬롯</strong>, <strong>이름 있는 슬롯(Named Slots)</strong>, <strong>슬롯 Props</strong>, **스코프 슬롯(Scope Slots)**을 적절히 활용하여 다양한 상황에서 강력한 컴포넌트를 만들어 보세요!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>알고리즘[초급] 이진 탐색(Binary Search)</title>
      <link href="/algorithm/newb/6/"/>
      <url>/algorithm/newb/6/</url>
      
        <content type="html"><![CDATA[<h1 id="알고리즘-초급-이진-탐색-Binary-Search"><a href="#알고리즘-초급-이진-탐색-Binary-Search" class="headerlink" title="알고리즘[초급] 이진 탐색(Binary Search)"></a>알고리즘[초급] 이진 탐색(Binary Search)</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 이진 탐색(Binary Search)에 대해 알아보겠습니다.</p><h2 id="이진-탐색-Binary-Search-란-무엇인가"><a href="#이진-탐색-Binary-Search-란-무엇인가" class="headerlink" title="이진 탐색(Binary Search)란 무엇인가?"></a>이진 탐색(Binary Search)란 무엇인가?</h2><p>이진 탐색은 정렬된 배열에서 원하는 값을 찾기 위해 배열을 반으로 나누어 탐색 범위를 좁혀가며 찾는 알고리즘입니다. 각 단계에서 중간 값을 확인하여 탐색 범위를 절반으로 줄이기 때문에 매우 효율적입니다. 예를 들어, RPG 게임에서 정렬된 아이템 목록에서 특정 아이템을 찾는 작업을 이진 탐색으로 수행할 수 있습니다.</p><h3 id="이진-탐색의-특징"><a href="#이진-탐색의-특징" class="headerlink" title="이진 탐색의 특징"></a>이진 탐색의 특징</h3><ul><li><strong>효율성</strong>: 시간 복잡도가 O(log n)으로, 매우 빠르게 탐색할 수 있습니다.</li><li><strong>정렬된 배열</strong>: 이진 탐색을 사용하려면 배열이 정렬되어 있어야 합니다.</li><li><strong>반복적&#x2F;재귀적 구현</strong>: 이진 탐색은 반복문이나 재귀를 사용하여 구현할 수 있습니다.</li></ul><h3 id="이진-탐색의-구현"><a href="#이진-탐색의-구현" class="headerlink" title="이진 탐색의 구현"></a>이진 탐색의 구현</h3><p>JavaScript로 이진 탐색을 구현하는 방법은 다음과 같습니다:</p><h4 id="반복적-이진-탐색"><a href="#반복적-이진-탐색" class="headerlink" title="반복적 이진 탐색"></a>반복적 이진 탐색</h4><pre><code class="highlight javascript"><span class="keyword">function</span> <span class="title function_">binarySearch</span>(<span class="params">array, target</span>) &#123;  <span class="keyword">let</span> left = <span class="number">0</span>;  <span class="keyword">let</span> right = array.<span class="property">length</span> - <span class="number">1</span>;  <span class="keyword">while</span> (left &lt;= right) &#123;    <span class="keyword">const</span> mid = <span class="title class_">Math</span>.<span class="title function_">floor</span>((left + right) / <span class="number">2</span>);    <span class="keyword">if</span> (array[mid] === target) &#123;      <span class="keyword">return</span> mid; <span class="comment">// 찾은 경우 인덱스 반환</span>    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (array[mid] &lt; target) &#123;      left = mid + <span class="number">1</span>;    &#125; <span class="keyword">else</span> &#123;      right = mid - <span class="number">1</span>;    &#125;  &#125;  <span class="keyword">return</span> -<span class="number">1</span>; <span class="comment">// 찾지 못한 경우 -1 반환</span>&#125;<span class="comment">// 테스트</span><span class="keyword">const</span> items = [<span class="string">&quot;Bow&quot;</span>, <span class="string">&quot;Helmet&quot;</span>, <span class="string">&quot;Potion&quot;</span>, <span class="string">&quot;Shield&quot;</span>, <span class="string">&quot;Sword&quot;</span>];<span class="keyword">const</span> target = <span class="string">&quot;Potion&quot;</span>;<span class="keyword">const</span> index = <span class="title function_">binarySearch</span>(items, target);<span class="variable language_">console</span>.<span class="title function_">log</span>(index); <span class="comment">// 2 (Potion의 인덱스)</span></code></pre><h4 id="재귀적-이진-탐색"><a href="#재귀적-이진-탐색" class="headerlink" title="재귀적 이진 탐색"></a>재귀적 이진 탐색</h4><pre><code class="highlight javascript"><span class="keyword">function</span> <span class="title function_">binarySearchRecursive</span>(<span class="params"></span><span class="params">  array,</span><span class="params">  target,</span><span class="params">  left = <span class="number">0</span>,</span><span class="params">  right = array.length - <span class="number">1</span></span><span class="params"></span>) &#123;  <span class="keyword">if</span> (left &gt; right) &#123;    <span class="keyword">return</span> -<span class="number">1</span>; <span class="comment">// 찾지 못한 경우 -1 반환</span>  &#125;  <span class="keyword">const</span> mid = <span class="title class_">Math</span>.<span class="title function_">floor</span>((left + right) / <span class="number">2</span>);  <span class="keyword">if</span> (array[mid] === target) &#123;    <span class="keyword">return</span> mid; <span class="comment">// 찾은 경우 인덱스 반환</span>  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (array[mid] &lt; target) &#123;    <span class="keyword">return</span> <span class="title function_">binarySearchRecursive</span>(array, target, mid + <span class="number">1</span>, right);  &#125; <span class="keyword">else</span> &#123;    <span class="keyword">return</span> <span class="title function_">binarySearchRecursive</span>(array, target, left, mid - <span class="number">1</span>);  &#125;&#125;<span class="comment">// 테스트</span><span class="keyword">const</span> itemsRecursive = [<span class="string">&quot;Bow&quot;</span>, <span class="string">&quot;Helmet&quot;</span>, <span class="string">&quot;Potion&quot;</span>, <span class="string">&quot;Shield&quot;</span>, <span class="string">&quot;Sword&quot;</span>];<span class="keyword">const</span> targetRecursive = <span class="string">&quot;Potion&quot;</span>;<span class="keyword">const</span> indexRecursive = <span class="title function_">binarySearchRecursive</span>(itemsRecursive, targetRecursive);<span class="variable language_">console</span>.<span class="title function_">log</span>(indexRecursive); <span class="comment">// 2 (Potion의 인덱스)</span></code></pre><h3 id="예제-RPG-게임에서의-이진-탐색-사용"><a href="#예제-RPG-게임에서의-이진-탐색-사용" class="headerlink" title="예제: RPG 게임에서의 이진 탐색 사용"></a>예제: RPG 게임에서의 이진 탐색 사용</h3><p>RPG 게임에서 정렬된 아이템 목록에서 특정 아이템을 찾는 작업을 이진 탐색으로 구현해봅시다.</p><pre><code class="highlight javascript"><span class="keyword">function</span> <span class="title function_">binarySearch</span>(<span class="params">array, target</span>) &#123;  <span class="keyword">let</span> left = <span class="number">0</span>;  <span class="keyword">let</span> right = array.<span class="property">length</span> - <span class="number">1</span>;  <span class="keyword">while</span> (left &lt;= right) &#123;    <span class="keyword">const</span> mid = <span class="title class_">Math</span>.<span class="title function_">floor</span>((left + right) / <span class="number">2</span>);    <span class="keyword">if</span> (array[mid] === target) &#123;      <span class="keyword">return</span> mid; <span class="comment">// 찾은 경우 인덱스 반환</span>    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (array[mid] &lt; target) &#123;      left = mid + <span class="number">1</span>;    &#125; <span class="keyword">else</span> &#123;      right = mid - <span class="number">1</span>;    &#125;  &#125;  <span class="keyword">return</span> -<span class="number">1</span>; <span class="comment">// 찾지 못한 경우 -1 반환</span>&#125;<span class="comment">// 정렬된 아이템 목록</span><span class="keyword">const</span> inventory = [<span class="string">&quot;Bow&quot;</span>, <span class="string">&quot;Helmet&quot;</span>, <span class="string">&quot;Potion&quot;</span>, <span class="string">&quot;Shield&quot;</span>, <span class="string">&quot;Sword&quot;</span>];<span class="comment">// 특정 아이템 찾기</span><span class="keyword">const</span> itemToFind = <span class="string">&quot;Shield&quot;</span>;<span class="keyword">const</span> itemIndex = <span class="title function_">binarySearch</span>(inventory, itemToFind);<span class="keyword">if</span> (itemIndex !== -<span class="number">1</span>) &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;itemToFind&#125;</span> found at index <span class="subst">$&#123;itemIndex&#125;</span>`</span>);&#125; <span class="keyword">else</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;itemToFind&#125;</span> not found in inventory`</span>);&#125;</code></pre><h3 id="퀴즈-이진-탐색-이해하기"><a href="#퀴즈-이진-탐색-이해하기" class="headerlink" title="퀴즈: 이진 탐색 이해하기"></a>퀴즈: 이진 탐색 이해하기</h3><p>다음의 정렬된 아이템 목록을 사용하여 주어진 작업을 수행해보세요!</p><ol><li>“Helmet” 아이템을 찾고, 인덱스를 출력하세요.</li><li>“Arrow” 아이템을 찾고, 인덱스를 출력하세요.</li></ol><details><summary>정답</summary><ol><li><p>“Helmet” 아이템을 찾으려면 <code>binarySearch()</code> 함수를 사용합니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> helmetIndex = <span class="title function_">binarySearch</span>(inventory, <span class="string">&quot;Helmet&quot;</span>);<span class="variable language_">console</span>.<span class="title function_">log</span>(helmetIndex); <span class="comment">// 1 (Helmet의 인덱스)</span></code></pre></li><li><p>“Arrow” 아이템을 찾으려면 <code>binarySearch()</code> 함수를 사용합니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> arrowIndex = <span class="title function_">binarySearch</span>(inventory, <span class="string">&quot;Arrow&quot;</span>);<span class="variable language_">console</span>.<span class="title function_">log</span>(arrowIndex); <span class="comment">// -1 (Arrow는 인벤토리에 없음)</span></code></pre></li></ol></details><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이진 탐색은 정렬된 배열에서 매우 효율적으로 요소를 찾을 수 있는 알고리즘입니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> 알고리즘_초급 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>알고리즘[초급] 순차 탐색(Linear Search)</title>
      <link href="/algorithm/newb/5/"/>
      <url>/algorithm/newb/5/</url>
      
        <content type="html"><![CDATA[<h1 id="순차-탐색-Linear-Search"><a href="#순차-탐색-Linear-Search" class="headerlink" title="순차 탐색(Linear Search)"></a>순차 탐색(Linear Search)</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 순차 탐색(Linear Search)에 대해 알아보겠습니다.</p><h2 id="순차-탐색-Linear-Search-란-무엇인가"><a href="#순차-탐색-Linear-Search-란-무엇인가" class="headerlink" title="순차 탐색(Linear Search)란 무엇인가?"></a>순차 탐색(Linear Search)란 무엇인가?</h2><p>순차 탐색은 데이터 구조의 처음부터 끝까지 차례로 요소를 비교하여 원하는 값을 찾는 탐색 알고리즘입니다. 가장 단순하고 이해하기 쉬운 탐색 방법으로, 배열이나 연결 리스트와 같은 자료구조에서 사용할 수 있습니다. 예를 들어, RPG 게임에서 캐릭터의 인벤토리에서 특정 아이템을 찾는 작업을 순차 탐색으로 수행할 수 있습니다.</p><h3 id="순차-탐색의-특징"><a href="#순차-탐색의-특징" class="headerlink" title="순차 탐색의 특징"></a>순차 탐색의 특징</h3><ul><li><strong>단순성</strong>: 구현이 매우 간단합니다.</li><li><strong>범용성</strong>: 정렬된 데이터와 정렬되지 않은 데이터 모두에서 사용할 수 있습니다.</li><li><strong>시간 복잡도</strong>: 최악의 경우 O(n)입니다. 데이터의 수가 많아질수록 탐색 시간이 길어집니다.</li></ul><h3 id="순차-탐색의-구현"><a href="#순차-탐색의-구현" class="headerlink" title="순차 탐색의 구현"></a>순차 탐색의 구현</h3><p>JavaScript로 순차 탐색을 구현하는 방법은 다음과 같습니다:</p><h4 id="순차-탐색-함수"><a href="#순차-탐색-함수" class="headerlink" title="순차 탐색 함수"></a>순차 탐색 함수</h4><pre><code class="highlight javascript"><span class="keyword">function</span> <span class="title function_">linearSearch</span>(<span class="params">array, target</span>) &#123;  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; array.<span class="property">length</span>; i++) &#123;    <span class="keyword">if</span> (array[i] === target) &#123;      <span class="keyword">return</span> i; <span class="comment">// 찾은 경우 인덱스 반환</span>    &#125;  &#125;  <span class="keyword">return</span> -<span class="number">1</span>; <span class="comment">// 찾지 못한 경우 -1 반환</span>&#125;<span class="comment">// 테스트</span><span class="keyword">const</span> items = [<span class="string">&quot;Sword&quot;</span>, <span class="string">&quot;Shield&quot;</span>, <span class="string">&quot;Potion&quot;</span>, <span class="string">&quot;Helmet&quot;</span>];<span class="keyword">const</span> target = <span class="string">&quot;Potion&quot;</span>;<span class="keyword">const</span> index = <span class="title function_">linearSearch</span>(items, target);<span class="variable language_">console</span>.<span class="title function_">log</span>(index); <span class="comment">// 2 (Potion의 인덱스)</span></code></pre><h3 id="예제-RPG-게임에서의-순차-탐색-사용"><a href="#예제-RPG-게임에서의-순차-탐색-사용" class="headerlink" title="예제: RPG 게임에서의 순차 탐색 사용"></a>예제: RPG 게임에서의 순차 탐색 사용</h3><p>RPG 게임에서 캐릭터의 인벤토리에 특정 아이템이 있는지 확인하는 작업을 순차 탐색으로 구현해봅시다.</p><pre><code class="highlight javascript"><span class="keyword">function</span> <span class="title function_">linearSearch</span>(<span class="params">array, target</span>) &#123;  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; array.<span class="property">length</span>; i++) &#123;    <span class="keyword">if</span> (array[i] === target) &#123;      <span class="keyword">return</span> i; <span class="comment">// 찾은 경우 인덱스 반환</span>    &#125;  &#125;  <span class="keyword">return</span> -<span class="number">1</span>; <span class="comment">// 찾지 못한 경우 -1 반환</span>&#125;<span class="comment">// 캐릭터의 인벤토리</span><span class="keyword">const</span> inventory = [<span class="string">&quot;Sword&quot;</span>, <span class="string">&quot;Shield&quot;</span>, <span class="string">&quot;Potion&quot;</span>, <span class="string">&quot;Helmet&quot;</span>];<span class="comment">// 특정 아이템 찾기</span><span class="keyword">const</span> itemToFind = <span class="string">&quot;Shield&quot;</span>;<span class="keyword">const</span> itemIndex = <span class="title function_">linearSearch</span>(inventory, itemToFind);<span class="keyword">if</span> (itemIndex !== -<span class="number">1</span>) &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;itemToFind&#125;</span> found at index <span class="subst">$&#123;itemIndex&#125;</span>`</span>);&#125; <span class="keyword">else</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;itemToFind&#125;</span> not found in inventory`</span>);&#125;</code></pre><h3 id="퀴즈-순차-탐색-이해하기"><a href="#퀴즈-순차-탐색-이해하기" class="headerlink" title="퀴즈: 순차 탐색 이해하기"></a>퀴즈: 순차 탐색 이해하기</h3><p>다음의 인벤토리를 사용하여 주어진 작업을 수행해보세요!</p><ol><li>“Helmet” 아이템을 찾고, 인덱스를 출력하세요.</li><li>“Bow” 아이템을 찾고, 인덱스를 출력하세요.</li></ol><details><summary>정답</summary><ol><li><p>“Helmet” 아이템을 찾으려면 <code>linearSearch()</code> 함수를 사용합니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> helmetIndex = <span class="title function_">linearSearch</span>(inventory, <span class="string">&quot;Helmet&quot;</span>);<span class="variable language_">console</span>.<span class="title function_">log</span>(helmetIndex); <span class="comment">// 3 (Helmet의 인덱스)</span></code></pre></li><li><p>“Bow” 아이템을 찾으려면 <code>linearSearch()</code> 함수를 사용합니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> bowIndex = <span class="title function_">linearSearch</span>(inventory, <span class="string">&quot;Bow&quot;</span>);<span class="variable language_">console</span>.<span class="title function_">log</span>(bowIndex); <span class="comment">// -1 (Bow는 인벤토리에 없음)</span></code></pre></li></ol></details><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>순차 탐색은 단순하고 구현이 쉬운 탐색 알고리즘으로, 작은 데이터 집합이나 정렬되지 않은 데이터에서 유용하게 사용할 수 있습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> 알고리즘_초급 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>알고리즘[초급] 큐(Queue)</title>
      <link href="/algorithm/newb/4/"/>
      <url>/algorithm/newb/4/</url>
      
        <content type="html"><![CDATA[<h1 id="알고리즘-초급-큐-Queue"><a href="#알고리즘-초급-큐-Queue" class="headerlink" title="알고리즘[초급] 큐(Queue)"></a>알고리즘[초급] 큐(Queue)</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 큐(Queue)에 대해 알아보겠습니다.</p><h2 id="큐-Queue-란-무엇인가"><a href="#큐-Queue-란-무엇인가" class="headerlink" title="큐(Queue)란 무엇인가?"></a>큐(Queue)란 무엇인가?</h2><p>큐는 데이터가 한쪽 끝에서 추가되고 반대쪽 끝에서 제거되는 자료구조입니다. 큐는 선입선출(FIFO, First In First Out) 방식으로 동작하며, 가장 먼저 추가된 요소가 가장 먼저 제거됩니다. 예를 들어, RPG 게임에서 캐릭터가 수행할 작업 목록이나 적 대기열을 큐로 관리할 수 있습니다.</p><h3 id="큐의-특징"><a href="#큐의-특징" class="headerlink" title="큐의 특징"></a>큐의 특징</h3><ul><li><strong>선입선출(FIFO)</strong>: 가장 먼저 추가된 요소가 가장 먼저 제거됩니다.</li><li><strong>동적 크기</strong>: 큐는 필요에 따라 요소를 추가하거나 제거할 수 있습니다.</li><li><strong>제한된 접근</strong>: 큐의 요소는 앞쪽(front)과 뒤쪽(rear)에서만 접근할 수 있습니다.</li></ul><h3 id="큐의-주요-연산"><a href="#큐의-주요-연산" class="headerlink" title="큐의 주요 연산"></a>큐의 주요 연산</h3><ol><li><strong>enqueue</strong>: 큐의 뒤쪽에 요소를 추가합니다.</li><li><strong>dequeue</strong>: 큐의 앞쪽에서 요소를 제거합니다.</li><li><strong>front</strong>: 큐의 앞쪽에 있는 요소를 확인합니다.</li><li><strong>isEmpty</strong>: 큐가 비어 있는지 확인합니다.</li></ol><h3 id="큐의-구현"><a href="#큐의-구현" class="headerlink" title="큐의 구현"></a>큐의 구현</h3><p>JavaScript로 큐를 구현하는 방법은 다음과 같습니다:</p><h4 id="큐-클래스"><a href="#큐-클래스" class="headerlink" title="큐 클래스"></a>큐 클래스</h4><pre><code class="highlight javascript"><span class="keyword">class</span> <span class="title class_">Queue</span> &#123;  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;    <span class="variable language_">this</span>.<span class="property">items</span> = [];  &#125;  <span class="comment">// 큐의 뒤쪽에 요소 추가</span>  <span class="title function_">enqueue</span>(<span class="params">element</span>) &#123;    <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">push</span>(element);  &#125;  <span class="comment">// 큐의 앞쪽에서 요소 제거</span>  <span class="title function_">dequeue</span>(<span class="params"></span>) &#123;    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isEmpty</span>()) &#123;      <span class="keyword">return</span> <span class="string">&quot;Queue is empty&quot;</span>;    &#125;    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">shift</span>();  &#125;  <span class="comment">// 큐의 앞쪽에 있는 요소 확인</span>  <span class="title function_">front</span>(<span class="params"></span>) &#123;    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isEmpty</span>()) &#123;      <span class="keyword">return</span> <span class="string">&quot;Queue is empty&quot;</span>;    &#125;    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">items</span>[<span class="number">0</span>];  &#125;  <span class="comment">// 큐가 비어 있는지 확인</span>  <span class="title function_">isEmpty</span>(<span class="params"></span>) &#123;    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">items</span>.<span class="property">length</span> === <span class="number">0</span>;  &#125;  <span class="comment">// 큐의 모든 요소 출력</span>  <span class="title function_">printQueue</span>(<span class="params"></span>) &#123;    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">join</span>(<span class="string">&quot; -&gt; &quot;</span>);  &#125;&#125;<span class="comment">// 테스트</span><span class="keyword">const</span> queue = <span class="keyword">new</span> <span class="title class_">Queue</span>();queue.<span class="title function_">enqueue</span>(<span class="string">&quot;Sword&quot;</span>);queue.<span class="title function_">enqueue</span>(<span class="string">&quot;Shield&quot;</span>);queue.<span class="title function_">enqueue</span>(<span class="string">&quot;Potion&quot;</span>);<span class="variable language_">console</span>.<span class="title function_">log</span>(queue.<span class="title function_">printQueue</span>()); <span class="comment">// Sword -&gt; Shield -&gt; Potion</span><span class="variable language_">console</span>.<span class="title function_">log</span>(queue.<span class="title function_">front</span>()); <span class="comment">// Sword</span>queue.<span class="title function_">dequeue</span>();<span class="variable language_">console</span>.<span class="title function_">log</span>(queue.<span class="title function_">printQueue</span>()); <span class="comment">// Shield -&gt; Potion</span></code></pre><h3 id="예제-RPG-게임에서의-큐-사용"><a href="#예제-RPG-게임에서의-큐-사용" class="headerlink" title="예제: RPG 게임에서의 큐 사용"></a>예제: RPG 게임에서의 큐 사용</h3><p>RPG 게임에서 캐릭터가 수행할 작업 목록을 큐로 관리한다고 가정해봅시다. 새로운 작업을 추가하고, 작업을 완료할 때마다 큐에서 제거할 수 있습니다.</p><pre><code class="highlight javascript"><span class="keyword">class</span> <span class="title class_">Queue</span> &#123;  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;    <span class="variable language_">this</span>.<span class="property">items</span> = [];  &#125;  <span class="comment">// 작업 추가 (큐의 뒤쪽에 요소 추가)</span>  <span class="title function_">enqueue</span>(<span class="params">element</span>) &#123;    <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">push</span>(element);  &#125;  <span class="comment">// 작업 완료 (큐의 앞쪽에서 요소 제거)</span>  <span class="title function_">dequeue</span>(<span class="params"></span>) &#123;    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isEmpty</span>()) &#123;      <span class="keyword">return</span> <span class="string">&quot;Queue is empty&quot;</span>;    &#125;    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">shift</span>();  &#125;  <span class="comment">// 다음 작업 확인 (큐의 앞쪽에 있는 요소 확인)</span>  <span class="title function_">front</span>(<span class="params"></span>) &#123;    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isEmpty</span>()) &#123;      <span class="keyword">return</span> <span class="string">&quot;Queue is empty&quot;</span>;    &#125;    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">items</span>[<span class="number">0</span>];  &#125;  <span class="comment">// 큐가 비어 있는지 확인</span>  <span class="title function_">isEmpty</span>(<span class="params"></span>) &#123;    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">items</span>.<span class="property">length</span> === <span class="number">0</span>;  &#125;  <span class="comment">// 작업 목록 출력</span>  <span class="title function_">printQueue</span>(<span class="params"></span>) &#123;    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">join</span>(<span class="string">&quot; -&gt; &quot;</span>);  &#125;&#125;<span class="comment">// 테스트</span><span class="keyword">const</span> taskQueue = <span class="keyword">new</span> <span class="title class_">Queue</span>();taskQueue.<span class="title function_">enqueue</span>(<span class="string">&quot;Collect herbs&quot;</span>);taskQueue.<span class="title function_">enqueue</span>(<span class="string">&quot;Defeat the goblins&quot;</span>);taskQueue.<span class="title function_">enqueue</span>(<span class="string">&quot;Find the treasure&quot;</span>);<span class="variable language_">console</span>.<span class="title function_">log</span>(taskQueue.<span class="title function_">printQueue</span>()); <span class="comment">// Collect herbs -&gt; Defeat the goblins -&gt; Find the treasure</span><span class="variable language_">console</span>.<span class="title function_">log</span>(taskQueue.<span class="title function_">front</span>()); <span class="comment">// Collect herbs</span>taskQueue.<span class="title function_">dequeue</span>();<span class="variable language_">console</span>.<span class="title function_">log</span>(taskQueue.<span class="title function_">printQueue</span>()); <span class="comment">// Defeat the goblins -&gt; Find the treasure</span></code></pre><h3 id="퀴즈-큐-이해하기"><a href="#퀴즈-큐-이해하기" class="headerlink" title="퀴즈: 큐 이해하기"></a>퀴즈: 큐 이해하기</h3><p>다음의 큐를 사용하여 주어진 작업을 수행해보세요!</p><ol><li>새로운 작업 “Rescue the villagers”를 추가하고, 작업 목록을 출력하세요.</li><li>현재 수행할 작업을 확인하세요.</li><li>현재 작업을 완료하고, 작업 목록을 출력하세요.</li></ol><details><summary>정답</summary><ol><li><p>새로운 작업을 추가하려면 <code>enqueue()</code> 메서드를 사용합니다.</p><pre><code class="highlight javascript">taskQueue.<span class="title function_">enqueue</span>(<span class="string">&quot;Rescue the villagers&quot;</span>);<span class="variable language_">console</span>.<span class="title function_">log</span>(taskQueue.<span class="title function_">printQueue</span>()); <span class="comment">// Defeat the goblins -&gt; Find the treasure -&gt; Rescue the villagers</span></code></pre></li><li><p>현재 수행할 작업은 <code>front()</code> 메서드를 사용하여 확인할 수 있습니다.</p><pre><code class="highlight javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(taskQueue.<span class="title function_">front</span>()); <span class="comment">// Defeat the goblins</span></code></pre></li><li><p>현재 작업을 완료하려면 <code>dequeue()</code> 메서드를 사용합니다.</p><pre><code class="highlight javascript">taskQueue.<span class="title function_">dequeue</span>();<span class="variable language_">console</span>.<span class="title function_">log</span>(taskQueue.<span class="title function_">printQueue</span>()); <span class="comment">// Find the treasure -&gt; Rescue the villagers</span></code></pre></li></ol></details><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>큐는 선입선출 방식으로 동작하는 자료구조로, 데이터의 순차적인 처리와 관리가 필요한 상황에서 유용하게 사용할 수 있습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> 알고리즘_초급 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue API 호출 - Axios</title>
      <link href="/vue/16/"/>
      <url>/vue/16/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-API-호출-Axios"><a href="#Vue-API-호출-Axios" class="headerlink" title="Vue API 호출 - Axios"></a>Vue API 호출 - Axios</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 Vue.js 애플리케이션에서 API를 호출하여 외부 데이터를 불러오고, 이를 비동기적으로 처리하는 방법에 대해 알아보겠습니다.</p><h2 id="1-Axios를-사용한-HTTP-요청"><a href="#1-Axios를-사용한-HTTP-요청" class="headerlink" title="1. Axios를 사용한 HTTP 요청"></a>1. Axios를 사용한 HTTP 요청</h2><h3 id="Axios란"><a href="#Axios란" class="headerlink" title="Axios란?"></a>Axios란?</h3><p>Axios는 브라우저 환경과 Node.js 환경에서 모두 동작하는 <strong>Promise 기반의 HTTP 클라이언트</strong>입니다.<br>Vue.js 프로젝트에서 외부 API와 통신하기 위해 널리 사용되며, 간편한 문법과 다양한 기능으로 HTTP 요청을 쉽게 처리할 수 있습니다.</p><h3 id="Axios-설치"><a href="#Axios-설치" class="headerlink" title="Axios 설치"></a>Axios 설치</h3><p>Axios는 Vue CLI로 생성한 프로젝트에 다음 명령어를 통해 설치할 수 있습니다:</p><pre><code class="highlight bash">npm install axios</code></pre><h3 id="기본적인-Axios-사용법"><a href="#기본적인-Axios-사용법" class="headerlink" title="기본적인 Axios 사용법"></a>기본적인 Axios 사용법</h3><p>Axios를 사용해 API 호출을 하는 기본적인 방법은 다음과 같습니다:</p><pre><code class="highlight javascript"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;axios  .<span class="title function_">get</span>(<span class="string">&quot;https://api.example.com/data&quot;</span>)  .<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>);  &#125;)  .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;API 호출 중 오류가 발생했습니다:&quot;</span>, error);  &#125;);</code></pre><p>위 예제에서 <code>axios.get()</code> 메서드를 사용하여 GET 요청을 보냅니다. 요청이 성공하면 <code>then</code> 블록이 실행되어 응답 데이터를 처리하고, 오류가 발생하면 <code>catch</code> 블록이 실행됩니다.</p><h3 id="Vue-컴포넌트에서-Axios-사용"><a href="#Vue-컴포넌트에서-Axios-사용" class="headerlink" title="Vue 컴포넌트에서 Axios 사용"></a>Vue 컴포넌트에서 Axios 사용</h3><p>Vue 컴포넌트에서 Axios를 사용하여 API 데이터를 가져오고, 가져온 데이터를 컴포넌트의 상태에 저장해 화면에 렌더링할 수 있습니다.</p><pre><code class="highlight javascript">&lt;template&gt;  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>API 데이터<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><span class="language-xml">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><span class="language-xml">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span>&#123;&#123; item.name &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>&lt;/template&gt;<span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span></span><span class="language-javascript"><span class="language-xml"></span></span><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span><span class="language-javascript"><span class="language-xml">      <span class="attr">items</span>: [],</span></span><span class="language-javascript"><span class="language-xml">    &#125;;</span></span><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><span class="language-javascript"><span class="language-xml">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span><span class="language-javascript"><span class="language-xml">    axios.<span class="title function_">get</span>(<span class="string">&quot;https://api.example.com/items&quot;</span>)</span></span><span class="language-javascript"><span class="language-xml">      .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span></span><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">items</span> = response.<span class="property">data</span>;</span></span><span class="language-javascript"><span class="language-xml">      &#125;)</span></span><span class="language-javascript"><span class="language-xml">      .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span></span><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;API 호출 중 오류가 발생했습니다:&quot;</span>, error);</span></span><span class="language-javascript"><span class="language-xml">      &#125;);</span></span><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><span class="language-javascript"><span class="language-xml">&#125;;</span></span><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></code></pre><p>이 예제에서 <code>mounted()</code> 라이프사이클 훅에서 Axios를 사용하여 API 데이터를 가져오고, 응답 데이터를 <code>items</code> 배열에 저장하여 화면에 렌더링합니다.</p><h2 id="2-비동기-데이터-처리"><a href="#2-비동기-데이터-처리" class="headerlink" title="2. 비동기 데이터 처리"></a>2. 비동기 데이터 처리</h2><h3 id="비동기-함수와-async-await"><a href="#비동기-함수와-async-await" class="headerlink" title="비동기 함수와 async/await"></a>비동기 함수와 <code>async/await</code></h3><p>비동기 작업을 더 깔끔하게 처리하기 위해 <strong><code>async/await</code></strong> 구문을 사용할 수 있습니다. <code>async/await</code>는 비동기 코드를 동기 코드처럼 작성할 수 있게 해주며, <code>try/catch</code>를 사용해 오류를 쉽게 처리할 수 있습니다.</p><pre><code class="highlight javascript">&lt;template&gt;  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>캐릭터 목록<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><span class="language-xml">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><span class="language-xml">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;character in characters&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;character.id&quot;</span>&gt;</span>&#123;&#123; character.name &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>&lt;/template&gt;<span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span></span><span class="language-javascript"><span class="language-xml"></span></span><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span><span class="language-javascript"><span class="language-xml">      <span class="attr">characters</span>: [],</span></span><span class="language-javascript"><span class="language-xml">    &#125;;</span></span><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><span class="language-javascript"><span class="language-xml">  <span class="keyword">async</span> <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span><span class="language-javascript"><span class="language-xml">    <span class="keyword">try</span> &#123;</span></span><span class="language-javascript"><span class="language-xml">      <span class="keyword">const</span> response = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&quot;https://api.example.com/characters&quot;</span>);</span></span><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">characters</span> = response.<span class="property">data</span>;</span></span><span class="language-javascript"><span class="language-xml">    &#125; <span class="keyword">catch</span> (error) &#123;</span></span><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;API 호출 중 오류가 발생했습니다:&quot;</span>, error);</span></span><span class="language-javascript"><span class="language-xml">    &#125;</span></span><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><span class="language-javascript"><span class="language-xml">&#125;;</span></span><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></code></pre><p>위 예제에서 <code>async/await</code>을 사용해 비동기 API 호출을 처리했습니다. API 호출이 완료될 때까지 <code>await</code>가 호출을 대기하며, 오류가 발생하면 <code>catch</code> 블록에서 이를 처리합니다.</p><h3 id="실습-예제-RPG-게임에서-캐릭터-정보-가져오기"><a href="#실습-예제-RPG-게임에서-캐릭터-정보-가져오기" class="headerlink" title="실습 예제: RPG 게임에서 캐릭터 정보 가져오기"></a>실습 예제: RPG 게임에서 캐릭터 정보 가져오기</h3><p>RPG 게임에서 Axios를 사용해 캐릭터 정보를 서버에서 가져와 화면에 렌더링하는 예제를 만들어보겠습니다.</p><pre><code class="highlight javascript">&lt;template&gt;  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; character.name &#125;&#125; 정보<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>레벨: &#123;&#123; character.level &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>직업: &#123;&#123; character.job &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;loading&quot;</span>&gt;</span>불러오는 중...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;error&quot;</span>&gt;</span>&#123;&#123; error &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>&lt;/template&gt;<span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span></span><span class="language-javascript"><span class="language-xml"></span></span><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span><span class="language-javascript"><span class="language-xml">      <span class="attr">character</span>: &#123;&#125;,</span></span><span class="language-javascript"><span class="language-xml">      <span class="attr">loading</span>: <span class="literal">true</span>,</span></span><span class="language-javascript"><span class="language-xml">      <span class="attr">error</span>: <span class="string">&quot;&quot;</span>,</span></span><span class="language-javascript"><span class="language-xml">    &#125;;</span></span><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><span class="language-javascript"><span class="language-xml">  <span class="keyword">async</span> <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span><span class="language-javascript"><span class="language-xml">    <span class="keyword">try</span> &#123;</span></span><span class="language-javascript"><span class="language-xml">      <span class="keyword">const</span> response = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&quot;https://api.example.com/character/1&quot;</span>);</span></span><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">character</span> = response.<span class="property">data</span>;</span></span><span class="language-javascript"><span class="language-xml">    &#125; <span class="keyword">catch</span> (error) &#123;</span></span><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">error</span> = <span class="string">&quot;캐릭터 정보를 불러오는 중 오류가 발생했습니다.&quot;</span>;</span></span><span class="language-javascript"><span class="language-xml">    &#125; <span class="keyword">finally</span> &#123;</span></span><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">loading</span> = <span class="literal">false</span>;</span></span><span class="language-javascript"><span class="language-xml">    &#125;</span></span><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><span class="language-javascript"><span class="language-xml">&#125;;</span></span><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></code></pre><p>이 예제에서는 API를 통해 특정 캐릭터의 정보를 가져와 Vue 컴포넌트에 렌더링합니다. <code>loading</code> 상태를 사용해 데이터 로딩 중임을 사용자에게 알리고, 오류 발생 시 <code>error</code> 메시지를 화면에 표시합니다.</p><h2 id="3-Composition-API를-사용한-Axios-요청"><a href="#3-Composition-API를-사용한-Axios-요청" class="headerlink" title="3. Composition API를 사용한 Axios 요청"></a>3. Composition API를 사용한 Axios 요청</h2><blockquote><p>만약 Vue가 처음이시라면 이 섹션은 건너 뛰어주세요!</p></blockquote><p>Vue3에 추가된 <a href="/vue/24/">Composition API</a>를 사용하여 컴포넌트를 더욱 유연하고 모듈화된 방식으로 작성할 수 있습니다.</p><pre><code class="highlight vue">&lt;template&gt;  &lt;div&gt;    &lt;h1&gt;&#123;&#123; character.name &#125;&#125; 정보&lt;/h1&gt;    &lt;p&gt;레벨: &#123;&#123; character.level &#125;&#125;&lt;/p&gt;    &lt;p&gt;직업: &#123;&#123; character.job &#125;&#125;&lt;/p&gt;    &lt;p v-if=&quot;loading&quot;&gt;불러오는 중...&lt;/p&gt;    &lt;p v-if=&quot;error&quot;&gt;&#123;&#123; error &#125;&#125;&lt;/p&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import &#123; ref, onMounted &#125; from &quot;vue&quot;;import axios from &quot;axios&quot;;export default &#123;  setup() &#123;    const character = ref(&#123;&#125;);    const loading = ref(true);    const error = ref(&quot;&quot;);    const fetchCharacter = async () =&gt; &#123;      try &#123;        const response = await axios.get(&quot;https://api.example.com/character/1&quot;);        character.value = response.data;      &#125; catch (err) &#123;        error.value = &quot;캐릭터 정보를 불러오는 중 오류가 발생했습니다.&quot;;      &#125; finally &#123;        loading.value = false;      &#125;    &#125;;    onMounted(fetchCharacter);    return &#123;      character,      loading,      error,    &#125;;  &#125;,&#125;;&lt;/script&gt;</code></pre><h3 id="예제-설명"><a href="#예제-설명" class="headerlink" title="예제 설명"></a>예제 설명</h3><p>이 예제에서는 Vue 3의 Composition API를 사용하여 API 데이터를 가져옵니다. <code>ref</code>를 사용해 반응형 데이터를 선언하고, <code>onMounted</code> 훅에서 <code>fetchCharacter</code> 함수를 호출하여 컴포넌트가 마운트된 후 데이터를 가져옵니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 Vue.js 애플리케이션에서 API 호출과 AJAX를 사용해 외부 데이터를 처리하는 방법에 대해 알아보았습니다.<br>토이 프로젝트부터 엔터프라이즈 급 앱까지 필수적으로 사용하는 개념이라 꼭 숙지하고 넘어가세요!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue CLI - 프로젝트 생성, 빌드, 배포, 의존성</title>
      <link href="/vue/15/"/>
      <url>/vue/15/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-CLI-프로젝트-생성-빌드-배포-의존성"><a href="#Vue-CLI-프로젝트-생성-빌드-배포-의존성" class="headerlink" title="Vue CLI - 프로젝트 생성, 빌드, 배포, 의존성"></a>Vue CLI - 프로젝트 생성, 빌드, 배포, 의존성</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 Vue.js 프로젝트의 핵심 도구인 <strong>Vue CLI</strong>에 대해 알아보겠습니다.<br>Vue CLI는 Vue.js 애플리케이션을 효율적으로 설정하고 관리할 수 있는 도구로, 프로젝트 생성부터 빌드 설정, 플러그인 관리까지 다양한 기능을 제공합니다.</p><h2 id="1-프로젝트-구성과-빌드-설정"><a href="#1-프로젝트-구성과-빌드-설정" class="headerlink" title="1. 프로젝트 구성과 빌드 설정"></a>1. 프로젝트 구성과 빌드 설정</h2><h3 id="Vue-CLI란"><a href="#Vue-CLI란" class="headerlink" title="Vue CLI란?"></a>Vue CLI란?</h3><p>Vue CLI는 Vue.js 애플리케이션의 기본적인 설정과 관리를 도와주는 도구입니다. 이 도구를 사용하면 복잡한 설정을 자동화하고, 필요한 경우 프로젝트에 추가적인 기능을 쉽게 통합할 수 있습니다.</p><h3 id="Vue-CLI-설치"><a href="#Vue-CLI-설치" class="headerlink" title="Vue CLI 설치"></a>Vue CLI 설치</h3><p>Vue CLI를 설치하려면 다음 명령어를 사용합니다:</p><pre><code class="highlight bash">npm install -g @vue/cli</code></pre><p>설치 후, <code>vue --version</code> 명령어로 설치된 Vue CLI의 버전을 확인할 수 있습니다.</p><h3 id="새로운-Vue-프로젝트-생성"><a href="#새로운-Vue-프로젝트-생성" class="headerlink" title="새로운 Vue 프로젝트 생성"></a>새로운 Vue 프로젝트 생성</h3><p>Vue CLI를 사용해 새 프로젝트를 생성하는 방법은 다음과 같습니다:</p><pre><code class="highlight bash">vue create my-vue-app</code></pre><p>명령어를 실행하면 프로젝트 이름, 기본 설정, 추가 기능 등을 선택할 수 있는 메뉴가 나타납니다. 기본 설정을 선택하면 Vue CLI가 자동으로 프로젝트를 설정하고 필요한 의존성을 설치해줍니다.</p><h3 id="프로젝트-구조"><a href="#프로젝트-구조" class="headerlink" title="프로젝트 구조"></a>프로젝트 구조</h3><p>기본적으로 생성된 Vue.js 프로젝트의 구조는 다음과 같습니다:</p><pre><code class="highlight plaintext">my-vue-app/├── node_modules/        # 프로젝트의 모든 의존성이 설치된 폴더├── public/              # 정적 파일을 보관하는 폴더├── src/                 # 애플리케이션의 소스 코드가 위치하는 폴더│   ├── assets/          # 이미지, 폰트, CSS 파일 등을 보관하는 폴더│   ├── components/      # Vue 컴포넌트를 보관하는 폴더│   ├── App.vue          # 루트 컴포넌트│   ├── main.js          # 메인 엔트리 포인트├── .gitignore           # Git에 포함되지 않을 파일을 지정하는 설정 파일├── babel.config.js      # Babel 설정 파일├── package.json         # 프로젝트의 메타데이터 및 의존성 관리 파일├── vue.config.js        # Vue CLI의 설정 파일└── README.md            # 프로젝트에 대한 설명을 담은 파일</code></pre><h3 id="빌드-설정"><a href="#빌드-설정" class="headerlink" title="빌드 설정"></a>빌드 설정</h3><p>Vue CLI는 기본적으로 Webpack을 사용하여 프로젝트를 빌드합니다. 빌드 설정은 <code>vue.config.js</code> 파일에서 커스터마이징할 수 있습니다. 이 파일을 사용하면 Webpack 설정을 쉽게 확장하거나 덮어쓸 수 있습니다.</p><p>예를 들어, 프로젝트의 기본 포트를 변경하거나, 별도의 플러그인을 추가하는 등의 설정을 이 파일에서 관리할 수 있습니다.</p><pre><code class="highlight javascript"><span class="comment">// vue.config.js</span><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;  <span class="attr">devServer</span>: &#123;    <span class="attr">port</span>: <span class="number">8081</span>,  &#125;,  <span class="attr">configureWebpack</span>: &#123;    <span class="attr">plugins</span>: [      <span class="comment">// 플러그인 추가</span>    ],  &#125;,&#125;;</code></pre><h3 id="빌드-및-배포"><a href="#빌드-및-배포" class="headerlink" title="빌드 및 배포"></a>빌드 및 배포</h3><p>프로젝트를 개발 환경에서 실행하려면 다음 명령어를 사용합니다:</p><pre><code class="highlight bash">npm run serve</code></pre><p>이 명령어는 로컬 개발 서버를 실행하고, 프로젝트를 실시간으로 빌드하여 브라우저에서 확인할 수 있습니다.</p><p>프로덕션 환경으로 빌드하려면 다음 명령어를 사용합니다:</p><pre><code class="highlight bash">npm run build</code></pre><p>이 명령어는 최적화된 빌드 출력을 생성하며, <code>dist/</code> 폴더에 결과물이 저장됩니다. 이 폴더의 파일들을 배포 서버에 업로드하여 애플리케이션을 배포할 수 있습니다.</p><h4 id="프로덕션-빌드-결과물"><a href="#프로덕션-빌드-결과물" class="headerlink" title="프로덕션 빌드 결과물"></a>프로덕션 빌드 결과물</h4><p>프로덕션 빌드를 생성한 후, dist&#x2F; 디렉터리에 다음과 같은 파일들이 생성됩니다:</p><ul><li>index.html: 메인 HTML 파일</li><li>app.js: 메인 JavaScript 파일 (번들링된 결과)</li><li>vendor.js: 라이브러리와 의존성들이 포함된 파일</li><li>css&#x2F;app.css: 번들링된 CSS 파일</li></ul><p>이 파일들을 웹 서버에 배포하면 Vue.js 애플리케이션을 사용자들이 사용할 수 있습니다.</p><h2 id="2-CLI-플러그인과-의존성-관리"><a href="#2-CLI-플러그인과-의존성-관리" class="headerlink" title="2. CLI 플러그인과 의존성 관리"></a>2. CLI 플러그인과 의존성 관리</h2><h3 id="CLI-플러그인"><a href="#CLI-플러그인" class="headerlink" title="CLI 플러그인"></a>CLI 플러그인</h3><p>Vue CLI는 프로젝트의 기능을 확장하기 위해 다양한 플러그인을 지원합니다. 플러그인은 추가적인 설정 없이 프로젝트에 통합할 수 있는 패키지로, 라우터, Vuex, ESLint, TypeScript 등과 같은 기능을 쉽게 추가할 수 있습니다.</p><p>플러그인을 추가하려면 다음 명령어를 사용합니다:</p><pre><code class="highlight bash">vue add &lt;plugin-name&gt;</code></pre><p>예를 들어, Vue Router를 추가하려면 다음과 같이 명령어를 실행합니다:</p><pre><code class="highlight bash">vue add router</code></pre><p>명령어를 실행하면 Vue CLI가 필요한 모든 파일을 설정하고, 플러그인을 프로젝트에 통합합니다.</p><h3 id="의존성-관리"><a href="#의존성-관리" class="headerlink" title="의존성 관리"></a>의존성 관리</h3><p>Vue CLI를 사용하면 의존성 관리가 간편해집니다. 프로젝트에 새로운 패키지를 추가하거나, 기존 패키지를 업데이트할 수 있습니다.</p><ul><li><p><strong>패키지 추가</strong>:</p><pre><code class="highlight bash">npm install &lt;package-name&gt;</code></pre></li><li><p><strong>패키지 제거</strong>:</p><pre><code class="highlight bash">npm uninstall &lt;package-name&gt;</code></pre></li><li><p><strong>패키지 업데이트</strong>:</p><pre><code class="highlight bash">npm update &lt;package-name&gt;</code></pre></li></ul><h3 id="Babel과-Polyfill-관리"><a href="#Babel과-Polyfill-관리" class="headerlink" title="Babel과 Polyfill 관리"></a>Babel과 Polyfill 관리</h3><p>Vue CLI는 최신 JavaScript 기능을 지원하기 위해 Babel을 사용합니다. Babel은 ES6+ 코드를 호환 가능한 버전으로 변환하여 더 넓은 브라우저 호환성을 보장합니다. Vue CLI는 Polyfill도 자동으로 관리하여, 다양한 환경에서 Vue.js 애플리케이션이 원활하게 동작하도록 지원합니다.</p><p><code>babel.config.js</code> 파일에서 Babel의 설정을 관리할 수 있으며, 필요한 경우 다양한 플러그인을 추가하거나 제거할 수 있습니다.</p><pre><code class="highlight javascript"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;  <span class="attr">presets</span>: [<span class="string">&quot;@vue/cli-plugin-babel/preset&quot;</span>],&#125;;</code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 Vue.js 애플리케이션을 효율적으로 관리하고 설정할 수 있는 Vue CLI에 대해 알아보았습니다. Vue CLI는 프로젝트를 생성하고 필요한 기능을 쉽게 추가할 수 있는 강력한 도구로, 개발자들이 복잡한 설정에 신경 쓰지 않고 빠르게 개발에 집중할 수 있게 해줍니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>알고리즘[초급] 스택(Stack)</title>
      <link href="/algorithm/newb/3/"/>
      <url>/algorithm/newb/3/</url>
      
        <content type="html"><![CDATA[<h1 id="스택-Stack"><a href="#스택-Stack" class="headerlink" title="스택(Stack)"></a>스택(Stack)</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 스택(Stack)에 대해 알아보겠습니다.</p><h2 id="스택-Stack-란-무엇인가"><a href="#스택-Stack-란-무엇인가" class="headerlink" title="스택(Stack)란 무엇인가?"></a>스택(Stack)란 무엇인가?</h2><p>스택은 데이터가 한쪽 끝에서만 추가되거나 제거될 수 있는 자료구조입니다. 스택은 후입선출(LIFO, Last In First Out) 방식으로 동작하며, 가장 나중에 추가된 요소가 가장 먼저 제거됩니다. 예를 들어, RPG 게임에서 캐릭터의 행동 기록이나 아이템 사용 이력을 스택으로 관리할 수 있습니다.</p><h3 id="스택의-특징"><a href="#스택의-특징" class="headerlink" title="스택의 특징"></a>스택의 특징</h3><ul><li><strong>후입선출(LIFO)</strong>: 가장 나중에 추가된 요소가 가장 먼저 제거됩니다.</li><li><strong>동적 크기</strong>: 스택은 필요에 따라 요소를 추가하거나 제거할 수 있습니다.</li><li><strong>제한된 접근</strong>: 스택의 요소는 꼭대기(top)에서만 접근할 수 있습니다.</li></ul><h3 id="스택의-주요-연산"><a href="#스택의-주요-연산" class="headerlink" title="스택의 주요 연산"></a>스택의 주요 연산</h3><ol><li><strong>push</strong>: 스택의 꼭대기에 요소를 추가합니다.</li><li><strong>pop</strong>: 스택의 꼭대기에서 요소를 제거합니다.</li><li><strong>peek</strong>: 스택의 꼭대기에 있는 요소를 확인합니다.</li><li><strong>isEmpty</strong>: 스택이 비어 있는지 확인합니다.</li></ol><h3 id="스택의-구현"><a href="#스택의-구현" class="headerlink" title="스택의 구현"></a>스택의 구현</h3><p>JavaScript로 스택을 구현하는 방법은 다음과 같습니다:</p><h4 id="스택-클래스"><a href="#스택-클래스" class="headerlink" title="스택 클래스"></a>스택 클래스</h4><pre><code class="highlight javascript"><span class="keyword">class</span> <span class="title class_">Stack</span> &#123;  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;    <span class="variable language_">this</span>.<span class="property">items</span> = [];  &#125;  <span class="comment">// 스택의 꼭대기에 요소 추가</span>  <span class="title function_">push</span>(<span class="params">element</span>) &#123;    <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">push</span>(element);  &#125;  <span class="comment">// 스택의 꼭대기에서 요소 제거</span>  <span class="title function_">pop</span>(<span class="params"></span>) &#123;    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isEmpty</span>()) &#123;      <span class="keyword">return</span> <span class="string">&quot;Stack is empty&quot;</span>;    &#125;    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">pop</span>();  &#125;  <span class="comment">// 스택의 꼭대기에 있는 요소 확인</span>  <span class="title function_">peek</span>(<span class="params"></span>) &#123;    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isEmpty</span>()) &#123;      <span class="keyword">return</span> <span class="string">&quot;Stack is empty&quot;</span>;    &#125;    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">items</span>[<span class="variable language_">this</span>.<span class="property">items</span>.<span class="property">length</span> - <span class="number">1</span>];  &#125;  <span class="comment">// 스택이 비어 있는지 확인</span>  <span class="title function_">isEmpty</span>(<span class="params"></span>) &#123;    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">items</span>.<span class="property">length</span> === <span class="number">0</span>;  &#125;  <span class="comment">// 스택의 모든 요소 출력</span>  <span class="title function_">printStack</span>(<span class="params"></span>) &#123;    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">join</span>(<span class="string">&quot; -&gt; &quot;</span>);  &#125;&#125;<span class="comment">// 테스트</span><span class="keyword">const</span> stack = <span class="keyword">new</span> <span class="title class_">Stack</span>();stack.<span class="title function_">push</span>(<span class="string">&quot;Sword&quot;</span>);stack.<span class="title function_">push</span>(<span class="string">&quot;Shield&quot;</span>);stack.<span class="title function_">push</span>(<span class="string">&quot;Potion&quot;</span>);<span class="variable language_">console</span>.<span class="title function_">log</span>(stack.<span class="title function_">printStack</span>()); <span class="comment">// Sword -&gt; Shield -&gt; Potion</span><span class="variable language_">console</span>.<span class="title function_">log</span>(stack.<span class="title function_">peek</span>()); <span class="comment">// Potion</span>stack.<span class="title function_">pop</span>();<span class="variable language_">console</span>.<span class="title function_">log</span>(stack.<span class="title function_">printStack</span>()); <span class="comment">// Sword -&gt; Shield</span></code></pre><h3 id="예제-RPG-게임에서의-스택-사용"><a href="#예제-RPG-게임에서의-스택-사용" class="headerlink" title="예제: RPG 게임에서의 스택 사용"></a>예제: RPG 게임에서의 스택 사용</h3><p>RPG 게임에서 캐릭터가 사용하는 아이템의 이력을 스택으로 관리한다고 가정해봅시다. 새로운 아이템을 사용할 때마다 스택에 추가하고, 마지막에 사용한 아이템을 제거할 수 있습니다.</p><pre><code class="highlight javascript"><span class="keyword">class</span> <span class="title class_">Stack</span> &#123;  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;    <span class="variable language_">this</span>.<span class="property">items</span> = [];  &#125;  <span class="comment">// 아이템 사용 (스택의 꼭대기에 요소 추가)</span>  <span class="title function_">push</span>(<span class="params">element</span>) &#123;    <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">push</span>(element);  &#125;  <span class="comment">// 마지막에 사용한 아이템 제거 (스택의 꼭대기에서 요소 제거)</span>  <span class="title function_">pop</span>(<span class="params"></span>) &#123;    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isEmpty</span>()) &#123;      <span class="keyword">return</span> <span class="string">&quot;Stack is empty&quot;</span>;    &#125;    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">pop</span>();  &#125;  <span class="comment">// 마지막에 사용한 아이템 확인 (스택의 꼭대기에 있는 요소 확인)</span>  <span class="title function_">peek</span>(<span class="params"></span>) &#123;    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isEmpty</span>()) &#123;      <span class="keyword">return</span> <span class="string">&quot;Stack is empty&quot;</span>;    &#125;    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">items</span>[<span class="variable language_">this</span>.<span class="property">items</span>.<span class="property">length</span> - <span class="number">1</span>];  &#125;  <span class="comment">// 스택이 비어 있는지 확인</span>  <span class="title function_">isEmpty</span>(<span class="params"></span>) &#123;    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">items</span>.<span class="property">length</span> === <span class="number">0</span>;  &#125;  <span class="comment">// 아이템 사용 이력 출력</span>  <span class="title function_">printStack</span>(<span class="params"></span>) &#123;    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">join</span>(<span class="string">&quot; -&gt; &quot;</span>);  &#125;&#125;<span class="comment">// 테스트</span><span class="keyword">const</span> itemStack = <span class="keyword">new</span> <span class="title class_">Stack</span>();itemStack.<span class="title function_">push</span>(<span class="string">&quot;Sword&quot;</span>);itemStack.<span class="title function_">push</span>(<span class="string">&quot;Shield&quot;</span>);itemStack.<span class="title function_">push</span>(<span class="string">&quot;Potion&quot;</span>);<span class="variable language_">console</span>.<span class="title function_">log</span>(itemStack.<span class="title function_">printStack</span>()); <span class="comment">// Sword -&gt; Shield -&gt; Potion</span><span class="variable language_">console</span>.<span class="title function_">log</span>(itemStack.<span class="title function_">peek</span>()); <span class="comment">// Potion</span>itemStack.<span class="title function_">pop</span>();<span class="variable language_">console</span>.<span class="title function_">log</span>(itemStack.<span class="title function_">printStack</span>()); <span class="comment">// Sword -&gt; Shield</span></code></pre><h3 id="퀴즈-스택-이해하기"><a href="#퀴즈-스택-이해하기" class="headerlink" title="퀴즈: 스택 이해하기"></a>퀴즈: 스택 이해하기</h3><p>다음의 스택을 사용하여 주어진 작업을 수행해보세요!</p><ol><li>새로운 아이템 “Helmet”을 추가하고, 아이템 사용 이력을 출력하세요.</li><li>마지막에 사용한 아이템을 확인하세요.</li><li>마지막에 사용한 아이템을 제거하고, 아이템 사용 이력을 출력하세요.</li></ol><details><summary>정답</summary><ol><li><p>새로운 아이템을 추가하려면 <code>push()</code> 메서드를 사용합니다.</p><pre><code class="highlight javascript">itemStack.<span class="title function_">push</span>(<span class="string">&quot;Helmet&quot;</span>);<span class="variable language_">console</span>.<span class="title function_">log</span>(itemStack.<span class="title function_">printStack</span>()); <span class="comment">// Sword -&gt; Shield -&gt; Helmet</span></code></pre></li><li><p>마지막에 사용한 아이템은 <code>peek()</code> 메서드를 사용하여 확인할 수 있습니다.</p><pre><code class="highlight javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(itemStack.<span class="title function_">peek</span>()); <span class="comment">// Helmet</span></code></pre></li><li><p>마지막에 사용한 아이템을 제거하려면 <code>pop()</code> 메서드를 사용합니다.</p><pre><code class="highlight javascript">itemStack.<span class="title function_">pop</span>();<span class="variable language_">console</span>.<span class="title function_">log</span>(itemStack.<span class="title function_">printStack</span>()); <span class="comment">// Sword -&gt; Shield</span></code></pre></li></ol></details><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>스택은 후입선출 방식으로 동작하는 자료구조로, 데이터의 추가와 제거가 빈번한 상황에서 유용하게 사용할 수 있습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> 알고리즘_초급 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Javascript 화살표 함수 (Arrow Functions)</title>
      <link href="/javascript/detail/2/"/>
      <url>/javascript/detail/2/</url>
      
        <content type="html"><![CDATA[<h1 id="Javascript-화살표-함수-Arrow-Functions"><a href="#Javascript-화살표-함수-Arrow-Functions" class="headerlink" title="Javascript 화살표 함수 (Arrow Functions)"></a>Javascript 화살표 함수 (Arrow Functions)</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 JavaScript에서 화살표 함수(Arrow Functions)에 대해 알아보겠습니다. 화살표 함수는 간결한 함수 표현식과 <code>this</code> 바인딩을 제공하는 새로운 함수 문법입니다.</p><h2 id="화살표-함수의-기본-문법"><a href="#화살표-함수의-기본-문법" class="headerlink" title="화살표 함수의 기본 문법"></a>화살표 함수의 기본 문법</h2><p>화살표 함수는 <code>=&gt;</code> 문법을 사용하여 정의합니다:</p><pre><code class="highlight javascript"><span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params">a, b</span>) =&gt; a + b;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// 출력: 5</span></code></pre><h2 id="this-바인딩"><a href="#this-바인딩" class="headerlink" title="this 바인딩"></a><code>this</code> 바인딩</h2><p>화살표 함수는 자신만의 <code>this</code>를 가지지 않고, 상위 스코프의 <code>this</code>를 바인딩합니다:</p><pre><code class="highlight javascript"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;  <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">0</span>;  <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;    <span class="variable language_">this</span>.<span class="property">age</span>++;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">age</span>);  &#125;, <span class="number">1000</span>);&#125;<span class="keyword">const</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>();<span class="comment">// 매 초마다 age가 증가하며 출력됩니다.</span></code></pre><h2 id="화살표-함수와-일반-함수의-차이"><a href="#화살표-함수와-일반-함수의-차이" class="headerlink" title="화살표 함수와 일반 함수의 차이"></a>화살표 함수와 일반 함수의 차이</h2><p>일반 함수와 화살표 함수의 차이를 비교해보겠습니다:</p><pre><code class="highlight javascript"><span class="keyword">const</span> obj = &#123;  <span class="attr">value</span>: <span class="number">42</span>,  <span class="attr">regularFunction</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">value</span>);  &#125;,  <span class="attr">arrowFunction</span>: <span class="function">() =&gt;</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">value</span>);  &#125;,&#125;;obj.<span class="title function_">regularFunction</span>(); <span class="comment">// 출력: 42</span>obj.<span class="title function_">arrowFunction</span>(); <span class="comment">// 출력: undefined</span></code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 JavaScript에서 화살표 함수를 사용하는 방법에 대해 알아보았습니다.<br>화살표 함수는 간결한 문법과 <code>this</code> 바인딩의 편리함을 제공하여 코드 작성 시 유용하게 사용할 수 있습니다.<br>다음 시간에는 템플릿 리터럴에 대해 알아보겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> JS_디테일 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>알고리즘[초급] 연결 리스트(Linked List)</title>
      <link href="/algorithm/newb/2/"/>
      <url>/algorithm/newb/2/</url>
      
        <content type="html"><![CDATA[<h1 id="알고리즘-초급-연결-리스트-Linked-List"><a href="#알고리즘-초급-연결-리스트-Linked-List" class="headerlink" title="알고리즘[초급] 연결 리스트(Linked List)"></a>알고리즘[초급] 연결 리스트(Linked List)</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 연결 리스트(Linked List)에 대해 알아보겠습니다.<br>배열과 달리, 연결 리스트는 각 요소가 다음 요소를 가리키는 포인터를 통해 연결되어 있는 자료구조입니다.<br>이제 연결 리스트의 개념과 구현 방법에 대해 자세히 알아보겠습니다.</p><h2 id="연결-리스트-Linked-List-란-무엇인가"><a href="#연결-리스트-Linked-List-란-무엇인가" class="headerlink" title="연결 리스트(Linked List)란 무엇인가?"></a>연결 리스트(Linked List)란 무엇인가?</h2><p>연결 리스트는 각 요소가 데이터와 다음 요소를 가리키는 포인터를 포함하는 자료구조입니다. 배열과 달리, 연결 리스트는 요소가 물리적으로 연속되어 있지 않으며, 포인터를 통해 각 요소가 연결되어 있습니다. 예를 들어, RPG 게임에서 퀘스트의 진행 순서, 캐릭터의 경험치 이력 등을 연결 리스트로 관리할 수 있습니다.</p><h3 id="연결-리스트의-특징"><a href="#연결-리스트의-특징" class="headerlink" title="연결 리스트의 특징"></a>연결 리스트의 특징</h3><ul><li><strong>동적 크기</strong>: 연결 리스트는 크기가 가변적이며, 필요에 따라 요소를 추가하거나 제거할 수 있습니다.</li><li><strong>노드(Node)</strong>: 연결 리스트의 각 요소는 노드라고 불리며, 데이터와 다음 노드를 가리키는 포인터를 포함합니다.</li><li><strong>순차 접근</strong>: 연결 리스트는 인덱스를 통해 직접 접근할 수 없으며, 처음 노드부터 순차적으로 접근해야 합니다.</li></ul><h3 id="연결-리스트의-종류"><a href="#연결-리스트의-종류" class="headerlink" title="연결 리스트의 종류"></a>연결 리스트의 종류</h3><ol><li><strong>단일 연결 리스트(Singly Linked List)</strong>: 각 노드가 다음 노드를 가리키는 포인터를 가집니다.</li><li><strong>이중 연결 리스트(Doubly Linked List)</strong>: 각 노드가 다음 노드와 이전 노드를 가리키는 포인터를 가집니다.</li><li><strong>원형 연결 리스트(Circular Linked List)</strong>: 마지막 노드가 첫 번째 노드를 가리키는 포인터를 가집니다.</li></ol><h3 id="단일-연결-리스트의-구현"><a href="#단일-연결-리스트의-구현" class="headerlink" title="단일 연결 리스트의 구현"></a>단일 연결 리스트의 구현</h3><p>JavaScript로 단일 연결 리스트를 구현하는 방법은 다음과 같습니다:</p><h4 id="노드-클래스"><a href="#노드-클래스" class="headerlink" title="노드 클래스"></a>노드 클래스</h4><pre><code class="highlight javascript"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;  <span class="title function_">constructor</span>(<span class="params">data</span>) &#123;    <span class="variable language_">this</span>.<span class="property">data</span> = data;    <span class="variable language_">this</span>.<span class="property">next</span> = <span class="literal">null</span>;  &#125;&#125;</code></pre><h4 id="연결-리스트-클래스"><a href="#연결-리스트-클래스" class="headerlink" title="연결 리스트 클래스"></a>연결 리스트 클래스</h4><pre><code class="highlight javascript"><span class="keyword">class</span> <span class="title class_">LinkedList</span> &#123;  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;    <span class="variable language_">this</span>.<span class="property">head</span> = <span class="literal">null</span>;  &#125;  <span class="comment">// 리스트의 끝에 노드 추가</span>  <span class="title function_">append</span>(<span class="params">data</span>) &#123;    <span class="keyword">const</span> newNode = <span class="keyword">new</span> <span class="title class_">Node</span>(data);    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">head</span> === <span class="literal">null</span>) &#123;      <span class="variable language_">this</span>.<span class="property">head</span> = newNode;      <span class="keyword">return</span>;    &#125;    <span class="keyword">let</span> current = <span class="variable language_">this</span>.<span class="property">head</span>;    <span class="keyword">while</span> (current.<span class="property">next</span> !== <span class="literal">null</span>) &#123;      current = current.<span class="property">next</span>;    &#125;    current.<span class="property">next</span> = newNode;  &#125;  <span class="comment">// 리스트의 모든 요소 출력</span>  <span class="title function_">printList</span>(<span class="params"></span>) &#123;    <span class="keyword">let</span> current = <span class="variable language_">this</span>.<span class="property">head</span>;    <span class="keyword">let</span> result = [];    <span class="keyword">while</span> (current !== <span class="literal">null</span>) &#123;      result.<span class="title function_">push</span>(current.<span class="property">data</span>);      current = current.<span class="property">next</span>;    &#125;    <span class="variable language_">console</span>.<span class="title function_">log</span>(result.<span class="title function_">join</span>(<span class="string">&quot; -&gt; &quot;</span>));  &#125;&#125;<span class="comment">// 테스트</span><span class="keyword">const</span> list = <span class="keyword">new</span> <span class="title class_">LinkedList</span>();list.<span class="title function_">append</span>(<span class="string">&quot;Sword&quot;</span>);list.<span class="title function_">append</span>(<span class="string">&quot;Shield&quot;</span>);list.<span class="title function_">append</span>(<span class="string">&quot;Potion&quot;</span>);list.<span class="title function_">printList</span>(); <span class="comment">// Sword -&gt; Shield -&gt; Potion</span></code></pre><h3 id="예제-RPG-게임에서의-연결-리스트-사용"><a href="#예제-RPG-게임에서의-연결-리스트-사용" class="headerlink" title="예제: RPG 게임에서의 연결 리스트 사용"></a>예제: RPG 게임에서의 연결 리스트 사용</h3><p>RPG 게임에서 캐릭터가 완료한 퀘스트의 순서를 연결 리스트로 관리한다고 가정해봅시다. 새로운 퀘스트를 추가하거나 완료된 퀘스트의 목록을 출력할 수 있습니다.</p><pre><code class="highlight javascript"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;  <span class="title function_">constructor</span>(<span class="params">data</span>) &#123;    <span class="variable language_">this</span>.<span class="property">data</span> = data;    <span class="variable language_">this</span>.<span class="property">next</span> = <span class="literal">null</span>;  &#125;&#125;<span class="keyword">class</span> <span class="title class_">LinkedList</span> &#123;  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;    <span class="variable language_">this</span>.<span class="property">head</span> = <span class="literal">null</span>;  &#125;  <span class="comment">// 퀘스트 추가</span>  <span class="title function_">append</span>(<span class="params">data</span>) &#123;    <span class="keyword">const</span> newNode = <span class="keyword">new</span> <span class="title class_">Node</span>(data);    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">head</span> === <span class="literal">null</span>) &#123;      <span class="variable language_">this</span>.<span class="property">head</span> = newNode;      <span class="keyword">return</span>;    &#125;    <span class="keyword">let</span> current = <span class="variable language_">this</span>.<span class="property">head</span>;    <span class="keyword">while</span> (current.<span class="property">next</span> !== <span class="literal">null</span>) &#123;      current = current.<span class="property">next</span>;    &#125;    current.<span class="property">next</span> = newNode;  &#125;  <span class="comment">// 퀘스트 목록 출력</span>  <span class="title function_">printList</span>(<span class="params"></span>) &#123;    <span class="keyword">let</span> current = <span class="variable language_">this</span>.<span class="property">head</span>;    <span class="keyword">let</span> result = [];    <span class="keyword">while</span> (current !== <span class="literal">null</span>) &#123;      result.<span class="title function_">push</span>(current.<span class="property">data</span>);      current = current.<span class="property">next</span>;    &#125;    <span class="variable language_">console</span>.<span class="title function_">log</span>(result.<span class="title function_">join</span>(<span class="string">&quot; -&gt; &quot;</span>));  &#125;&#125;<span class="comment">// 테스트</span><span class="keyword">const</span> questList = <span class="keyword">new</span> <span class="title class_">LinkedList</span>();questList.<span class="title function_">append</span>(<span class="string">&quot;Find the lost sword&quot;</span>);questList.<span class="title function_">append</span>(<span class="string">&quot;Defeat the dragon&quot;</span>);questList.<span class="title function_">append</span>(<span class="string">&quot;Save the village&quot;</span>);questList.<span class="title function_">printList</span>(); <span class="comment">// Find the lost sword -&gt; Defeat the dragon -&gt; Save the village</span></code></pre><h3 id="퀴즈-연결-리스트-이해하기"><a href="#퀴즈-연결-리스트-이해하기" class="headerlink" title="퀴즈: 연결 리스트 이해하기"></a>퀴즈: 연결 리스트 이해하기</h3><p>다음의 연결 리스트를 사용하여 주어진 작업을 수행해보세요!</p><ol><li>새로운 퀘스트 “Rescue the princess”를 추가하고, 퀘스트 목록을 출력하세요.</li><li>리스트의 첫 번째 퀘스트를 출력하세요.</li><li>리스트의 두 번째 퀘스트를 출력하세요.</li></ol><details><summary>정답</summary><ol><li><p>새로운 퀘스트를 추가하려면 <code>append()</code> 메서드를 사용합니다.</p><pre><code class="highlight javascript">questList.<span class="title function_">append</span>(<span class="string">&quot;Rescue the princess&quot;</span>);questList.<span class="title function_">printList</span>(); <span class="comment">// Find the lost sword -&gt; Defeat the dragon -&gt; Save the village -&gt; Rescue the princess</span></code></pre></li><li><p>리스트의 첫 번째 퀘스트는 <code>questList.head</code>를 사용하여 접근할 수 있습니다.</p><pre><code class="highlight javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(questList.<span class="property">head</span>.<span class="property">data</span>); <span class="comment">// Find the lost sword</span></code></pre></li><li><p>리스트의 두 번째 퀘스트는 <code>questList.head.next</code>를 사용하여 접근할 수 있습니다.</p><pre><code class="highlight javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(questList.<span class="property">head</span>.<span class="property">next</span>.<span class="property">data</span>); <span class="comment">// Defeat the dragon</span></code></pre></li></ol></details><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>연결 리스트는 배열보다 유연한 자료구조로, 요소의 추가와 삭제가 빈번한 상황에서 유용하게 사용할 수 있습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> 알고리즘_초급 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>알고리즘[초급] 배열(Array)</title>
      <link href="/algorithm/newb/1/"/>
      <url>/algorithm/newb/1/</url>
      
        <content type="html"><![CDATA[<h1 id="알고리즘-초급-배열-Array"><a href="#알고리즘-초급-배열-Array" class="headerlink" title="알고리즘[초급] 배열(Array)"></a>알고리즘[초급] 배열(Array)</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>알고리즘 초급 단계에 오신 것을 환영합니다! 이번 시간에는 첫 주제로 가장 중요한 기본기인 배열(Array)에 대해 알아보겠습니다.</p><h2 id="배열-Array-란-무엇인가"><a href="#배열-Array-란-무엇인가" class="headerlink" title="배열(Array)란 무엇인가?"></a>배열(Array)란 무엇인가?</h2><p>배열은 동일한 유형의 데이터 요소를 순차적으로 저장하는 자료구조입니다. 쉽게 말해, 배열은 특정한 순서로 나열된 데이터의 목록입니다.<br>예를 들어, RPG 게임에서 캐릭터의 아이템 목록, 몬스터의 체력 상태, 경험치 기록 등을 배열로 관리할 수 있습니다.</p><h3 id="배열의-특징"><a href="#배열의-특징" class="headerlink" title="배열의 특징"></a>배열의 특징</h3><ul><li><strong>인덱스</strong>: 배열의 각 요소는 인덱스로 접근할 수 있습니다. 인덱스는 0부터 시작합니다.</li><li><strong>크기</strong>: 배열은 생성 시에 크기가 정해지며, 한 번 정해진 크기는 변경할 수 없습니다.</li><li><strong>동일한 데이터 타입</strong>: 배열은 동일한 데이터 타입의 요소만 저장할 수 있습니다.</li></ul><h3 id="배열의-선언과-초기화"><a href="#배열의-선언과-초기화" class="headerlink" title="배열의 선언과 초기화"></a>배열의 선언과 초기화</h3><p>JavaScript에서 배열을 선언하고 초기화하는 방법은 다음과 같습니다:</p><pre><code class="highlight javascript"><span class="comment">// 빈 배열 선언</span><span class="keyword">let</span> emptyArray = [];<span class="comment">// 요소가 있는 배열 선언</span><span class="keyword">let</span> itemArray = [<span class="string">&quot;Sword&quot;</span>, <span class="string">&quot;Shield&quot;</span>, <span class="string">&quot;Potion&quot;</span>];<span class="comment">// 숫자 배열 선언</span><span class="keyword">let</span> levelArray = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</code></pre><h3 id="배열-요소-접근"><a href="#배열-요소-접근" class="headerlink" title="배열 요소 접근"></a>배열 요소 접근</h3><p>배열의 요소에 접근하거나 수정하는 방법은 다음과 같습니다:</p><pre><code class="highlight javascript"><span class="keyword">let</span> items = [<span class="string">&quot;Sword&quot;</span>, <span class="string">&quot;Shield&quot;</span>, <span class="string">&quot;Potion&quot;</span>];<span class="comment">// 요소 접근</span><span class="variable language_">console</span>.<span class="title function_">log</span>(items[<span class="number">0</span>]); <span class="comment">// Sword</span><span class="variable language_">console</span>.<span class="title function_">log</span>(items[<span class="number">1</span>]); <span class="comment">// Shield</span><span class="comment">// 요소 수정</span>items[<span class="number">2</span>] = <span class="string">&quot;Elixir&quot;</span>;<span class="variable language_">console</span>.<span class="title function_">log</span>(items[<span class="number">2</span>]); <span class="comment">// Elixir</span></code></pre><h3 id="배열의-주요-메서드"><a href="#배열의-주요-메서드" class="headerlink" title="배열의 주요 메서드"></a>배열의 주요 메서드</h3><p>배열에는 다양한 내장 메서드가 있어, 배열의 요소를 추가, 삭제, 변환할 수 있습니다. 주요 메서드는 다음과 같습니다:</p><ul><li><code>push()</code>: 배열의 끝에 요소를 추가합니다.</li><li><code>pop()</code>: 배열의 끝에서 요소를 제거합니다.</li><li><code>shift()</code>: 배열의 처음에서 요소를 제거합니다.</li><li><code>unshift()</code>: 배열의 처음에 요소를 추가합니다.</li><li><code>slice()</code>: 배열의 일부분을 반환합니다.</li><li><code>splice()</code>: 배열의 요소를 추가, 제거 또는 교체합니다.</li></ul><h3 id="예제-RPG-게임에서의-배열-사용"><a href="#예제-RPG-게임에서의-배열-사용" class="headerlink" title="예제: RPG 게임에서의 배열 사용"></a>예제: RPG 게임에서의 배열 사용</h3><p>RPG 게임에서 캐릭터가 소지한 아이템을 배열로 관리한다고 가정해봅시다. 캐릭터는 다양한 아이템을 소지할 수 있으며, 아이템을 추가하거나 사용할 때 배열을 사용하면 매우 편리합니다.</p><pre><code class="highlight javascript"><span class="comment">// 캐릭터의 초기 아이템 목록</span><span class="keyword">let</span> inventory = [<span class="string">&quot;Sword&quot;</span>, <span class="string">&quot;Shield&quot;</span>, <span class="string">&quot;Potion&quot;</span>];<span class="comment">// 새로운 아이템 추가</span>inventory.<span class="title function_">push</span>(<span class="string">&quot;Bow&quot;</span>);<span class="variable language_">console</span>.<span class="title function_">log</span>(inventory); <span class="comment">// [&#x27;Sword&#x27;, &#x27;Shield&#x27;, &#x27;Potion&#x27;, &#x27;Bow&#x27;]</span><span class="comment">// 마지막 아이템 사용</span><span class="keyword">let</span> usedItem = inventory.<span class="title function_">pop</span>();<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Used item: <span class="subst">$&#123;usedItem&#125;</span>`</span>); <span class="comment">// Used item: Bow</span><span class="variable language_">console</span>.<span class="title function_">log</span>(inventory); <span class="comment">// [&#x27;Sword&#x27;, &#x27;Shield&#x27;, &#x27;Potion&#x27;]</span><span class="comment">// 첫 번째 아이템 사용</span>usedItem = inventory.<span class="title function_">shift</span>();<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Used item: <span class="subst">$&#123;usedItem&#125;</span>`</span>); <span class="comment">// Used item: Sword</span><span class="variable language_">console</span>.<span class="title function_">log</span>(inventory); <span class="comment">// [&#x27;Shield&#x27;, &#x27;Potion&#x27;]</span><span class="comment">// 새로운 아이템 추가</span>inventory.<span class="title function_">unshift</span>(<span class="string">&quot;Helmet&quot;</span>);<span class="variable language_">console</span>.<span class="title function_">log</span>(inventory); <span class="comment">// [&#x27;Helmet&#x27;, &#x27;Shield&#x27;, &#x27;Potion&#x27;]</span></code></pre><h3 id="퀴즈-배열-이해하기"><a href="#퀴즈-배열-이해하기" class="headerlink" title="퀴즈: 배열 이해하기"></a>퀴즈: 배열 이해하기</h3><p>다음의 배열을 사용하여 주어진 작업을 수행해보세요!</p><pre><code class="highlight javascript"><span class="keyword">let</span> monsters = [<span class="string">&quot;Goblin&quot;</span>, <span class="string">&quot;Orc&quot;</span>, <span class="string">&quot;Troll&quot;</span>, <span class="string">&quot;Dragon&quot;</span>];</code></pre><ol><li>배열의 첫 번째 몬스터는 무엇인가요?</li><li>배열의 마지막 몬스터를 제거하고, 남은 몬스터들을 출력하세요.</li><li>배열의 처음에 ‘Slime’ 몬스터를 추가하고, 전체 배열을 출력하세요.</li></ol><details><summary>정답</summary><ol><li><p>배열의 첫 번째 몬스터는 <code>monsters[0]</code>을 사용하여 접근할 수 있습니다.</p><pre><code class="highlight javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(monsters[<span class="number">0</span>]); <span class="comment">// Goblin</span></code></pre></li><li><p>배열의 마지막 몬스터를 제거하려면 <code>pop()</code> 메서드를 사용합니다.</p><pre><code class="highlight javascript">monsters.<span class="title function_">pop</span>();<span class="variable language_">console</span>.<span class="title function_">log</span>(monsters); <span class="comment">// [&#x27;Goblin&#x27;, &#x27;Orc&#x27;, &#x27;Troll&#x27;]</span></code></pre></li><li><p>배열의 처음에 ‘Slime’을 추가하려면 <code>unshift()</code> 메서드를 사용합니다.</p><pre><code class="highlight javascript">monsters.<span class="title function_">unshift</span>(<span class="string">&quot;Slime&quot;</span>);<span class="variable language_">console</span>.<span class="title function_">log</span>(monsters); <span class="comment">// [&#x27;Slime&#x27;, &#x27;Goblin&#x27;, &#x27;Orc&#x27;, &#x27;Troll&#x27;]</span></code></pre></li></ol></details><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>배열은 매우 유용한 자료구조로, 다양한 상황에서 데이터를 효율적으로 관리할 수 있게 해줍니다. 배열을 잘 활용하면 복잡한 문제도 쉽게 해결할 수 있습니다. 이 기본 개념을 이해한 후, 더 복잡한 알고리즘과 자료구조로 넘어갈 준비를 할 수 있습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> 알고리즘_초급 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript 타입 정의와 타입 충돌 문제 해결</title>
      <link href="/typescript/troubleshooting/1/"/>
      <url>/typescript/troubleshooting/1/</url>
      
        <content type="html"><![CDATA[<h1 id="TypeScript-타입-정의와-타입-충돌-문제-해결"><a href="#TypeScript-타입-정의와-타입-충돌-문제-해결" class="headerlink" title="TypeScript 타입 정의와 타입 충돌 문제 해결"></a>TypeScript 타입 정의와 타입 충돌 문제 해결</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 TypeScript에서 타입 정의와 타입 충돌 문제를 해결하는 방법에 대해 알아보겠습니다.<br>올바른 타입 정의는 코드의 가독성과 유지보수성을 높여줍니다. 하지만 여러 타입 정의가 충돌할 경우 예기치 않은 에러가 발생할 수 있습니다.</p><h2 id="TypeScript-타입-정의의-개념"><a href="#TypeScript-타입-정의의-개념" class="headerlink" title="TypeScript 타입 정의의 개념"></a>TypeScript 타입 정의의 개념</h2><h3 id="TypeScript-타입-정의"><a href="#TypeScript-타입-정의" class="headerlink" title="TypeScript 타입 정의"></a>TypeScript 타입 정의</h3><p>TypeScript는 JavaScript에 정적 타입을 추가한 언어입니다. 타입 정의를 통해 변수, 함수, 클래스 등의 타입을 명시적으로 지정할 수 있습니다.<br>타입 정의는 코드 작성 시 타입 오류를 사전에 검출할 수 있게 해주어 코드의 안정성을 높여줍니다.</p><h3 id="타입-충돌-문제"><a href="#타입-충돌-문제" class="headerlink" title="타입 충돌 문제"></a>타입 충돌 문제</h3><p>타입 충돌은 동일한 이름의 타입이 서로 다른 정의를 가지거나, 잘못된 타입 정의로 인해 발생하는 문제입니다.<br>이는 코드의 일관성을 해치고, 디버깅을 어렵게 만들 수 있습니다.</p><h2 id="테스트-시나리오"><a href="#테스트-시나리오" class="headerlink" title="테스트 시나리오"></a>테스트 시나리오</h2><h3 id="프로젝트-구조"><a href="#프로젝트-구조" class="headerlink" title="프로젝트 구조"></a>프로젝트 구조</h3><p>다음과 같은 프로젝트 구조를 가정합니다:</p><pre><code class="highlight bash">src/├── types.ts└── main.ts</code></pre><h3 id="파일-내용"><a href="#파일-내용" class="headerlink" title="파일 내용"></a>파일 내용</h3><p><strong>types.ts</strong></p><pre><code class="highlight typescript"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">User</span> &#123;  <span class="attr">id</span>: <span class="built_in">number</span>;  <span class="attr">name</span>: <span class="built_in">string</span>;&#125;</code></pre><p><strong>main.ts</strong></p><pre><code class="highlight typescript"><span class="keyword">import</span> &#123; <span class="title class_">User</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./types&quot;</span>;<span class="keyword">const</span> <span class="attr">user</span>: <span class="title class_">User</span> = &#123;  <span class="attr">id</span>: <span class="number">1</span>,  <span class="attr">name</span>: <span class="string">&quot;John Doe&quot;</span>,&#125;;<span class="variable language_">console</span>.<span class="title function_">log</span>(user);</code></pre><h3 id="문제-상황-타입-충돌"><a href="#문제-상황-타입-충돌" class="headerlink" title="문제 상황: 타입 충돌"></a>문제 상황: 타입 충돌</h3><p>타입 충돌 문제를 시뮬레이션하기 위해 <code>types.ts</code> 파일에 동일한 이름의 타입을 다르게 정의해봅시다.</p><p><strong>types.ts</strong></p><pre><code class="highlight typescript"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">User</span> &#123;  <span class="attr">id</span>: <span class="built_in">string</span>; <span class="comment">// 타입 충돌 발생</span>  <span class="attr">name</span>: <span class="built_in">string</span>;&#125;</code></pre><p><strong>main.ts</strong></p><pre><code class="highlight typescript"><span class="keyword">import</span> &#123; <span class="title class_">User</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./types&quot;</span>;<span class="keyword">const</span> <span class="attr">user</span>: <span class="title class_">User</span> = &#123;  <span class="attr">id</span>: <span class="number">1</span>, <span class="comment">// 에러 발생</span>  <span class="attr">name</span>: <span class="string">&quot;John Doe&quot;</span>,&#125;;<span class="variable language_">console</span>.<span class="title function_">log</span>(user);</code></pre><h2 id="빌드-및-테스트"><a href="#빌드-및-테스트" class="headerlink" title="빌드 및 테스트"></a>빌드 및 테스트</h2><h3 id="TypeScript-빌드-설정"><a href="#TypeScript-빌드-설정" class="headerlink" title="TypeScript 빌드 설정"></a>TypeScript 빌드 설정</h3><p><code>tsconfig.json</code> 파일을 설정합니다.</p><pre><code class="highlight json"><span class="punctuation">&#123;</span>  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>    <span class="attr">&quot;outDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./lib&quot;</span><span class="punctuation">,</span>    <span class="attr">&quot;rootDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./src&quot;</span><span class="punctuation">,</span>    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;commonjs&quot;</span><span class="punctuation">,</span>    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;es6&quot;</span><span class="punctuation">,</span>    <span class="attr">&quot;esModuleInterop&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span>  <span class="punctuation">&#125;</span><span class="punctuation">,</span>  <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;src&quot;</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></code></pre><h3 id="빌드-스크립트-작성"><a href="#빌드-스크립트-작성" class="headerlink" title="빌드 스크립트 작성"></a>빌드 스크립트 작성</h3><p><code>package.json</code>에 빌드 스크립트를 추가합니다.</p><pre><code class="highlight json"><span class="punctuation">&#123;</span>  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tsc&quot;</span>  <span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></code></pre><h3 id="빌드-실행"><a href="#빌드-실행" class="headerlink" title="빌드 실행"></a>빌드 실행</h3><p>다음 명령어를 사용하여 빌드를 실행합니다:</p><pre><code class="highlight bash">npm run build</code></pre><h3 id="빌드-결과-확인"><a href="#빌드-결과-확인" class="headerlink" title="빌드 결과 확인"></a>빌드 결과 확인</h3><p>타입 충돌로 인해 다음과 같은 에러 메시지가 출력됩니다:</p><pre><code class="highlight bash">error TS2322: Type <span class="string">&#x27;number&#x27;</span> is not assignable to <span class="built_in">type</span> <span class="string">&#x27;string&#x27;</span>.</code></pre><h2 id="해결-방안"><a href="#해결-방안" class="headerlink" title="해결 방안"></a>해결 방안</h2><ol><li><p><strong>타입 정의 수정</strong></p><ul><li>타입 충돌을 방지하기 위해 타입 정의를 올바르게 수정합니다.</li></ul><pre><code class="highlight typescript"><span class="comment">// src/types.ts</span><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">User</span> &#123;  <span class="attr">id</span>: <span class="built_in">number</span>;  <span class="attr">name</span>: <span class="built_in">string</span>;&#125;</code></pre></li><li><p><strong>타입 정의 분리</strong></p><ul><li>동일한 이름의 타입을 다르게 정의해야 하는 경우, 네임스페이스를 사용하여 타입 정의를 분리합니다.</li></ul><pre><code class="highlight typescript"><span class="comment">// src/types.ts</span><span class="keyword">export</span> <span class="keyword">namespace</span> <span class="title class_">UserNamespace</span> &#123;  <span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">User</span> &#123;    <span class="attr">id</span>: <span class="built_in">number</span>;    <span class="attr">name</span>: <span class="built_in">string</span>;  &#125;&#125;<span class="keyword">export</span> <span class="keyword">namespace</span> <span class="title class_">AdminNamespace</span> &#123;  <span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">User</span> &#123;    <span class="attr">id</span>: <span class="built_in">string</span>;    <span class="attr">name</span>: <span class="built_in">string</span>;  &#125;&#125;</code></pre><pre><code class="highlight typescript"><span class="comment">// src/main.ts</span><span class="keyword">import</span> &#123; <span class="title class_">UserNamespace</span>, <span class="title class_">AdminNamespace</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./types&quot;</span>;<span class="keyword">const</span> <span class="attr">user</span>: <span class="title class_">UserNamespace</span>.<span class="property">User</span> = &#123;  <span class="attr">id</span>: <span class="number">1</span>,  <span class="attr">name</span>: <span class="string">&quot;John Doe&quot;</span>,&#125;;<span class="keyword">const</span> <span class="attr">admin</span>: <span class="title class_">AdminNamespace</span>.<span class="property">User</span> = &#123;  <span class="attr">id</span>: <span class="string">&quot;admin-1&quot;</span>,  <span class="attr">name</span>: <span class="string">&quot;Jane Doe&quot;</span>,&#125;;<span class="variable language_">console</span>.<span class="title function_">log</span>(user);<span class="variable language_">console</span>.<span class="title function_">log</span>(admin);</code></pre></li></ol><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 TypeScript에서 타입 정의와 타입 충돌 문제를 해결하는 방법에 대해 알아보았습니다. 올바른 타입 정의와 네임스페이스를 사용하여 타입 충돌을 방지하고, 코드의 안정성과 가독성을 높일 수 있습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> TS_트러블슈팅 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue 상태 관리 - Vuex</title>
      <link href="/vue/14/"/>
      <url>/vue/14/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-상태-관리-Vuex"><a href="#Vue-상태-관리-Vuex" class="headerlink" title="Vue 상태 관리 Vuex"></a>Vue 상태 관리 Vuex</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 Vue.js 애플리케이션에서 상태 관리를 담당하는 <strong>Vuex</strong>에 대해 알아보겠습니다. Vuex는 Vue.js 애플리케이션의 중앙 집중식 상태 관리 패턴을 제공하는 공식 라이브러리로, 복잡한 애플리케이션에서 상태를 효율적으로 관리하고 데이터 흐름을 예측 가능하게 만들어줍니다.</p><blockquote><p>전체 가이드는 <a href="https://v3.vuex.vuejs.org/kr/">공식 docs</a>를 참고해주세요!</p></blockquote><h2 id="1-Vuex의-기본-개념과-구조"><a href="#1-Vuex의-기본-개념과-구조" class="headerlink" title="1. Vuex의 기본 개념과 구조"></a>1. Vuex의 기본 개념과 구조</h2><h3 id="props-emit의-한계"><a href="#props-emit의-한계" class="headerlink" title="props, emit의 한계"></a>props, emit의 한계</h3><p>먼저 <a href="/vue/4/">Vue 컴포넌트</a>에서 다뤘던 내용을 잠시 복기해보겠습니다.<br>Vue에서 컴포넌트 간 상태 관리를 할 때 props와 emit을 사용했습니다. 다만 이 상태관리는 부모-자식 컴포넌트 사이에만 동작합니다.<br>직전 글인 <a href="/vue/13/">Vue 상태 관리 - provide, inject</a>도 잠시 복기해보겠습니다.<br>자식의 자식 컴포넌트(하위 컴포넌트)에 상태 전달을 하는 것은 provide와 inject를 사용하여 단번에 전송이 가능합니다.<br>그러나 부모의 부모 컴포넌트(상위 컴포넌트)에 이벤트를 던져줄때는 이런 기본 기능이 없으므로 두 번의 emit을 해야만 합니다.</p><h3 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h3><p>Vuex를 사용하면 애플리케이션의 상태를 단일 스토어에서 관리하고, 모든 컴포넌트가 이 상태에 접근하거나 이를 수정할 수 있습니다. 이는 상태 관리의 복잡성을 줄이고, 데이터 흐름을 예측 가능하게 만들어줍니다.</p><h3 id="Vuex의-핵심-개념"><a href="#Vuex의-핵심-개념" class="headerlink" title="Vuex의 핵심 개념"></a>Vuex의 핵심 개념</h3><p>Vuex는 크게 다음과 같은 핵심 개념들로 구성됩니다:</p><ul><li><strong>State</strong>: 애플리케이션의 상태를 저장하는 곳입니다. 모든 컴포넌트에서 공유되는 상태를 정의합니다.</li><li><strong>Mutations</strong>: 상태를 변경하는 함수입니다. 상태를 변경할 때는 반드시 뮤테이션을 통해서만 변경해야 합니다.</li><li><strong>Actions</strong>: 비동기 작업을 수행하며, 비동기 작업이 완료되면 뮤테이션을 통해 상태를 변경합니다.</li><li><strong>Getters</strong>: 상태를 기반으로 계산된 값을 반환합니다. Vue의 computed 속성과 유사하게 작동합니다.</li><li><strong>Modules</strong>: 애플리케이션이 커짐에 따라 스토어를 모듈로 분리하여 관리할 수 있습니다.</li></ul><h3 id="Vuex-설치"><a href="#Vuex-설치" class="headerlink" title="Vuex 설치"></a>Vuex 설치</h3><p>Vuex는 Vue.js 애플리케이션에 플러그인으로 설치됩니다. Vuex를 설치하기 위해 npm을 사용합니다.</p><pre><code class="highlight bash">npm install vuex@next</code></pre><h2 id="2-상태-관리를-위한-스토어-설정"><a href="#2-상태-관리를-위한-스토어-설정" class="headerlink" title="2. 상태 관리를 위한 스토어 설정"></a>2. 상태 관리를 위한 스토어 설정</h2><h3 id="스토어-Store-생성"><a href="#스토어-Store-생성" class="headerlink" title="스토어(Store) 생성"></a>스토어(Store) 생성</h3><p>스토어는 Vuex의 중심이며, 애플리케이션의 모든 상태를 저장하는 곳입니다. 스토어를 생성하려면 <code>createStore</code> 함수를 사용합니다.</p><pre><code class="highlight javascript"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;<span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span>;<span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&quot;./App.vue&quot;</span>;<span class="keyword">const</span> store = <span class="title function_">createStore</span>(&#123;  <span class="title function_">state</span>(<span class="params"></span>) &#123;    <span class="keyword">return</span> &#123;      <span class="attr">count</span>: <span class="number">0</span>,    &#125;;  &#125;,  <span class="attr">mutations</span>: &#123;    <span class="title function_">increment</span>(<span class="params">state</span>) &#123;      state.<span class="property">count</span>++;    &#125;,  &#125;,  <span class="attr">actions</span>: &#123;    <span class="title function_">incrementAsync</span>(<span class="params">&#123; commit &#125;</span>) &#123;      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;        <span class="title function_">commit</span>(<span class="string">&quot;increment&quot;</span>);      &#125;, <span class="number">1000</span>);    &#125;,  &#125;,  <span class="attr">getters</span>: &#123;    <span class="title function_">doubleCount</span>(<span class="params">state</span>) &#123;      <span class="keyword">return</span> state.<span class="property">count</span> * <span class="number">2</span>;    &#125;,  &#125;,&#125;);<span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>);app.<span class="title function_">use</span>(store);app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</code></pre><h3 id="스토어의-기본-구조"><a href="#스토어의-기본-구조" class="headerlink" title="스토어의 기본 구조"></a>스토어의 기본 구조</h3><p>위 코드에서 스토어의 기본 구조는 다음과 같습니다:</p><p><img src="/img/vuex%ED%9D%90%EB%A6%84%EB%8F%84.png" alt="vuex흐름도(출처 : https://v3.vuex.vuejs.org)"></p><ul><li><strong>state</strong>: 애플리케이션의 상태를 정의합니다. 여기서는 <code>count</code>라는 상태를 정의했습니다.</li><li><strong>mutations</strong>: 상태를 변경하는 함수를 정의합니다. <code>increment</code> 뮤테이션은 <code>count</code> 상태를 증가시킵니다.</li><li><strong>actions</strong>: 비동기 작업을 처리하고, 완료되면 뮤테이션을 호출합니다. <code>incrementAsync</code> 액션은 1초 후에 <code>increment</code> 뮤테이션을 호출합니다.</li><li><strong>getters</strong>: 상태를 기반으로 계산된 값을 반환합니다. <code>doubleCount</code> 게터는 <code>count</code>의 두 배 값을 반환합니다.</li></ul><h3 id="상태-접근과-변경"><a href="#상태-접근과-변경" class="headerlink" title="상태 접근과 변경"></a>상태 접근과 변경</h3><p>컴포넌트에서 Vuex 상태에 접근하거나 상태를 변경하는 방법은 다음과 같습니다.</p><h4 id="상태-접근"><a href="#상태-접근" class="headerlink" title="상태 접근"></a>상태 접근</h4><p>상태는 <code>this.$store.state</code>를 통해 접근할 수 있습니다.</p><pre><code class="highlight javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;  <span class="attr">computed</span>: &#123;    <span class="title function_">count</span>(<span class="params"></span>) &#123;      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">count</span>;    &#125;,  &#125;,&#125;;</code></pre><h4 id="상태-변경"><a href="#상태-변경" class="headerlink" title="상태 변경"></a>상태 변경</h4><p>상태를 변경할 때는 반드시 뮤테이션을 통해서만 변경해야 합니다. 뮤테이션은 <code>this.$store.commit</code>으로 호출합니다.</p><pre><code class="highlight javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;  <span class="attr">methods</span>: &#123;    <span class="title function_">increment</span>(<span class="params"></span>) &#123;      <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&quot;increment&quot;</span>);    &#125;,  &#125;,&#125;;</code></pre><h4 id="비동기-작업-처리"><a href="#비동기-작업-처리" class="headerlink" title="비동기 작업 처리"></a>비동기 작업 처리</h4><p>비동기 작업은 액션을 통해 처리하며, 액션은 <code>this.$store.dispatch</code>로 호출합니다.</p><pre><code class="highlight javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;  <span class="attr">methods</span>: &#123;    <span class="title function_">incrementAsync</span>(<span class="params"></span>) &#123;      <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&quot;incrementAsync&quot;</span>);    &#125;,  &#125;,&#125;;</code></pre><h3 id="스토어-모듈화"><a href="#스토어-모듈화" class="headerlink" title="스토어 모듈화"></a>스토어 모듈화</h3><p>애플리케이션이 커짐에 따라 스토어를 모듈로 분리하여 관리할 수 있습니다. 각 모듈은 자체 state, mutations, actions, getters를 가질 수 있습니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> moduleA = &#123;  <span class="title function_">state</span>(<span class="params"></span>) &#123;    <span class="keyword">return</span> &#123; <span class="attr">count</span>: <span class="number">0</span> &#125;;  &#125;,  <span class="attr">mutations</span>: &#123;    <span class="title function_">increment</span>(<span class="params">state</span>) &#123;      state.<span class="property">count</span>++;    &#125;,  &#125;,&#125;;<span class="keyword">const</span> moduleB = &#123;  <span class="title function_">state</span>(<span class="params"></span>) &#123;    <span class="keyword">return</span> &#123; <span class="attr">count</span>: <span class="number">0</span> &#125;;  &#125;,  <span class="attr">mutations</span>: &#123;    <span class="title function_">increment</span>(<span class="params">state</span>) &#123;      state.<span class="property">count</span>++;    &#125;,  &#125;,&#125;;<span class="keyword">const</span> store = <span class="title function_">createStore</span>(&#123;  <span class="attr">modules</span>: &#123;    <span class="attr">a</span>: moduleA,    <span class="attr">b</span>: moduleB,  &#125;,&#125;);</code></pre><p>이제 <code>store.state.a.count</code>와 <code>store.state.b.count</code>로 각각의 모듈 상태에 접근할 수 있습니다.</p><p>.</p><h2 id="3-Composition-API와-Vuex"><a href="#3-Composition-API와-Vuex" class="headerlink" title="3. Composition API와 Vuex"></a>3. Composition API와 Vuex</h2><blockquote><p>만약 Vue가 처음이시라면 이 섹션은 건너 뛰어주세요!</p></blockquote><p>Vue3에 추가된 <a href="/vue/24/">Composition API</a>를 사용하여 컴포넌트를 더욱 유연하고 모듈화된 방식으로 작성할 수 있습니다.<br>Composition API를 사용하면 상태 관리를 더 세분화하고 컴포넌트 간에 상태를 직접 공유할 수 있으며, Vuex의 일부 기능을 대체할 수 있습니다.</p><h3 id="Composition-API를-활용한-상태-관리"><a href="#Composition-API를-활용한-상태-관리" class="headerlink" title="Composition API를 활용한 상태 관리"></a>Composition API를 활용한 상태 관리</h3><p>Composition API를 사용할 때, Vuex와 같은 중앙 집중식 상태 관리가 필요하지 않다면, <code>reactive</code>나 <code>ref</code>를 사용하여 컴포넌트 간에 상태를 공유할 수 있습니다.</p><h4 id="예시-reactive를-사용한-상태-관리"><a href="#예시-reactive를-사용한-상태-관리" class="headerlink" title="예시: reactive를 사용한 상태 관리"></a>예시: <code>reactive</code>를 사용한 상태 관리</h4><pre><code class="highlight javascript"><span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;<span class="keyword">export</span> <span class="keyword">default</span> &#123;  <span class="title function_">setup</span>(<span class="params"></span>) &#123;    <span class="keyword">const</span> state = <span class="title function_">reactive</span>(&#123;      <span class="attr">count</span>: <span class="number">0</span>,    &#125;);    <span class="keyword">function</span> <span class="title function_">increment</span>(<span class="params"></span>) &#123;      state.<span class="property">count</span>++;    &#125;    <span class="keyword">return</span> &#123;      state,      increment,    &#125;;  &#125;,&#125;;</code></pre><p>위 예제에서는 Vuex를 사용하지 않고도 컴포넌트 내에서 <code>reactive</code> 상태를 관리할 수 있습니다. 이 상태를 여러 컴포넌트에서 공유하려면 <code>provide</code>와 <code>inject</code>를 활용할 수 있습니다.</p><h4 id="Provide와-Inject를-활용한-상태-공유"><a href="#Provide와-Inject를-활용한-상태-공유" class="headerlink" title="Provide와 Inject를 활용한 상태 공유"></a>Provide와 Inject를 활용한 상태 공유</h4><pre><code class="highlight javascript"><span class="keyword">import</span> &#123; reactive, provide &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;<span class="keyword">export</span> <span class="keyword">default</span> &#123;  <span class="title function_">setup</span>(<span class="params"></span>) &#123;    <span class="keyword">const</span> state = <span class="title function_">reactive</span>(&#123;      <span class="attr">count</span>: <span class="number">0</span>,    &#125;);    <span class="keyword">function</span> <span class="title function_">increment</span>(<span class="params"></span>) &#123;      state.<span class="property">count</span>++;    &#125;    <span class="title function_">provide</span>(<span class="string">&quot;state&quot;</span>, state);    <span class="title function_">provide</span>(<span class="string">&quot;increment&quot;</span>, increment);    <span class="keyword">return</span> &#123;&#125;;  &#125;,&#125;;</code></pre><p>그리고 하위 컴포넌트에서는 <code>inject</code>를 사용하여 이 상태와 함수를 사용할 수 있습니다.</p><pre><code class="highlight javascript"><span class="keyword">import</span> &#123; inject &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;<span class="keyword">export</span> <span class="keyword">default</span> &#123;  <span class="title function_">setup</span>(<span class="params"></span>) &#123;    <span class="keyword">const</span> state = <span class="title function_">inject</span>(<span class="string">&quot;state&quot;</span>);    <span class="keyword">const</span> increment = <span class="title function_">inject</span>(<span class="string">&quot;increment&quot;</span>);    <span class="keyword">return</span> &#123;      state,      increment,    &#125;;  &#125;,&#125;;</code></pre><h3 id="Composition-API와-Vuex의-병행-사용"><a href="#Composition-API와-Vuex의-병행-사용" class="headerlink" title="Composition API와 Vuex의 병행 사용"></a>Composition API와 Vuex의 병행 사용</h3><p>Vuex는 여전히 복잡한 애플리케이션에서 유용하며, Composition API와 함께 사용할 수 있습니다. 예를 들어, Vuex를 통해 중앙 집중식으로 관리되는 상태를 <code>useStore</code> 훅을 사용해 Composition API에서 직접 사용할 수 있습니다.</p><pre><code class="highlight javascript"><span class="keyword">import</span> &#123; useStore &#125; <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span>;<span class="keyword">export</span> <span class="keyword">default</span> &#123;  <span class="title function_">setup</span>(<span class="params"></span>) &#123;    <span class="keyword">const</span> store = <span class="title function_">useStore</span>();    <span class="keyword">function</span> <span class="title function_">increment</span>(<span class="params"></span>) &#123;      store.<span class="title function_">commit</span>(<span class="string">&quot;increment&quot;</span>);    &#125;    <span class="keyword">return</span> &#123;      <span class="attr">count</span>: store.<span class="property">state</span>.<span class="property">count</span>,      increment,    &#125;;  &#125;,&#125;;</code></pre><h3 id="Vuex-vs-Composition-API"><a href="#Vuex-vs-Composition-API" class="headerlink" title="Vuex vs. Composition API"></a>Vuex vs. Composition API</h3><p>Vuex는 아직 상태 관리에 자주 쓰이는 도구로 남아 있으며, 복잡한 상태 관리가 필요한 경우 매우 유용합니다. 그러나, 작은 규모의 프로젝트나 특정 컴포넌트 간의 상태 공유만 필요한 경우 Composition API와 <code>reactive</code>를 사용하는 것이 더 간단하고 효율적일 수 있습니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 Vue.js 애플리케이션에서 상태 관리를 담당하는 <strong>Vuex</strong>에 대해 알아보았습니다. Vuex는 단일 스토어에서 중앙 집중식으로 상태를 관리하고, 이를 통해 데이터 흐름을 예측 가능하게 만들며, 복잡한 애플리케이션에서 상태 관리를 효율적으로 할 수 있습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue 상태 관리 - provide, inject</title>
      <link href="/vue/13/"/>
      <url>/vue/13/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-상태-관리-provide-inject"><a href="#Vue-상태-관리-provide-inject" class="headerlink" title="Vue 상태 관리 - provide, inject"></a>Vue 상태 관리 - provide, inject</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 Vue.js에서 컴포넌트 간의 데이터를 주고받는 방법 중 하나인 <strong>provide와 inject</strong>에 대해 알아보겠습니다.<br>이 기능은 부모 컴포넌트에서 자식 컴포넌트로 데이터를 전달할 때 유용하며, 특히 깊은 컴포넌트 계층 구조에서 데이터를 공유할 때 매우 유용합니다.</p><h2 id="1-Provide와-Inject"><a href="#1-Provide와-Inject" class="headerlink" title="1. Provide와 Inject"></a>1. Provide와 Inject</h2><h3 id="Provide와-Inject의-개념"><a href="#Provide와-Inject의-개념" class="headerlink" title="Provide와 Inject의 개념"></a>Provide와 Inject의 개념</h3><ul><li><p><strong><code>provide</code></strong>: 부모 컴포넌트에서 데이터를 제공하는 역할을 합니다. 데이터를 제공하기 위해 <code>provide</code> 옵션을 사용하며, 이를 통해 하위 컴포넌트에 데이터를 전달할 수 있습니다.</p></li><li><p><strong><code>inject</code></strong>: 자식 컴포넌트에서 부모 컴포넌트가 제공한 데이터를 주입받는 역할을 합니다. 데이터를 주입받기 위해 <code>inject</code> 옵션을 사용하며, 이를 통해 상위 컴포넌트에서 제공된 데이터를 접근할 수 있습니다.</p></li></ul><p>이 두 기능은 Vue의 반응형 시스템과 연동되므로, 제공된 데이터가 변경되면 주입된 데이터도 자동으로 업데이트됩니다.</p><h3 id="Provide와-Inject의-사용-시나리오"><a href="#Provide와-Inject의-사용-시나리오" class="headerlink" title="Provide와 Inject의 사용 시나리오"></a>Provide와 Inject의 사용 시나리오</h3><ul><li><strong>깊은 컴포넌트 계층 구조</strong>: 여러 계층을 거쳐 데이터를 전달할 필요 없이, 최상위 부모 컴포넌트에서 직접 하위 컴포넌트로 데이터를 전달할 수 있습니다.</li><li><strong>컴포넌트 간의 공통 데이터</strong>: 여러 컴포넌트에서 공통으로 사용하는 설정값이나 상태를 공유할 때 유용합니다.</li></ul><h2 id="2-Provide와-Inject의-기본-사용법"><a href="#2-Provide와-Inject의-기본-사용법" class="headerlink" title="2. Provide와 Inject의 기본 사용법"></a>2. Provide와 Inject의 기본 사용법</h2><h3 id="Provide의-사용법"><a href="#Provide의-사용법" class="headerlink" title="Provide의 사용법"></a>Provide의 사용법</h3><p>부모 컴포넌트에서 데이터를 제공하기 위해 <code>provide</code> 옵션을 사용합니다. <code>provide</code>는 함수로 정의되며, 이 함수는 제공할 데이터를 반환합니다.</p><pre><code class="highlight javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;  <span class="title function_">data</span>(<span class="params"></span>) &#123;    <span class="keyword">return</span> &#123;      <span class="attr">characterName</span>: <span class="string">&quot;전사&quot;</span>,    &#125;;  &#125;,  <span class="title function_">provide</span>(<span class="params"></span>) &#123;    <span class="keyword">return</span> &#123;      <span class="attr">characterName</span>: <span class="variable language_">this</span>.<span class="property">characterName</span>,    &#125;;  &#125;,&#125;;</code></pre><p>위 예제에서는 <code>provide</code>를 사용해 <code>characterName</code>이라는 데이터를 제공하고 있습니다. 이 데이터는 하위 컴포넌트에서 주입받을 수 있습니다.</p><h3 id="Inject의-사용법"><a href="#Inject의-사용법" class="headerlink" title="Inject의 사용법"></a>Inject의 사용법</h3><p>자식 컴포넌트에서 부모 컴포넌트가 제공한 데이터를 주입받기 위해 <code>inject</code> 옵션을 사용합니다.</p><pre><code class="highlight javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;  <span class="attr">inject</span>: [<span class="string">&quot;characterName&quot;</span>],&#125;;</code></pre><p>위 예제에서는 <code>inject</code>를 사용해 <code>characterName</code> 데이터를 주입받고 있습니다. 이 데이터는 부모 컴포넌트에서 제공된 값입니다.</p><h2 id="3-Provide와-Inject를-활용한-RPG-게임-예제"><a href="#3-Provide와-Inject를-활용한-RPG-게임-예제" class="headerlink" title="3. Provide와 Inject를 활용한 RPG 게임 예제"></a>3. Provide와 Inject를 활용한 RPG 게임 예제</h2><p>RPG 게임에서 여러 캐릭터의 이름과 직업을 부모 컴포넌트에서 제공하고, 자식 컴포넌트에서 이를 주입받아 출력하는 예제를 만들어보겠습니다.</p><h3 id="부모-컴포넌트"><a href="#부모-컴포넌트" class="headerlink" title="부모 컴포넌트"></a>부모 컴포넌트</h3><pre><code class="highlight vue">&lt;template&gt;  &lt;div&gt;    &lt;h1&gt;파티 구성&lt;/h1&gt;    &lt;warrior-card&gt;&lt;/warrior-card&gt;    &lt;mage-card&gt;&lt;/mage-card&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import WarriorCard from &quot;./WarriorCard.vue&quot;;import MageCard from &quot;./MageCard.vue&quot;;export default &#123;  components: &#123;    WarriorCard,    MageCard,  &#125;,  data() &#123;    return &#123;      warrior: &#123; name: &quot;전사&quot;, job: &quot;탱커&quot; &#125;,      mage: &#123; name: &quot;마법사&quot;, job: &quot;딜러&quot; &#125;,    &#125;;  &#125;,  provide() &#123;    return &#123;      warrior: this.warrior,      mage: this.mage,    &#125;;  &#125;,&#125;;&lt;/script&gt;</code></pre><h3 id="전사-카드-컴포넌트-WarriorCard-vue"><a href="#전사-카드-컴포넌트-WarriorCard-vue" class="headerlink" title="전사 카드 컴포넌트 (WarriorCard.vue)"></a>전사 카드 컴포넌트 (<code>WarriorCard.vue</code>)</h3><pre><code class="highlight vue">&lt;template&gt;  &lt;div&gt;    &lt;h2&gt;&#123;&#123; warrior.name &#125;&#125;&lt;/h2&gt;    &lt;p&gt;직업: &#123;&#123; warrior.job &#125;&#125;&lt;/p&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123;  inject: [&quot;warrior&quot;],&#125;;&lt;/script&gt;</code></pre><h3 id="마법사-카드-컴포넌트-MageCard-vue"><a href="#마법사-카드-컴포넌트-MageCard-vue" class="headerlink" title="마법사 카드 컴포넌트 (MageCard.vue)"></a>마법사 카드 컴포넌트 (<code>MageCard.vue</code>)</h3><pre><code class="highlight vue">&lt;template&gt;  &lt;div&gt;    &lt;h2&gt;&#123;&#123; mage.name &#125;&#125;&lt;/h2&gt;    &lt;p&gt;직업: &#123;&#123; mage.job &#125;&#125;&lt;/p&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123;  inject: [&quot;mage&quot;],&#125;;&lt;/script&gt;</code></pre><h3 id="예제-설명"><a href="#예제-설명" class="headerlink" title="예제 설명"></a>예제 설명</h3><ul><li><strong>부모 컴포넌트</strong>: <code>provide</code>를 사용해 <code>warrior</code>와 <code>mage</code> 데이터를 제공합니다. 이는 하위의 <code>WarriorCard</code>와 <code>MageCard</code> 컴포넌트에서 사용될 데이터입니다.</li><li><strong>자식 컴포넌트</strong>: <code>inject</code>를 사용해 부모 컴포넌트에서 제공된 <code>warrior</code>와 <code>mage</code> 데이터를 주입받아 화면에 출력합니다.</li></ul><p>이 예제에서는 부모 컴포넌트가 제공한 데이터를 여러 자식 컴포넌트가 주입받아 사용하고 있습니다. Provide와 Inject 기능을 사용하면, 이처럼 여러 컴포넌트 간에 데이터를 쉽게 공유할 수 있습니다.</p><h2 id="4-Composition-API와-Provide-Inject"><a href="#4-Composition-API와-Provide-Inject" class="headerlink" title="4. Composition API와 Provide&#x2F;Inject"></a>4. Composition API와 Provide&#x2F;Inject</h2><p>Vue3에서는 Composition API를 사용하여 <code>provide</code>와 <code>inject</code> 기능을 더 유연하게 사용할 수 있습니다. 이 방법을 사용하면 코드의 재사용성과 관리가 더욱 용이해집니다.</p><h3 id="Provide의-사용법-Composition-API"><a href="#Provide의-사용법-Composition-API" class="headerlink" title="Provide의 사용법 (Composition API)"></a>Provide의 사용법 (Composition API)</h3><blockquote><p>만약 Vue가 처음이시라면 이 섹션은 건너 뛰어주세요!</p></blockquote><p>Vue3에 추가된 <a href="/vue/24/">Composition API</a>를 사용하여 컴포넌트를 더욱 유연하고 모듈화된 방식으로 작성할 수 있습니다.<br>Composition API에서는 <code>provide</code> 함수를 <code>setup</code> 함수 내에서 직접 호출하여 데이터를 제공할 수 있습니다.</p><pre><code class="highlight javascript"><span class="keyword">import</span> &#123; provide &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;<span class="keyword">export</span> <span class="keyword">default</span> &#123;  <span class="title function_">setup</span>(<span class="params"></span>) &#123;    <span class="keyword">const</span> warrior = &#123; <span class="attr">name</span>: <span class="string">&quot;전사&quot;</span>, <span class="attr">job</span>: <span class="string">&quot;탱커&quot;</span> &#125;;    <span class="keyword">const</span> mage = &#123; <span class="attr">name</span>: <span class="string">&quot;마법사&quot;</span>, <span class="attr">job</span>: <span class="string">&quot;딜러&quot;</span> &#125;;    <span class="title function_">provide</span>(<span class="string">&quot;warrior&quot;</span>, warrior);    <span class="title function_">provide</span>(<span class="string">&quot;mage&quot;</span>, mage);    <span class="keyword">return</span> &#123;&#125;;  &#125;,&#125;;</code></pre><p>위 예제에서는 <code>provide</code> 함수를 사용하여 <code>warrior</code>와 <code>mage</code> 데이터를 제공하고 있습니다. 이 데이터는 하위 컴포넌트에서 <code>inject</code>를 통해 주입받을 수 있습니다.</p><h3 id="Inject의-사용법-Composition-API"><a href="#Inject의-사용법-Composition-API" class="headerlink" title="Inject의 사용법 (Composition API)"></a>Inject의 사용법 (Composition API)</h3><p>Composition API에서는 <code>inject</code> 함수를 사용하여 상위 컴포넌트에서 제공한 데이터를 주입받을 수 있습니다.</p><pre><code class="highlight javascript"><span class="keyword">import</span> &#123; inject &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;<span class="keyword">export</span> <span class="keyword">default</span> &#123;  <span class="title function_">setup</span>(<span class="params"></span>) &#123;    <span class="keyword">const</span> warrior = <span class="title function_">inject</span>(<span class="string">&quot;warrior&quot;</span>);    <span class="keyword">const</span> mage = <span class="title function_">inject</span>(<span class="string">&quot;mage&quot;</span>);    <span class="keyword">return</span> &#123;      warrior,      mage,    &#125;;  &#125;,&#125;;</code></pre><p>위 예제에서는 <code>inject</code> 함수를 통해 상위 컴포넌트에서 제공한 <code>warrior</code>와 <code>mage</code> 데이터를 주입받아 사용할 수 있습니다.</p><h3 id="예제-RPG-게임에서의-Composition-API-활용"><a href="#예제-RPG-게임에서의-Composition-API-활용" class="headerlink" title="예제: RPG 게임에서의 Composition API 활용"></a>예제: RPG 게임에서의 Composition API 활용</h3><p>RPG 게임에서 여러 캐릭터의 이름과 직업을 부모 컴포넌트에서 제공하고, 자식 컴포넌트에서 이를 주입받아 출력하는 예제를 Composition API를 사용해 구현해보겠습니다.</p><h4 id="부모-컴포넌트-1"><a href="#부모-컴포넌트-1" class="headerlink" title="부모 컴포넌트"></a>부모 컴포넌트</h4><pre><code class="highlight vue">&lt;template&gt;  &lt;div&gt;    &lt;h1&gt;파티 구성&lt;/h1&gt;    &lt;warrior-card&gt;&lt;/warrior-card&gt;    &lt;mage-card&gt;&lt;/mage-card&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import &#123; provide &#125; from &quot;vue&quot;;import WarriorCard from &quot;./WarriorCard.vue&quot;;import MageCard from &quot;./MageCard.vue&quot;;export default &#123;  components: &#123;    WarriorCard,    MageCard,  &#125;,  setup() &#123;    const warrior = &#123; name: &quot;전사&quot;, job: &quot;탱커&quot; &#125;;    const mage = &#123; name: &quot;마법사&quot;, job: &quot;딜러&quot; &#125;;    provide(&quot;warrior&quot;, warrior);    provide(&quot;mage&quot;, mage);    return &#123;&#125;;  &#125;,&#125;;&lt;/script&gt;</code></pre><h4 id="전사-카드-컴포넌트-WarriorCard-vue-1"><a href="#전사-카드-컴포넌트-WarriorCard-vue-1" class="headerlink" title="전사 카드 컴포넌트 (WarriorCard.vue)"></a>전사 카드 컴포넌트 (<code>WarriorCard.vue</code>)</h4><pre><code class="highlight vue">&lt;template&gt;  &lt;div&gt;    &lt;h2&gt;&#123;&#123; warrior.name &#125;&#125;&lt;/h2&gt;    &lt;p&gt;직업: &#123;&#123; warrior.job &#125;&#125;&lt;/p&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import &#123; inject &#125; from &quot;vue&quot;;export default &#123;  setup() &#123;    const warrior = inject(&quot;warrior&quot;);    return &#123;      warrior,    &#125;;  &#125;,&#125;;&lt;/script&gt;</code></pre><h4 id="마법사-카드-컴포넌트-MageCard-vue-1"><a href="#마법사-카드-컴포넌트-MageCard-vue-1" class="headerlink" title="마법사 카드 컴포넌트 (MageCard.vue)"></a>마법사 카드 컴포넌트 (<code>MageCard.vue</code>)</h4><pre><code class="highlight vue">&lt;template&gt;  &lt;div&gt;    &lt;h2&gt;&#123;&#123; mage.name &#125;&#125;&lt;/h2&gt;    &lt;p&gt;직업: &#123;&#123; mage.job &#125;&#125;&lt;/p&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import &#123; inject &#125; from &quot;vue&quot;;export default &#123;  setup() &#123;    const mage = inject(&quot;mage&quot;);    return &#123;      mage,    &#125;;  &#125;,&#125;;&lt;/script&gt;</code></pre><h3 id="예제-설명-1"><a href="#예제-설명-1" class="headerlink" title="예제 설명"></a>예제 설명</h3><p>이 예제에서는 Composition API를 사용하여 부모 컴포넌트에서 데이터를 제공하고, 자식 컴포넌트에서 이를 주입받아 출력합니다. Composition API를 활용하면 데이터 제공과 주입의 로직을 더 명확하게 관리할 수 있으며, 코드의 재사용성과 유지보수성이 향상됩니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 Vue.js의 <strong>Provide와 Inject</strong> 기능에 대해 알아보았습니다. Provide와 Inject를 사용하면 깊은 컴포넌트 계층 구조에서도 데이터를 쉽게 전달하고, 공통 데이터를 여러 컴포넌트에서 재사용할 수 있습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue Router</title>
      <link href="/vue/12/"/>
      <url>/vue/12/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-Router"><a href="#Vue-Router" class="headerlink" title="Vue Router"></a>Vue Router</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 Vue.js 애플리케이션에서 페이지 간의 이동을 관리하는 데 중요한 역할을 하는 <strong>Vue Router</strong>에 대해 알아보겠습니다. Vue Router는 Vue.js 애플리케이션에서 라우팅을 관리하기 위한 공식 라이브러리로, 단일 페이지 애플리케이션(SPA)에서 다양한 페이지를 구현할 수 있게 해줍니다.</p><blockquote><p>전체 가이드는 <a href="https://v3.router.vuejs.org/kr/">공식 docs</a>를 참고해주세요!</p></blockquote><h2 id="1-Vue-Router의-기본-설정과-사용-방법"><a href="#1-Vue-Router의-기본-설정과-사용-방법" class="headerlink" title="1. Vue Router의 기본 설정과 사용 방법"></a>1. Vue Router의 기본 설정과 사용 방법</h2><h3 id="Vue-Router란"><a href="#Vue-Router란" class="headerlink" title="Vue Router란?"></a>Vue Router란?</h3><p>Vue Router는 Vue.js 애플리케이션에서 클라이언트 사이드 라우팅을 관리하는 라이브러리입니다. Vue Router를 사용하면 사용자와의 인터랙션에 따라 URL을 변경하고, 해당 URL에 맞는 컴포넌트를 렌더링하여 페이지 간의 이동을 구현할 수 있습니다.</p><h3 id="Vue-Router-설치"><a href="#Vue-Router-설치" class="headerlink" title="Vue Router 설치"></a>Vue Router 설치</h3><p>Vue Router를 사용하려면 먼저 해당 패키지를 설치해야 합니다. npm을 사용하여 Vue Router를 설치합니다.</p><pre><code class="highlight bash">npm install vue-router@next</code></pre><h3 id="Vue-Router-기본-설정"><a href="#Vue-Router-기본-설정" class="headerlink" title="Vue Router 기본 설정"></a>Vue Router 기본 설정</h3><p>Vue Router를 사용하려면 먼저 <code>router</code> 인스턴스를 생성하고, 이를 Vue 애플리케이션에 연결해야 합니다.</p><pre><code class="highlight javascript"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;<span class="keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;<span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&quot;./App.vue&quot;</span>;<span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&quot;./components/Home.vue&quot;</span>;<span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&quot;./components/About.vue&quot;</span>;<span class="comment">// 라우트 설정</span><span class="keyword">const</span> routes = [  &#123; <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>, <span class="attr">component</span>: <span class="title class_">Home</span> &#125;,  &#123; <span class="attr">path</span>: <span class="string">&quot;/about&quot;</span>, <span class="attr">component</span>: <span class="title class_">About</span> &#125;,];<span class="comment">// 라우터 인스턴스 생성</span><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;  <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(),  routes,&#125;);<span class="comment">// Vue 애플리케이션 생성</span><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>);<span class="comment">// 라우터를 Vue 애플리케이션에 등록</span>app.<span class="title function_">use</span>(router);<span class="comment">// 애플리케이션 마운트</span>app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</code></pre><h3 id="라우트-설정"><a href="#라우트-설정" class="headerlink" title="라우트 설정"></a>라우트 설정</h3><p>위 예제에서 라우트는 <code>routes</code> 배열로 정의되며, 각 라우트는 <code>path</code>와 <code>component</code>로 구성됩니다. <code>path</code>는 URL 경로를 나타내고, <code>component</code>는 해당 경로로 이동할 때 렌더링될 Vue 컴포넌트를 지정합니다.</p><ul><li><code>/</code> 경로는 <code>Home</code> 컴포넌트를 렌더링합니다.</li><li><code>/about</code> 경로는 <code>About</code> 컴포넌트를 렌더링합니다.</li></ul><h3 id="라우터-뷰-사용"><a href="#라우터-뷰-사용" class="headerlink" title="라우터 뷰 사용"></a>라우터 뷰 사용</h3><p>라우터가 렌더링될 위치를 지정하려면 <code>RouterView</code> 컴포넌트를 사용합니다. <code>RouterView</code>는 현재 활성화된 라우트에 따라 해당 컴포넌트를 렌더링하는 역할을 합니다.</p><pre><code class="highlight html"><span class="tag">&lt;<span class="name">template</span>&gt;</span>  <span class="tag">&lt;<span class="name">div</span>&gt;</span>    <span class="tag">&lt;<span class="name">nav</span>&gt;</span>      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>홈<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span>      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>소개<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span>    <span class="tag">&lt;/<span class="name">nav</span>&gt;</span>    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span>  <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span></code></pre><p>위 예제에서 <code>router-link</code>는 사용자에게 라우터 경로로 이동할 수 있는 링크를 제공합니다. <code>router-view</code>는 현재 라우트에 해당하는 컴포넌트를 렌더링하는 곳입니다.</p><h2 id="2-동적-라우트-매칭과-라우트-가드"><a href="#2-동적-라우트-매칭과-라우트-가드" class="headerlink" title="2. 동적 라우트 매칭과 라우트 가드"></a>2. 동적 라우트 매칭과 라우트 가드</h2><h3 id="동적-라우트-매칭"><a href="#동적-라우트-매칭" class="headerlink" title="동적 라우트 매칭"></a>동적 라우트 매칭</h3><p>동적 라우트 매칭은 URL의 일부를 동적으로 처리하는 방법입니다. 이를 통해 경로에 변수를 포함시켜 다양한 페이지를 처리할 수 있습니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> routes = [&#123; <span class="attr">path</span>: <span class="string">&quot;/user/:id&quot;</span>, <span class="attr">component</span>: <span class="title class_">User</span> &#125;];</code></pre><p>위 예제에서 <code>/user/:id</code> 경로는 <code>id</code>라는 동적 세그먼트를 포함하고 있으며, 실제 URL에서 <code>id</code> 값을 받아 <code>User</code> 컴포넌트로 전달합니다.</p><pre><code class="highlight javascript"><span class="comment">// User.vue</span>&lt;template&gt;  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>사용자 ID: &#123;&#123; userId &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>&lt;/template&gt;<span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><span class="language-javascript"><span class="language-xml">  <span class="attr">computed</span>: &#123;</span></span><span class="language-javascript"><span class="language-xml">    <span class="title function_">userId</span>(<span class="params"></span>) &#123;</span></span><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">params</span>.<span class="property">id</span>;</span></span><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><span class="language-javascript"><span class="language-xml">&#125;;</span></span><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></code></pre><p><code>$route.params</code>를 사용하여 라우트 경로에 전달된 파라미터를 참조할 수 있습니다.</p><h3 id="라우트-가드"><a href="#라우트-가드" class="headerlink" title="라우트 가드"></a>라우트 가드</h3><p>라우트 가드는 특정 라우트로의 접근을 제어하는 방법을 제공합니다. 이를 통해 사용자가 특정 조건을 만족할 때만 라우트로 이동할 수 있도록 설정할 수 있습니다.</p><h4 id="전역-가드"><a href="#전역-가드" class="headerlink" title="전역 가드"></a>전역 가드</h4><p>전역 가드는 모든 라우트 변경 시마다 실행됩니다.</p><pre><code class="highlight javascript">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;  <span class="keyword">if</span> (to.<span class="property">path</span> === <span class="string">&quot;/admin&quot;</span> &amp;&amp; !isAdmin) &#123;    <span class="title function_">next</span>(<span class="string">&quot;/login&quot;</span>);  &#125; <span class="keyword">else</span> &#123;    <span class="title function_">next</span>();  &#125;&#125;);</code></pre><p>이 예제에서는 사용자가 <code>/admin</code> 경로로 접근하려 할 때, 관리자인지 여부를 확인하고, 관리자가 아니라면 <code>/login</code> 경로로 리디렉션합니다.</p><h4 id="라우트별-가드"><a href="#라우트별-가드" class="headerlink" title="라우트별 가드"></a>라우트별 가드</h4><p>특정 라우트에서만 가드를 적용하려면 컴포넌트 내부에서 <code>beforeRouteEnter</code>, <code>beforeRouteUpdate</code>, <code>beforeRouteLeave</code>를 사용할 수 있습니다.</p><pre><code class="highlight javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;  <span class="title function_">beforeRouteEnter</span>(<span class="params">to, <span class="keyword">from</span>, next</span>) &#123;    <span class="keyword">if</span> (to.<span class="property">params</span>.<span class="property">id</span> === <span class="string">&quot;admin&quot;</span>) &#123;      <span class="title function_">next</span>();    &#125; <span class="keyword">else</span> &#123;      <span class="title function_">next</span>(<span class="string">&quot;/not-authorized&quot;</span>);    &#125;  &#125;,&#125;;</code></pre><p>위 예제에서는 사용자가 <code>admin</code> ID를 가진 페이지로 접근할 때만 해당 라우트로 이동할 수 있도록 설정했습니다.</p><h2 id="3-Vue-Router와-Composition-API"><a href="#3-Vue-Router와-Composition-API" class="headerlink" title="3. Vue Router와 Composition API"></a>3. Vue Router와 Composition API</h2><blockquote><p>만약 Vue가 처음이시라면 이 섹션은 건너 뛰어주세요!</p></blockquote><p>Vue3에 추가된 <a href="/vue/24/">Composition API</a>를 사용하여 컴포넌트를 더욱 유연하고 모듈화된 방식으로 작성할 수 있습니다.</p><h3 id="useRoute와-useRouter-사용"><a href="#useRoute와-useRouter-사용" class="headerlink" title="useRoute와 useRouter 사용"></a><code>useRoute</code>와 <code>useRouter</code> 사용</h3><p>Composition API에서 라우트 객체에 접근하려면 <code>useRoute</code> 함수를 사용합니다. 이 함수는 현재 활성화된 라우트에 대한 정보를 반환합니다.</p><pre><code class="highlight javascript"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;<span class="keyword">import</span> &#123; useRoute, useRouter &#125; <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;<span class="keyword">const</span> <span class="title class_">User</span> = &#123;  <span class="title function_">setup</span>(<span class="params"></span>) &#123;    <span class="keyword">const</span> route = <span class="title function_">useRoute</span>();    <span class="keyword">const</span> router = <span class="title function_">useRouter</span>();    <span class="keyword">const</span> userId = route.<span class="property">params</span>.<span class="property">id</span>;    <span class="keyword">const</span> <span class="title function_">goToHome</span> = (<span class="params"></span>) =&gt; &#123;      router.<span class="title function_">push</span>(<span class="string">&quot;/&quot;</span>);    &#125;;    <span class="keyword">return</span> &#123;      userId,      goToHome,    &#125;;  &#125;,  <span class="attr">template</span>: <span class="string">`&lt;div&gt;</span><span class="string">               &lt;h1&gt;사용자 ID: &#123;&#123; userId &#125;&#125;&lt;/h1&gt;</span><span class="string">               &lt;button @click=&quot;goToHome&quot;&gt;홈으로 이동&lt;/button&gt;</span><span class="string">             &lt;/div&gt;`</span>,&#125;;<span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;&#125;);app.<span class="title function_">component</span>(<span class="string">&quot;user&quot;</span>, <span class="title class_">User</span>);app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</code></pre><p>이 예제에서는 <code>useRoute</code>를 통해 현재 라우트의 <code>params</code>에서 사용자 ID를 가져오고, <code>useRouter</code>를 사용하여 프로그램적으로 다른 라우트로 이동하는 방법을 보여줍니다.</p><h3 id="동적-라우트와-Composition-API"><a href="#동적-라우트와-Composition-API" class="headerlink" title="동적 라우트와 Composition API"></a>동적 라우트와 Composition API</h3><p>동적 라우트 매칭을 사용할 때도 <code>useRoute</code>를 활용하여 동적 파라미터에 접근할 수 있습니다.</p><pre><code class="highlight javascript"><span class="keyword">import</span> &#123; defineComponent &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;<span class="keyword">import</span> &#123; useRoute &#125; <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;<span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;  <span class="title function_">setup</span>(<span class="params"></span>) &#123;    <span class="keyword">const</span> route = <span class="title function_">useRoute</span>();    <span class="keyword">const</span> userId = route.<span class="property">params</span>.<span class="property">id</span>;    <span class="keyword">return</span> &#123;      userId,    &#125;;  &#125;,  <span class="attr">template</span>: <span class="string">`&lt;div&gt;사용자 ID: &#123;&#123; userId &#125;&#125;&lt;/div&gt;`</span>,&#125;);</code></pre><p>이 코드에서는 <code>useRoute</code>를 통해 현재 라우트에서 <code>id</code> 파라미터를 가져와 컴포넌트 내에서 사용할 수 있도록 설정합니다.</p><h3 id="라우트-가드와-Composition-API"><a href="#라우트-가드와-Composition-API" class="headerlink" title="라우트 가드와 Composition API"></a>라우트 가드와 Composition API</h3><p>라우트 가드를 사용할 때도 Composition API를 활용할 수 있습니다. 예를 들어, <code>beforeRouteEnter</code>를 사용할 때 컴포넌트가 완전히 마운트되기 전에 필요한 데이터를 미리 가져오는 작업을 할 수 있습니다.</p><pre><code class="highlight javascript"><span class="keyword">import</span> &#123; defineComponent &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;<span class="keyword">import</span> &#123; onBeforeRouteLeave &#125; <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;<span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;  <span class="title function_">setup</span>(<span class="params"></span>) &#123;    <span class="title function_">onBeforeRouteLeave</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;      <span class="keyword">const</span> answer = <span class="variable language_">window</span>.<span class="title function_">confirm</span>(<span class="string">&quot;이 페이지를 떠나시겠습니까?&quot;</span>);      <span class="keyword">if</span> (answer) &#123;        <span class="title function_">next</span>();      &#125; <span class="keyword">else</span> &#123;        <span class="title function_">next</span>(<span class="literal">false</span>);      &#125;    &#125;);  &#125;,  <span class="attr">template</span>: <span class="string">`&lt;div&gt;여기서 나가시겠습니까?&lt;/div&gt;`</span>,&#125;);</code></pre><p>이 예제는 사용자가 페이지를 떠날 때 확인 메시지를 띄우고, 사용자가 확인하면 이동을 허용하고, 그렇지 않으면 이동을 취소하는 방식으로 라우트 가드를 적용하는 방법을 보여줍니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 Vue.js 애플리케이션에서 <strong>Vue Router</strong>를 사용하여 라우팅을 설정하고, 동적 라우트 매칭과 라우트 가드를 활용하는 방법에 대해 알아보았습니다. Vue Router를 사용하면 SPA에서 페이지 간의 이동을 쉽게 관리할 수 있으며, 동적 라우트와 가드를 통해 더욱 유연하고 강력한 라우팅 기능을 구현할 수 있습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Node.js mysql2 모듈을 사용한 DB 연동 및 CRUD 실습</title>
      <link href="/database/6/"/>
      <url>/database/6/</url>
      
        <content type="html"><![CDATA[<h1 id="Node-js-mysql2-모듈을-사용한-데이터베이스-연동-및-CRUD-실습"><a href="#Node-js-mysql2-모듈을-사용한-데이터베이스-연동-및-CRUD-실습" class="headerlink" title="Node.js mysql2 모듈을 사용한 데이터베이스 연동 및 CRUD 실습"></a>Node.js mysql2 모듈을 사용한 데이터베이스 연동 및 CRUD 실습</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 Nodej.js의 mysql2 모듈을 사용하여 MySQL 데이터베이스와 연동하고, RPG 게임의 캐릭터와 아이템 데이터를 CRUD(Create, Read, Update, Delete) 작업을 통해 관리하는 방법을 알아보겠습니다.</p><h2 id="mysql2-모듈-설치-및-설정"><a href="#mysql2-모듈-설치-및-설정" class="headerlink" title="mysql2 모듈 설치 및 설정"></a>mysql2 모듈 설치 및 설정</h2><p>먼저, mysql2 모듈을 설치하고 데이터베이스 연결을 설정합니다.</p><h3 id="mysql2-모듈-설치"><a href="#mysql2-모듈-설치" class="headerlink" title="mysql2 모듈 설치"></a>mysql2 모듈 설치</h3><pre><code class="highlight bash">npm install mysql2</code></pre><h3 id="데이터베이스-설정"><a href="#데이터베이스-설정" class="headerlink" title="데이터베이스 설정"></a>데이터베이스 설정</h3><p>MySQL 데이터베이스에 연결하기 위한 설정을 작성합니다.</p><p><strong>src&#x2F;db.js</strong></p><pre><code class="highlight javascript"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">&quot;mysql2/promise&quot;</span>);<span class="keyword">const</span> pool = mysql.<span class="title function_">createPool</span>(&#123;  <span class="attr">host</span>: <span class="string">&quot;localhost&quot;</span>,  <span class="attr">user</span>: <span class="string">&quot;root&quot;</span>,  <span class="attr">password</span>: <span class="string">&quot;password&quot;</span>,  <span class="attr">database</span>: <span class="string">&quot;rpg_game&quot;</span>,  <span class="attr">waitForConnections</span>: <span class="literal">true</span>,  <span class="attr">connectionLimit</span>: <span class="number">10</span>,  <span class="attr">queueLimit</span>: <span class="number">0</span>,&#125;);<span class="variable language_">module</span>.<span class="property">exports</span> = pool;</code></pre><p>위 설정에서 <code>createPool</code>은 여러 개의 데이터베이스 연결을 관리하는 풀을 생성합니다. 풀은 연결이 필요할 때마다 기존 연결을 재사용하거나 새로운 연결을 생성하여 효율적으로 리소스를 관리합니다.</p><h2 id="RPG-게임-데이터베이스-테이블-생성"><a href="#RPG-게임-데이터베이스-테이블-생성" class="headerlink" title="RPG 게임 데이터베이스 테이블 생성"></a>RPG 게임 데이터베이스 테이블 생성</h2><h3 id="데이터베이스-테이블-생성-쿼리"><a href="#데이터베이스-테이블-생성-쿼리" class="headerlink" title="데이터베이스 테이블 생성 쿼리"></a>데이터베이스 테이블 생성 쿼리</h3><p>RPG 게임의 캐릭터와 아이템 테이블을 생성합니다.</p><pre><code class="highlight sql"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="type">character</span> (    id <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY,    name <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,    level <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>);<span class="keyword">CREATE</span> <span class="keyword">TABLE</span> item (    id <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY,    name <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,    power <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,    character_id <span class="type">INT</span>,    <span class="keyword">FOREIGN</span> KEY (character_id) <span class="keyword">REFERENCES</span> <span class="type">character</span>(id) <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">SET</span> <span class="keyword">NULL</span>);</code></pre><h2 id="CRUD-작업"><a href="#CRUD-작업" class="headerlink" title="CRUD 작업"></a>CRUD 작업</h2><p>이제 MySQL2 모듈을 사용하여 CRUD 작업을 수행하는 방법을 알아보겠습니다. CRUD는 데이터베이스에서 데이터를 생성(Create), 조회(Read), 업데이트(Update), 삭제(Delete)하는 작업을 의미합니다.</p><h3 id="캐릭터-생성-Create"><a href="#캐릭터-생성-Create" class="headerlink" title="캐릭터 생성 (Create)"></a>캐릭터 생성 (Create)</h3><p><strong>src&#x2F;createCharacter.js</strong></p><pre><code class="highlight javascript"><span class="keyword">const</span> pool = <span class="built_in">require</span>(<span class="string">&quot;./db&quot;</span>);<span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">createCharacter</span>(<span class="params">name, level</span>) &#123;  <span class="keyword">const</span> connection = <span class="keyword">await</span> pool.<span class="title function_">getConnection</span>();  <span class="keyword">try</span> &#123;    <span class="keyword">const</span> [result] = <span class="keyword">await</span> connection.<span class="title function_">query</span>(      <span class="string">&quot;INSERT INTO character (name, level) VALUES (?, ?)&quot;</span>,      [name, level]    );    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;캐릭터가 생성되었습니다:&quot;</span>, result.<span class="property">insertId</span>);  &#125; <span class="keyword">finally</span> &#123;    connection.<span class="title function_">release</span>();  &#125;&#125;<span class="title function_">createCharacter</span>(<span class="string">&quot;전사&quot;</span>, <span class="number">10</span>).<span class="title function_">catch</span>(<span class="variable language_">console</span>.<span class="property">log</span>);</code></pre><p>여기서는 <code>INSERT INTO</code> 쿼리를 사용하여 새로운 캐릭터를 데이터베이스에 삽입합니다. <code>connection.query</code> 메서드는 SQL 쿼리와 쿼리에 바인딩될 값을 인자로 받습니다. <code>result.insertId</code>는 새로 생성된 레코드의 ID를 반환합니다.</p><h3 id="캐릭터-조회-Read"><a href="#캐릭터-조회-Read" class="headerlink" title="캐릭터 조회 (Read)"></a>캐릭터 조회 (Read)</h3><p><strong>src&#x2F;getCharacter.js</strong></p><pre><code class="highlight javascript"><span class="keyword">const</span> pool = <span class="built_in">require</span>(<span class="string">&quot;./db&quot;</span>);<span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getCharacterById</span>(<span class="params">id</span>) &#123;  <span class="keyword">const</span> connection = <span class="keyword">await</span> pool.<span class="title function_">getConnection</span>();  <span class="keyword">try</span> &#123;    <span class="keyword">const</span> [rows] = <span class="keyword">await</span> connection.<span class="title function_">query</span>(      <span class="string">&quot;SELECT * FROM character WHERE id = ?&quot;</span>,      [id]    );    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;캐릭터 정보:&quot;</span>, rows[<span class="number">0</span>]);  &#125; <span class="keyword">finally</span> &#123;    connection.<span class="title function_">release</span>();  &#125;&#125;<span class="title function_">getCharacterById</span>(<span class="number">1</span>).<span class="title function_">catch</span>(<span class="variable language_">console</span>.<span class="property">log</span>);</code></pre><p>이 예제에서는 <code>SELECT * FROM</code> 쿼리를 사용하여 특정 ID를 가진 캐릭터의 정보를 조회합니다. <code>rows[0]</code>는 조회된 결과 중 첫 번째 레코드를 나타냅니다. <code>connection.query</code>는 배열을 반환하며, 첫 번째 요소가 실제 데이터입니다.</p><h3 id="캐릭터-업데이트-Update"><a href="#캐릭터-업데이트-Update" class="headerlink" title="캐릭터 업데이트 (Update)"></a>캐릭터 업데이트 (Update)</h3><p><strong>src&#x2F;updateCharacter.js</strong></p><pre><code class="highlight javascript"><span class="keyword">const</span> pool = <span class="built_in">require</span>(<span class="string">&quot;./db&quot;</span>);<span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">updateCharacter</span>(<span class="params">id, name, level</span>) &#123;  <span class="keyword">const</span> connection = <span class="keyword">await</span> pool.<span class="title function_">getConnection</span>();  <span class="keyword">try</span> &#123;    <span class="keyword">const</span> [result] = <span class="keyword">await</span> connection.<span class="title function_">query</span>(      <span class="string">&quot;UPDATE character SET name = ?, level = ? WHERE id = ?&quot;</span>,      [name, level, id]    );    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;캐릭터가 업데이트되었습니다:&quot;</span>, result.<span class="property">affectedRows</span>);  &#125; <span class="keyword">finally</span> &#123;    connection.<span class="title function_">release</span>();  &#125;&#125;<span class="title function_">updateCharacter</span>(<span class="number">1</span>, <span class="string">&quot;마법사&quot;</span>, <span class="number">15</span>).<span class="title function_">catch</span>(<span class="variable language_">console</span>.<span class="property">log</span>);</code></pre><p>여기서는 <code>UPDATE</code> 쿼리를 사용하여 특정 ID를 가진 캐릭터의 이름과 레벨을 업데이트합니다. <code>result.affectedRows</code>는 업데이트된 레코드의 수를 반환합니다.</p><h3 id="캐릭터-삭제-Delete"><a href="#캐릭터-삭제-Delete" class="headerlink" title="캐릭터 삭제 (Delete)"></a>캐릭터 삭제 (Delete)</h3><p><strong>src&#x2F;deleteCharacter.js</strong></p><pre><code class="highlight javascript"><span class="keyword">const</span> pool = <span class="built_in">require</span>(<span class="string">&quot;./db&quot;</span>);<span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">deleteCharacter</span>(<span class="params">id</span>) &#123;  <span class="keyword">const</span> connection = <span class="keyword">await</span> pool.<span class="title function_">getConnection</span>();  <span class="keyword">try</span> &#123;    <span class="keyword">const</span> [result] = <span class="keyword">await</span> connection.<span class="title function_">query</span>(      <span class="string">&quot;DELETE FROM character WHERE id = ?&quot;</span>,      [id]    );    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;캐릭터가 삭제되었습니다:&quot;</span>, result.<span class="property">affectedRows</span>);  &#125; <span class="keyword">finally</span> &#123;    connection.<span class="title function_">release</span>();  &#125;&#125;<span class="title function_">deleteCharacter</span>(<span class="number">1</span>).<span class="title function_">catch</span>(<span class="variable language_">console</span>.<span class="property">log</span>);</code></pre><p><code>DELETE</code> 쿼리를 사용하여 특정 ID를 가진 캐릭터를 삭제합니다. <code>result.affectedRows</code>는 삭제된 레코드의 수를 반환합니다.</p><h3 id="아이템-생성-Create"><a href="#아이템-생성-Create" class="headerlink" title="아이템 생성 (Create)"></a>아이템 생성 (Create)</h3><p><strong>src&#x2F;createItem.js</strong></p><pre><code class="highlight javascript"><span class="keyword">const</span> pool = <span class="built_in">require</span>(<span class="string">&quot;./db&quot;</span>);<span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">createItem</span>(<span class="params">name, power, characterId</span>) &#123;  <span class="keyword">const</span> connection = <span class="keyword">await</span> pool.<span class="title function_">getConnection</span>();  <span class="keyword">try</span> &#123;    <span class="keyword">const</span> [result] = <span class="keyword">await</span> connection.<span class="title function_">query</span>(      <span class="string">&quot;INSERT INTO item (name, power, character_id) VALUES (?, ?, ?)&quot;</span>,      [name, power, characterId]    );    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;아이템이 생성되었습니다:&quot;</span>, result.<span class="property">insertId</span>);  &#125; <span class="keyword">finally</span> &#123;    connection.<span class="title function_">release</span>();  &#125;&#125;<span class="title function_">createItem</span>(<span class="string">&quot;마법 지팡이&quot;</span>, <span class="number">50</span>, <span class="number">1</span>).<span class="title function_">catch</span>(<span class="variable language_">console</span>.<span class="property">log</span>);</code></pre><p>이 예제에서는 <code>INSERT INTO</code> 쿼리를 사용하여 새로운 아이템을 데이터베이스에 삽입합니다. <code>characterId</code>는 이 아이템이 소유된 캐릭터의 ID를 나타냅니다.</p><h3 id="아이템-조회-Read"><a href="#아이템-조회-Read" class="headerlink" title="아이템 조회 (Read)"></a>아이템 조회 (Read)</h3><p><strong>src&#x2F;getItem.js</strong></p><pre><code class="highlight javascript"><span class="keyword">const</span> pool = <span class="built_in">require</span>(<span class="string">&quot;./db&quot;</span>);<span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getItemById</span>(<span class="params">id</span>) &#123;  <span class="keyword">const</span> connection = <span class="keyword">await</span> pool.<span class="title function_">getConnection</span>();  <span class="keyword">try</span> &#123;    <span class="keyword">const</span> [rows] = <span class="keyword">await</span> connection.<span class="title function_">query</span>(<span class="string">&quot;SELECT * FROM item WHERE id = ?&quot;</span>, [      id,    ]);    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;아이템 정보:&quot;</span>, rows[<span class="number">0</span>]);  &#125; <span class="keyword">finally</span> &#123;    connection.<span class="title function_">release</span>();  &#125;&#125;<span class="title function_">getItemById</span>(<span class="number">1</span>).<span class="title function_">catch</span>(<span class="variable language_">console</span>.<span class="property">log</span>);</code></pre><p>이 예제에서는 <code>SELECT * FROM</code> 쿼리를 사용하여 특정 ID를 가진 아이템의 정보를 조회합니다. <code>rows[0]</code>는 조회된 결과 중 첫 번째 레코드를 나타냅니다.</p><h3 id="아이템-업데이트-Update"><a href="#아이템-업데이트-Update" class="headerlink" title="아이템 업데이트 (Update)"></a>아이템 업데이트 (Update)</h3><p><strong>src&#x2F;updateItem.js</strong></p><pre><code class="highlight javascript"><span class="keyword">const</span> pool = <span class="built_in">require</span>(<span class="string">&quot;./db&quot;</span>);<span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">updateItem</span>(<span class="params">id, name, power</span>) &#123;  <span class="keyword">const</span> connection = <span class="keyword">await</span> pool.<span class="title function_">getConnection</span>();  <span class="keyword">try</span> &#123;    <span class="keyword">const</span> [result] = <span class="keyword">await</span> connection.<span class="title function_">query</span>(      <span class="string">&quot;UPDATE item SET name = ?, power = ? WHERE id = ?&quot;</span>,      [name, power, id]    );    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;아이템이 업데이트되었습니다:&quot;</span>, result.<span class="property">affectedRows</span>);  &#125; <span class="keyword">finally</span> &#123;    connection.<span class="title function_">release</span>();  &#125;&#125;<span class="title function_">updateItem</span>(<span class="number">1</span>, <span class="string">&quot;강력한 마법 지팡이&quot;</span>, <span class="number">75</span>).<span class="title function_">catch</span>(<span class="variable language_">console</span>.<span class="property">log</span>);</code></pre><p><code>UPDATE</code> 쿼리를 사용하여 특정 ID를 가진 아이템의 이름과 파워를 업데이트합니다. <code>result.affectedRows</code>는 업데이트된 레코드의 수를 반환합니다.</p><h3 id="아이템-삭제-Delete"><a href="#아이템-삭제-Delete" class="headerlink" title="아이템 삭제 (Delete)"></a>아이템 삭제 (Delete)</h3><p><strong>src&#x2F;deleteItem.js</strong></p><pre><code class="highlight javascript"><span class="keyword">const</span> pool = <span class="built_in">require</span>(<span class="string">&quot;./db&quot;</span>);<span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">deleteItem</span>(<span class="params">id</span>) &#123;  <span class="keyword">const</span> connection = <span class="keyword">await</span> pool.<span class="title function_">getConnection</span>();  <span class="keyword">try</span> &#123;    <span class="keyword">const</span> [result] = <span class="keyword">await</span> connection.<span class="title function_">query</span>(<span class="string">&quot;DELETE FROM item WHERE id = ?&quot;</span>, [      id,    ]);    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;아이템이 삭제되었습니다:&quot;</span>, result.<span class="property">affectedRows</span>);  &#125; <span class="keyword">finally</span> &#123;    connection.<span class="title function_">release</span>();  &#125;&#125;<span class="title function_">deleteItem</span>(<span class="number">1</span>).<span class="title function_">catch</span>(<span class="variable language_">console</span>.<span class="property">log</span>);</code></pre><p><code>DELETE</code> 쿼리를 사용하여 특정 ID를 가진 아이템을 삭제합니다. <code>result.affectedRows</code>는 삭제된 레코드의 수를 반환합니다.</p><h2 id="정리"><a href="#정리" class="headerlink" title="정리"></a>정리</h2><p>이번 시간에는 MySQL2 모듈을 사용하여 MySQL 데이터베이스와 연동하고, RPG 게임의 캐릭터와 아이템 데이터를 CRUD 작업을 통해 관리하는 방법을 알아보았습니다.<br>MySQL2 모듈을 사용하면 비동기식으로 데이터베이스에 접근할 수 있어 더욱 효율적인 데이터 처리가 가능합니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> database </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>데이터 제어 언어(DCL)</title>
      <link href="/database/5/"/>
      <url>/database/5/</url>
      
        <content type="html"><![CDATA[<h1 id="데이터-제어-언어-DCL"><a href="#데이터-제어-언어-DCL" class="headerlink" title="데이터 제어 언어(DCL)"></a>데이터 제어 언어(DCL)</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 데이터베이스에서 데이터 제어 언어(DCL, Data Control Language)에 대해 알아보겠습니다. DCL은 데이터베이스 사용자에게 권한을 부여하거나 회수하는 데 사용되는 명령어입니다. RPG 게임 예제를 통해 DCL 명령어의 사용법을 익혀보겠습니다.</p><h2 id="DCL-개요"><a href="#DCL-개요" class="headerlink" title="DCL 개요"></a>DCL 개요</h2><h3 id="DCL의-정의와-역할"><a href="#DCL의-정의와-역할" class="headerlink" title="DCL의 정의와 역할"></a>DCL의 정의와 역할</h3><p>**데이터 제어 언어(DCL)**는 데이터베이스 시스템의 보안과 무결성을 관리하는 명령어입니다. 주로 사용자 권한을 설정하고 관리하는 데 사용됩니다. DCL은 데이터베이스에 접근할 수 있는 사용자와 그 사용자가 수행할 수 있는 작업을 제어합니다.</p><h3 id="주요-DCL-명령어"><a href="#주요-DCL-명령어" class="headerlink" title="주요 DCL 명령어"></a>주요 DCL 명령어</h3><ul><li><strong>GRANT</strong>: 사용자에게 권한을 부여합니다.</li><li><strong>REVOKE</strong>: 사용자에게 부여된 권한을 회수합니다.</li></ul><h2 id="사용자-권한-관리"><a href="#사용자-권한-관리" class="headerlink" title="사용자 권한 관리"></a>사용자 권한 관리</h2><h3 id="사용자-생성과-권한-부여"><a href="#사용자-생성과-권한-부여" class="headerlink" title="사용자 생성과 권한 부여"></a>사용자 생성과 권한 부여</h3><p>데이터베이스에서 새로운 사용자를 생성하고, 해당 사용자에게 권한을 부여할 수 있습니다. RPG 게임의 데이터베이스 관리자를 예제로 사용해보겠습니다.</p><h4 id="사용자-생성"><a href="#사용자-생성" class="headerlink" title="사용자 생성"></a>사용자 생성</h4><p>먼저, 새로운 사용자를 생성합니다.</p><pre><code class="highlight sql"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;game_admin&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;secure_password&#x27;</span>;</code></pre><p>위 명령어는 <code>localhost</code>에서 <code>game_admin</code>이라는 이름으로 새로운 사용자를 생성하고, 비밀번호를 <code>secure_password</code>로 설정합니다.</p><h4 id="권한-부여"><a href="#권한-부여" class="headerlink" title="권한 부여"></a>권한 부여</h4><p>생성된 사용자에게 데이터베이스에 대한 권한을 부여합니다.</p><pre><code class="highlight sql"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> rpg_game.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;game_admin&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</code></pre><p>위 명령어는 <code>rpg_game</code> 데이터베이스에 대한 모든 권한을 <code>game_admin</code> 사용자에게 부여합니다.</p><p>특정 권한만 부여하고 싶다면 다음과 같이 할 수 있습니다:</p><pre><code class="highlight sql"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span>, <span class="keyword">INSERT</span>, <span class="keyword">UPDATE</span> <span class="keyword">ON</span> rpg_game.characters <span class="keyword">TO</span> <span class="string">&#x27;game_admin&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</code></pre><p>위 명령어는 <code>rpg_game</code> 데이터베이스의 <code>characters</code> 테이블에 대해 <code>SELECT</code>, <code>INSERT</code>, <code>UPDATE</code> 권한만 부여합니다.</p><h3 id="사용자-권한-회수"><a href="#사용자-권한-회수" class="headerlink" title="사용자 권한 회수"></a>사용자 권한 회수</h3><p>사용자에게 부여된 권한을 회수할 수 있습니다. RPG 게임의 데이터베이스 관리자가 더 이상 특정 권한을 가지지 않도록 설정해보겠습니다.</p><h4 id="권한-회수"><a href="#권한-회수" class="headerlink" title="권한 회수"></a>권한 회수</h4><p>특정 권한을 회수하려면 다음과 같이 합니다:</p><pre><code class="highlight sql"><span class="keyword">REVOKE</span> <span class="keyword">INSERT</span>, <span class="keyword">UPDATE</span> <span class="keyword">ON</span> rpg_game.characters <span class="keyword">FROM</span> <span class="string">&#x27;game_admin&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</code></pre><p>위 명령어는 <code>game_admin</code> 사용자의 <code>rpg_game.characters</code> 테이블에 대한 <code>INSERT</code>, <code>UPDATE</code> 권한을 회수합니다.</p><h4 id="모든-권한-회수"><a href="#모든-권한-회수" class="headerlink" title="모든 권한 회수"></a>모든 권한 회수</h4><p>사용자에게 부여된 모든 권한을 회수하려면 다음과 같이 합니다:</p><pre><code class="highlight sql"><span class="keyword">REVOKE</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> rpg_game.<span class="operator">*</span> <span class="keyword">FROM</span> <span class="string">&#x27;game_admin&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</code></pre><p>위 명령어는 <code>game_admin</code> 사용자의 <code>rpg_game</code> 데이터베이스에 대한 모든 권한을 회수합니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 데이터 제어 언어(DCL)에 대해 알아보았습니다. DCL은 데이터베이스의 보안과 무결성을 유지하기 위해 사용자 권한을 관리하는 데 사용됩니다. RPG 게임 예제를 통해 DCL 명령어의 사용법을 익히며, 실제 데이터베이스에서도 이를 활용해보세요!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> database </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>웹 API와 AJAX</title>
      <link href="/web/newb/6/"/>
      <url>/web/newb/6/</url>
      
        <content type="html"><![CDATA[<h1 id="웹-API와-AJAX"><a href="#웹-API와-AJAX" class="headerlink" title="웹 API와 AJAX"></a>웹 API와 AJAX</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 웹 API와 AJAX에 대해 알아보겠습니다.<br>웹 API는 웹 애플리케이션에서 데이터를 주고받을 수 있는 인터페이스를 제공하며, AJAX는 이러한 데이터를 비동기적으로 요청하고 처리하는 기법입니다. 이 두 가지를 결합하여 동적인 웹 애플리케이션을 만들 수 있습니다.</p><h2 id="웹-API란-무엇인가"><a href="#웹-API란-무엇인가" class="headerlink" title="웹 API란 무엇인가?"></a>웹 API란 무엇인가?</h2><h3 id="웹-API의-개념"><a href="#웹-API의-개념" class="headerlink" title="웹 API의 개념"></a>웹 API의 개념</h3><p>웹 API(Web Application Programming Interface)는 웹 애플리케이션과 서버 간에 데이터를 주고받을 수 있는 인터페이스를 의미합니다. 웹 API는 주로 HTTP 프로토콜을 통해 통신하며, JSON 또는 XML 형식의 데이터를 사용합니다.</p><h3 id="웹-API의-예"><a href="#웹-API의-예" class="headerlink" title="웹 API의 예"></a>웹 API의 예</h3><ul><li><strong>REST API</strong>: Representational State Transfer API는 자원을 정의하고, HTTP 메서드를 통해 자원을 조작하는 방식입니다.</li><li><strong>GraphQL API</strong>: 데이터 쿼리를 위한 새로운 API 표준으로, 필요한 데이터만 요청할 수 있습니다.</li></ul><h3 id="웹-API의-역할"><a href="#웹-API의-역할" class="headerlink" title="웹 API의 역할"></a>웹 API의 역할</h3><ul><li><strong>데이터 제공</strong>: 서버에서 클라이언트로 데이터를 전달합니다.</li><li><strong>데이터 처리</strong>: 클라이언트에서 서버로 데이터를 보내고, 이를 처리하여 저장하거나 갱신합니다.</li></ul><h2 id="AJAX의-기본-개념"><a href="#AJAX의-기본-개념" class="headerlink" title="AJAX의 기본 개념"></a>AJAX의 기본 개념</h2><h3 id="AJAX란-무엇인가"><a href="#AJAX란-무엇인가" class="headerlink" title="AJAX란 무엇인가?"></a>AJAX란 무엇인가?</h3><p>AJAX(Asynchronous JavaScript and XML)는 웹 페이지를 새로 고침하지 않고 서버와 데이터를 주고받는 기술입니다. AJAX를 사용하면 웹 애플리케이션의 사용자 경험을 크게 향상시킬 수 있습니다.</p><h3 id="AJAX의-장점"><a href="#AJAX의-장점" class="headerlink" title="AJAX의 장점"></a>AJAX의 장점</h3><ul><li><strong>비동기성</strong>: 서버와 비동기적으로 통신하여 페이지 리로드 없이 데이터를 업데이트할 수 있습니다.</li><li><strong>사용자 경험 개선</strong>: 동적인 콘텐츠 업데이트로 사용자 경험을 향상시킵니다.</li></ul><h3 id="AJAX의-동작-방식"><a href="#AJAX의-동작-방식" class="headerlink" title="AJAX의 동작 방식"></a>AJAX의 동작 방식</h3><ol><li><strong>클라이언트 요청</strong>: 자바스크립트 코드를 통해 서버에 데이터를 요청합니다.</li><li><strong>서버 처리</strong>: 서버는 요청을 받고, 필요한 데이터를 처리하여 응답합니다.</li><li><strong>클라이언트 응답 처리</strong>: 클라이언트는 서버의 응답 데이터를 받아와서 웹 페이지를 업데이트합니다.</li></ol><h2 id="Fetch-API를-사용한-비동기-데이터-요청"><a href="#Fetch-API를-사용한-비동기-데이터-요청" class="headerlink" title="Fetch API를 사용한 비동기 데이터 요청"></a>Fetch API를 사용한 비동기 데이터 요청</h2><h3 id="Fetch-API란"><a href="#Fetch-API란" class="headerlink" title="Fetch API란?"></a>Fetch API란?</h3><p>Fetch API는 최신 자바스크립트 표준으로, 비동기적으로 네트워크 요청을 처리할 수 있는 인터페이스를 제공합니다. 이전의 <code>XMLHttpRequest</code> 객체를 대체하는 간결하고 사용하기 쉬운 방법입니다.</p><h3 id="Fetch-API-사용-예제"><a href="#Fetch-API-사용-예제" class="headerlink" title="Fetch API 사용 예제"></a>Fetch API 사용 예제</h3><p>RPG 게임에서 캐릭터의 아이템 목록을 서버에서 가져오는 예제를 통해 Fetch API를 살펴보겠습니다.</p><pre><code class="highlight html"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">head</span>&gt;</span>    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span>    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span>    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Fetch API 예제<span class="tag">&lt;/<span class="name">title</span>&gt;</span>  <span class="tag">&lt;/<span class="name">head</span>&gt;</span>  <span class="tag">&lt;<span class="name">body</span>&gt;</span>    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>캐릭터의 아이템 목록<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;item-list&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span>    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">      <span class="comment">// 서버에서 아이템 목록을 가져오는 함수</span></span><span class="language-javascript">      <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchItems</span>(<span class="params"></span>) &#123;</span><span class="language-javascript">        <span class="keyword">try</span> &#123;</span><span class="language-javascript">          <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&quot;https://api.example.com/items&quot;</span>);</span><span class="language-javascript">          <span class="keyword">const</span> items = <span class="keyword">await</span> response.<span class="title function_">json</span>();</span><span class="language-javascript"></span><span class="language-javascript">          <span class="keyword">const</span> itemList = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;item-list&quot;</span>);</span><span class="language-javascript">          itemList.<span class="property">innerHTML</span> = <span class="string">&quot;&quot;</span>;</span><span class="language-javascript"></span><span class="language-javascript">          items.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><span class="language-javascript">            <span class="keyword">const</span> listItem = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;li&quot;</span>);</span><span class="language-javascript">            listItem.<span class="property">textContent</span> = item.<span class="property">name</span>;</span><span class="language-javascript">            itemList.<span class="title function_">appendChild</span>(listItem);</span><span class="language-javascript">          &#125;);</span><span class="language-javascript">        &#125; <span class="keyword">catch</span> (error) &#123;</span><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;Error fetching items:&quot;</span>, error);</span><span class="language-javascript">        &#125;</span><span class="language-javascript">      &#125;</span><span class="language-javascript"></span><span class="language-javascript">      <span class="comment">// 페이지 로드 시 아이템 목록을 가져옵니다.</span></span><span class="language-javascript">      <span class="variable language_">window</span>.<span class="property">onload</span> = fetchItems;</span><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  <span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></code></pre><h3 id="설명"><a href="#설명" class="headerlink" title="설명"></a>설명</h3><ol><li><strong>Fetch 요청</strong>: <code>fetch(&#39;https://api.example.com/items&#39;)</code>를 사용하여 서버에 GET 요청을 보냅니다.</li><li><strong>응답 처리</strong>: <code>response.json()</code>을 통해 응답 데이터를 JSON 형식으로 변환합니다.</li><li><strong>데이터 표시</strong>: 서버에서 받은 아이템 목록을 HTML 리스트로 표시합니다.</li></ol><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 웹 API와 AJAX의 기본 개념, 그리고 Fetch API를 사용하여 비동기적으로 데이터를 요청하는 방법에 대해 알아보았습니다. 웹 API와 AJAX를 활용하면 동적인 웹 애플리케이션을 만들 수 있으며, 사용자 경험을 크게 향상시킬 수 있습니다.<br>다음 시간은 클라이언트 개발을 넘어 REST API 서버를 직접 개발해보겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> web_입문 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue 라이프사이클 훅</title>
      <link href="/vue/11/"/>
      <url>/vue/11/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-라이프사이클-훅"><a href="#Vue-라이프사이클-훅" class="headerlink" title="Vue 라이프사이클 훅"></a>Vue 라이프사이클 훅</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 Vue.js의 <strong>라이프사이클 훅</strong>에 대해 알아보겠습니다.<br>라이프사이클 훅은 Vue 인스턴스가 생성되고, DOM에 마운트되며, 데이터가 변화하고, 인스턴스가 제거되는 일련의 과정에서 특정 코드가 실행될 수 있도록 해주는 메커니즘입니다.<br>이제 각 단계에서 사용할 수 있는 라이프사이클 훅에 대해 자세히 알아보겠습니다.</p><h2 id="1-Vue-인스턴스의-라이프사이클-이해"><a href="#1-Vue-인스턴스의-라이프사이클-이해" class="headerlink" title="1. Vue 인스턴스의 라이프사이클 이해"></a>1. Vue 인스턴스의 라이프사이클 이해</h2><h3 id="Vue-인스턴스의-라이프사이클이란"><a href="#Vue-인스턴스의-라이프사이클이란" class="headerlink" title="Vue 인스턴스의 라이프사이클이란?"></a>Vue 인스턴스의 라이프사이클이란?</h3><p>Vue 인스턴스의 라이프사이클은 인스턴스가 생성되고, DOM에 렌더링되며, 업데이트되고, 최종적으로 제거되기까지의 일련의 과정을 말합니다. Vue.js는 이 과정에서 특정 시점에 사용자가 정의한 코드를 실행할 수 있도록 여러 라이프사이클 훅을 제공합니다. 이러한 훅을 사용하면 컴포넌트의 상태에 따라 적절한 작업을 수행할 수 있습니다.</p><h3 id="Vue-인스턴스의-라이프사이클-단계"><a href="#Vue-인스턴스의-라이프사이클-단계" class="headerlink" title="Vue 인스턴스의 라이프사이클 단계"></a>Vue 인스턴스의 라이프사이클 단계</h3><p>Vue.js의 라이프사이클은 다음과 같은 주요 단계로 나뉩니다:</p><ol><li><strong>생성(Create)</strong>: Vue 인스턴스가 생성되고, 반응형 데이터가 설정됩니다. 아직 DOM에 마운트되기 전입니다.</li><li><strong>마운트(Mount)</strong>: 인스턴스가 DOM에 마운트되어 데이터가 화면에 렌더링됩니다.</li><li><strong>업데이트(Update)</strong>: 반응형 데이터가 변경되어 DOM이 다시 렌더링됩니다.</li><li><strong>제거(Destroy)</strong>: Vue 인스턴스가 DOM에서 제거되고, 데이터 바인딩 및 이벤트가 해제됩니다.</li></ol><h2 id="2-라이프사이클-훅"><a href="#2-라이프사이클-훅" class="headerlink" title="2. 라이프사이클 훅"></a>2. 라이프사이클 훅</h2><h3 id="라이프사이클-훅의-종류"><a href="#라이프사이클-훅의-종류" class="headerlink" title="라이프사이클 훅의 종류"></a>라이프사이클 훅의 종류</h3><p>Vue3에서 제공하는 주요 라이프사이클 훅은 다음과 같습니다:</p><table><thead><tr><th>라이프사이클 훅</th><th>설명</th></tr></thead><tbody><tr><td><code>beforeCreate</code></td><td>인스턴스가 생성되기 전에 호출됩니다. 데이터와 이벤트가 설정되지 않은 상태입니다.</td></tr><tr><td><code>created</code></td><td>인스턴스가 생성된 후에 호출됩니다. 데이터와 이벤트가 설정되었지만, DOM에는 마운트되지 않았습니다.</td></tr><tr><td><code>beforeMount</code></td><td>인스턴스가 DOM에 마운트되기 전에 호출됩니다.</td></tr><tr><td><code>mounted</code></td><td>인스턴스가 DOM에 마운트된 후에 호출됩니다.</td></tr><tr><td><code>beforeUpdate</code></td><td>데이터가 변경되어 DOM이 업데이트되기 전에 호출됩니다.</td></tr><tr><td><code>updated</code></td><td>데이터가 변경되어 DOM이 업데이트된 후에 호출됩니다.</td></tr><tr><td><code>beforeUnmount</code> (Vue3)</td><td>인스턴스가 DOM에서 제거되기 전에 호출됩니다.</td></tr><tr><td><code>unmounted</code> (Vue3)</td><td>인스턴스가 DOM에서 제거된 후에 호출됩니다.</td></tr></tbody></table><h3 id="라이프사이클-훅-사용-예제"><a href="#라이프사이클-훅-사용-예제" class="headerlink" title="라이프사이클 훅 사용 예제"></a>라이프사이클 훅 사용 예제</h3><h4 id="created-훅-사용"><a href="#created-훅-사용" class="headerlink" title="created 훅 사용"></a><code>created</code> 훅 사용</h4><p><code>created</code> 훅은 Vue 인스턴스가 생성된 후에 호출되며, 데이터 초기화나 API 호출 등의 작업에 사용될 수 있습니다.</p><pre><code class="highlight javascript"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;<span class="title function_">createApp</span>(&#123;  <span class="title function_">data</span>(<span class="params"></span>) &#123;    <span class="keyword">return</span> &#123;      <span class="attr">characterName</span>: <span class="string">&quot;&quot;</span>,    &#125;;  &#125;,  <span class="title function_">created</span>(<span class="params"></span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Vue 인스턴스가 생성되었습니다.&quot;</span>);    <span class="variable language_">this</span>.<span class="property">characterName</span> = <span class="string">&quot;전사&quot;</span>; <span class="comment">// 초기 데이터 설정</span>  &#125;,  <span class="attr">template</span>: <span class="string">`&lt;div&gt;&#123;&#123; characterName &#125;&#125;&lt;/div&gt;`</span>,&#125;).<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</code></pre><p>이 예제에서는 <code>created</code> 훅을 사용하여 인스턴스가 생성되었을 때 콘솔에 메시지를 출력하고, 캐릭터 이름을 초기화합니다.</p><h4 id="mounted-훅-사용"><a href="#mounted-훅-사용" class="headerlink" title="mounted 훅 사용"></a><code>mounted</code> 훅 사용</h4><p><code>mounted</code> 훅은 인스턴스가 DOM에 마운트된 후에 호출되며, DOM 조작이나 타이머 설정 등에 사용됩니다.</p><pre><code class="highlight javascript"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;<span class="title function_">createApp</span>(&#123;  <span class="title function_">data</span>(<span class="params"></span>) &#123;    <span class="keyword">return</span> &#123;      <span class="attr">isReady</span>: <span class="literal">false</span>,    &#125;;  &#125;,  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;컴포넌트가 마운트되었습니다.&quot;</span>);    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;      <span class="variable language_">this</span>.<span class="property">isReady</span> = <span class="literal">true</span>;    &#125;, <span class="number">2000</span>); <span class="comment">// 2초 후에 isReady를 true로 변경</span>  &#125;,  <span class="attr">template</span>: <span class="string">`&lt;div&gt;&#123;&#123; isReady ? &#x27;준비 완료!&#x27; : &#x27;준비 중...&#x27; &#125;&#125;&lt;/div&gt;`</span>,&#125;).<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</code></pre><p>이 예제에서는 <code>mounted</code> 훅을 사용하여 컴포넌트가 마운트된 후 2초 후에 데이터를 변경하는 작업을 수행합니다.</p><h4 id="beforeUnmount와-unmounted-훅-사용"><a href="#beforeUnmount와-unmounted-훅-사용" class="headerlink" title="beforeUnmount와 unmounted 훅 사용"></a><code>beforeUnmount</code>와 <code>unmounted</code> 훅 사용</h4><p><code>beforeUnmount</code>와 <code>unmounted</code> 훅은 컴포넌트가 DOM에서 제거되기 전에 정리 작업을 수행하는 데 사용됩니다. 예를 들어, 타이머를 정리하거나, 이벤트 리스너를 제거하는 데 유용합니다.</p><pre><code class="highlight javascript"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;<span class="title function_">createApp</span>(&#123;  <span class="title function_">data</span>(<span class="params"></span>) &#123;    <span class="keyword">return</span> &#123;      <span class="attr">intervalId</span>: <span class="literal">null</span>,      <span class="attr">count</span>: <span class="number">0</span>,    &#125;;  &#125;,  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;    <span class="variable language_">this</span>.<span class="property">intervalId</span> = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;      <span class="variable language_">this</span>.<span class="property">count</span>++;    &#125;, <span class="number">1000</span>); <span class="comment">// 1초마다 count 증가</span>  &#125;,  <span class="title function_">beforeUnmount</span>(<span class="params"></span>) &#123;    <span class="built_in">clearInterval</span>(<span class="variable language_">this</span>.<span class="property">intervalId</span>); <span class="comment">// 컴포넌트가 제거되기 전에 타이머 해제</span>  &#125;,  <span class="title function_">unmounted</span>(<span class="params"></span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;컴포넌트가 제거되었습니다.&quot;</span>);  &#125;,  <span class="attr">template</span>: <span class="string">`&lt;div&gt;&#123;&#123; count &#125;&#125;&lt;/div&gt;`</span>,&#125;).<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</code></pre><p>이 예제에서는 <code>beforeUnmount</code> 훅에서 타이머를 정리하고, <code>unmounted</code> 훅에서 컴포넌트가 제거되었음을 콘솔에 출력합니다.</p><h2 id="3-Composition-API에서-라이프사이클-훅-사용"><a href="#3-Composition-API에서-라이프사이클-훅-사용" class="headerlink" title="3. Composition API에서 라이프사이클 훅 사용"></a>3. Composition API에서 라이프사이클 훅 사용</h2><blockquote><p>만약 Vue가 처음이시라면 이 섹션은 건너 뛰어주세요!</p></blockquote><p>Vue3에 추가된 <a href="/vue/24/">Composition API</a>를 사용하여 컴포넌트를 더욱 유연하고 모듈화된 방식으로 작성할 수 있습니다.<br>특히 Composition API 버전에서는 Vue에서 제공하는 라이프사이클 함수들을 직접 호출하여 사용할 수 있습니다.</p><h3 id="Composition-API에서의-라이프사이클-훅-예제"><a href="#Composition-API에서의-라이프사이클-훅-예제" class="headerlink" title="Composition API에서의 라이프사이클 훅 예제"></a>Composition API에서의 라이프사이클 훅 예제</h3><p>Composition API에서는 다음과 같은 라이프사이클 함수를 사용할 수 있습니다:</p><ul><li><code>onBeforeMount</code></li><li><code>onMounted</code></li><li><code>onBeforeUpdate</code></li><li><code>onUpdated</code></li><li><code>onBeforeUnmount</code></li><li><code>onUnmounted</code></li></ul><h4 id="기본-사용법"><a href="#기본-사용법" class="headerlink" title="기본 사용법"></a>기본 사용법</h4><p>아래 예제에서는 <code>onMounted</code> 훅을 사용하여 컴포넌트가 DOM에 마운트된 후에 실행될 코드를 설정합니다.</p><pre><code class="highlight javascript"><span class="keyword">import</span> &#123; createApp, onMounted, ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;<span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;  <span class="title function_">setup</span>(<span class="params"></span>) &#123;    <span class="keyword">const</span> isReady = <span class="title function_">ref</span>(<span class="literal">false</span>);    <span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;컴포넌트가 마운트되었습니다.&quot;</span>);      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;        isReady.<span class="property">value</span> = <span class="literal">true</span>;      &#125;, <span class="number">2000</span>); <span class="comment">// 2초 후에 isReady를 true로 변경</span>    &#125;);    <span class="keyword">return</span> &#123;      isReady,    &#125;;  &#125;,  <span class="attr">template</span>: <span class="string">`&lt;div&gt;&#123;&#123; isReady ? &#x27;준비 완료!&#x27; : &#x27;준비 중...&#x27; &#125;&#125;&lt;/div&gt;`</span>,&#125;);app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</code></pre><p>이 예제에서는 <code>onMounted</code> 훅을 사용하여 컴포넌트가 마운트된 후 2초 후에 <code>isReady</code>를 <code>true</code>로 변경합니다.</p><h4 id="다양한-라이프사이클-훅-사용"><a href="#다양한-라이프사이클-훅-사용" class="headerlink" title="다양한 라이프사이클 훅 사용"></a>다양한 라이프사이클 훅 사용</h4><p>아래 예제에서는 여러 라이프사이클 훅을 사용하여 컴포넌트의 생명주기 동안 다양한 작업을 수행하는 방법을 보여줍니다.</p><pre><code class="highlight javascript"><span class="keyword">import</span> &#123; createApp, ref, onMounted, onBeforeUnmount, onUnmounted &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;<span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;  <span class="title function_">setup</span>(<span class="params"></span>) &#123;    <span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>);    <span class="keyword">let</span> intervalId;    <span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;      intervalId = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;        count.<span class="property">value</span>++;      &#125;, <span class="number">1000</span>); <span class="comment">// 1초마다 count 증가</span>    &#125;);    <span class="title function_">onBeforeUnmount</span>(<span class="function">() =&gt;</span> &#123;      <span class="built_in">clearInterval</span>(intervalId); <span class="comment">// 컴포넌트가 제거되기 전에 타이머 해제</span>    &#125;);    <span class="title function_">onUnmounted</span>(<span class="function">() =&gt;</span> &#123;      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;컴포넌트가 제거되었습니다.&quot;</span>);    &#125;);    <span class="keyword">return</span> &#123;      count,    &#125;;  &#125;,  <span class="attr">template</span>: <span class="string">`&lt;div&gt;&#123;&#123; count &#125;&#125;&lt;/div&gt;`</span>,&#125;);app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</code></pre><p>이 예제에서는 <code>onMounted</code>에서 타이머를 설정하고, <code>onBeforeUnmount</code>에서 타이머를 해제한 후, <code>onUnmounted</code>에서 컴포넌트가 제거되었음을 콘솔에 출력합니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 Vue.js에서 <strong>라이프사이클 훅</strong>의 개념과 각 훅을 사용하는 시나리오에 대해 알아보았습니다. 라이프사이클 훅은 컴포넌트의 생명주기 동안 특정 시점에 원하는 작업을 수행할 수 있게 해주며, 이를 통해 컴포넌트의 초기화, 업데이트, 정리 작업을 효율적으로 관리할 수 있습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript 타입 매핑(Type Mapping)</title>
      <link href="/typescript/special/12/"/>
      <url>/typescript/special/12/</url>
      
        <content type="html"><![CDATA[<h1 id="TypeScript-타입-매핑-Type-Mapping"><a href="#TypeScript-타입-매핑-Type-Mapping" class="headerlink" title="TypeScript 타입 매핑(Type Mapping)"></a>TypeScript 타입 매핑(Type Mapping)</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 TypeScript에서 타입을 동적으로 생성하고 변형하는 기능인 타입 매핑(Type Mapping)에 대해 알아보겠습니다. 타입 매핑은 <code>keyof</code>, <code>in</code>, Mapped Types를 사용하여 특정 타입의 모든 키를 기반으로 새로운 타입을 생성하는 방법입니다. 이와 함께 인덱스 시그니처와 <code>Record</code> 타입에 대해서도 알아보겠습니다.</p><h2 id="타입-매핑의-개념"><a href="#타입-매핑의-개념" class="headerlink" title="타입 매핑의 개념"></a>타입 매핑의 개념</h2><h3 id="타입-매핑이란"><a href="#타입-매핑이란" class="headerlink" title="타입 매핑이란?"></a>타입 매핑이란?</h3><p>타입 매핑(Type Mapping)은 TypeScript에서 기존 타입의 키를 기반으로 새로운 타입을 동적으로 생성하는 방법입니다. 이를 통해 코드의 재사용성을 높이고, 타입을 유연하게 변형할 수 있습니다. 타입 매핑은 주로 <code>keyof</code>, <code>in</code>, Mapped Types와 함께 사용됩니다.</p><h2 id="keyof와-in-연산자"><a href="#keyof와-in-연산자" class="headerlink" title="keyof와 in 연산자"></a><code>keyof</code>와 <code>in</code> 연산자</h2><h3 id="keyof-연산자"><a href="#keyof-연산자" class="headerlink" title="keyof 연산자"></a><code>keyof</code> 연산자</h3><p><code>keyof</code> 연산자는 특정 타입의 키를 유니언 타입으로 반환합니다. 예를 들어, 객체 타입의 키를 <code>keyof</code>를 사용해 추출할 수 있습니다.</p><pre><code class="highlight typescript"><span class="keyword">type</span> <span class="title class_">Character</span> = &#123;  <span class="attr">name</span>: <span class="built_in">string</span>;  <span class="attr">level</span>: <span class="built_in">number</span>;  <span class="attr">class</span>: <span class="built_in">string</span>;&#125;;<span class="keyword">type</span> <span class="title class_">CharacterKeys</span> = keyof <span class="title class_">Character</span>; <span class="comment">// &quot;name&quot; | &quot;level&quot; | &quot;class&quot;</span></code></pre><p>위 예제에서 <code>CharacterKeys</code>는 <code>Character</code> 타입의 모든 키(<code>name</code>, <code>level</code>, <code>class</code>)를 유니언 타입으로 가집니다.</p><h3 id="in-연산자"><a href="#in-연산자" class="headerlink" title="in 연산자"></a><code>in</code> 연산자</h3><p><code>in</code> 연산자는 Mapped Types에서 특정 키 집합을 반복하는 데 사용됩니다. 이를 통해 특정 타입의 모든 키를 기반으로 새로운 타입을 생성할 수 있습니다.</p><pre><code class="highlight typescript"><span class="keyword">type</span> <span class="title class_">ReadonlyCharacter</span> = &#123;  <span class="keyword">readonly</span> [K <span class="keyword">in</span> keyof <span class="title class_">Character</span>]: <span class="title class_">Character</span>[K];&#125;;</code></pre><p>위 예제에서 <code>ReadonlyCharacter</code> 타입은 <code>Character</code> 타입의 모든 키를 반복하며, 각 키에 <code>readonly</code>를 추가한 새로운 타입을 생성합니다.</p><h2 id="Mapped-Types"><a href="#Mapped-Types" class="headerlink" title="Mapped Types"></a>Mapped Types</h2><h3 id="Mapped-Types의-개념"><a href="#Mapped-Types의-개념" class="headerlink" title="Mapped Types의 개념"></a>Mapped Types의 개념</h3><p>Mapped Types는 기존 타입의 키를 변환하여 새로운 타입을 생성하는 방법입니다. <code>keyof</code>와 <code>in</code> 연산자를 함께 사용하여 타입의 모든 키에 대해 변환 작업을 수행할 수 있습니다.</p><h3 id="Mapped-Types의-예시"><a href="#Mapped-Types의-예시" class="headerlink" title="Mapped Types의 예시"></a>Mapped Types의 예시</h3><p>RPG 게임에서 캐릭터의 속성(Attribute)을 정의하는 타입이 있다고 가정해봅시다. Mapped Types를 사용해 이 속성들을 선택적으로 표시할 수 있는 새로운 타입을 생성해보겠습니다.</p><pre><code class="highlight typescript"><span class="keyword">type</span> <span class="title class_">Attributes</span> = &#123;  <span class="attr">strength</span>: <span class="built_in">number</span>;  <span class="attr">agility</span>: <span class="built_in">number</span>;  <span class="attr">intelligence</span>: <span class="built_in">number</span>;&#125;;<span class="keyword">type</span> <span class="title class_">OptionalAttributes</span> = &#123;  [K <span class="keyword">in</span> keyof <span class="title class_">Attributes</span>]?: <span class="title class_">Attributes</span>[K];&#125;;<span class="keyword">const</span> <span class="attr">mageAttributes</span>: <span class="title class_">OptionalAttributes</span> = &#123;  <span class="attr">intelligence</span>: <span class="number">18</span>,  <span class="attr">agility</span>: <span class="number">12</span>,&#125;;</code></pre><p>위 예제에서 <code>OptionalAttributes</code> 타입은 <code>Attributes</code> 타입의 모든 키에 대해 선택적(Optional) 속성을 가진 타입을 생성합니다. <code>mageAttributes</code> 객체는 <code>intelligence</code>와 <code>agility</code>만 정의하고 있지만, <code>strength</code>도 선택적으로 포함할 수 있습니다.</p><h2 id="인덱스-시그니처와-Record-타입"><a href="#인덱스-시그니처와-Record-타입" class="headerlink" title="인덱스 시그니처와 Record 타입"></a>인덱스 시그니처와 <code>Record</code> 타입</h2><h3 id="인덱스-시그니처"><a href="#인덱스-시그니처" class="headerlink" title="인덱스 시그니처"></a>인덱스 시그니처</h3><p>인덱스 시그니처(Index Signatures)는 타입에 명시적으로 정의되지 않은 키에 대해 타입을 허용할 수 있도록 하는 방법입니다. 이는 동적으로 키를 정의해야 하는 상황에서 유용합니다.</p><pre><code class="highlight typescript"><span class="keyword">type</span> <span class="title class_">RPGInventory</span> = &#123;  [<span class="attr">itemName</span>: <span class="built_in">string</span>]: <span class="built_in">number</span>; <span class="comment">// 각 아이템의 이름이 키가 되고, 수량이 값이 됨</span>&#125;;<span class="keyword">const</span> <span class="attr">inventory</span>: <span class="title class_">RPGInventory</span> = &#123;  <span class="attr">potion</span>: <span class="number">10</span>,  <span class="attr">sword</span>: <span class="number">1</span>,  <span class="attr">shield</span>: <span class="number">1</span>,&#125;;</code></pre><p>위 예제에서 <code>RPGInventory</code> 타입은 문자열 키를 받아 그 값으로 숫자를 가지는 객체 타입을 정의합니다. <code>inventory</code> 객체는 다양한 아이템과 그 수량을 동적으로 포함할 수 있습니다.</p><h3 id="Record-타입"><a href="#Record-타입" class="headerlink" title="Record 타입"></a><code>Record</code> 타입</h3><p><code>Record</code> 타입은 TypeScript에서 자주 사용되는 유틸리티 타입 중 하나로, 특정 키 집합에 대해 값을 지정할 수 있는 타입을 생성하는 데 사용됩니다. <code>Record&lt;K, T&gt;</code>는 키 타입 <code>K</code>와 값 타입 <code>T</code>를 받아 새로운 객체 타입을 생성합니다.</p><pre><code class="highlight typescript"><span class="keyword">type</span> <span class="title class_">ItemCount</span> = <span class="title class_">Record</span>&lt;<span class="built_in">string</span>, <span class="built_in">number</span>&gt;;<span class="keyword">const</span> <span class="attr">itemCount</span>: <span class="title class_">ItemCount</span> = &#123;  <span class="attr">potion</span>: <span class="number">5</span>,  <span class="attr">arrow</span>: <span class="number">100</span>,  <span class="attr">gold</span>: <span class="number">250</span>,&#125;;</code></pre><p>위 예제에서 <code>ItemCount</code> 타입은 문자열 키와 숫자 값을 가지는 객체 타입을 정의합니다. <code>itemCount</code> 객체는 다양한 아이템과 그 수량을 포함합니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 TypeScript에서 타입 매핑 (Type Mapping) 개념과 함께 <code>keyof</code>, <code>in</code>, Mapped Types, 인덱스 시그니처, <code>Record</code> 타입을 사용하는 방법에 대해 알아보았습니다. 타입 매핑을 사용하면 기존 타입을 더욱 유연하고 동적으로 변형할 수 있어 코드의 재사용성과 유지보수성을 높일 수 있습니다. 다양한 타입 매핑 기법을 활용해 더욱 강력한 TypeScript 애플리케이션을 만들어보세요!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> TS_필살기 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Node.js nodemon</title>
      <link href="/cli/6/"/>
      <url>/cli/6/</url>
      
        <content type="html"><![CDATA[<h1 id="nodemon-자동으로-서버를-재시작해주는-도구"><a href="#nodemon-자동으로-서버를-재시작해주는-도구" class="headerlink" title="nodemon: 자동으로 서버를 재시작해주는 도구"></a>nodemon: 자동으로 서버를 재시작해주는 도구</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 Node.js 애플리케이션을 개발할 때 자동으로 서버를 재시작해주는 도구인 nodemon에 대해 알아보겠습니다. nodemon의 역할과 필요성, 설치 방법, 기본 사용법과 고급 사용법, 그리고 실제 프로젝트에서 nodemon을 활용하는 방법을 알아보겠습니다.</p><h2 id="1-nodemon-소개"><a href="#1-nodemon-소개" class="headerlink" title="1. nodemon 소개"></a>1. nodemon 소개</h2><h3 id="nodemon이란-무엇인가"><a href="#nodemon이란-무엇인가" class="headerlink" title="nodemon이란 무엇인가?"></a>nodemon이란 무엇인가?</h3><p>nodemon은 Node.js 애플리케이션을 개발할 때 코드 변경을 감지하여 자동으로 서버를 재시작해주는 도구입니다. 이는 개발자가 코드 수정 후 수동으로 서버를 재시작하는 번거로움을 줄여줍니다.</p><h3 id="nodemon의-역할과-중요성"><a href="#nodemon의-역할과-중요성" class="headerlink" title="nodemon의 역할과 중요성"></a>nodemon의 역할과 중요성</h3><ul><li><strong>자동 재시작</strong>: 코드 변경 시 자동으로 서버를 재시작하여 개발 효율성을 높입니다.</li><li><strong>편리함</strong>: 개발자가 수동으로 서버를 재시작할 필요가 없어 생산성을 향상시킵니다.</li><li><strong>실시간 반영</strong>: 코드 변경 사항을 즉시 반영하여 테스트할 수 있습니다.</li></ul><h2 id="2-설치-및-설정"><a href="#2-설치-및-설정" class="headerlink" title="2. 설치 및 설정"></a>2. 설치 및 설정</h2><h3 id="nodemon-설치-방법"><a href="#nodemon-설치-방법" class="headerlink" title="nodemon 설치 방법"></a>nodemon 설치 방법</h3><p>nodemon은 npm을 통해 전역 또는 로컬에 설치할 수 있습니다.</p><ul><li><strong>전역 설치</strong>:</li></ul><pre><code class="highlight bash">npm install -g nodemon</code></pre><ul><li><strong>로컬 설치</strong>:</li></ul><pre><code class="highlight bash">npm install --save-dev nodemon</code></pre><h2 id="3-기본-사용법"><a href="#3-기본-사용법" class="headerlink" title="3. 기본 사용법"></a>3. 기본 사용법</h2><h3 id="기본-사용법"><a href="#기본-사용법" class="headerlink" title="기본 사용법"></a>기본 사용법</h3><ul><li><strong>애플리케이션 실행</strong>: <code>nodemon &lt;your-app.js&gt;</code></li></ul><pre><code class="highlight bash">nodemon app.js</code></pre><h3 id="스크립트-설정"><a href="#스크립트-설정" class="headerlink" title="스크립트 설정"></a>스크립트 설정</h3><p><code>package.json</code> 파일에 nodemon 스크립트를 추가할 수 있습니다.</p><p><strong>package.json</strong></p><pre><code class="highlight json"><span class="punctuation">&#123;</span>  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node app.js&quot;</span><span class="punctuation">,</span>    <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;nodemon app.js&quot;</span>  <span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></code></pre><p>애플리케이션 실행:</p><pre><code class="highlight bash">npm run dev</code></pre><h2 id="4-기타-옵션"><a href="#4-기타-옵션" class="headerlink" title="4. 기타 옵션"></a>4. 기타 옵션</h2><h3 id="exec-옵션"><a href="#exec-옵션" class="headerlink" title="-exec 옵션"></a>-exec 옵션</h3><p>nodemon을 사용할 때 실행할 명령어를 지정할 수 있습니다.</p><pre><code class="highlight bash">nodemon --<span class="built_in">exec</span> <span class="string">&quot;npm run lint &amp;&amp; node&quot;</span> app.js</code></pre><h3 id="watch-옵션"><a href="#watch-옵션" class="headerlink" title="-watch 옵션"></a>-watch 옵션</h3><p>특정 디렉토리나 파일을 감시하여 변경 사항이 있을 때만 재시작하도록 설정할 수 있습니다.</p><pre><code class="highlight bash">nodemon --watch src --watch config app.js</code></pre><h3 id="ignore-옵션"><a href="#ignore-옵션" class="headerlink" title="-ignore 옵션"></a>-ignore 옵션</h3><p>특정 파일이나 디렉토리를 무시하도록 설정할 수 있습니다.</p><pre><code class="highlight bash">nodemon --ignore tests/ app.js</code></pre><h3 id="delay-옵션"><a href="#delay-옵션" class="headerlink" title="-delay 옵션"></a>-delay 옵션</h3><p>재시작 전에 지연 시간을 설정할 수 있습니다.</p><pre><code class="highlight bash">nodemon --delay 2 app.js</code></pre><h3 id="설정-파일-사용"><a href="#설정-파일-사용" class="headerlink" title="설정 파일 사용"></a>설정 파일 사용</h3><p><code>nodemon.json</code> 파일을 사용하여 nodemon 설정을 관리할 수 있습니다.</p><p><strong>nodemon.json</strong></p><pre><code class="highlight json"><span class="punctuation">&#123;</span>  <span class="attr">&quot;watch&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;src&quot;</span><span class="punctuation">,</span> <span class="string">&quot;config&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span>  <span class="attr">&quot;ignore&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;tests/&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span>  <span class="attr">&quot;exec&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm run lint &amp;&amp; node&quot;</span><span class="punctuation">,</span>  <span class="attr">&quot;delay&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2&quot;</span><span class="punctuation">&#125;</span></code></pre><h2 id="5-실습-예제"><a href="#5-실습-예제" class="headerlink" title="5. 실습 예제"></a>5. 실습 예제</h2><h3 id="프로젝트-생성-및-nodemon-사용"><a href="#프로젝트-생성-및-nodemon-사용" class="headerlink" title="프로젝트 생성 및 nodemon 사용"></a>프로젝트 생성 및 nodemon 사용</h3><ol><li><strong>새 프로젝트 생성</strong>: 새로운 디렉토리를 만들고 이동합니다.</li></ol><pre><code class="highlight bash"><span class="built_in">mkdir</span> my-nodemon-project<span class="built_in">cd</span> my-nodemon-project</code></pre><ol start="2"><li><strong>프로젝트 초기화</strong>: <code>npm init -y</code> 명령어를 사용하여 프로젝트를 초기화합니다.</li></ol><pre><code class="highlight bash">npm init -y</code></pre><ol start="3"><li><strong>nodemon 설치</strong>: nodemon을 로컬에 설치합니다.</li></ol><pre><code class="highlight bash">npm install --save-dev nodemon</code></pre><ol start="4"><li><strong>애플리케이션 파일 생성</strong>: <code>app.js</code> 파일을 생성합니다.</li></ol><p><strong>app.js</strong></p><pre><code class="highlight javascript"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);<span class="keyword">const</span> app = <span class="title function_">express</span>();<span class="keyword">const</span> port = process.<span class="property">env</span>.<span class="property">PORT</span> || <span class="number">3000</span>;app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  res.<span class="title function_">send</span>(<span class="string">&quot;Hello World!&quot;</span>);&#125;);app.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Server is running on port <span class="subst">$&#123;port&#125;</span>`</span>);&#125;);</code></pre><ol start="5"><li><strong>스크립트 설정</strong>: <code>package.json</code> 파일에 nodemon 스크립트를 추가합니다.</li></ol><p><strong>package.json</strong></p><pre><code class="highlight json"><span class="punctuation">&#123;</span>  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;my-nodemon-project&quot;</span><span class="punctuation">,</span>  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span>  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span>  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;app.js&quot;</span><span class="punctuation">,</span>  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node app.js&quot;</span><span class="punctuation">,</span>    <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;nodemon app.js&quot;</span>  <span class="punctuation">&#125;</span><span class="punctuation">,</span>  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>    <span class="attr">&quot;express&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.17.1&quot;</span>  <span class="punctuation">&#125;</span><span class="punctuation">,</span>  <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>    <span class="attr">&quot;nodemon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.0.7&quot;</span>  <span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></code></pre><ol start="6"><li><strong>애플리케이션 실행</strong>: <code>npm run dev</code> 명령어를 사용하여 nodemon으로 애플리케이션을 실행합니다.</li></ol><pre><code class="highlight bash">npm run dev</code></pre><h2 id="6-nodemon-명령어-사전"><a href="#6-nodemon-명령어-사전" class="headerlink" title="6. nodemon 명령어 사전"></a>6. nodemon 명령어 사전</h2><ul><li><strong><code>nodemon &lt;your-app.js&gt;</code></strong>: 애플리케이션을 실행합니다.</li></ul><pre><code class="highlight bash">nodemon app.js</code></pre><ul><li><strong><code>nodemon --exec &lt;command&gt;</code></strong>: 실행할 명령어를 지정합니다.</li></ul><pre><code class="highlight bash">nodemon --<span class="built_in">exec</span> <span class="string">&quot;npm run lint &amp;&amp; node&quot;</span> app.js</code></pre><ul><li><strong><code>nodemon --watch &lt;file-or-dir&gt;</code></strong>: 특정 파일이나 디렉토리를 감시합니다.</li></ul><pre><code class="highlight bash">nodemon --watch src --watch config app.js</code></pre><ul><li><strong><code>nodemon --ignore &lt;file-or-dir&gt;</code></strong>: 특정 파일이나 디렉토리를 무시합니다.</li></ul><pre><code class="highlight bash">nodemon --ignore tests/ app.js</code></pre><ul><li><strong><code>nodemon --delay &lt;time&gt;</code></strong>: 재시작 전에 지연 시간을 설정합니다.</li></ul><pre><code class="highlight bash">nodemon --delay 2 app.js</code></pre><h3 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h3><p>이번 시간에는 nodemon의 기본 개념부터 설치 방법, 기본 및 고급 사용법, 추가 명령어까지 다루었습니다. nodemon을 통해 Node.js 애플리케이션을 효율적으로 개발하고 관리할 수 있습니다. 다음 시간에는 또 다른 유용한 CLI 도구를 소개하겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> CLI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>API Rate Limiting의 필요성과 Node.js에서 구현하기</title>
      <link href="/web/essential/15/"/>
      <url>/web/essential/15/</url>
      
        <content type="html"><![CDATA[<h1 id="API-Rate-Limiting의-필요성과-Node-js에서-구현하기"><a href="#API-Rate-Limiting의-필요성과-Node-js에서-구현하기" class="headerlink" title="API Rate Limiting의 필요성과 Node.js에서 구현하기"></a>API Rate Limiting의 필요성과 Node.js에서 구현하기</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 API Rate Limiting의 필요성에 대해 알아보고, Node.js에서 Rate Limiting을 구현하는 방법을 실습해보겠습니다. Rate Limiting은 API 서버의 성능과 보안을 유지하는 데 중요한 기능 중 하나입니다.</p><h2 id="API-Rate-Limiting의-개념"><a href="#API-Rate-Limiting의-개념" class="headerlink" title="API Rate Limiting의 개념"></a>API Rate Limiting의 개념</h2><h3 id="API-Rate-Limiting이란"><a href="#API-Rate-Limiting이란" class="headerlink" title="API Rate Limiting이란?"></a>API Rate Limiting이란?</h3><p>API Rate Limiting은 주어진 시간 동안 클라이언트가 API 서버에 요청할 수 있는 요청 수를 제한하는 기술입니다. 이를 통해 서버 자원을 보호하고, 악의적인 공격이나 과도한 요청으로부터 서버를 방어할 수 있습니다.</p><h3 id="API-Rate-Limiting의-필요성"><a href="#API-Rate-Limiting의-필요성" class="headerlink" title="API Rate Limiting의 필요성"></a>API Rate Limiting의 필요성</h3><ol><li><strong>서버 보호</strong>: 과도한 요청으로 인한 서버 과부하를 방지합니다.</li><li><strong>서비스 품질 유지</strong>: 모든 사용자가 공정하게 서버 자원을 사용할 수 있도록 합니다.</li><li><strong>보안 강화</strong>: DoS(Denial of Service) 공격 및 스팸 요청을 방지합니다.</li><li><strong>비용 절감</strong>: 서버 자원을 효율적으로 사용하여 비용을 절감할 수 있습니다.</li></ol><h2 id="준비하기"><a href="#준비하기" class="headerlink" title="준비하기"></a>준비하기</h2><p>먼저 필요한 패키지를 설치합니다:</p><pre><code class="highlight bash">npm init -ynpm install express rate-limit</code></pre><h2 id="서버-설정"><a href="#서버-설정" class="headerlink" title="서버 설정"></a>서버 설정</h2><p>다음은 필요한 모듈을 가져오고 서버를 설정하는 코드입니다. 자세한 부분은 뒤에서 알아보겠습니다.</p><pre><code class="highlight javascript"><span class="comment">// server.js</span><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);<span class="keyword">const</span> rateLimit = <span class="built_in">require</span>(<span class="string">&quot;express-rate-limit&quot;</span>);<span class="keyword">const</span> app = <span class="title function_">express</span>();<span class="keyword">const</span> port = <span class="number">3000</span>;<span class="comment">// Rate Limiting 설정</span><span class="keyword">const</span> limiter = <span class="title function_">rateLimit</span>(&#123;  <span class="attr">windowMs</span>: <span class="number">15</span> * <span class="number">60</span> * <span class="number">1000</span>, <span class="comment">// 15분</span>  <span class="attr">max</span>: <span class="number">100</span>, <span class="comment">// 15분 동안 최대 100개의 요청 허용</span>  <span class="attr">message</span>: <span class="string">&quot;Too many requests from this IP, please try again later.&quot;</span>,&#125;);app.<span class="title function_">use</span>(limiter);app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  res.<span class="title function_">send</span>(<span class="string">&quot;Welcome to the API with rate limiting!&quot;</span>);&#125;);app.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Server is running on &lt;http://localhost&gt;:<span class="subst">$&#123;port&#125;</span>`</span>);&#125;);</code></pre><h2 id="설정-설명"><a href="#설정-설명" class="headerlink" title="설정 설명"></a>설정 설명</h2><p>Node.js에서 Rate Limiting을 설정하고 사용하는 방법을 설명합니다.</p><ol><li><p><strong>Rate Limiting 설정</strong>:</p><pre><code class="highlight javascript"><span class="keyword">const</span> rateLimit = <span class="built_in">require</span>(<span class="string">&quot;express-rate-limit&quot;</span>);<span class="keyword">const</span> limiter = <span class="title function_">rateLimit</span>(&#123;  <span class="attr">windowMs</span>: <span class="number">15</span> * <span class="number">60</span> * <span class="number">1000</span>, <span class="comment">// 15분</span>  <span class="attr">max</span>: <span class="number">100</span>, <span class="comment">// 15분 동안 최대 100개의 요청 허용</span>  <span class="attr">message</span>: <span class="string">&quot;Too many requests from this IP, please try again later.&quot;</span>,&#125;);</code></pre><p><code>express-rate-limit</code> 패키지를 사용하여 Rate Limiting을 설정합니다. <code>windowMs</code>는 시간 창을 밀리초 단위로 설정하고, <code>max</code>는 시간 창 동안 허용할 최대 요청 수를 설정합니다. <code>message</code>는 Rate Limiting에 걸렸을 때 클라이언트에게 보낼 메시지입니다.</p></li><li><p><strong>Rate Limiting 미들웨어 사용</strong>:</p><pre><code class="highlight javascript">app.<span class="title function_">use</span>(limiter);</code></pre><p>Rate Limiting 미들웨어를 Express 애플리케이션에 적용합니다. 이 미들웨어는 모든 요청에 대해 Rate Limiting을 적용합니다.</p></li><li><p><strong>기본 라우트 설정</strong>:</p><pre><code class="highlight javascript">app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  res.<span class="title function_">send</span>(<span class="string">&quot;Welcome to the API with rate limiting!&quot;</span>);&#125;);</code></pre><p>기본 라우트를 설정하여 Rate Limiting이 적용된 상태에서 요청을 처리합니다.</p></li></ol><h2 id="테스트"><a href="#테스트" class="headerlink" title="테스트"></a>테스트</h2><p>이렇게 하면 Node.js에서 Rate Limiting을 구현할 수 있습니다. 이 코드를 실행하기 전에 <code>server.js</code> 파일을 실행하여 서버를 시작하세요.</p><pre><code class="highlight bash">node server.js</code></pre><p>서버가 성공적으로 실행되면, <code>http://localhost:3000</code>에서 Rate Limiting이 적용된 API를 테스트할 수 있습니다. 15분 동안 100개 이상의 요청을 보내면 “Too many requests from this IP, please try again later.” 메시지를 받게 됩니다.</p><h2 id="고급-설정"><a href="#고급-설정" class="headerlink" title="고급 설정"></a>고급 설정</h2><p>Rate Limiting을 더 세부적으로 설정할 수도 있습니다. 예를 들어, 특정 라우트에만 Rate Limiting을 적용하거나, IP 주소별로 다른 제한을 설정할 수 있습니다.</p><ol><li><p><strong>특정 라우트에 Rate Limiting 적용</strong>:</p><pre><code class="highlight javascript">app.<span class="title function_">get</span>(<span class="string">&quot;/api&quot;</span>, limiter, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  res.<span class="title function_">send</span>(<span class="string">&quot;This route is rate limited.&quot;</span>);&#125;);</code></pre></li><li><p><strong>IP 주소별로 다른 제한 설정</strong>:</p><pre><code class="highlight javascript"><span class="keyword">const</span> limiter = <span class="title function_">rateLimit</span>(&#123;  <span class="attr">windowMs</span>: <span class="number">15</span> * <span class="number">60</span> * <span class="number">1000</span>, <span class="comment">// 15분</span>  <span class="attr">max</span>: <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;    <span class="keyword">if</span> (req.<span class="property">ip</span> === <span class="string">&quot;127.0.0.1&quot;</span>) &#123;      <span class="keyword">return</span> <span class="number">200</span>; <span class="comment">// 로컬호스트는 15분 동안 200개의 요청 허용</span>    &#125;    <span class="keyword">return</span> <span class="number">100</span>; <span class="comment">// 그 외 IP는 15분 동안 100개의 요청 허용</span>  &#125;,  <span class="attr">message</span>: <span class="string">&quot;Too many requests from this IP, please try again later.&quot;</span>,&#125;);</code></pre></li></ol><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 API Rate Limiting의 필요성과 Node.js에서 Rate Limiting을 구현하는 방법을 알아보았습니다. 이를 바탕으로 더 안전하고 효율적인 API 서버를 개발해보세요!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> web_필수 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Javascript 비구조화 할당 (Destructuring Assignment)</title>
      <link href="/javascript/detail/1/"/>
      <url>/javascript/detail/1/</url>
      
        <content type="html"><![CDATA[<h1 id="Javascript-비구조화-할당-Destructuring-Assignment"><a href="#Javascript-비구조화-할당-Destructuring-Assignment" class="headerlink" title="Javascript 비구조화 할당 (Destructuring Assignment)"></a>Javascript 비구조화 할당 (Destructuring Assignment)</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 JavaScript에서 강력하고 유용한 기능인 비구조화 할당(Destructuring Assignment)을 이용하여 다양한 예제를 살펴보겠습니다.<br>비구조화 할당을 활용한 다양한 상황을 이해하고, 실제 코드에 적용하는 방법을 알아가보세요!</p><h2 id="비구조화-할당의-개념"><a href="#비구조화-할당의-개념" class="headerlink" title="비구조화 할당의 개념"></a>비구조화 할당의 개념</h2><p>비구조화 할당은 배열이나 객체의 속성을 변수로 쉽게 분해하여 할당하는 JavaScript 문법입니다. 이 문법을 사용하면 코드를 더욱 간결하고 읽기 쉽게 만들 수 있습니다.</p><h2 id="1-배열-비구조화-할당"><a href="#1-배열-비구조화-할당" class="headerlink" title="1. 배열 비구조화 할당"></a>1. 배열 비구조화 할당</h2><h3 id="기본-예제"><a href="#기본-예제" class="headerlink" title="기본 예제"></a>기본 예제</h3><pre><code class="highlight javascript"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];<span class="keyword">const</span> [one, two, three] = numbers;<span class="variable language_">console</span>.<span class="title function_">log</span>(one); <span class="comment">// 1</span><span class="variable language_">console</span>.<span class="title function_">log</span>(two); <span class="comment">// 2</span><span class="variable language_">console</span>.<span class="title function_">log</span>(three); <span class="comment">// 3</span></code></pre><h2 id="2-기본값-설정"><a href="#2-기본값-설정" class="headerlink" title="2. 기본값 설정"></a>2. 기본값 설정</h2><h3 id="기본값을-사용하는-배열-비구조화"><a href="#기본값을-사용하는-배열-비구조화" class="headerlink" title="기본값을 사용하는 배열 비구조화"></a>기본값을 사용하는 배열 비구조화</h3><pre><code class="highlight javascript"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>];<span class="keyword">const</span> [one, two, three = <span class="number">3</span>] = numbers;<span class="variable language_">console</span>.<span class="title function_">log</span>(one); <span class="comment">// 1</span><span class="variable language_">console</span>.<span class="title function_">log</span>(two); <span class="comment">// 2</span><span class="variable language_">console</span>.<span class="title function_">log</span>(three); <span class="comment">// 3</span></code></pre><h2 id="3-객체-비구조화-할당"><a href="#3-객체-비구조화-할당" class="headerlink" title="3. 객체 비구조화 할당"></a>3. 객체 비구조화 할당</h2><h3 id="객체에서-속성-분해"><a href="#객체에서-속성-분해" class="headerlink" title="객체에서 속성 분해"></a>객체에서 속성 분해</h3><pre><code class="highlight javascript"><span class="keyword">const</span> person = &#123; <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;;<span class="keyword">const</span> &#123; name, age &#125; = person;<span class="variable language_">console</span>.<span class="title function_">log</span>(name); <span class="comment">// John</span><span class="variable language_">console</span>.<span class="title function_">log</span>(age); <span class="comment">// 30</span></code></pre><h2 id="4-객체-속성-이름-변경"><a href="#4-객체-속성-이름-변경" class="headerlink" title="4. 객체 속성 이름 변경"></a>4. 객체 속성 이름 변경</h2><h3 id="변수-이름-변경"><a href="#변수-이름-변경" class="headerlink" title="변수 이름 변경"></a>변수 이름 변경</h3><pre><code class="highlight javascript"><span class="keyword">const</span> person = &#123; <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;;<span class="keyword">const</span> &#123; <span class="attr">name</span>: fullName, <span class="attr">age</span>: years &#125; = person;<span class="variable language_">console</span>.<span class="title function_">log</span>(fullName); <span class="comment">// John</span><span class="variable language_">console</span>.<span class="title function_">log</span>(years); <span class="comment">// 30</span></code></pre><h2 id="5-중첩된-객체-비구조화"><a href="#5-중첩된-객체-비구조화" class="headerlink" title="5. 중첩된 객체 비구조화"></a>5. 중첩된 객체 비구조화</h2><h3 id="중첩된-객체에서-속성-분해"><a href="#중첩된-객체에서-속성-분해" class="headerlink" title="중첩된 객체에서 속성 분해"></a>중첩된 객체에서 속성 분해</h3><pre><code class="highlight javascript"><span class="keyword">const</span> person = &#123;  <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,  <span class="attr">address</span>: &#123;    <span class="attr">city</span>: <span class="string">&quot;New York&quot;</span>,    <span class="attr">country</span>: <span class="string">&quot;USA&quot;</span>,  &#125;,&#125;;<span class="keyword">const</span> &#123;  <span class="attr">address</span>: &#123; city, country &#125;,&#125; = person;<span class="variable language_">console</span>.<span class="title function_">log</span>(city); <span class="comment">// New York</span><span class="variable language_">console</span>.<span class="title function_">log</span>(country); <span class="comment">// USA</span></code></pre><h2 id="6-함수-매개변수-비구조화"><a href="#6-함수-매개변수-비구조화" class="headerlink" title="6. 함수 매개변수 비구조화"></a>6. 함수 매개변수 비구조화</h2><h3 id="함수의-매개변수를-비구조화하여-전달"><a href="#함수의-매개변수를-비구조화하여-전달" class="headerlink" title="함수의 매개변수를 비구조화하여 전달"></a>함수의 매개변수를 비구조화하여 전달</h3><pre><code class="highlight javascript"><span class="keyword">function</span> <span class="title function_">displayPerson</span>(<span class="params">&#123; name, age &#125;</span>) &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Name: <span class="subst">$&#123;name&#125;</span>, Age: <span class="subst">$&#123;age&#125;</span>`</span>);&#125;<span class="keyword">const</span> person = &#123; <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;;<span class="title function_">displayPerson</span>(person); <span class="comment">// Name: John, Age: 30</span></code></pre><h2 id="7-나머지-매개변수와-비구조화"><a href="#7-나머지-매개변수와-비구조화" class="headerlink" title="7. 나머지 매개변수와 비구조화"></a>7. 나머지 매개변수와 비구조화</h2><h3 id="나머지-매개변수를-사용한-비구조화"><a href="#나머지-매개변수를-사용한-비구조화" class="headerlink" title="나머지 매개변수를 사용한 비구조화"></a>나머지 매개변수를 사용한 비구조화</h3><pre><code class="highlight javascript"><span class="keyword">const</span> person = &#123; <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>, <span class="attr">age</span>: <span class="number">30</span>, <span class="attr">job</span>: <span class="string">&quot;Developer&quot;</span> &#125;;<span class="keyword">const</span> &#123; name, ...rest &#125; = person;<span class="variable language_">console</span>.<span class="title function_">log</span>(name); <span class="comment">// John</span><span class="variable language_">console</span>.<span class="title function_">log</span>(rest); <span class="comment">// &#123; age: 30, job: &quot;Developer&quot; &#125;</span></code></pre><h2 id="8-배열-비구조화와-나머지-요소"><a href="#8-배열-비구조화와-나머지-요소" class="headerlink" title="8. 배열 비구조화와 나머지 요소"></a>8. 배열 비구조화와 나머지 요소</h2><h3 id="배열-비구조화와-나머지-요소-사용"><a href="#배열-비구조화와-나머지-요소-사용" class="headerlink" title="배열 비구조화와 나머지 요소 사용"></a>배열 비구조화와 나머지 요소 사용</h3><pre><code class="highlight javascript"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];<span class="keyword">const</span> [first, second, ...rest] = numbers;<span class="variable language_">console</span>.<span class="title function_">log</span>(first); <span class="comment">// 1</span><span class="variable language_">console</span>.<span class="title function_">log</span>(second); <span class="comment">// 2</span><span class="variable language_">console</span>.<span class="title function_">log</span>(rest); <span class="comment">// [3, 4, 5]</span></code></pre><h2 id="9-기본값과-변수-이름-변경"><a href="#9-기본값과-변수-이름-변경" class="headerlink" title="9. 기본값과 변수 이름 변경"></a>9. 기본값과 변수 이름 변경</h2><h3 id="기본값-설정과-변수-이름-변경을-함께-사용"><a href="#기본값-설정과-변수-이름-변경을-함께-사용" class="headerlink" title="기본값 설정과 변수 이름 변경을 함께 사용"></a>기본값 설정과 변수 이름 변경을 함께 사용</h3><pre><code class="highlight javascript"><span class="keyword">const</span> person = &#123; <span class="attr">name</span>: <span class="string">&quot;John&quot;</span> &#125;;<span class="keyword">const</span> &#123; name, age = <span class="number">25</span> &#125; = person;<span class="variable language_">console</span>.<span class="title function_">log</span>(name); <span class="comment">// John</span><span class="variable language_">console</span>.<span class="title function_">log</span>(age); <span class="comment">// 25</span></code></pre><h2 id="10-비구조화-할당을-이용한-스왑"><a href="#10-비구조화-할당을-이용한-스왑" class="headerlink" title="10. 비구조화 할당을 이용한 스왑"></a>10. 비구조화 할당을 이용한 스왑</h2><h3 id="두-변수의-값을-교환"><a href="#두-변수의-값을-교환" class="headerlink" title="두 변수의 값을 교환"></a>두 변수의 값을 교환</h3><pre><code class="highlight javascript"><span class="keyword">let</span> a = <span class="number">1</span>;<span class="keyword">let</span> b = <span class="number">2</span>;[a, b] = [b, a];<span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 2</span><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// 1</span></code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 JavaScript의 비구조화 할당 문법을 다양한 상황에서 활용하는 방법을 알아보았습니다.<br>이 문법을 활용하면 코드를 더욱 간결하고 읽기 쉽게 만들 수 있습니다.<br>다음 시간에는 JavaScript에서 화살표 함수에 대해 알아보겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> JS_디테일 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CORS의 개념과 Express에서의 설정 및 관리 방법</title>
      <link href="/web/essential/14/"/>
      <url>/web/essential/14/</url>
      
        <content type="html"><![CDATA[<h1 id="CORS의-개념과-Express에서의-설정-및-관리-방법"><a href="#CORS의-개념과-Express에서의-설정-및-관리-방법" class="headerlink" title="CORS의 개념과 Express에서의 설정 및 관리 방법"></a>CORS의 개념과 Express에서의 설정 및 관리 방법</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 CORS의 개념과 원리에 대해 알아보고, Express에서 CORS를 설정하고 관리하는 방법을 실습해보겠습니다. CORS는 웹 애플리케이션 개발 시 중요한 보안 기능 중 하나입니다.</p><h2 id="CORS의-개념"><a href="#CORS의-개념" class="headerlink" title="CORS의 개념"></a>CORS의 개념</h2><h3 id="CORS란"><a href="#CORS란" class="headerlink" title="CORS란?"></a>CORS란?</h3><p>CORS(Cross-Origin Resource Sharing)는 하나의 도메인에서 실행 중인 웹 애플리케이션이 다른 도메인에 있는 리소스에 접근할 수 있도록 허용하는 보안 기능입니다. 기본적으로, 브라우저는 보안상의 이유로 동일 출처 정책(Same-Origin Policy)을 적용하여 다른 출처에서 리소스를 요청하는 것을 제한합니다. CORS는 이러한 제한을 완화하여 필요한 경우 다른 출처의 리소스를 안전하게 사용할 수 있게 합니다.</p><h3 id="CORS의-필요성"><a href="#CORS의-필요성" class="headerlink" title="CORS의 필요성"></a>CORS의 필요성</h3><ol><li><strong>보안</strong>: 악의적인 웹사이트가 사용자의 세션 정보를 탈취하거나, 민감한 데이터를 접근하지 못하도록 합니다.</li><li><strong>유연성</strong>: 클라이언트와 서버가 서로 다른 도메인에서 호스팅되는 경우에도 리소스 공유가 가능하도록 합니다.</li><li><strong>API 통합</strong>: 외부 API와 통합할 때, CORS 설정을 통해 원활한 데이터 통신이 가능합니다.</li></ol><h3 id="CORS의-동작-원리"><a href="#CORS의-동작-원리" class="headerlink" title="CORS의 동작 원리"></a>CORS의 동작 원리</h3><ol><li><strong>프리플라이트 요청(Preflight Request)</strong>: 특정 조건을 만족하는 요청에 대해, 브라우저는 실제 요청을 보내기 전에 OPTIONS 메서드를 사용하여 서버에 프리플라이트 요청을 보냅니다. 이를 통해 서버는 요청이 허용 가능한지 확인합니다.</li><li><strong>CORS 헤더</strong>: 서버는 응답 헤더를 통해 CORS 설정을 클라이언트에 전달합니다. 주요 CORS 헤더는 다음과 같습니다:<ul><li><code>Access-Control-Allow-Origin</code>: 허용할 출처를 지정합니다.</li><li><code>Access-Control-Allow-Methods</code>: 허용할 HTTP 메서드를 지정합니다.</li><li><code>Access-Control-Allow-Headers</code>: 허용할 HTTP 헤더를 지정합니다.</li></ul></li></ol><h2 id="준비하기"><a href="#준비하기" class="headerlink" title="준비하기"></a>준비하기</h2><p>먼저 필요한 패키지를 설치합니다:</p><pre><code class="highlight bash">npm init -ynpm install express cors</code></pre><h2 id="서버-설정"><a href="#서버-설정" class="headerlink" title="서버 설정"></a>서버 설정</h2><p>다음은 필요한 모듈을 가져오고 서버를 설정하는 코드입니다. 자세한 부분은 뒤에서 알아보겠습니다.</p><pre><code class="highlight javascript"><span class="comment">// server.js</span><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);<span class="keyword">const</span> cors = <span class="built_in">require</span>(<span class="string">&quot;cors&quot;</span>);<span class="keyword">const</span> app = <span class="title function_">express</span>();<span class="keyword">const</span> port = <span class="number">3000</span>;<span class="comment">// 기본 CORS 설정</span>app.<span class="title function_">use</span>(<span class="title function_">cors</span>());<span class="comment">// 라우트 설정</span>app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  res.<span class="title function_">send</span>(<span class="string">&quot;CORS enabled for all origins&quot;</span>);&#125;);<span class="comment">// 특정 도메인에 대해 CORS 설정</span><span class="keyword">const</span> corsOptions = &#123;  <span class="attr">origin</span>: <span class="string">&quot;&lt;http://example.com&gt;&quot;</span>,  <span class="attr">optionsSuccessStatus</span>: <span class="number">200</span>,&#125;;app.<span class="title function_">get</span>(<span class="string">&quot;/specific&quot;</span>, <span class="title function_">cors</span>(corsOptions), <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  res.<span class="title function_">send</span>(<span class="string">&quot;CORS enabled for specific origin&quot;</span>);&#125;);app.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Server is running on &lt;http://localhost&gt;:<span class="subst">$&#123;port&#125;</span>`</span>);&#125;);</code></pre><h2 id="설정-설명"><a href="#설정-설명" class="headerlink" title="설정 설명"></a>설정 설명</h2><p>Express에서 CORS를 설정하고 관리하는 방법을 설명합니다.</p><ol><li><p><strong>기본 CORS 설정</strong>:</p><pre><code class="highlight javascript"><span class="keyword">const</span> cors = <span class="built_in">require</span>(<span class="string">&quot;cors&quot;</span>);app.<span class="title function_">use</span>(<span class="title function_">cors</span>());</code></pre><p><code>cors</code> 미들웨어를 사용하여 모든 도메인에 대해 CORS를 허용합니다. 이는 모든 요청에 대해 <code>Access-Control-Allow-Origin: *</code> 헤더를 추가합니다.</p></li><li><p><strong>특정 도메인에 대해 CORS 설정</strong>:</p><pre><code class="highlight javascript"><span class="keyword">const</span> corsOptions = &#123;  <span class="attr">origin</span>: <span class="string">&quot;&lt;http://example.com&gt;&quot;</span>,  <span class="attr">optionsSuccessStatus</span>: <span class="number">200</span>,&#125;;app.<span class="title function_">get</span>(<span class="string">&quot;/specific&quot;</span>, <span class="title function_">cors</span>(corsOptions), <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  res.<span class="title function_">send</span>(<span class="string">&quot;CORS enabled for specific origin&quot;</span>);&#125;);</code></pre><p>특정 도메인에 대해서만 CORS를 허용하려면 <code>corsOptions</code> 객체를 설정하고, 해당 옵션을 <code>cors</code> 미들웨어에 전달합니다. 여기서는 <code>http://example.com</code> 도메인에 대해서만 CORS를 허용합니다.</p></li></ol><h2 id="고급-설정"><a href="#고급-설정" class="headerlink" title="고급 설정"></a>고급 설정</h2><p>CORS 설정을 더 세부적으로 조정할 수도 있습니다. 예를 들어, 허용할 HTTP 메서드와 헤더를 명시적으로 지정할 수 있습니다.</p><ol><li><p><strong>허용할 메서드와 헤더 설정</strong>:</p><pre><code class="highlight javascript"><span class="keyword">const</span> advancedCorsOptions = &#123;  <span class="attr">origin</span>: <span class="string">&quot;&lt;http://example.com&gt;&quot;</span>,  <span class="attr">methods</span>: <span class="string">&quot;GET,POST,PUT,DELETE&quot;</span>,  <span class="attr">allowedHeaders</span>: <span class="string">&quot;Content-Type,Authorization&quot;</span>,  <span class="attr">optionsSuccessStatus</span>: <span class="number">200</span>,&#125;;app.<span class="title function_">use</span>(<span class="string">&quot;/advanced&quot;</span>, <span class="title function_">cors</span>(advancedCorsOptions), <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  res.<span class="title function_">send</span>(<span class="string">&quot;Advanced CORS settings applied&quot;</span>);&#125;);</code></pre></li><li><p><strong>프리플라이트 요청 캐싱</strong>:</p><pre><code class="highlight javascript"><span class="keyword">const</span> cacheCorsOptions = &#123;  <span class="attr">origin</span>: <span class="string">&quot;&lt;http://example.com&gt;&quot;</span>,  <span class="attr">methods</span>: <span class="string">&quot;GET,POST,PUT,DELETE&quot;</span>,  <span class="attr">allowedHeaders</span>: <span class="string">&quot;Content-Type,Authorization&quot;</span>,  <span class="attr">optionsSuccessStatus</span>: <span class="number">200</span>,  <span class="attr">preflightContinue</span>: <span class="literal">false</span>,  <span class="attr">maxAge</span>: <span class="number">600</span>, <span class="comment">// 10분 동안 프리플라이트 요청 결과를 캐시</span>&#125;;app.<span class="title function_">use</span>(<span class="string">&quot;/cache&quot;</span>, <span class="title function_">cors</span>(cacheCorsOptions), <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  res.<span class="title function_">send</span>(<span class="string">&quot;CORS settings with preflight caching applied&quot;</span>);&#125;);</code></pre></li></ol><h2 id="테스트"><a href="#테스트" class="headerlink" title="테스트"></a>테스트</h2><p>이렇게 하면 Node.js에서 CORS를 설정하고 관리할 수 있습니다. 이 코드를 실행하기 전에 <code>server.js</code> 파일을 실행하여 서버를 시작하세요.</p><pre><code class="highlight bash">node server.js</code></pre><p>서버가 성공적으로 실행되면, <code>http://localhost:3000</code>에서 CORS 설정이 적용된 API를 테스트할 수 있습니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 CORS의 개념과 필요성을 이해하고, Express에서 CORS를 설정하고 관리하는 방법을 알아보았습니다. 이를 바탕으로 더 안전하고 유연한 웹 애플리케이션을 개발해보세요!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> web_필수 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>HTML과 CSS 연동해보기</title>
      <link href="/web/newb/5/"/>
      <url>/web/newb/5/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML과-CSS-결합"><a href="#HTML과-CSS-결합" class="headerlink" title="HTML과 CSS 결합"></a>HTML과 CSS 결합</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 HTML과 CSS를 결합하여 웹 페이지를 스타일링하는 방법에 대해 알아보겠습니다. HTML은 웹 페이지의 구조를 정의하고, CSS는 그 구조를 스타일링하는 역할을 합니다. 이 둘을 결합하면 더 다채롭고 사용자 친화적인 웹 페이지를 만들 수 있습니다.</p><h2 id="HTML에-CSS-적용하기"><a href="#HTML에-CSS-적용하기" class="headerlink" title="HTML에 CSS 적용하기"></a>HTML에 CSS 적용하기</h2><h3 id="인라인-스타일-In-line-Style"><a href="#인라인-스타일-In-line-Style" class="headerlink" title="인라인 스타일 (In-line Style)"></a>인라인 스타일 (In-line Style)</h3><p>인라인 스타일은 개별 HTML 요소에 직접 스타일을 정의하는 방법입니다. 작은 스타일 변경이나 일회성 스타일 적용에 유용하지만, 유지보수성이 떨어집니다.</p><pre><code class="highlight html"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color: blue; font-size: 14px;&quot;</span>&gt;</span>안녕하세요<span class="tag">&lt;/<span class="name">p</span>&gt;</span></code></pre><h3 id="내부-스타일-시트-Internal-Style-Sheet"><a href="#내부-스타일-시트-Internal-Style-Sheet" class="headerlink" title="내부 스타일 시트 (Internal Style Sheet)"></a>내부 스타일 시트 (Internal Style Sheet)</h3><p>내부 스타일 시트는 HTML 문서의 <code>&lt;head&gt;</code> 섹션에 스타일을 정의하는 방법입니다. 동일 문서 내에서 스타일을 관리할 수 있어 편리합니다.</p><pre><code class="highlight html"><span class="tag">&lt;<span class="name">head</span>&gt;</span>  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span><span class="language-css">    <span class="selector-tag">p</span> &#123;</span><span class="language-css">      <span class="attribute">color</span>: blue;</span><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><span class="language-css">    &#125;</span><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></code></pre><h3 id="외부-스타일-시트-External-Style-Sheet"><a href="#외부-스타일-시트-External-Style-Sheet" class="headerlink" title="외부 스타일 시트 (External Style Sheet)"></a>외부 스타일 시트 (External Style Sheet)</h3><p>외부 스타일 시트는 별도의 CSS 파일을 링크하여 스타일을 정의하는 방법입니다. 여러 HTML 문서에서 동일한 스타일을 공유할 수 있어 유지보수성이 높습니다.</p><pre><code class="highlight html"><span class="tag">&lt;<span class="name">head</span>&gt;</span>  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;styles.css&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></code></pre><p><strong>styles.css</strong></p><pre><code class="highlight css"><span class="selector-tag">p</span> &#123;  <span class="attribute">color</span>: blue;  <span class="attribute">font-size</span>: <span class="number">14px</span>;&#125;</code></pre><h2 id="박스-모델과-레이아웃-기초"><a href="#박스-모델과-레이아웃-기초" class="headerlink" title="박스 모델과 레이아웃 기초"></a>박스 모델과 레이아웃 기초</h2><h3 id="박스-모델"><a href="#박스-모델" class="headerlink" title="박스 모델"></a>박스 모델</h3><p>CSS 박스 모델은 모든 HTML 요소를 하나의 박스로 간주하고, 요소의 크기와 간격을 정의하는 모델입니다. 박스 모델은 <code>content</code>, <code>padding</code>, <code>border</code>, <code>margin</code>으로 구성됩니다.</p><img src="https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/The_box_model/box-model.png"><pre><code class="highlight css"><span class="selector-class">.box</span> &#123;  <span class="attribute">width</span>: <span class="number">100px</span>; <span class="comment">/* content */</span>  <span class="attribute">padding</span>: <span class="number">10px</span>; <span class="comment">/* 내부 여백 */</span>  <span class="attribute">border</span>: <span class="number">1px</span> solid black; <span class="comment">/* 테두리 */</span>  <span class="attribute">margin</span>: <span class="number">20px</span>; <span class="comment">/* 외부 여백 */</span>&#125;</code></pre><h3 id="레이아웃-기초"><a href="#레이아웃-기초" class="headerlink" title="레이아웃 기초"></a>레이아웃 기초</h3><p>HTML 요소를 배치하는 방법에는 여러 가지가 있습니다. 기본적인 레이아웃 기법으로는 <code>display</code>, <code>position</code>, <code>float</code> 등이 있습니다.</p><h4 id="display"><a href="#display" class="headerlink" title="display"></a>display</h4><ul><li><strong>block</strong>: 줄바꿈이 있는 블록 요소로 변환합니다.</li><li><strong>inline</strong>: 줄바꿈이 없는 인라인 요소로 변환합니다.</li><li><strong>inline-block</strong>: 줄바꿈이 없는 블록 요소로 변환합니다.</li></ul><pre><code class="highlight css"><span class="selector-class">.block</span> &#123;  <span class="attribute">display</span>: block;&#125;<span class="selector-class">.inline</span> &#123;  <span class="attribute">display</span>: inline;&#125;<span class="selector-class">.inline-block</span> &#123;  <span class="attribute">display</span>: inline-block;&#125;</code></pre><h4 id="position"><a href="#position" class="headerlink" title="position"></a>position</h4><ul><li><strong>static</strong>: 기본 위치입니다.</li><li><strong>relative</strong>: 요소의 기본 위치를 기준으로 상대적인 위치를 지정합니다.</li><li><strong>absolute</strong>: 가장 가까운 <code>position</code>이 <code>relative</code>, <code>absolute</code>, <code>fixed</code>인 조상 요소를 기준으로 위치를 지정합니다.</li><li><strong>fixed</strong>: 뷰포트를 기준으로 위치를 지정합니다.</li></ul><pre><code class="highlight css"><span class="selector-class">.relative</span> &#123;  <span class="attribute">position</span>: relative;  <span class="attribute">top</span>: <span class="number">10px</span>;  <span class="attribute">left</span>: <span class="number">20px</span>;&#125;<span class="selector-class">.absolute</span> &#123;  <span class="attribute">position</span>: absolute;  <span class="attribute">top</span>: <span class="number">50px</span>;  <span class="attribute">left</span>: <span class="number">100px</span>;&#125;<span class="selector-class">.fixed</span> &#123;  <span class="attribute">position</span>: fixed;  <span class="attribute">top</span>: <span class="number">0</span>;  <span class="attribute">left</span>: <span class="number">0</span>;&#125;</code></pre><h4 id="float"><a href="#float" class="headerlink" title="float"></a>float</h4><p><code>float</code> 속성은 요소를 왼쪽이나 오른쪽으로 떠있게 하여 텍스트나 다른 요소가 주위를 감싸도록 합니다.</p><pre><code class="highlight css"><span class="selector-class">.left</span> &#123;  <span class="attribute">float</span>: left;&#125;<span class="selector-class">.right</span> &#123;  <span class="attribute">float</span>: right;&#125;</code></pre><h2 id="CSS-Flexbox와-Grid-레이아웃"><a href="#CSS-Flexbox와-Grid-레이아웃" class="headerlink" title="CSS Flexbox와 Grid 레이아웃"></a>CSS Flexbox와 Grid 레이아웃</h2><h3 id="Flexbox"><a href="#Flexbox" class="headerlink" title="Flexbox"></a>Flexbox</h3><p>Flexbox는 일차원 레이아웃 모델로, 요소들을 행 또는 열로 배치할 때 유용합니다. 부모 요소에 <code>display: flex</code>를 적용하면 자식 요소들이 Flexbox 컨테이너 내에서 배치됩니다.</p><pre><code class="highlight css"><span class="selector-class">.container</span> &#123;  <span class="attribute">display</span>: flex;  <span class="attribute">justify-content</span>: space-between; <span class="comment">/* 요소들을 양 끝으로 배치 */</span>  <span class="attribute">align-items</span>: center; <span class="comment">/* 요소들을 수직 가운데 정렬 */</span>&#125;<span class="selector-class">.item</span> &#123;  <span class="attribute">background-color</span>: lightblue;  <span class="attribute">padding</span>: <span class="number">10px</span>;&#125;</code></pre><pre><code class="highlight html"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>아이템 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span>  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>아이템 2<span class="tag">&lt;/<span class="name">div</span>&gt;</span>  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>아이템 3<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></code></pre><h3 id="Grid-레이아웃"><a href="#Grid-레이아웃" class="headerlink" title="Grid 레이아웃"></a>Grid 레이아웃</h3><p>Grid 레이아웃은 이차원 레이아웃 모델로, 행과 열을 사용하여 요소들을 배치합니다. 부모 요소에 <code>display: grid</code>를 적용하고, <code>grid-template-columns</code>와 <code>grid-template-rows</code>를 사용하여 행과 열을 정의합니다.</p><pre><code class="highlight css"><span class="selector-class">.grid-container</span> &#123;  <span class="attribute">display</span>: grid;  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">1</span>fr); <span class="comment">/* 3개의 동일한 너비 열 */</span>  <span class="attribute">grid-gap</span>: <span class="number">10px</span>; <span class="comment">/* 요소 간격 */</span>&#125;<span class="selector-class">.grid-item</span> &#123;  <span class="attribute">background-color</span>: lightgreen;  <span class="attribute">padding</span>: <span class="number">10px</span>;  <span class="attribute">text-align</span>: center;&#125;</code></pre><pre><code class="highlight html"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid-container&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid-item&quot;</span>&gt;</span>아이템 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span>  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid-item&quot;</span>&gt;</span>아이템 2<span class="tag">&lt;/<span class="name">div</span>&gt;</span>  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid-item&quot;</span>&gt;</span>아이템 3<span class="tag">&lt;/<span class="name">div</span>&gt;</span>  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid-item&quot;</span>&gt;</span>아이템 4<span class="tag">&lt;/<span class="name">div</span>&gt;</span>  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid-item&quot;</span>&gt;</span>아이템 5<span class="tag">&lt;/<span class="name">div</span>&gt;</span>  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid-item&quot;</span>&gt;</span>아이템 6<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 HTML과 CSS를 결합하여 웹 페이지를 스타일링하는 방법을 알아보았습니다.<br>HTML 문서에 CSS를 적용하는 다양한 방법과 박스 모델, 레이아웃 기초, 그리고 Flexbox와 Grid 레이아웃을 활용하는 방법을 알아보았습니다. 이를 통해 더 다채롭고 사용하기 편리한 웹 페이지를 만들 수 있습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> web_입문 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>데이터 조작 언어(DML)</title>
      <link href="/database/4/"/>
      <url>/database/4/</url>
      
        <content type="html"><![CDATA[<h1 id="데이터-조작-언어-DML"><a href="#데이터-조작-언어-DML" class="headerlink" title="데이터 조작 언어(DML)"></a>데이터 조작 언어(DML)</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 데이터베이스에서 데이터 조작 언어(DML, Data Manipulation Language)에 대해 알아보겠습니다. DML은 데이터베이스 내의 데이터를 검색, 추가, 수정, 삭제하는 데 사용되는 명령어입니다. RPG 게임 예제를 통해 DML 명령어의 사용법을 익혀보겠습니다.</p><h2 id="DML-개요"><a href="#DML-개요" class="headerlink" title="DML 개요"></a>DML 개요</h2><h3 id="DML의-정의와-역할"><a href="#DML의-정의와-역할" class="headerlink" title="DML의 정의와 역할"></a>DML의 정의와 역할</h3><p>**데이터 조작 언어(DML)**는 데이터베이스에서 데이터를 검색하고, 추가하며, 수정하고, 삭제하는 데 사용되는 SQL 명령어입니다. DML은 데이터베이스와의 상호작용을 통해 데이터의 상태를 변경하거나 조회할 수 있게 해줍니다.</p><h3 id="주요-DML-명령어"><a href="#주요-DML-명령어" class="headerlink" title="주요 DML 명령어"></a>주요 DML 명령어</h3><ul><li><strong>SELECT</strong>: 데이터베이스에서 데이터를 검색합니다.</li><li><strong>INSERT</strong>: 데이터베이스에 새로운 데이터를 추가합니다.</li><li><strong>UPDATE</strong>: 데이터베이스의 기존 데이터를 수정합니다.</li><li><strong>DELETE</strong>: 데이터베이스에서 데이터를 삭제합니다.</li></ul><h2 id="데이터-검색-SELECT"><a href="#데이터-검색-SELECT" class="headerlink" title="데이터 검색(SELECT)"></a>데이터 검색(SELECT)</h2><h3 id="기본-SELECT-문법"><a href="#기본-SELECT-문법" class="headerlink" title="기본 SELECT 문법"></a>기본 SELECT 문법</h3><p><code>SELECT</code> 명령어는 데이터베이스에서 데이터를 조회하는 데 사용됩니다. RPG 게임에서 캐릭터 정보를 조회하는 예제를 살펴보겠습니다.</p><pre><code class="highlight sql"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> characters;</code></pre><p>위 명령어는 <code>characters</code> 테이블의 모든 열을 조회합니다.</p><h3 id="WHERE-절을-사용한-조건-검색"><a href="#WHERE-절을-사용한-조건-검색" class="headerlink" title="WHERE 절을 사용한 조건 검색"></a>WHERE 절을 사용한 조건 검색</h3><p><code>WHERE</code> 절을 사용하여 특정 조건을 만족하는 데이터를 조회할 수 있습니다.</p><pre><code class="highlight sql"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> characters <span class="keyword">WHERE</span> class <span class="operator">=</span> <span class="string">&#x27;전사&#x27;</span>;</code></pre><p>위 명령어는 <code>class</code> 열이 ‘전사’인 캐릭터를 조회합니다.</p><h3 id="특정-열만-선택하여-조회"><a href="#특정-열만-선택하여-조회" class="headerlink" title="특정 열만 선택하여 조회"></a>특정 열만 선택하여 조회</h3><p>특정 열만 선택하여 조회할 수 있습니다.</p><pre><code class="highlight sql"><span class="keyword">SELECT</span> name, level <span class="keyword">FROM</span> characters;</code></pre><p>위 명령어는 <code>characters</code> 테이블에서 <code>name</code>과 <code>level</code> 열만 조회합니다.</p><h3 id="ORDER-BY를-사용한-정렬"><a href="#ORDER-BY를-사용한-정렬" class="headerlink" title="ORDER BY를 사용한 정렬"></a>ORDER BY를 사용한 정렬</h3><p><code>ORDER BY</code> 절을 사용하여 결과를 정렬할 수 있습니다.</p><pre><code class="highlight sql"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> characters <span class="keyword">ORDER</span> <span class="keyword">BY</span> level <span class="keyword">DESC</span>;</code></pre><p>위 명령어는 <code>characters</code> 테이블의 데이터를 <code>level</code> 열을 기준으로 내림차순 정렬하여 조회합니다.</p><h3 id="JOIN을-사용한-테이블-결합"><a href="#JOIN을-사용한-테이블-결합" class="headerlink" title="JOIN을 사용한 테이블 결합"></a>JOIN을 사용한 테이블 결합</h3><p><code>JOIN</code>을 사용하여 여러 테이블의 데이터를 결합할 수 있습니다.</p><h4 id="INNER-JOIN"><a href="#INNER-JOIN" class="headerlink" title="INNER JOIN"></a>INNER JOIN</h4><p>두 테이블의 공통된 데이터를 조회합니다.</p><pre><code class="highlight sql"><span class="keyword">SELECT</span> characters.name, inventory.item_name<span class="keyword">FROM</span> characters<span class="keyword">INNER</span> <span class="keyword">JOIN</span> inventory <span class="keyword">ON</span> characters.id <span class="operator">=</span> inventory.character_id;</code></pre><p>위 명령어는 <code>characters</code> 테이블과 <code>inventory</code> 테이블을 <code>id</code>와 <code>character_id</code>를 기준으로 결합하여 캐릭터 이름과 아이템 이름을 조회합니다.</p><h4 id="LEFT-JOIN"><a href="#LEFT-JOIN" class="headerlink" title="LEFT JOIN"></a>LEFT JOIN</h4><p>왼쪽 테이블의 모든 데이터와 오른쪽 테이블의 일치하는 데이터를 조회합니다.</p><pre><code class="highlight sql"><span class="keyword">SELECT</span> characters.name, inventory.item_name<span class="keyword">FROM</span> characters<span class="keyword">LEFT</span> <span class="keyword">JOIN</span> inventory <span class="keyword">ON</span> characters.id <span class="operator">=</span> inventory.character_id;</code></pre><p>위 명령어는 <code>characters</code> 테이블의 모든 데이터와 <code>inventory</code> 테이블의 일치하는 데이터를 조회합니다.</p><h4 id="RIGHT-JOIN"><a href="#RIGHT-JOIN" class="headerlink" title="RIGHT JOIN"></a>RIGHT JOIN</h4><p>오른쪽 테이블의 모든 데이터와 왼쪽 테이블의 일치하는 데이터를 조회합니다.</p><pre><code class="highlight sql"><span class="keyword">SELECT</span> characters.name, inventory.item_name<span class="keyword">FROM</span> characters<span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> inventory <span class="keyword">ON</span> characters.id <span class="operator">=</span> inventory.character_id;</code></pre><p>위 명령어는 <code>inventory</code> 테이블의 모든 데이터와 <code>characters</code> 테이블의 일치하는 데이터를 조회합니다.</p><h4 id="FULL-JOIN"><a href="#FULL-JOIN" class="headerlink" title="FULL JOIN"></a>FULL JOIN</h4><p>두 테이블의 모든 데이터를 조회합니다.</p><pre><code class="highlight sql"><span class="keyword">SELECT</span> characters.name, inventory.item_name<span class="keyword">FROM</span> characters<span class="keyword">FULL</span> <span class="keyword">JOIN</span> inventory <span class="keyword">ON</span> characters.id <span class="operator">=</span> inventory.character_id;</code></pre><p>위 명령어는 <code>characters</code> 테이블과 <code>inventory</code> 테이블의 모든 데이터를 조회합니다.</p><h2 id="데이터-추가-수정-삭제"><a href="#데이터-추가-수정-삭제" class="headerlink" title="데이터 추가, 수정, 삭제"></a>데이터 추가, 수정, 삭제</h2><h3 id="INSERT-문법과-예제"><a href="#INSERT-문법과-예제" class="headerlink" title="INSERT 문법과 예제"></a>INSERT 문법과 예제</h3><p><code>INSERT</code> 명령어는 테이블에 새로운 데이터를 추가하는 데 사용됩니다.</p><pre><code class="highlight sql"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> characters (name, class, level, health) <span class="keyword">VALUES</span> (<span class="string">&#x27;용사&#x27;</span>, <span class="string">&#x27;전사&#x27;</span>, <span class="number">1</span>, <span class="number">100</span>);</code></pre><p>위 명령어는 <code>characters</code> 테이블에 새로운 캐릭터 ‘용사’를 추가합니다.</p><h3 id="UPDATE-문법과-예제"><a href="#UPDATE-문법과-예제" class="headerlink" title="UPDATE 문법과 예제"></a>UPDATE 문법과 예제</h3><p><code>UPDATE</code> 명령어는 테이블의 기존 데이터를 수정하는 데 사용됩니다.</p><pre><code class="highlight sql"><span class="keyword">UPDATE</span> characters <span class="keyword">SET</span> level <span class="operator">=</span> <span class="number">10</span> <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;용사&#x27;</span>;</code></pre><p>위 명령어는 <code>name</code>이 ‘용사’인 캐릭터의 <code>level</code>을 10으로 수정합니다.</p><h3 id="DELETE-문법과-예제"><a href="#DELETE-문법과-예제" class="headerlink" title="DELETE 문법과 예제"></a>DELETE 문법과 예제</h3><p><code>DELETE</code> 명령어는 테이블에서 데이터를 삭제하는 데 사용됩니다.</p><pre><code class="highlight sql"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> characters <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;용사&#x27;</span>;</code></pre><p>위 명령어는 <code>name</code>이 ‘용사’인 캐릭터를 <code>characters</code> 테이블에서 삭제합니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 데이터 조작 언어(DML)에 대해 알아보았습니다. DML은 데이터베이스 내의 데이터를 검색하고, 추가하며, 수정하고, 삭제하는 데 사용됩니다. 이를 통해 데이터베이스와 상호작용하여 원하는 데이터를 효율적으로 관리할 수 있습니다. RPG 게임 예제를 통해 DML 명령어의 사용법을 익히며, 실제 데이터베이스에서도 이를 활용해보세요!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> database </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript 함수형 프로그래밍</title>
      <link href="/typescript/basic/11/"/>
      <url>/typescript/basic/11/</url>
      
        <content type="html"><![CDATA[<h1 id="TypeScript-함수형-프로그래밍"><a href="#TypeScript-함수형-프로그래밍" class="headerlink" title="TypeScript 함수형 프로그래밍"></a>TypeScript 함수형 프로그래밍</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 TypeScript에서 함수형 프로그래밍을 사용하는 방법에 대해 알아보겠습니다.<br>함수형 프로그래밍은 순수 함수와 불변성을 강조하여<br>코드의 가독성과 유지보수성을 높이는 프로그래밍 패러다임입니다.</p><h2 id="함수형-프로그래밍의-개념"><a href="#함수형-프로그래밍의-개념" class="headerlink" title="함수형 프로그래밍의 개념"></a>함수형 프로그래밍의 개념</h2><p>함수형 프로그래밍은 다음과 같은 주요 개념을 포함합니다:</p><ol><li><strong>순수 함수 (Pure Function)</strong>: 입력값이 같으면 항상 같은 출력을 반환하고, 부작용이 없는 함수.</li><li><strong>불변성 (Immutability)</strong>: 상태를 변경하지 않고, 새로운 값을 생성하여 처리.</li><li><strong>고차 함수 (Higher-Order Function)</strong>: 함수를 인수로 받거나, 함수를 반환하는 함수.</li></ol><h3 id="1-순수-함수"><a href="#1-순수-함수" class="headerlink" title="1. 순수 함수"></a>1. 순수 함수</h3><p>순수 함수는 동일한 입력에 대해 항상 동일한 출력을 반환하며, 부작용이 없습니다:</p><pre><code class="highlight typescript"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params"><span class="attr">a</span>: <span class="built_in">number</span>, <span class="attr">b</span>: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;  <span class="keyword">return</span> a + b;&#125;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// 출력: 5</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// 출력: 5</span></code></pre><h3 id="2-불변성"><a href="#2-불변성" class="headerlink" title="2. 불변성"></a>2. 불변성</h3><p>불변성은 상태를 변경하지 않고, 새로운 값을 생성하여 처리하는 것을 의미합니다. <code>Object.assign</code>이나 스프레드 연산자를 사용하여 객체의 불변성을 유지할 수 있습니다:</p><pre><code class="highlight typescript"><span class="keyword">const</span> person = &#123;  <span class="attr">name</span>: <span class="string">&quot;John Doe&quot;</span>,  <span class="attr">age</span>: <span class="number">30</span>,&#125;;<span class="keyword">const</span> updatedPerson = &#123; ...person, <span class="attr">age</span>: <span class="number">31</span> &#125;;<span class="variable language_">console</span>.<span class="title function_">log</span>(updatedPerson); <span class="comment">// 출력: &#123; name: &#x27;John Doe&#x27;, age: 31 &#125;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(person); <span class="comment">// 출력: &#123; name: &#x27;John Doe&#x27;, age: 30 &#125;</span></code></pre><h3 id="3-고차-함수"><a href="#3-고차-함수" class="headerlink" title="3. 고차 함수"></a>3. 고차 함수</h3><p>고차 함수는 함수를 인수로 받거나, 함수를 반환하는 함수입니다. 고차 함수는 코드의 재사용성을 높이고, 모듈화를 쉽게 합니다:</p><pre><code class="highlight typescript"><span class="keyword">function</span> <span class="title function_">double</span>(<span class="params"><span class="attr">x</span>: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;  <span class="keyword">return</span> x * <span class="number">2</span>;&#125;<span class="keyword">function</span> <span class="title function_">triple</span>(<span class="params"><span class="attr">x</span>: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;  <span class="keyword">return</span> x * <span class="number">3</span>;&#125;<span class="keyword">function</span> <span class="title function_">transform</span>(<span class="params"><span class="attr">arr</span>: <span class="built_in">number</span>[], <span class="attr">fn</span>: (x: <span class="built_in">number</span>) =&gt; <span class="built_in">number</span></span>): <span class="built_in">number</span>[] &#123;  <span class="keyword">return</span> arr.<span class="title function_">map</span>(fn);&#125;<span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">transform</span>(numbers, double)); <span class="comment">// 출력: [2, 4, 6, 8]</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">transform</span>(numbers, triple)); <span class="comment">// 출력: [3, 6, 9, 12]</span></code></pre><h2 id="함수형-프로그래밍과-불변성-예제"><a href="#함수형-프로그래밍과-불변성-예제" class="headerlink" title="함수형 프로그래밍과 불변성 예제"></a>함수형 프로그래밍과 불변성 예제</h2><p>TypeScript에서 함수형 프로그래밍을 활용하여 불변성을 유지하는 방법을 알아보겠습니다. 예제로 배열과 객체를 불변성을 유지하며 처리하는 방법을 살펴보겠습니다.</p><h3 id="1-배열의-불변성"><a href="#1-배열의-불변성" class="headerlink" title="1. 배열의 불변성"></a>1. 배열의 불변성</h3><p>배열을 불변성을 유지하며 처리하는 방법은 <code>map</code>, <code>filter</code>, <code>reduce</code>와 같은 배열 메서드를 사용하는 것입니다:</p><pre><code class="highlight typescript"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];<span class="comment">// map을 사용하여 새로운 배열 생성</span><span class="keyword">const</span> doubled = numbers.<span class="title function_">map</span>(<span class="function">(<span class="params">num</span>) =&gt;</span> num * <span class="number">2</span>);<span class="variable language_">console</span>.<span class="title function_">log</span>(doubled); <span class="comment">// 출력: [2, 4, 6, 8, 10]</span><span class="comment">// filter를 사용하여 새로운 배열 생성</span><span class="keyword">const</span> even = numbers.<span class="title function_">filter</span>(<span class="function">(<span class="params">num</span>) =&gt;</span> num % <span class="number">2</span> === <span class="number">0</span>);<span class="variable language_">console</span>.<span class="title function_">log</span>(even); <span class="comment">// 출력: [2, 4]</span><span class="comment">// reduce를 사용하여 배열의 합 계산</span><span class="keyword">const</span> sum = numbers.<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, num</span>) =&gt;</span> acc + num, <span class="number">0</span>);<span class="variable language_">console</span>.<span class="title function_">log</span>(sum); <span class="comment">// 출력: 15</span></code></pre><h3 id="2-객체의-불변성"><a href="#2-객체의-불변성" class="headerlink" title="2. 객체의 불변성"></a>2. 객체의 불변성</h3><p>객체를 불변성을 유지하며 처리하는 방법은 <code>Object.assign</code>이나 스프레드 연산자를 사용하는 것입니다:</p><pre><code class="highlight typescript"><span class="keyword">const</span> person = &#123;  <span class="attr">name</span>: <span class="string">&quot;John Doe&quot;</span>,  <span class="attr">age</span>: <span class="number">30</span>,&#125;;<span class="comment">// Object.assign을 사용하여 새로운 객체 생성</span><span class="keyword">const</span> updatedPerson1 = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, person, &#123; <span class="attr">age</span>: <span class="number">31</span> &#125;);<span class="variable language_">console</span>.<span class="title function_">log</span>(updatedPerson1); <span class="comment">// 출력: &#123; name: &#x27;John Doe&#x27;, age: 31 &#125;</span><span class="comment">// 스프레드 연산자를 사용하여 새로운 객체 생성</span><span class="keyword">const</span> updatedPerson2 = &#123; ...person, <span class="attr">age</span>: <span class="number">32</span> &#125;;<span class="variable language_">console</span>.<span class="title function_">log</span>(updatedPerson2); <span class="comment">// 출력: &#123; name: &#x27;John Doe&#x27;, age: 32 &#125;</span></code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 TypeScript에서 함수형 프로그래밍을 사용하는 방법에 대해 알아보았습니다.<br>함수형 프로그래밍은 순수 함수와 불변성을 강조하여 코드의 가독성과 유지보수성을 높이는 프로그래밍 패러다임입니다.<br>이를 활용하여 더욱 안전하고 효율적인 코드를 작성해보세요!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> TS_기본기 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript 클래스와 인터페이스</title>
      <link href="/typescript/basic/10/"/>
      <url>/typescript/basic/10/</url>
      
        <content type="html"><![CDATA[<h1 id="TypeScript-클래스와-인터페이스"><a href="#TypeScript-클래스와-인터페이스" class="headerlink" title="TypeScript 클래스와 인터페이스"></a>TypeScript 클래스와 인터페이스</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 TypeScript에서 클래스와 인터페이스를 사용하는 방법에 대해 알아보겠습니다. 클래스와 인터페이스는 객체 지향 프로그래밍의 중요한 개념으로, 코드의 재사용성과 구조를 개선하는 데 도움이 됩니다.</p><h2 id="클래스"><a href="#클래스" class="headerlink" title="클래스"></a>클래스</h2><p>클래스는 객체를 생성하기 위한 템플릿을 정의합니다. TypeScript의 클래스는 ES6 클래스를 확장하여 강력한 타입 시스템을 제공합니다.</p><h3 id="1-클래스-정의"><a href="#1-클래스-정의" class="headerlink" title="1. 클래스 정의"></a>1. 클래스 정의</h3><pre><code class="highlight typescript"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;  <span class="attr">name</span>: <span class="built_in">string</span>;  <span class="attr">age</span>: <span class="built_in">number</span>;  <span class="title function_">constructor</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">age</span>: <span class="built_in">number</span></span>) &#123;    <span class="variable language_">this</span>.<span class="property">name</span> = name;    <span class="variable language_">this</span>.<span class="property">age</span> = age;  &#125;  <span class="title function_">greet</span>(): <span class="built_in">void</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(      <span class="string">`Hello, my name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> and I am <span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span> years old.`</span>    );  &#125;&#125;<span class="keyword">let</span> john = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;John Doe&quot;</span>, <span class="number">30</span>);john.<span class="title function_">greet</span>(); <span class="comment">// 출력: Hello, my name is John Doe and I am 30 years old.</span></code></pre><h3 id="2-상속"><a href="#2-상속" class="headerlink" title="2. 상속"></a>2. 상속</h3><p>클래스는 상속을 통해 다른 클래스를 확장할 수 있습니다:</p><pre><code class="highlight typescript"><span class="keyword">class</span> <span class="title class_">Employee</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;  <span class="attr">employeeId</span>: <span class="built_in">number</span>;  <span class="title function_">constructor</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">age</span>: <span class="built_in">number</span>, <span class="attr">employeeId</span>: <span class="built_in">number</span></span>) &#123;    <span class="variable language_">super</span>(name, age);    <span class="variable language_">this</span>.<span class="property">employeeId</span> = employeeId;  &#125;  <span class="title function_">work</span>(): <span class="built_in">void</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> is working.`</span>);  &#125;&#125;<span class="keyword">let</span> jane = <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;Jane Doe&quot;</span>, <span class="number">25</span>, <span class="number">1</span>);jane.<span class="title function_">greet</span>(); <span class="comment">// 출력: Hello, my name is Jane Doe and I am 25 years old.</span>jane.<span class="title function_">work</span>(); <span class="comment">// 출력: Jane Doe is working.</span></code></pre><h3 id="3-접근-제어자"><a href="#3-접근-제어자" class="headerlink" title="3. 접근 제어자"></a>3. 접근 제어자</h3><p>접근 제어자는 클래스 멤버의 접근 권한을 설정하는 데 사용됩니다. TypeScript는 <code>public</code>, <code>private</code>, <code>protected</code> 세 가지 접근 제어자를 제공합니다:</p><pre><code class="highlight typescript"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;  <span class="keyword">public</span> <span class="attr">name</span>: <span class="built_in">string</span>;  <span class="keyword">private</span> <span class="attr">age</span>: <span class="built_in">number</span>;  <span class="title function_">constructor</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">age</span>: <span class="built_in">number</span></span>) &#123;    <span class="variable language_">this</span>.<span class="property">name</span> = name;    <span class="variable language_">this</span>.<span class="property">age</span> = age;  &#125;  <span class="keyword">public</span> <span class="title function_">greet</span>(): <span class="built_in">void</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(      <span class="string">`Hello, my name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> and I am <span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span> years old.`</span>    );  &#125;&#125;<span class="keyword">let</span> john = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;John Doe&quot;</span>, <span class="number">30</span>);john.<span class="title function_">greet</span>(); <span class="comment">// 출력: Hello, my name is John Doe and I am 30 years old.</span><span class="comment">// console.log(john.age); // 오류: &#x27;age&#x27;는 private 멤버이므로 클래스 외부에서 접근할 수 없습니다.</span></code></pre><h2 id="인터페이스"><a href="#인터페이스" class="headerlink" title="인터페이스"></a>인터페이스</h2><p>인터페이스는 객체의 구조를 정의하는 데 사용됩니다. 인터페이스는 클래스가 따라야 하는 계약을 명시합니다.</p><h3 id="1-인터페이스-정의"><a href="#1-인터페이스-정의" class="headerlink" title="1. 인터페이스 정의"></a>1. 인터페이스 정의</h3><pre><code class="highlight typescript"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;  <span class="attr">name</span>: <span class="built_in">string</span>;  <span class="attr">age</span>: <span class="built_in">number</span>;  <span class="title function_">greet</span>(): <span class="built_in">void</span>;&#125;<span class="keyword">class</span> <span class="title class_">Employee</span> <span class="keyword">implements</span> <span class="title class_">Person</span> &#123;  <span class="attr">name</span>: <span class="built_in">string</span>;  <span class="attr">age</span>: <span class="built_in">number</span>;  <span class="attr">employeeId</span>: <span class="built_in">number</span>;  <span class="title function_">constructor</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">age</span>: <span class="built_in">number</span>, <span class="attr">employeeId</span>: <span class="built_in">number</span></span>) &#123;    <span class="variable language_">this</span>.<span class="property">name</span> = name;    <span class="variable language_">this</span>.<span class="property">age</span> = age;    <span class="variable language_">this</span>.<span class="property">employeeId</span> = employeeId;  &#125;  <span class="title function_">greet</span>(): <span class="built_in">void</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(      <span class="string">`Hello, my name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> and I am <span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span> years old.`</span>    );  &#125;  <span class="title function_">work</span>(): <span class="built_in">void</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> is working.`</span>);  &#125;&#125;<span class="keyword">let</span> jane = <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;Jane Doe&quot;</span>, <span class="number">25</span>, <span class="number">1</span>);jane.<span class="title function_">greet</span>(); <span class="comment">// 출력: Hello, my name is Jane Doe and I am 25 years old.</span>jane.<span class="title function_">work</span>(); <span class="comment">// 출력: Jane Doe is working.</span></code></pre><h3 id="2-선택적-프로퍼티와-읽기-전용-프로퍼티"><a href="#2-선택적-프로퍼티와-읽기-전용-프로퍼티" class="headerlink" title="2. 선택적 프로퍼티와 읽기 전용 프로퍼티"></a>2. 선택적 프로퍼티와 읽기 전용 프로퍼티</h3><p>인터페이스는 선택적 프로퍼티와 읽기 전용 프로퍼티를 정의할 수 있습니다:</p><pre><code class="highlight typescript"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;  <span class="attr">name</span>: <span class="built_in">string</span>;  age?: <span class="built_in">number</span>;  <span class="keyword">readonly</span> <span class="attr">id</span>: <span class="built_in">number</span>;&#125;<span class="keyword">let</span> <span class="attr">john</span>: <span class="title class_">Person</span> = &#123;  <span class="attr">name</span>: <span class="string">&quot;John Doe&quot;</span>,  <span class="attr">id</span>: <span class="number">1</span>,&#125;;<span class="comment">// john.id = 2; // 오류: &#x27;id&#x27;는 읽기 전용 프로퍼티입니다.</span></code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 TypeScript에서 클래스와 인터페이스를 사용하는 방법에 대해 알아보았습니다.<br>클래스와 인터페이스는 객체 지향 프로그래밍의 중요한 개념으로, 코드의 재사용성과 구조를 개선하는 데 도움이 됩니다.<br>다음 시간에는 TypeScript에서 함수형 프로그래밍에 대해 알아보겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> TS_기본기 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript 비동기 처리 (async/await)와 Promise 타입</title>
      <link href="/typescript/basic/9/"/>
      <url>/typescript/basic/9/</url>
      
        <content type="html"><![CDATA[<h1 id="TypeScript-비동기-처리-async-await-와-Promise-타입"><a href="#TypeScript-비동기-처리-async-await-와-Promise-타입" class="headerlink" title="TypeScript 비동기 처리 (async&#x2F;await)와 Promise 타입"></a>TypeScript 비동기 처리 (async&#x2F;await)와 Promise 타입</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 TypeScript에서 비동기 처리를 위한 <code>async/await</code>와 Promise 타입에 대해 알아보겠습니다.<br>비동기 처리는 비동기 작업을 동기적으로 작성할 수 있게 해주어 코드의 가독성을 높여줍니다.</p><h2 id="Promise-타입"><a href="#Promise-타입" class="headerlink" title="Promise 타입"></a>Promise 타입</h2><h3 id="1-Promise-기본-사용법"><a href="#1-Promise-기본-사용법" class="headerlink" title="1. Promise 기본 사용법"></a>1. Promise 기본 사용법</h3><p>Promise는 비동기 작업의 완료 또는 실패를 나타내는 객체입니다. Promise 객체는 <code>then</code>과 <code>catch</code> 메서드를 사용하여 결과를 처리합니다.</p><pre><code class="highlight typescript"><span class="keyword">let</span> <span class="attr">promise</span>: <span class="title class_">Promise</span>&lt;<span class="built_in">number</span>&gt; = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;    <span class="title function_">resolve</span>(<span class="number">42</span>);  &#125;, <span class="number">1000</span>);&#125;);promise  .<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">// 출력: 42</span>  &#125;)  .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">error</span>(error);  &#125;);</code></pre><h3 id="2-Promise-타입-정의"><a href="#2-Promise-타입-정의" class="headerlink" title="2. Promise 타입 정의"></a>2. Promise 타입 정의</h3><p>함수의 반환 타입으로 Promise를 정의할 수 있습니다:</p><pre><code class="highlight typescript"><span class="keyword">function</span> <span class="title function_">delay</span>(<span class="params"><span class="attr">ms</span>: <span class="built_in">number</span></span>): <span class="title class_">Promise</span>&lt;<span class="built_in">void</span>&gt; &#123;  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;    <span class="built_in">setTimeout</span>(resolve, ms);  &#125;);&#125;<span class="title function_">delay</span>(<span class="number">1000</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;1초 후 실행&quot;</span>);&#125;);</code></pre><h2 id="async-await"><a href="#async-await" class="headerlink" title="async&#x2F;await"></a>async&#x2F;await</h2><p><code>async/await</code>는 비동기 코드를 동기적으로 작성할 수 있게 해주는 문법입니다. <code>async</code> 함수는 항상 Promise를 반환하며, <code>await</code>는 Promise가 해결될 때까지 기다립니다.</p><h3 id="1-async-함수"><a href="#1-async-함수" class="headerlink" title="1. async 함수"></a>1. async 함수</h3><p><code>async</code> 키워드를 사용하여 비동기 함수를 정의합니다:</p><pre><code class="highlight typescript"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params"></span>): <span class="title class_">Promise</span>&lt;<span class="built_in">string</span>&gt; &#123;  <span class="keyword">return</span> <span class="string">&quot;Hello, TypeScript!&quot;</span>;&#125;<span class="title function_">greet</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">message</span>) =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(message); <span class="comment">// 출력: Hello, TypeScript!</span>&#125;);</code></pre><h3 id="2-await-사용"><a href="#2-await-사용" class="headerlink" title="2. await 사용"></a>2. await 사용</h3><p><code>await</code> 키워드를 사용하여 Promise가 해결될 때까지 기다립니다:</p><pre><code class="highlight typescript"><span class="keyword">function</span> <span class="title function_">delay</span>(<span class="params"><span class="attr">ms</span>: <span class="built_in">number</span></span>): <span class="title class_">Promise</span>&lt;<span class="built_in">void</span>&gt; &#123;  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;    <span class="built_in">setTimeout</span>(resolve, ms);  &#125;);&#125;<span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">run</span>(<span class="params"></span>) &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Start&quot;</span>);  <span class="keyword">await</span> <span class="title function_">delay</span>(<span class="number">1000</span>);  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;1초 후 실행&quot;</span>);&#125;<span class="title function_">run</span>();</code></pre><h3 id="3-예외-처리"><a href="#3-예외-처리" class="headerlink" title="3. 예외 처리"></a>3. 예외 처리</h3><p><code>async/await</code>를 사용할 때는 <code>try/catch</code> 블록을 사용하여 예외를 처리할 수 있습니다:</p><pre><code class="highlight typescript"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params"><span class="attr">url</span>: <span class="built_in">string</span></span>): <span class="title class_">Promise</span>&lt;<span class="built_in">any</span>&gt; &#123;  <span class="keyword">let</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(url);  <span class="keyword">if</span> (!response.<span class="property">ok</span>) &#123;    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`HTTP error! status: <span class="subst">$&#123;response.status&#125;</span>`</span>);  &#125;  <span class="keyword">return</span> response.<span class="title function_">json</span>();&#125;<span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">run</span>(<span class="params"></span>) &#123;  <span class="keyword">try</span> &#123;    <span class="keyword">let</span> data = <span class="keyword">await</span> <span class="title function_">fetchData</span>(<span class="string">&quot;https://api.example.com/data&quot;</span>);    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);  &#125; <span class="keyword">catch</span> (error) &#123;    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;Error:&quot;</span>, error);  &#125;&#125;<span class="title function_">run</span>();</code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 TypeScript에서 비동기 처리를 위한 <code>async/await</code>와 Promise 타입에 대해 알아보았습니다.<br>비동기 처리는 비동기 작업을 동기적으로 작성할 수 있게 해주어 코드의 가독성을 높여줍니다.<br>다음 시간에는 클래스와 인터페이스에 대해 알아보겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> TS_기본기 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript 타입 선언 파일 작성 및 사용</title>
      <link href="/typescript/basic/8/"/>
      <url>/typescript/basic/8/</url>
      
        <content type="html"><![CDATA[<h1 id="TypeScript-타입-선언-파일-작성-및-사용"><a href="#TypeScript-타입-선언-파일-작성-및-사용" class="headerlink" title="TypeScript 타입 선언 파일 작성 및 사용"></a>TypeScript 타입 선언 파일 작성 및 사용</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 TypeScript에서 타입 선언 파일을 작성하고 사용하는 방법에 대해 알아보겠습니다.<br>타입 선언 파일은 외부 라이브러리의 타입 정보를 제공하여, 타입 안전성을 높이는 데 도움이 됩니다.</p><h2 id="타입-선언-파일의-개념"><a href="#타입-선언-파일의-개념" class="headerlink" title="타입 선언 파일의 개념"></a>타입 선언 파일의 개념</h2><p>타입 선언 파일(Declaration File)은 TypeScript 코드에서 사용할 수 있는 타입 정보를 정의하는 파일입니다. 일반적으로 <code>*.d.ts</code> 확장자를 사용하며, 외부 라이브러리의 타입 정보를 정의하는 데 사용됩니다.</p><h3 id="1-타입-선언-파일-작성"><a href="#1-타입-선언-파일-작성" class="headerlink" title="1. 타입 선언 파일 작성"></a>1. 타입 선언 파일 작성</h3><p>타입 선언 파일을 작성하여 외부 라이브러리의 타입 정보를 정의합니다. 예를 들어, <code>math-lib</code>라는 가상의 라이브러리가 있다고 가정합니다.</p><pre><code class="highlight typescript"><span class="comment">// math-lib.d.ts</span><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&quot;math-lib&quot;</span> &#123;  <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params"><span class="attr">a</span>: <span class="built_in">number</span>, <span class="attr">b</span>: <span class="built_in">number</span></span>): <span class="built_in">number</span>;  <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">subtract</span>(<span class="params"><span class="attr">a</span>: <span class="built_in">number</span>, <span class="attr">b</span>: <span class="built_in">number</span></span>): <span class="built_in">number</span>;&#125;</code></pre><h3 id="2-타입-선언-파일-사용"><a href="#2-타입-선언-파일-사용" class="headerlink" title="2. 타입 선언 파일 사용"></a>2. 타입 선언 파일 사용</h3><p>작성한 타입 선언 파일을 사용하여 외부 라이브러리를 타입 안전하게 사용할 수 있습니다.</p><pre><code class="highlight typescript"><span class="comment">// index.ts</span><span class="keyword">import</span> &#123; add, subtract &#125; <span class="keyword">from</span> <span class="string">&quot;math-lib&quot;</span>;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// 출력: 5</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">subtract</span>(<span class="number">5</span>, <span class="number">3</span>)); <span class="comment">// 출력: 2</span></code></pre><h2 id="DefinitelyTyped"><a href="#DefinitelyTyped" class="headerlink" title="DefinitelyTyped"></a>DefinitelyTyped</h2><p>TypeScript 커뮤니티는 <code>DefinitelyTyped</code>라는 프로젝트를 통해 인기 있는 라이브러리의 타입 선언 파일을 제공합니다. <code>@types</code> 범위를 사용하여 npm 패키지로 제공됩니다.</p><h3 id="1-types-패키지-설치"><a href="#1-types-패키지-설치" class="headerlink" title="1. @types 패키지 설치"></a>1. <code>@types</code> 패키지 설치</h3><p>예를 들어, <code>lodash</code> 라이브러리의 타입 선언 파일을 설치합니다:</p><pre><code class="highlight bash">npm install --save-dev @types/lodash</code></pre><h3 id="2-types-패키지-사용"><a href="#2-types-패키지-사용" class="headerlink" title="2. @types 패키지 사용"></a>2. <code>@types</code> 패키지 사용</h3><p>설치한 타입 선언 파일을 사용하여 <code>lodash</code> 라이브러리를 타입 안전하게 사용할 수 있습니다.</p><pre><code class="highlight typescript"><span class="comment">// index.ts</span><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">&quot;lodash&quot;</span>;<span class="keyword">let</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];<span class="keyword">let</span> reversedArray = _.<span class="title function_">reverse</span>(array);<span class="variable language_">console</span>.<span class="title function_">log</span>(reversedArray); <span class="comment">// 출력: [4, 3, 2, 1]</span></code></pre><h2 id="타입-선언-파일-작성-시-주의사항"><a href="#타입-선언-파일-작성-시-주의사항" class="headerlink" title="타입 선언 파일 작성 시 주의사항"></a>타입 선언 파일 작성 시 주의사항</h2><p>타입 선언 파일을 작성할 때는 다음 사항을 주의해야 합니다:</p><ol><li><strong>정확한 타입 정의</strong>: 외부 라이브러리의 실제 동작을 반영하는 정확한 타입 정의를 작성해야 합니다.</li><li><strong>모듈 시스템 준수</strong>: TypeScript의 모듈 시스템을 준수하여 타입 선언 파일을 작성해야 합니다.</li><li><strong>타입 호환성</strong>: TypeScript의 타입 호환성을 고려하여 타입 선언 파일을 작성해야 합니다.</li></ol><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 TypeScript에서 타입 선언 파일을 작성하고 사용하는 방법에 대해 알아보았습니다.<br>타입 선언 파일은 외부 라이브러리의 타입 정보를 제공하여, 타입 안전성을 높이는 데 도움이 됩니다.<br>다음 시간에는 비동기 처리와 Promise 타입에 대해 알아보겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> TS_기본기 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript 타입 가드와 타입 좁히기</title>
      <link href="/typescript/basic/7/"/>
      <url>/typescript/basic/7/</url>
      
        <content type="html"><![CDATA[<h1 id="TypeScript-타입-가드와-타입-좁히기"><a href="#TypeScript-타입-가드와-타입-좁히기" class="headerlink" title="TypeScript 타입 가드와 타입 좁히기"></a>TypeScript 타입 가드와 타입 좁히기</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 TypeScript에서 타입 가드와 타입 좁히기에 대해 알아보겠습니다. 타입 가드와 타입 좁히기는 코드의 타입 안전성을 높이고, 타입 추론을 개선하는 데 도움이 됩니다.</p><h2 id="타입-가드"><a href="#타입-가드" class="headerlink" title="타입 가드"></a>타입 가드</h2><p>타입 가드는 런타임에서 변수의 타입을 검사하여, 특정 타입인 경우에만 코드를 실행하는 방법입니다. TypeScript는 몇 가지 내장 타입 가드를 제공합니다.</p><h3 id="1-typeof-연산자"><a href="#1-typeof-연산자" class="headerlink" title="1. typeof 연산자"></a>1. typeof 연산자</h3><p><code>typeof</code> 연산자는 변수의 원시 타입을 검사할 때 사용됩니다:</p><pre><code class="highlight typescript"><span class="keyword">function</span> <span class="title function_">print</span>(<span class="params"><span class="attr">value</span>: <span class="built_in">number</span> | <span class="built_in">string</span></span>) &#123;  <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">&quot;number&quot;</span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Number: <span class="subst">$&#123;value&#125;</span>`</span>);  &#125; <span class="keyword">else</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`String: <span class="subst">$&#123;value&#125;</span>`</span>);  &#125;&#125;<span class="title function_">print</span>(<span class="number">42</span>); <span class="comment">// 출력: Number: 42</span><span class="title function_">print</span>(<span class="string">&quot;Hello&quot;</span>); <span class="comment">// 출력: String: Hello</span></code></pre><h3 id="2-instanceof-연산자"><a href="#2-instanceof-연산자" class="headerlink" title="2. instanceof 연산자"></a>2. instanceof 연산자</h3><p><code>instanceof</code> 연산자는 객체가 특정 클래스의 인스턴스인지 검사할 때 사용됩니다:</p><pre><code class="highlight typescript"><span class="keyword">class</span> <span class="title class_">Dog</span> &#123;  <span class="title function_">bark</span>(<span class="params"></span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Woof!&quot;</span>);  &#125;&#125;<span class="keyword">class</span> <span class="title class_">Cat</span> &#123;  <span class="title function_">meow</span>(<span class="params"></span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Meow!&quot;</span>);  &#125;&#125;<span class="keyword">function</span> <span class="title function_">makeSound</span>(<span class="params"><span class="attr">animal</span>: <span class="title class_">Dog</span> | <span class="title class_">Cat</span></span>) &#123;  <span class="keyword">if</span> (animal <span class="keyword">instanceof</span> <span class="title class_">Dog</span>) &#123;    animal.<span class="title function_">bark</span>();  &#125; <span class="keyword">else</span> &#123;    animal.<span class="title function_">meow</span>();  &#125;&#125;<span class="keyword">let</span> dog = <span class="keyword">new</span> <span class="title class_">Dog</span>();<span class="keyword">let</span> cat = <span class="keyword">new</span> <span class="title class_">Cat</span>();<span class="title function_">makeSound</span>(dog); <span class="comment">// 출력: Woof!</span><span class="title function_">makeSound</span>(cat); <span class="comment">// 출력: Meow!</span></code></pre><h3 id="3-사용자-정의-타입-가드"><a href="#3-사용자-정의-타입-가드" class="headerlink" title="3. 사용자 정의 타입 가드"></a>3. 사용자 정의 타입 가드</h3><p>사용자 정의 타입 가드는 함수가 특정 타입을 반환하는지 검사하는 방법입니다. 반환 타입으로 <code>value is Type</code>을 사용합니다:</p><pre><code class="highlight typescript"><span class="keyword">interface</span> <span class="title class_">Fish</span> &#123;  <span class="attr">swim</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span>;&#125;<span class="keyword">interface</span> <span class="title class_">Bird</span> &#123;  <span class="attr">fly</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span>;&#125;<span class="keyword">function</span> <span class="title function_">isFish</span>(<span class="params"><span class="attr">pet</span>: <span class="title class_">Fish</span> | <span class="title class_">Bird</span></span>): pet is <span class="title class_">Fish</span> &#123;  <span class="keyword">return</span> (pet <span class="keyword">as</span> <span class="title class_">Fish</span>).<span class="property">swim</span> !== <span class="literal">undefined</span>;&#125;<span class="keyword">function</span> <span class="title function_">move</span>(<span class="params"><span class="attr">pet</span>: <span class="title class_">Fish</span> | <span class="title class_">Bird</span></span>) &#123;  <span class="keyword">if</span> (<span class="title function_">isFish</span>(pet)) &#123;    pet.<span class="title function_">swim</span>();  &#125; <span class="keyword">else</span> &#123;    pet.<span class="title function_">fly</span>();  &#125;&#125;<span class="keyword">let</span> <span class="attr">fish</span>: <span class="title class_">Fish</span> = &#123; <span class="attr">swim</span>: <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Swim&quot;</span>) &#125;;<span class="keyword">let</span> <span class="attr">bird</span>: <span class="title class_">Bird</span> = &#123; <span class="attr">fly</span>: <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Fly&quot;</span>) &#125;;<span class="title function_">move</span>(fish); <span class="comment">// 출력: Swim</span><span class="title function_">move</span>(bird); <span class="comment">// 출력: Fly</span></code></pre><h2 id="타입-좁히기"><a href="#타입-좁히기" class="headerlink" title="타입 좁히기"></a>타입 좁히기</h2><p>타입 좁히기(Type Narrowing)는 변수의 타입을 구체적인 타입으로 좁히는 과정입니다. 타입 가드를 사용하여 타입을 좁힐 수 있습니다.</p><h3 id="1-기본-사용법"><a href="#1-기본-사용법" class="headerlink" title="1. 기본 사용법"></a>1. 기본 사용법</h3><p>타입 좁히기는 타입 가드를 통해 이루어집니다:</p><pre><code class="highlight typescript"><span class="keyword">function</span> <span class="title function_">padLeft</span>(<span class="params"><span class="attr">value</span>: <span class="built_in">string</span>, <span class="attr">padding</span>: <span class="built_in">number</span> | <span class="built_in">string</span></span>) &#123;  <span class="keyword">if</span> (<span class="keyword">typeof</span> padding === <span class="string">&quot;number&quot;</span>) &#123;    <span class="keyword">return</span> <span class="string">&quot; &quot;</span>.<span class="title function_">repeat</span>(padding) + value;  &#125; <span class="keyword">else</span> &#123;    <span class="keyword">return</span> padding + value;  &#125;&#125;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">padLeft</span>(<span class="string">&quot;Hello&quot;</span>, <span class="number">4</span>)); <span class="comment">// 출력: &quot;    Hello&quot;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">padLeft</span>(<span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;&gt;&gt;&quot;</span>)); <span class="comment">// 출력: &quot;&gt;&gt;Hello&quot;</span></code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 TypeScript에서 타입 가드와 타입 좁히기를 사용하는 방법에 대해 알아보았습니다.<br>타입 가드와 타입 좁히기는 코드의 타입 안전성을 높이고, 타입 추론을 개선하는 데 도움이 됩니다.<br>다음 시간에는 타입 선언 파일 작성 및 사용에 대해 알아보겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> TS_기본기 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript 유니언 타입과 인터섹션 타입</title>
      <link href="/typescript/basic/6/"/>
      <url>/typescript/basic/6/</url>
      
        <content type="html"><![CDATA[<h1 id="TypeScript-유니언-타입과-인터섹션-타입"><a href="#TypeScript-유니언-타입과-인터섹션-타입" class="headerlink" title="TypeScript 유니언 타입과 인터섹션 타입"></a>TypeScript 유니언 타입과 인터섹션 타입</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 TypeScript에서 유니언 타입과 인터섹션 타입을 사용하는 방법에 대해 알아보겠습니다.<br>이 두 가지 타입은 다양한 타입 조합을 가능하게 하여 코드의 유연성을 높여줍니다.</p><h2 id="유니언-타입"><a href="#유니언-타입" class="headerlink" title="유니언 타입"></a>유니언 타입</h2><p>유니언 타입(Union Type)은 여러 타입 중 하나가 될 수 있는 타입을 정의합니다. 유니언 타입은 <code>|</code> 연산자를 사용하여 정의합니다.</p><h3 id="1-기본-사용법"><a href="#1-기본-사용법" class="headerlink" title="1. 기본 사용법"></a>1. 기본 사용법</h3><pre><code class="highlight typescript"><span class="keyword">let</span> <span class="attr">value</span>: <span class="built_in">number</span> | <span class="built_in">string</span>;value = <span class="number">42</span>; <span class="comment">// 숫자</span>value = <span class="string">&quot;Hello&quot;</span>; <span class="comment">// 문자열</span></code></pre><h3 id="2-함수에서-유니언-타입-사용"><a href="#2-함수에서-유니언-타입-사용" class="headerlink" title="2. 함수에서 유니언 타입 사용"></a>2. 함수에서 유니언 타입 사용</h3><p>유니언 타입은 함수 매개변수와 반환 타입에도 사용할 수 있습니다:</p><pre><code class="highlight typescript"><span class="keyword">function</span> <span class="title function_">format</span>(<span class="params"><span class="attr">input</span>: <span class="built_in">number</span> | <span class="built_in">string</span></span>): <span class="built_in">string</span> &#123;  <span class="keyword">if</span> (<span class="keyword">typeof</span> input === <span class="string">&quot;number&quot;</span>) &#123;    <span class="keyword">return</span> input.<span class="title function_">toFixed</span>(<span class="number">2</span>);  &#125;  <span class="keyword">return</span> input.<span class="title function_">toUpperCase</span>();&#125;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">format</span>(<span class="number">3.14159</span>)); <span class="comment">// 출력: 3.14</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">format</span>(<span class="string">&quot;hello&quot;</span>)); <span class="comment">// 출력: HELLO</span></code></pre><h3 id="3-타입-가드"><a href="#3-타입-가드" class="headerlink" title="3. 타입 가드"></a>3. 타입 가드</h3><p>타입 가드는 특정 타입인지 확인하는 코드를 작성하여 타입 안전성을 높일 수 있습니다:</p><pre><code class="highlight typescript"><span class="keyword">function</span> <span class="title function_">printId</span>(<span class="params"><span class="attr">id</span>: <span class="built_in">number</span> | <span class="built_in">string</span></span>) &#123;  <span class="keyword">if</span> (<span class="keyword">typeof</span> id === <span class="string">&quot;string&quot;</span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(id.<span class="title function_">toUpperCase</span>());  &#125; <span class="keyword">else</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(id);  &#125;&#125;<span class="title function_">printId</span>(<span class="string">&quot;Hello&quot;</span>); <span class="comment">// 출력: HELLO</span><span class="title function_">printId</span>(<span class="number">123</span>); <span class="comment">// 출력: 123</span></code></pre><h2 id="인터섹션-타입"><a href="#인터섹션-타입" class="headerlink" title="인터섹션 타입"></a>인터섹션 타입</h2><p>인터섹션 타입(Intersection Type)은 여러 타입을 모두 만족하는 타입을 정의합니다. 인터섹션 타입은 <code>&amp;</code> 연산자를 사용하여 정의합니다.</p><h3 id="1-기본-사용법-1"><a href="#1-기본-사용법-1" class="headerlink" title="1. 기본 사용법"></a>1. 기본 사용법</h3><pre><code class="highlight typescript"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;  <span class="attr">name</span>: <span class="built_in">string</span>;&#125;<span class="keyword">interface</span> <span class="title class_">Employee</span> &#123;  <span class="attr">employeeId</span>: <span class="built_in">number</span>;&#125;<span class="keyword">type</span> <span class="title class_">EmployeePerson</span> = <span class="title class_">Person</span> &amp; <span class="title class_">Employee</span>;<span class="keyword">let</span> <span class="attr">john</span>: <span class="title class_">EmployeePerson</span> = &#123;  <span class="attr">name</span>: <span class="string">&quot;John Doe&quot;</span>,  <span class="attr">employeeId</span>: <span class="number">1</span>,&#125;;</code></pre><h3 id="2-함수에서-인터섹션-타입-사용"><a href="#2-함수에서-인터섹션-타입-사용" class="headerlink" title="2. 함수에서 인터섹션 타입 사용"></a>2. 함수에서 인터섹션 타입 사용</h3><p>인터섹션 타입은 함수 매개변수와 반환 타입에도 사용할 수 있습니다:</p><pre><code class="highlight typescript"><span class="keyword">function</span> <span class="title function_">createEmployeePerson</span>(<span class="params"></span><span class="params">  <span class="attr">name</span>: <span class="built_in">string</span>,</span><span class="params">  <span class="attr">employeeId</span>: <span class="built_in">number</span></span><span class="params"></span>): <span class="title class_">Person</span> &amp; <span class="title class_">Employee</span> &#123;  <span class="keyword">return</span> &#123; name, employeeId &#125;;&#125;<span class="keyword">let</span> jane = <span class="title function_">createEmployeePerson</span>(<span class="string">&quot;Jane Doe&quot;</span>, <span class="number">2</span>);<span class="variable language_">console</span>.<span class="title function_">log</span>(jane); <span class="comment">// 출력: &#123; name: &#x27;Jane Doe&#x27;, employeeId: 2 &#125;</span></code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 TypeScript에서 유니언 타입과 인터섹션 타입을 사용하는 방법에 대해 알아보았습니다.<br>유니언 타입과 인터섹션 타입은 다양한 타입 조합을 가능하게 하여 코드의 유연성을 높여줍니다.<br>다음 시간에는 타입 가드와 타입 좁히기에 대해 알아보겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> TS_기본기 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript 열거형(Enum) 활용법</title>
      <link href="/typescript/basic/5/"/>
      <url>/typescript/basic/5/</url>
      
        <content type="html"><![CDATA[<h1 id="TypeScript-열거형-Enum-활용법"><a href="#TypeScript-열거형-Enum-활용법" class="headerlink" title="TypeScript 열거형(Enum) 활용법"></a>TypeScript 열거형(Enum) 활용법</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 TypeScript에서 열거형(Enum)을 사용하는 방법에 대해 알아보겠습니다. 열거형은 이름이 있는 상수 집합을 정의하는 데 사용됩니다.</p><h2 id="열거형의-개념"><a href="#열거형의-개념" class="headerlink" title="열거형의 개념"></a>열거형의 개념</h2><p>열거형은 연관된 상수들을 그룹화하여 코드의 가독성과 유지보수성을 높이는 데 유용합니다. 열거형은 숫자 열거형과 문자열 열거형으로 나눌 수 있습니다.</p><h3 id="1-숫자-열거형"><a href="#1-숫자-열거형" class="headerlink" title="1. 숫자 열거형"></a>1. 숫자 열거형</h3><p>숫자 열거형은 기본적으로 첫 번째 값이 0부터 시작하며, 이후 값들은 1씩 증가합니다:</p><pre><code class="highlight typescript"><span class="keyword">enum</span> <span class="title class_">Direction</span> &#123;  <span class="title class_">Up</span>,  <span class="title class_">Down</span>,  <span class="title class_">Left</span>,  <span class="title class_">Right</span>,&#125;<span class="keyword">let</span> <span class="attr">dir</span>: <span class="title class_">Direction</span> = <span class="title class_">Direction</span>.<span class="property">Up</span>;<span class="variable language_">console</span>.<span class="title function_">log</span>(dir); <span class="comment">// 출력: 0</span></code></pre><p>숫자 열거형의 시작 값을 변경할 수도 있습니다:</p><pre><code class="highlight typescript"><span class="keyword">enum</span> <span class="title class_">Direction</span> &#123;  <span class="title class_">Up</span> = <span class="number">1</span>,  <span class="title class_">Down</span>,  <span class="title class_">Left</span>,  <span class="title class_">Right</span>,&#125;<span class="keyword">let</span> <span class="attr">dir</span>: <span class="title class_">Direction</span> = <span class="title class_">Direction</span>.<span class="property">Up</span>;<span class="variable language_">console</span>.<span class="title function_">log</span>(dir); <span class="comment">// 출력: 1</span></code></pre><h3 id="2-문자열-열거형"><a href="#2-문자열-열거형" class="headerlink" title="2. 문자열 열거형"></a>2. 문자열 열거형</h3><p>문자열 열거형은 각 멤버가 문자열 값을 가지도록 합니다:</p><pre><code class="highlight typescript"><span class="keyword">enum</span> <span class="title class_">Direction</span> &#123;  <span class="title class_">Up</span> = <span class="string">&quot;UP&quot;</span>,  <span class="title class_">Down</span> = <span class="string">&quot;DOWN&quot;</span>,  <span class="title class_">Left</span> = <span class="string">&quot;LEFT&quot;</span>,  <span class="title class_">Right</span> = <span class="string">&quot;RIGHT&quot;</span>,&#125;<span class="keyword">let</span> <span class="attr">dir</span>: <span class="title class_">Direction</span> = <span class="title class_">Direction</span>.<span class="property">Up</span>;<span class="variable language_">console</span>.<span class="title function_">log</span>(dir); <span class="comment">// 출력: UP</span></code></pre><h3 id="3-열거형의-활용"><a href="#3-열거형의-활용" class="headerlink" title="3. 열거형의 활용"></a>3. 열거형의 활용</h3><p>열거형은 코드의 가독성을 높이고, 의도를 명확히 전달할 수 있습니다. 예를 들어, 함수의 매개변수로 열거형을 사용할 수 있습니다:</p><pre><code class="highlight typescript"><span class="keyword">function</span> <span class="title function_">move</span>(<span class="params"><span class="attr">direction</span>: <span class="title class_">Direction</span></span>) &#123;  <span class="keyword">switch</span> (direction) &#123;    <span class="keyword">case</span> <span class="title class_">Direction</span>.<span class="property">Up</span>:      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Moving up&quot;</span>);      <span class="keyword">break</span>;    <span class="keyword">case</span> <span class="title class_">Direction</span>.<span class="property">Down</span>:      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Moving down&quot;</span>);      <span class="keyword">break</span>;    <span class="keyword">case</span> <span class="title class_">Direction</span>.<span class="property">Left</span>:      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Moving left&quot;</span>);      <span class="keyword">break</span>;    <span class="keyword">case</span> <span class="title class_">Direction</span>.<span class="property">Right</span>:      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Moving right&quot;</span>);      <span class="keyword">break</span>;  &#125;&#125;<span class="title function_">move</span>(<span class="title class_">Direction</span>.<span class="property">Left</span>); <span class="comment">// 출력: Moving left</span></code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 TypeScript에서 열거형을 사용하는 방법에 대해 알아보았습니다.<br>열거형은 연관된 상수들을 그룹화하여 코드의 가독성과 유지보수성을 높이는 데 유용합니다.<br>다음 시간에는 유니언 타입과 인터섹션 타입에 대해 알아보겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> TS_기본기 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript 타입 추론 (Type Narrowing)</title>
      <link href="/typescript/special/11/"/>
      <url>/typescript/special/11/</url>
      
        <content type="html"><![CDATA[<h1 id="TypeScript-타입-추론-Type-Narrowing"><a href="#TypeScript-타입-추론-Type-Narrowing" class="headerlink" title="TypeScript 타입 추론 (Type Narrowing)"></a>TypeScript 타입 추론 (Type Narrowing)</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 TypeScript에서 **타입 추론 (Type Narrowing)**에 대해 알아보겠습니다. Type Narrowing은 조건부 타입이나 타입 가드를 사용하여 타입을 좁혀주는 과정입니다. 이를 통해 코드의 안정성을 높이고, 타입 안정성을 강화할 수 있습니다.</p><h2 id="타입-추론-Type-Narrowing-이란"><a href="#타입-추론-Type-Narrowing-이란" class="headerlink" title="타입 추론 (Type Narrowing)이란?"></a>타입 추론 (Type Narrowing)이란?</h2><h3 id="타입-추론의-개념"><a href="#타입-추론의-개념" class="headerlink" title="타입 추론의 개념"></a>타입 추론의 개념</h3><p>TypeScript에서 타입 추론(Type Narrowing)은 변수가 여러 타입을 가질 수 있는 경우, 특정 조건을 통해 해당 변수를 더 구체적인 타입으로 좁히는 것을 의미합니다. 예를 들어, 유니언 타입(<code>string | number</code>)을 가진 변수를 조건문을 통해 특정 타입으로 좁힐 수 있습니다. 이는 코드의 타입 안정성을 강화하고, 예상치 못한 오류를 방지하는 데 유용합니다.</p><h3 id="타입-추론의-예시"><a href="#타입-추론의-예시" class="headerlink" title="타입 추론의 예시"></a>타입 추론의 예시</h3><p>RPG 게임에서 캐릭터의 경험치(Experience)를 처리하는 함수가 있다고 가정해봅시다. 이 함수는 경험치를 문자열로 받거나 숫자로 받을 수 있으며, 이를 처리하는 과정에서 타입을 좁혀야 할 필요가 있습니다.</p><pre><code class="highlight typescript"><span class="keyword">function</span> <span class="title function_">processExperience</span>(<span class="params"><span class="attr">exp</span>: <span class="built_in">string</span> | <span class="built_in">number</span></span>) &#123;  <span class="keyword">if</span> (<span class="keyword">typeof</span> exp === <span class="string">&quot;string&quot;</span>) &#123;    <span class="comment">// exp는 문자열 타입으로 좁혀짐</span>    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Experience: <span class="subst">$&#123;<span class="built_in">parseInt</span>(exp, <span class="number">10</span>)&#125;</span> points`</span>);  &#125; <span class="keyword">else</span> &#123;    <span class="comment">// exp는 숫자 타입으로 좁혀짐</span>    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Experience: <span class="subst">$&#123;exp&#125;</span> points`</span>);  &#125;&#125;<span class="title function_">processExperience</span>(<span class="string">&quot;150&quot;</span>); <span class="comment">// Experience: 150 points</span><span class="title function_">processExperience</span>(<span class="number">200</span>); <span class="comment">// Experience: 200 points</span></code></pre><p>위 예제에서 <code>exp</code>는 <code>string | number</code> 유니언 타입을 가집니다. <code>typeof</code> 연산자를 사용해 타입을 체크하고, 조건문 내부에서 타입을 좁히는 과정을 통해 각 타입에 맞는 처리 방식을 적용합니다.</p><h2 id="조건부-타입을-통한-타입-축소"><a href="#조건부-타입을-통한-타입-축소" class="headerlink" title="조건부 타입을 통한 타입 축소"></a>조건부 타입을 통한 타입 축소</h2><h3 id="조건부-타입이란"><a href="#조건부-타입이란" class="headerlink" title="조건부 타입이란?"></a>조건부 타입이란?</h3><p>조건부 타입(Conditional Types)은 타입을 조건에 따라 다르게 적용할 수 있는 TypeScript의 강력한 기능입니다. 조건부 타입을 사용하면 특정 조건에 따라 타입을 선택하거나 변경할 수 있습니다.</p><h3 id="조건부-타입의-예시"><a href="#조건부-타입의-예시" class="headerlink" title="조건부 타입의 예시"></a>조건부 타입의 예시</h3><p>RPG 게임에서 캐릭터의 레벨을 관리하는 함수가 있다고 가정해봅시다. 이 함수는 캐릭터가 특정 레벨 이상일 때 보너스를 제공하며, 조건부 타입을 사용해 반환 타입을 다르게 정의할 수 있습니다.</p><pre><code class="highlight typescript"><span class="keyword">type</span> <span class="title class_">LevelBonus</span>&lt;T <span class="keyword">extends</span> <span class="built_in">number</span>&gt; = T <span class="keyword">extends</span> <span class="number">10</span>  ? &#123; <span class="attr">bonus</span>: <span class="built_in">string</span> &#125;  : &#123; <span class="attr">noBonus</span>: <span class="built_in">boolean</span> &#125;;<span class="keyword">function</span> getBonus&lt;T <span class="keyword">extends</span> <span class="built_in">number</span>&gt;(<span class="attr">level</span>: T): <span class="title class_">LevelBonus</span>&lt;T&gt; &#123;  <span class="keyword">if</span> (level &gt;= <span class="number">10</span>) &#123;    <span class="keyword">return</span> &#123; <span class="attr">bonus</span>: <span class="string">&quot;Double Damage&quot;</span> &#125; <span class="keyword">as</span> <span class="title class_">LevelBonus</span>&lt;T&gt;;  &#125; <span class="keyword">else</span> &#123;    <span class="keyword">return</span> &#123; <span class="attr">noBonus</span>: <span class="literal">true</span> &#125; <span class="keyword">as</span> <span class="title class_">LevelBonus</span>&lt;T&gt;;  &#125;&#125;<span class="keyword">const</span> bonus1 = <span class="title function_">getBonus</span>(<span class="number">12</span>); <span class="comment">// &#123; bonus: &quot;Double Damage&quot; &#125;</span><span class="keyword">const</span> bonus2 = <span class="title function_">getBonus</span>(<span class="number">5</span>); <span class="comment">// &#123; noBonus: true &#125;</span></code></pre><p>위 예제에서 <code>LevelBonus</code>는 조건부 타입을 사용해 캐릭터 레벨이 10 이상일 경우 보너스를 제공하는 타입을, 그렇지 않을 경우 보너스가 없음을 나타내는 타입을 반환합니다. 이를 통해 타입 추론이 더욱 정교하게 이루어집니다.</p><h2 id="유니언-타입과-타입-가드를-통한-타입-체크"><a href="#유니언-타입과-타입-가드를-통한-타입-체크" class="headerlink" title="유니언 타입과 타입 가드를 통한 타입 체크"></a>유니언 타입과 타입 가드를 통한 타입 체크</h2><h3 id="유니언-타입과-타입-가드"><a href="#유니언-타입과-타입-가드" class="headerlink" title="유니언 타입과 타입 가드"></a>유니언 타입과 타입 가드</h3><p>유니언 타입은 여러 타입 중 하나일 수 있는 변수를 정의하는 방법입니다. TypeScript에서 유니언 타입을 사용할 때, 해당 변수를 구체적인 타입으로 좁히기 위해 타입 가드(Type Guards)를 사용할 수 있습니다. 타입 가드는 특정 조건에 따라 타입을 좁혀주는 함수나 연산자를 의미합니다.</p><h3 id="타입-가드의-예시"><a href="#타입-가드의-예시" class="headerlink" title="타입 가드의 예시"></a>타입 가드의 예시</h3><p>RPG 게임에서 아이템을 사용하는 함수가 있다고 가정해봅시다. 이 함수는 아이템이 무기(Weapon)인지, 포션(Potion)인지에 따라 다른 처리를 해야 하며, 타입 가드를 사용해 이를 구분할 수 있습니다.</p><pre><code class="highlight typescript"><span class="keyword">type</span> <span class="title class_">Weapon</span> = &#123;  <span class="attr">type</span>: <span class="string">&quot;weapon&quot;</span>;  <span class="attr">name</span>: <span class="built_in">string</span>;  <span class="attr">damage</span>: <span class="built_in">number</span>;&#125;;<span class="keyword">type</span> <span class="title class_">Potion</span> = &#123;  <span class="attr">type</span>: <span class="string">&quot;potion&quot;</span>;  <span class="attr">name</span>: <span class="built_in">string</span>;  <span class="attr">heal</span>: <span class="built_in">number</span>;&#125;;<span class="keyword">type</span> <span class="title class_">Item</span> = <span class="title class_">Weapon</span> | <span class="title class_">Potion</span>;<span class="keyword">function</span> <span class="title function_">useItem</span>(<span class="params"><span class="attr">item</span>: <span class="title class_">Item</span></span>) &#123;  <span class="keyword">if</span> (item.<span class="property">type</span> === <span class="string">&quot;weapon&quot;</span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Attacking with <span class="subst">$&#123;item.name&#125;</span>, dealing <span class="subst">$&#123;item.damage&#125;</span> damage.`</span>);  &#125; <span class="keyword">else</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Drinking <span class="subst">$&#123;item.name&#125;</span>, restoring <span class="subst">$&#123;item.heal&#125;</span> health.`</span>);  &#125;&#125;<span class="keyword">const</span> <span class="attr">sword</span>: <span class="title class_">Weapon</span> = &#123; <span class="attr">type</span>: <span class="string">&quot;weapon&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;Excalibur&quot;</span>, <span class="attr">damage</span>: <span class="number">50</span> &#125;;<span class="keyword">const</span> <span class="attr">healthPotion</span>: <span class="title class_">Potion</span> = &#123;  <span class="attr">type</span>: <span class="string">&quot;potion&quot;</span>,  <span class="attr">name</span>: <span class="string">&quot;Health Potion&quot;</span>,  <span class="attr">heal</span>: <span class="number">30</span>,&#125;;<span class="title function_">useItem</span>(sword); <span class="comment">// Attacking with Excalibur, dealing 50 damage.</span><span class="title function_">useItem</span>(healthPotion); <span class="comment">// Drinking Health Potion, restoring 30 health.</span></code></pre><p>위 예제에서 <code>useItem</code> 함수는 <code>Item</code> 유니언 타입을 인자로 받으며, <code>item.type</code>을 기반으로 타입을 좁히고 있습니다. 이 과정에서 타입 가드가 적용되어 <code>item</code>이 <code>Weapon</code> 타입인지 <code>Potion</code> 타입인지에 따라 다른 처리 로직을 수행합니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 TypeScript의 **타입 추론 (Type Narrowing)**에 대해 알아보았습니다. 타입 추론은 유니언 타입과 조건부 타입을 통해 타입을 좁히고, 코드의 안정성을 높이는 중요한 기능입니다. 타입 가드와 조건부 타입을 적절히 활용하여 더욱 안전하고 타입 안정성이 높은 코드를 작성해보세요!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> TS_필살기 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript 제네릭(Generic) 사용법</title>
      <link href="/typescript/basic/4/"/>
      <url>/typescript/basic/4/</url>
      
        <content type="html"><![CDATA[<h1 id="TypeScript-제네릭-Generic-사용법"><a href="#TypeScript-제네릭-Generic-사용법" class="headerlink" title="TypeScript 제네릭(Generic) 사용법"></a>TypeScript 제네릭(Generic) 사용법</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 TypeScript에서 제네릭(Generic)을 사용하는 방법에 대해 알아보겠습니다.<br>제네릭은 재사용 가능한 컴포넌트를 작성할 때 매우 유용합니다.</p><h2 id="제네릭의-개념"><a href="#제네릭의-개념" class="headerlink" title="제네릭의 개념"></a>제네릭의 개념</h2><p>제네릭은 타입을 변수처럼 사용할 수 있게 해주는 기능입니다. 이를 통해 다양한 타입에 대해 동작할 수 있는 재사용 가능한 컴포넌트를 작성할 수 있습니다.</p><h3 id="1-제네릭-함수"><a href="#1-제네릭-함수" class="headerlink" title="1. 제네릭 함수"></a>1. 제네릭 함수</h3><p>제네릭 함수를 정의할 때, 타입 매개변수를 사용합니다. 일반적으로 타입 매개변수는 <code>T</code>로 표기합니다:</p><pre><code class="highlight typescript"><span class="keyword">function</span> identity&lt;T&gt;(<span class="attr">arg</span>: T): T &#123;  <span class="keyword">return</span> arg;&#125;<span class="keyword">let</span> output1 = identity&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;Hello, TypeScript!&quot;</span>);<span class="keyword">let</span> output2 = identity&lt;<span class="built_in">number</span>&gt;(<span class="number">42</span>);</code></pre><h3 id="2-제네릭-인터페이스"><a href="#2-제네릭-인터페이스" class="headerlink" title="2. 제네릭 인터페이스"></a>2. 제네릭 인터페이스</h3><p>제네릭을 인터페이스에 사용할 수도 있습니다:</p><pre><code class="highlight typescript"><span class="keyword">interface</span> <span class="title class_">GenericIdentityFn</span>&lt;T&gt; &#123;  (<span class="attr">arg</span>: T): T;&#125;<span class="keyword">let</span> <span class="attr">myIdentity</span>: <span class="title class_">GenericIdentityFn</span>&lt;<span class="built_in">number</span>&gt; = identity;</code></pre><h3 id="3-제네릭-클래스"><a href="#3-제네릭-클래스" class="headerlink" title="3. 제네릭 클래스"></a>3. 제네릭 클래스</h3><p>제네릭을 클래스에 사용할 수도 있습니다:</p><pre><code class="highlight typescript"><span class="keyword">class</span> <span class="title class_">GenericNumber</span>&lt;T&gt; &#123;  <span class="attr">zeroValue</span>: T;  <span class="attr">add</span>: <span class="function">(<span class="params"><span class="attr">x</span>: T, <span class="attr">y</span>: T</span>) =&gt;</span> T;&#125;<span class="keyword">let</span> myGenericNumber = <span class="keyword">new</span> <span class="title class_">GenericNumber</span>&lt;<span class="built_in">number</span>&gt;();myGenericNumber.<span class="property">zeroValue</span> = <span class="number">0</span>;myGenericNumber.<span class="property">add</span> = <span class="function">(<span class="params">x, y</span>) =&gt;</span> x + y;</code></pre><h3 id="4-제네릭-제약조건"><a href="#4-제네릭-제약조건" class="headerlink" title="4. 제네릭 제약조건"></a>4. 제네릭 제약조건</h3><p>제네릭에 제약조건을 추가하여 특정 타입만 허용할 수 있습니다. 이는 타입 매개변수가 특정 인터페이스를 구현해야 함을 명시할 때 유용합니다:</p><pre><code class="highlight typescript"><span class="keyword">interface</span> <span class="title class_">Lengthwise</span> &#123;  <span class="attr">length</span>: <span class="built_in">number</span>;&#125;<span class="keyword">function</span> loggingIdentity&lt;T <span class="keyword">extends</span> <span class="title class_">Lengthwise</span>&gt;(<span class="attr">arg</span>: T): T &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(arg.<span class="property">length</span>);  <span class="keyword">return</span> arg;&#125;<span class="title function_">loggingIdentity</span>(&#123; <span class="attr">length</span>: <span class="number">10</span>, <span class="attr">value</span>: <span class="number">3</span> &#125;);</code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 TypeScript에서 제네릭을 사용하는 방법에 대해 알아보았습니다.<br>제네릭은 다양한 타입에 대해 동작하는 재사용 가능한 컴포넌트를 작성하는 데 매우 유용합니다.<br>다음 시간에는 열거형(Enum)에 대해 알아보겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> TS_기본기 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript Mapped Types</title>
      <link href="/typescript/special/10/"/>
      <url>/typescript/special/10/</url>
      
        <content type="html"><![CDATA[<h1 id="TypeScript-Mapped-Types"><a href="#TypeScript-Mapped-Types" class="headerlink" title="TypeScript Mapped Types"></a>TypeScript Mapped Types</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 TypeScript의 <strong>Mapped Types</strong>에 대해 알아보겠습니다. Mapped Types는 기존의 타입을 변환하거나 조작하여 새로운 타입을 정의하는 강력한 기능입니다. Mapped Types의 개념과 활용, 그리고 이를 사용한 타입 변환 방법을 중심으로 알아보겠습니다.</p><h2 id="Mapped-Type의-개념"><a href="#Mapped-Type의-개념" class="headerlink" title="Mapped Type의 개념"></a>Mapped Type의 개념</h2><h3 id="Mapped-Type이란"><a href="#Mapped-Type이란" class="headerlink" title="Mapped Type이란?"></a>Mapped Type이란?</h3><p>Mapped Type은 TypeScript에서 기존의 타입을 기반으로 새로운 타입을 생성하는 방식입니다. 이를 통해 타입을 변환하거나, 특정 프로퍼티를 수정하는 등의 작업을 할 수 있습니다. Mapped Type은 주로 제네릭 타입과 함께 사용되며, 특정 객체 타입의 모든 프로퍼티에 대해 일괄적으로 변환을 적용할 때 유용합니다.</p><h3 id="Mapped-Type-기본-예제"><a href="#Mapped-Type-기본-예제" class="headerlink" title="Mapped Type 기본 예제"></a>Mapped Type 기본 예제</h3><p>RPG 게임에서 캐릭터의 상태를 정의하는 타입이 있다고 가정해봅시다. 이 상태는 다양한 속성으로 이루어져 있으며, 각 속성의 값을 동결(수정 불가)하는 새로운 타입을 정의할 수 있습니다.</p><pre><code class="highlight typescript"><span class="keyword">type</span> <span class="title class_">CharacterStats</span> = &#123;  <span class="attr">strength</span>: <span class="built_in">number</span>;  <span class="attr">agility</span>: <span class="built_in">number</span>;  <span class="attr">intelligence</span>: <span class="built_in">number</span>;&#125;;<span class="keyword">type</span> <span class="title class_">ImmutableCharacterStats</span> = &#123;  <span class="keyword">readonly</span> [K <span class="keyword">in</span> keyof <span class="title class_">CharacterStats</span>]: <span class="title class_">CharacterStats</span>[K];&#125;;<span class="keyword">const</span> <span class="attr">stats</span>: <span class="title class_">ImmutableCharacterStats</span> = &#123;  <span class="attr">strength</span>: <span class="number">100</span>,  <span class="attr">agility</span>: <span class="number">80</span>,  <span class="attr">intelligence</span>: <span class="number">90</span>,&#125;;<span class="comment">// Error: 수정 불가</span><span class="comment">// stats.strength = 110;</span></code></pre><p>위 예제에서 <code>ImmutableCharacterStats</code> 타입은 <code>CharacterStats</code> 타입의 모든 프로퍼티를 <code>readonly</code>로 변환합니다. 이로 인해 <code>stats</code> 객체의 각 속성은 수정이 불가능하게 됩니다.</p><h2 id="Mapped-Type의-활용"><a href="#Mapped-Type의-활용" class="headerlink" title="Mapped Type의 활용"></a>Mapped Type의 활용</h2><h3 id="Partial과-Required"><a href="#Partial과-Required" class="headerlink" title="Partial과 Required"></a>Partial과 Required</h3><p>TypeScript는 다양한 기본 Mapped Type을 제공하며, 이를 통해 복잡한 타입 변환을 간단하게 수행할 수 있습니다. <code>Partial</code>과 <code>Required</code>는 가장 많이 사용되는 Mapped Type 중 하나입니다.</p><ul><li><strong>Partial</strong>: 기존의 모든 프로퍼티를 선택적(Optional)으로 변환합니다.</li><li><strong>Required</strong>: 기존의 모든 프로퍼티를 필수(Mandatory)로 변환합니다.</li></ul><pre><code class="highlight typescript"><span class="keyword">type</span> <span class="title class_">Character</span> = &#123;  <span class="attr">name</span>: <span class="built_in">string</span>;  <span class="attr">level</span>: <span class="built_in">number</span>;  <span class="attr">class</span>: <span class="built_in">string</span>;&#125;;<span class="comment">// 모든 속성을 선택적으로 변환</span><span class="keyword">type</span> <span class="title class_">PartialCharacter</span> = <span class="title class_">Partial</span>&lt;<span class="title class_">Character</span>&gt;;<span class="keyword">const</span> <span class="attr">partialCharacter</span>: <span class="title class_">PartialCharacter</span> = &#123;  <span class="attr">name</span>: <span class="string">&quot;Aragon&quot;</span>,&#125;;<span class="comment">// 모든 속성을 필수로 변환</span><span class="keyword">type</span> <span class="title class_">RequiredCharacter</span> = <span class="title class_">Required</span>&lt;<span class="title class_">PartialCharacter</span>&gt;;<span class="keyword">const</span> <span class="attr">requiredCharacter</span>: <span class="title class_">RequiredCharacter</span> = &#123;  <span class="attr">name</span>: <span class="string">&quot;Aragon&quot;</span>,  <span class="attr">level</span>: <span class="number">10</span>,  <span class="attr">class</span>: <span class="string">&quot;Warrior&quot;</span>,&#125;;</code></pre><p>위 예제에서 <code>Partial&lt;Character&gt;</code> 타입은 <code>Character</code> 타입의 모든 속성을 선택적으로 변환하며, 반대로 <code>Required&lt;PartialCharacter&gt;</code>는 모든 속성을 필수로 변환합니다.</p><h3 id="Mapped-Type을-사용한-타입-변환"><a href="#Mapped-Type을-사용한-타입-변환" class="headerlink" title="Mapped Type을 사용한 타입 변환"></a>Mapped Type을 사용한 타입 변환</h3><p>Mapped Type을 활용하면 타입을 쉽게 변환할 수 있으며, 특정 속성의 타입을 변경하거나, 새로운 속성을 추가하는 등의 작업을 할 수 있습니다.</p><h4 id="속성-타입-변환-예제"><a href="#속성-타입-변환-예제" class="headerlink" title="속성 타입 변환 예제"></a>속성 타입 변환 예제</h4><p>RPG 게임에서 아이템의 품질(Quality)을 정의하는 타입이 있다고 가정해봅시다. 이 품질은 문자열로 표현되지만, 숫자 값으로 변환하는 작업이 필요할 수 있습니다.</p><pre><code class="highlight typescript"><span class="keyword">type</span> <span class="title class_">ItemQuality</span> = &#123;  <span class="attr">name</span>: <span class="built_in">string</span>;  <span class="attr">quality</span>: <span class="built_in">string</span>;&#125;;<span class="keyword">type</span> <span class="title class_">NumericQuality</span>&lt;T&gt; = &#123;  [K <span class="keyword">in</span> keyof T]: K <span class="keyword">extends</span> <span class="string">&quot;quality&quot;</span> ? <span class="built_in">number</span> : T[K];&#125;;<span class="keyword">type</span> <span class="title class_">NumericItemQuality</span> = <span class="title class_">NumericQuality</span>&lt;<span class="title class_">ItemQuality</span>&gt;;<span class="keyword">const</span> <span class="attr">sword</span>: <span class="title class_">NumericItemQuality</span> = &#123;  <span class="attr">name</span>: <span class="string">&quot;Excalibur&quot;</span>,  <span class="attr">quality</span>: <span class="number">5</span>, <span class="comment">// 숫자 값으로 변환됨</span>&#125;;</code></pre><p>위 예제에서 <code>NumericQuality&lt;T&gt;</code> 타입은 <code>quality</code> 속성을 숫자 타입으로 변환합니다. 이를 통해 <code>sword</code> 객체는 품질을 숫자로 나타내며, 다른 속성은 그대로 유지됩니다.</p><h4 id="새로운-속성-추가-예제"><a href="#새로운-속성-추가-예제" class="headerlink" title="새로운 속성 추가 예제"></a>새로운 속성 추가 예제</h4><p>RPG 게임에서 모든 캐릭터에게 고유한 ID를 부여하는 시스템을 구축한다고 가정해봅시다. Mapped Type을 사용하여 모든 캐릭터 타입에 <code>id</code> 속성을 추가할 수 있습니다.</p><pre><code class="highlight typescript"><span class="keyword">type</span> <span class="title class_">AddID</span>&lt;T&gt; = &#123;  <span class="attr">id</span>: <span class="built_in">string</span>;&#125; &amp; T;<span class="keyword">type</span> <span class="title class_">CharacterWithID</span> = <span class="title class_">AddID</span>&lt;<span class="title class_">Character</span>&gt;;<span class="keyword">const</span> <span class="attr">characterWithID</span>: <span class="title class_">CharacterWithID</span> = &#123;  <span class="attr">id</span>: <span class="string">&quot;12345&quot;</span>,  <span class="attr">name</span>: <span class="string">&quot;Aragon&quot;</span>,  <span class="attr">level</span>: <span class="number">10</span>,  <span class="attr">class</span>: <span class="string">&quot;Warrior&quot;</span>,&#125;;</code></pre><p>위 예제에서 <code>AddID&lt;T&gt;</code> 타입은 <code>id</code> 속성을 추가한 새로운 타입을 생성합니다. 이를 통해 모든 캐릭터는 고유한 ID를 가지게 됩니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 TypeScript의 <strong>Mapped Types</strong>에 대해 알아보았습니다. Mapped Types는 기존 타입을 변환하고 확장할 수 있는 강력한 도구로, 복잡한 타입 시스템을 보다 쉽게 관리할 수 있게 해줍니다. 이 기능을 잘 활용하여 더욱 유연하고 강력한 타입을 정의해보세요!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> TS_필살기 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript 인터페이스와 타입 별칭 사용법</title>
      <link href="/typescript/basic/3/"/>
      <url>/typescript/basic/3/</url>
      
        <content type="html"><![CDATA[<h1 id="TypeScript-인터페이스와-타입-별칭-사용법"><a href="#TypeScript-인터페이스와-타입-별칭-사용법" class="headerlink" title="TypeScript 인터페이스와 타입 별칭 사용법"></a>TypeScript 인터페이스와 타입 별칭 사용법</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 TypeScript의 인터페이스와 타입 별칭에 대해 알아보겠습니다.<br>이 두 가지 개념은 타입 시스템을 더욱 강력하고 유연하게 만들어줍니다.</p><h2 id="인터페이스"><a href="#인터페이스" class="headerlink" title="인터페이스"></a>인터페이스</h2><p>인터페이스는 객체의 구조를 정의하는 데 사용됩니다. 인터페이스는 클래스나 객체가 따라야 하는 계약을 명시합니다.</p><h3 id="1-인터페이스-정의"><a href="#1-인터페이스-정의" class="headerlink" title="1. 인터페이스 정의"></a>1. 인터페이스 정의</h3><pre><code class="highlight typescript"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;  <span class="attr">name</span>: <span class="built_in">string</span>;  <span class="attr">age</span>: <span class="built_in">number</span>;&#125;<span class="keyword">let</span> <span class="attr">john</span>: <span class="title class_">Person</span> = &#123;  <span class="attr">name</span>: <span class="string">&quot;John Doe&quot;</span>,  <span class="attr">age</span>: <span class="number">30</span>,&#125;;</code></pre><h3 id="2-선택적-프로퍼티"><a href="#2-선택적-프로퍼티" class="headerlink" title="2. 선택적 프로퍼티"></a>2. 선택적 프로퍼티</h3><p>인터페이스에서 선택적 프로퍼티를 정의할 수 있습니다. 선택적 프로퍼티는 객체에 있어도 되고 없어도 되는 프로퍼티입니다:</p><pre><code class="highlight typescript"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;  <span class="attr">name</span>: <span class="built_in">string</span>;  age?: <span class="built_in">number</span>;&#125;<span class="keyword">let</span> <span class="attr">jane</span>: <span class="title class_">Person</span> = &#123;  <span class="attr">name</span>: <span class="string">&quot;Jane Doe&quot;</span>,&#125;;</code></pre><h3 id="3-읽기-전용-프로퍼티"><a href="#3-읽기-전용-프로퍼티" class="headerlink" title="3. 읽기 전용 프로퍼티"></a>3. 읽기 전용 프로퍼티</h3><p>읽기 전용 프로퍼티는 객체가 생성된 후에 수정할 수 없습니다:</p><pre><code class="highlight typescript"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;  <span class="keyword">readonly</span> <span class="attr">id</span>: <span class="built_in">number</span>;  <span class="attr">name</span>: <span class="built_in">string</span>;  age?: <span class="built_in">number</span>;&#125;<span class="keyword">let</span> <span class="attr">jack</span>: <span class="title class_">Person</span> = &#123;  <span class="attr">id</span>: <span class="number">1</span>,  <span class="attr">name</span>: <span class="string">&quot;Jack Doe&quot;</span>,  <span class="attr">age</span>: <span class="number">25</span>,&#125;;<span class="comment">// jack.id = 2; // 오류: &#x27;id&#x27;는 읽기 전용 프로퍼티입니다.</span></code></pre><h3 id="4-함수-타입"><a href="#4-함수-타입" class="headerlink" title="4. 함수 타입"></a>4. 함수 타입</h3><p>인터페이스는 함수 타입을 정의할 수 있습니다:</p><pre><code class="highlight typescript"><span class="keyword">interface</span> <span class="title class_">Greet</span> &#123;  (<span class="attr">name</span>: <span class="built_in">string</span>): <span class="built_in">string</span>;&#125;<span class="keyword">let</span> <span class="attr">greet</span>: <span class="title class_">Greet</span> = <span class="function">(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span></span>) =&gt;</span> &#123;  <span class="keyword">return</span> <span class="string">`Hello, <span class="subst">$&#123;name&#125;</span>!`</span>;&#125;;</code></pre><h2 id="타입-별칭"><a href="#타입-별칭" class="headerlink" title="타입 별칭"></a>타입 별칭</h2><p>타입 별칭(Type Alias)은 새로운 타입을 정의하는 데 사용됩니다. 인터페이스와 달리, 타입 별칭은 원시 타입, 유니언 타입, 튜플 등 다양한 타입에 별칭을 붙일 수 있습니다.</p><h3 id="1-기본-사용법"><a href="#1-기본-사용법" class="headerlink" title="1. 기본 사용법"></a>1. 기본 사용법</h3><pre><code class="highlight typescript"><span class="keyword">type</span> <span class="title class_">StringAlias</span> = <span class="built_in">string</span>;<span class="keyword">let</span> <span class="attr">message</span>: <span class="title class_">StringAlias</span> = <span class="string">&quot;Hello, TypeScript!&quot;</span>;</code></pre><h3 id="2-객체-타입-별칭"><a href="#2-객체-타입-별칭" class="headerlink" title="2. 객체 타입 별칭"></a>2. 객체 타입 별칭</h3><pre><code class="highlight typescript"><span class="keyword">type</span> <span class="title class_">Person</span> = &#123;  <span class="attr">name</span>: <span class="built_in">string</span>;  <span class="attr">age</span>: <span class="built_in">number</span>;&#125;;<span class="keyword">let</span> <span class="attr">john</span>: <span class="title class_">Person</span> = &#123;  <span class="attr">name</span>: <span class="string">&quot;John Doe&quot;</span>,  <span class="attr">age</span>: <span class="number">30</span>,&#125;;</code></pre><h3 id="3-유니언-타입과-인터"><a href="#3-유니언-타입과-인터" class="headerlink" title="3. 유니언 타입과 인터"></a>3. 유니언 타입과 인터</h3><p>섹션 타입</p><p>타입 별칭은 유니언 타입과 인터섹션 타입을 정의할 때 유용합니다:</p><pre><code class="highlight typescript"><span class="keyword">type</span> <span class="title class_">NumberOrString</span> = <span class="built_in">number</span> | <span class="built_in">string</span>;<span class="keyword">let</span> <span class="attr">value</span>: <span class="title class_">NumberOrString</span> = <span class="number">42</span>;value = <span class="string">&quot;Hello&quot;</span>;<span class="keyword">type</span> <span class="title class_">Name</span> = &#123; <span class="attr">name</span>: <span class="built_in">string</span> &#125;;<span class="keyword">type</span> <span class="title class_">Age</span> = &#123; <span class="attr">age</span>: <span class="built_in">number</span> &#125;;<span class="keyword">type</span> <span class="title class_">Person</span> = <span class="title class_">Name</span> &amp; <span class="title class_">Age</span>;<span class="keyword">let</span> <span class="attr">jane</span>: <span class="title class_">Person</span> = &#123;  <span class="attr">name</span>: <span class="string">&quot;Jane Doe&quot;</span>,  <span class="attr">age</span>: <span class="number">25</span>,&#125;;</code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 TypeScript의 인터페이스와 타입 별칭에 대해 알아보았습니다.<br>인터페이스와 타입 별칭은 객체의 구조를 정의하고, 타입 시스템을 유연하게 만들어줍니다.<br>다음 시간에는 제네릭에 대해 알아보겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> TS_기본기 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript 타입 시스템 이해하기</title>
      <link href="/typescript/basic/2/"/>
      <url>/typescript/basic/2/</url>
      
        <content type="html"><![CDATA[<h1 id="TypeScript-타입-시스템-이해하기"><a href="#TypeScript-타입-시스템-이해하기" class="headerlink" title="TypeScript 타입 시스템 이해하기"></a>TypeScript 타입 시스템 이해하기</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 TypeScript의 타입 시스템에 대해 알아보겠습니다.<br>TypeScript의 강력한 타입 시스템은 코드의 안정성과 가독성을 높이는 데 큰 도움이 됩니다.</p><h2 id="기본-타입"><a href="#기본-타입" class="headerlink" title="기본 타입"></a>기본 타입</h2><p>TypeScript는 JavaScript의 기본 타입을 확장하여 정적 타입 검사를 지원합니다. 주요 기본 타입은 다음과 같습니다:</p><h3 id="1-숫자-number"><a href="#1-숫자-number" class="headerlink" title="1. 숫자 (number)"></a>1. 숫자 (number)</h3><pre><code class="highlight typescript"><span class="keyword">let</span> <span class="attr">age</span>: <span class="built_in">number</span> = <span class="number">30</span>;</code></pre><h3 id="2-문자열-string"><a href="#2-문자열-string" class="headerlink" title="2. 문자열 (string)"></a>2. 문자열 (string)</h3><pre><code class="highlight typescript"><span class="keyword">let</span> <span class="attr">name</span>: <span class="built_in">string</span> = <span class="string">&quot;John Doe&quot;</span>;</code></pre><h3 id="3-불리언-boolean"><a href="#3-불리언-boolean" class="headerlink" title="3. 불리언 (boolean)"></a>3. 불리언 (boolean)</h3><pre><code class="highlight typescript"><span class="keyword">let</span> <span class="attr">isActive</span>: <span class="built_in">boolean</span> = <span class="literal">true</span>;</code></pre><h3 id="4-배열-array"><a href="#4-배열-array" class="headerlink" title="4. 배열 (array)"></a>4. 배열 (array)</h3><pre><code class="highlight typescript"><span class="keyword">let</span> <span class="attr">numbers</span>: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</code></pre><p>또는 제네릭 문법을 사용할 수도 있습니다:</p><pre><code class="highlight typescript"><span class="keyword">let</span> <span class="attr">fruits</span>: <span class="title class_">Array</span>&lt;<span class="built_in">string</span>&gt; = [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>];</code></pre><h3 id="5-튜플-tuple"><a href="#5-튜플-tuple" class="headerlink" title="5. 튜플 (tuple)"></a>5. 튜플 (tuple)</h3><p>튜플은 고정된 요소의 수와 타입을 가지는 배열입니다:</p><pre><code class="highlight typescript"><span class="keyword">let</span> <span class="attr">person</span>: [<span class="built_in">string</span>, <span class="built_in">number</span>] = [<span class="string">&quot;John Doe&quot;</span>, <span class="number">30</span>];</code></pre><h3 id="6-열거형-enum"><a href="#6-열거형-enum" class="headerlink" title="6. 열거형 (enum)"></a>6. 열거형 (enum)</h3><p>열거형은 이름이 있는 상수 집합을 정의할 때 사용합니다:</p><pre><code class="highlight typescript"><span class="keyword">enum</span> <span class="title class_">Color</span> &#123;  <span class="title class_">Red</span>,  <span class="title class_">Green</span>,  <span class="title class_">Blue</span>,&#125;<span class="keyword">let</span> <span class="attr">color</span>: <span class="title class_">Color</span> = <span class="title class_">Color</span>.<span class="property">Green</span>;</code></pre><h3 id="7-any"><a href="#7-any" class="headerlink" title="7. any"></a>7. any</h3><p><code>any</code> 타입은 모든 타입을 허용합니다. 타입 검사를 피하고 싶을 때 사용하지만, 남용은 피해야 합니다:</p><pre><code class="highlight typescript"><span class="keyword">let</span> <span class="attr">anything</span>: <span class="built_in">any</span> = <span class="number">42</span>;anything = <span class="string">&quot;Hello&quot;</span>;anything = <span class="literal">true</span>;</code></pre><h3 id="8-void"><a href="#8-void" class="headerlink" title="8. void"></a>8. void</h3><p><code>void</code> 타입은 주로 함수에서 반환 값이 없을 때 사용합니다:</p><pre><code class="highlight typescript"><span class="keyword">function</span> <span class="title function_">logMessage</span>(<span class="params"><span class="attr">message</span>: <span class="built_in">string</span></span>): <span class="built_in">void</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(message);&#125;</code></pre><h3 id="9-null과-undefined"><a href="#9-null과-undefined" class="headerlink" title="9. null과 undefined"></a>9. null과 undefined</h3><p><code>null</code>과 <code>undefined</code>는 각각 <code>null</code>과 <code>undefined</code> 값을 가질 수 있는 타입입니다:</p><pre><code class="highlight typescript"><span class="keyword">let</span> <span class="attr">nothing</span>: <span class="literal">null</span> = <span class="literal">null</span>;<span class="keyword">let</span> <span class="attr">notDefined</span>: <span class="literal">undefined</span> = <span class="literal">undefined</span>;</code></pre><h3 id="10-객체-object"><a href="#10-객체-object" class="headerlink" title="10. 객체 (object)"></a>10. 객체 (object)</h3><p>객체 타입은 객체를 나타내며, 구체적인 타입은 인터페이스나 타입 별칭을 통해 정의할 수 있습니다:</p><pre><code class="highlight typescript"><span class="keyword">let</span> <span class="attr">person</span>: &#123; <span class="attr">name</span>: <span class="built_in">string</span>; <span class="attr">age</span>: <span class="built_in">number</span> &#125; = &#123;  <span class="attr">name</span>: <span class="string">&quot;John Doe&quot;</span>,  <span class="attr">age</span>: <span class="number">30</span>,&#125;;</code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 TypeScript의 다양한 기본 타입에 대해 알아보았습니다.<br>TypeScript의 강력한 타입 시스템은 코드의 안정성과 가독성을 높이는 데 큰 도움이 됩니다.<br>다음 시간에는 인터페이스와 타입 별칭에 대해 알아보겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> TS_기본기 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript 설치 및 설정</title>
      <link href="/typescript/basic/1/"/>
      <url>/typescript/basic/1/</url>
      
        <content type="html"><![CDATA[<h1 id="TypeScript-설치-및-설정"><a href="#TypeScript-설치-및-설정" class="headerlink" title="TypeScript 설치 및 설정"></a>TypeScript 설치 및 설정</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 TypeScript를 설치하고 설정하는 방법에 대해 알아보겠습니다.<br>TypeScript는 JavaScript의 상위 집합으로, 정적 타입을 추가하여 코드의 안정성과 유지보수성을 높이는 언어입니다.</p><h2 id="TypeScript-설치"><a href="#TypeScript-설치" class="headerlink" title="TypeScript 설치"></a>TypeScript 설치</h2><h3 id="1-Node-js와-npm-설치"><a href="#1-Node-js와-npm-설치" class="headerlink" title="1. Node.js와 npm 설치"></a>1. Node.js와 npm 설치</h3><p>TypeScript를 사용하려면 먼저 Node.js와 npm(Node Package Manager)이 필요합니다. <a href="https://nodejs.org/">Node.js 공식 웹사이트</a>에서 설치 파일을 다운로드하여 설치합니다. 설치가 완료되면 터미널 또는 명령 프롬프트를 열고 다음 명령어로 버전을 확인합니다:</p><pre><code class="highlight bash">node -vnpm -v</code></pre><h3 id="2-TypeScript-설치"><a href="#2-TypeScript-설치" class="headerlink" title="2. TypeScript 설치"></a>2. TypeScript 설치</h3><p>npm을 사용하여 TypeScript를 전역으로 설치합니다:</p><pre><code class="highlight bash">npm install -g typescript</code></pre><p>설치가 완료되면 다음 명령어로 TypeScript 버전을 확인합니다:</p><pre><code class="highlight bash">tsc -v</code></pre><h2 id="TypeScript-프로젝트-설정"><a href="#TypeScript-프로젝트-설정" class="headerlink" title="TypeScript 프로젝트 설정"></a>TypeScript 프로젝트 설정</h2><h3 id="1-프로젝트-초기화"><a href="#1-프로젝트-초기화" class="headerlink" title="1. 프로젝트 초기화"></a>1. 프로젝트 초기화</h3><p>새로운 TypeScript 프로젝트를 생성하기 위해 디렉토리를 만들고 초기화합니다:</p><pre><code class="highlight bash"><span class="built_in">mkdir</span> my-typescript-project<span class="built_in">cd</span> my-typescript-projectnpm init -y</code></pre><h3 id="2-TypeScript-설정-파일-생성"><a href="#2-TypeScript-설정-파일-생성" class="headerlink" title="2. TypeScript 설정 파일 생성"></a>2. TypeScript 설정 파일 생성</h3><p>TypeScript 설정 파일인 <code>tsconfig.json</code>을 생성합니다. 이 파일은 TypeScript 컴파일러 옵션을 설정하는 데 사용됩니다:</p><pre><code class="highlight bash">tsc --init</code></pre><p><code>tsconfig.json</code> 파일이 생성되며, 기본 설정이 포함됩니다. 주요 설정 옵션은 다음과 같습니다:</p><pre><code class="highlight json"><span class="punctuation">&#123;</span>  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;es6&quot;</span><span class="punctuation">,</span> <span class="comment">// JavaScript 버전</span>    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;commonjs&quot;</span><span class="punctuation">,</span> <span class="comment">// 모듈 시스템</span>    <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 엄격한 타입 검사</span>    <span class="attr">&quot;esModuleInterop&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// ES 모듈 호환성</span>    <span class="attr">&quot;skipLibCheck&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 라이브러리 타입 검사 생략</span>    <span class="attr">&quot;forceConsistentCasingInFileNames&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span> <span class="comment">// 파일명 대소문자 일관성 강제</span>  <span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></code></pre><h2 id="TypeScript-코드-작성-및-컴파일"><a href="#TypeScript-코드-작성-및-컴파일" class="headerlink" title="TypeScript 코드 작성 및 컴파일"></a>TypeScript 코드 작성 및 컴파일</h2><h3 id="1-TypeScript-파일-작성"><a href="#1-TypeScript-파일-작성" class="headerlink" title="1. TypeScript 파일 작성"></a>1. TypeScript 파일 작성</h3><p><code>src</code> 디렉토리를 만들고, 그 안에 <code>index.ts</code> 파일을 생성합니다:</p><pre><code class="highlight bash"><span class="built_in">mkdir</span> src<span class="built_in">touch</span> src/index.ts</code></pre><p><code>src/index.ts</code> 파일에 간단한 TypeScript 코드를 작성합니다:</p><pre><code class="highlight typescript"><span class="comment">// src/index.ts</span><span class="keyword">const</span> <span class="attr">greeting</span>: <span class="built_in">string</span> = <span class="string">&quot;Hello, TypeScript!&quot;</span>;<span class="variable language_">console</span>.<span class="title function_">log</span>(greeting);</code></pre><h3 id="2-TypeScript-코드-컴파일"><a href="#2-TypeScript-코드-컴파일" class="headerlink" title="2. TypeScript 코드 컴파일"></a>2. TypeScript 코드 컴파일</h3><p>다음 명령어를 사용하여 TypeScript 코드를 컴파일합니다:</p><pre><code class="highlight bash">tsc</code></pre><p>컴파일이 완료되면 <code>dist</code> 디렉토리에 JavaScript 파일이 생성됩니다:</p><pre><code class="highlight bash">dist/└── index.js</code></pre><h3 id="3-컴파일된-코드-실행"><a href="#3-컴파일된-코드-실행" class="headerlink" title="3. 컴파일된 코드 실행"></a>3. 컴파일된 코드 실행</h3><p>다음 명령어를 사용하여 컴파일된 JavaScript 코드를 실행합니다:</p><pre><code class="highlight bash">node dist/index.js</code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 TypeScript를 설치하고, 프로젝트를 설정하는 방법을 알아보았습니다. TypeScript는 정적 타입을 추가하여 코드의 안정성과 유지보수성을 높이는 데 큰 도움이 됩니다.<br>TypeScript를 사용하여 더욱 안전하고 효율적인 코드를 작성해보세요!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> TS_기본기 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript 고급 제네릭 (Advanced Generics)</title>
      <link href="/typescript/special/9/"/>
      <url>/typescript/special/9/</url>
      
        <content type="html"><![CDATA[<h1 id="TypeScript-고급-제네릭-Advanced-Generics"><a href="#TypeScript-고급-제네릭-Advanced-Generics" class="headerlink" title="TypeScript 고급 제네릭 (Advanced Generics)"></a>TypeScript 고급 제네릭 (Advanced Generics)</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 TypeScript에서 더 복잡하고 강력한 타입을 정의할 수 있는 <strong>고급 제네릭</strong>에 대해 알아보겠습니다. 고급 제네릭 패턴과 재귀 제네릭, 그리고 제네릭 조건부 타입을 중심으로 알아보겠습니다.</p><h2 id="고급-제네릭-패턴"><a href="#고급-제네릭-패턴" class="headerlink" title="고급 제네릭 패턴"></a>고급 제네릭 패턴</h2><h3 id="고급-제네릭의-개념"><a href="#고급-제네릭의-개념" class="headerlink" title="고급 제네릭의 개념"></a>고급 제네릭의 개념</h3><p>제네릭은 함수나 클래스, 인터페이스 등에서 사용하는 타입 매개변수를 정의하는 방법입니다. 이를 통해 코드의 재사용성을 높이고, 다양한 타입을 처리할 수 있습니다. 고급 제네릭 패턴은 복잡한 타입 변환과 조건부 로직을 포함하여 더욱 강력한 타입을 정의하는 데 사용됩니다.</p><h3 id="고급-제네릭-사용-예제"><a href="#고급-제네릭-사용-예제" class="headerlink" title="고급 제네릭 사용 예제"></a>고급 제네릭 사용 예제</h3><p>RPG 게임에서 캐릭터의 상태를 저장하는 시스템을 생각해봅시다. 캐릭터는 다양한 속성을 가질 수 있으며, 각 속성은 여러 타입으로 정의될 수 있습니다. 고급 제네릭을 사용하여 이와 같은 복잡한 상태를 안전하게 관리할 수 있습니다.</p><pre><code class="highlight typescript"><span class="keyword">interface</span> <span class="title class_">CharacterAttributes</span>&lt;T&gt; &#123;  <span class="attr">strength</span>: T;  <span class="attr">agility</span>: T;  <span class="attr">intelligence</span>: T;&#125;<span class="keyword">function</span> createCharacter&lt;T&gt;(  <span class="attr">attributes</span>: <span class="title class_">CharacterAttributes</span>&lt;T&gt;): <span class="title class_">CharacterAttributes</span>&lt;T&gt; &#123;  <span class="keyword">return</span> attributes;&#125;<span class="keyword">const</span> warriorAttributes = createCharacter&lt;<span class="built_in">number</span>&gt;(&#123;  <span class="attr">strength</span>: <span class="number">90</span>,  <span class="attr">agility</span>: <span class="number">75</span>,  <span class="attr">intelligence</span>: <span class="number">50</span>,&#125;);<span class="keyword">const</span> mageAttributes = createCharacter&lt;<span class="built_in">string</span>&gt;(&#123;  <span class="attr">strength</span>: <span class="string">&quot;low&quot;</span>,  <span class="attr">agility</span>: <span class="string">&quot;medium&quot;</span>,  <span class="attr">intelligence</span>: <span class="string">&quot;high&quot;</span>,&#125;);<span class="variable language_">console</span>.<span class="title function_">log</span>(warriorAttributes); <span class="comment">// &#123; strength: 90, agility: 75, intelligence: 50 &#125;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(mageAttributes); <span class="comment">// &#123; strength: &#x27;low&#x27;, agility: &#x27;medium&#x27;, intelligence: &#x27;high&#x27; &#125;</span></code></pre><p>위 예제에서는 <code>CharacterAttributes&lt;T&gt;</code> 인터페이스가 제네릭을 사용하여 캐릭터의 속성 타입을 동적으로 정의합니다. <code>createCharacter</code> 함수는 특정 타입의 속성을 받아들이고, 해당 타입으로 정의된 속성 객체를 반환합니다.</p><h2 id="재귀-제네릭-Recursive-Generics"><a href="#재귀-제네릭-Recursive-Generics" class="headerlink" title="재귀 제네릭 (Recursive Generics)"></a>재귀 제네릭 (Recursive Generics)</h2><h3 id="재귀-제네릭의-개념"><a href="#재귀-제네릭의-개념" class="headerlink" title="재귀 제네릭의 개념"></a>재귀 제네릭의 개념</h3><p>재귀 제네릭은 제네릭 타입이 자기 자신을 참조하는 패턴입니다. 이 패턴은 주로 중첩된 구조를 처리하거나 재귀적인 데이터 구조를 정의할 때 사용됩니다.</p><h3 id="재귀-제네릭-사용-예제"><a href="#재귀-제네릭-사용-예제" class="headerlink" title="재귀 제네릭 사용 예제"></a>재귀 제네릭 사용 예제</h3><p>RPG 게임에서 캐릭터의 장비를 관리하는 시스템을 생각해봅시다. 장비는 다른 장비를 포함할 수 있으며, 이러한 중첩된 구조를 재귀 제네릭으로 정의할 수 있습니다.</p><pre><code class="highlight typescript"><span class="keyword">interface</span> <span class="title class_">Equipment</span>&lt;T&gt; &#123;  <span class="attr">item</span>: <span class="built_in">string</span>;  upgrades?: T;&#125;<span class="keyword">type</span> <span class="title class_">Sword</span> = <span class="title class_">Equipment</span>&lt;<span class="title class_">Equipment</span>&lt;<span class="title class_">Equipment</span>&lt;<span class="literal">null</span>&gt;&gt;&gt;;<span class="keyword">const</span> <span class="attr">mySword</span>: <span class="title class_">Sword</span> = &#123;  <span class="attr">item</span>: <span class="string">&quot;Basic Sword&quot;</span>,  <span class="attr">upgrades</span>: &#123;    <span class="attr">item</span>: <span class="string">&quot;Sharpened Blade&quot;</span>,    <span class="attr">upgrades</span>: &#123;      <span class="attr">item</span>: <span class="string">&quot;Enchanted Handle&quot;</span>,      <span class="attr">upgrades</span>: <span class="literal">null</span>,    &#125;,  &#125;,&#125;;<span class="variable language_">console</span>.<span class="title function_">log</span>(mySword);</code></pre><p>위 예제에서 <code>Equipment&lt;T&gt;</code> 인터페이스는 재귀적으로 자신을 참조하여 중첩된 장비 구조를 정의합니다. <code>mySword</code> 객체는 기본 검에서 시작해 여러 번 업그레이드된 장비를 표현합니다.</p><h2 id="제네릭-조건부-타입-Conditional-Types"><a href="#제네릭-조건부-타입-Conditional-Types" class="headerlink" title="제네릭 조건부 타입 (Conditional Types)"></a>제네릭 조건부 타입 (Conditional Types)</h2><h3 id="제네릭-조건부-타입의-개념"><a href="#제네릭-조건부-타입의-개념" class="headerlink" title="제네릭 조건부 타입의 개념"></a>제네릭 조건부 타입의 개념</h3><p>제네릭 조건부 타입은 조건에 따라 다른 타입을 선택할 수 있는 기능을 제공합니다. 이는 <code>T extends U ? X : Y</code> 형태로 작성되며, 타입 <code>T</code>가 <code>U</code>를 상속하거나 호환되면 <code>X</code> 타입을, 그렇지 않으면 <code>Y</code> 타입을 반환합니다.</p><h3 id="제네릭-조건부-타입-사용-예제"><a href="#제네릭-조건부-타입-사용-예제" class="headerlink" title="제네릭 조건부 타입 사용 예제"></a>제네릭 조건부 타입 사용 예제</h3><p>RPG 게임에서 캐릭터가 착용할 수 있는 장비의 타입을 제한하는 시스템을 생각해봅시다. 특정 클래스만 착용할 수 있는 장비를 정의하고, 조건부 타입을 사용해 이를 구현할 수 있습니다.</p><pre><code class="highlight typescript"><span class="keyword">type</span> <span class="title class_">WarriorEquipment</span> = <span class="string">&quot;Sword&quot;</span> | <span class="string">&quot;Shield&quot;</span>;<span class="keyword">type</span> <span class="title class_">MageEquipment</span> = <span class="string">&quot;Staff&quot;</span> | <span class="string">&quot;Robe&quot;</span>;<span class="keyword">type</span> <span class="title class_">EquipmentFor</span>&lt;T&gt; = T <span class="keyword">extends</span> <span class="string">&quot;Warrior&quot;</span> ? <span class="title class_">WarriorEquipment</span> : <span class="title class_">MageEquipment</span>;<span class="keyword">function</span> equipCharacter&lt;T <span class="keyword">extends</span> <span class="string">&quot;Warrior&quot;</span> | <span class="string">&quot;Mage&quot;</span>&gt;(  <span class="attr">characterClass</span>: T,  <span class="attr">item</span>: <span class="title class_">EquipmentFor</span>&lt;T&gt;) &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;characterClass&#125;</span> equips <span class="subst">$&#123;item&#125;</span>.`</span>);&#125;<span class="title function_">equipCharacter</span>(<span class="string">&quot;Warrior&quot;</span>, <span class="string">&quot;Sword&quot;</span>); <span class="comment">// Warrior equips Sword.</span><span class="title function_">equipCharacter</span>(<span class="string">&quot;Mage&quot;</span>, <span class="string">&quot;Staff&quot;</span>); <span class="comment">// Mage equips Staff.</span><span class="comment">// Error: &quot;Mage&quot; 클래스는 &quot;Sword&quot;를 장착할 수 없습니다.</span><span class="comment">// equipCharacter(&quot;Mage&quot;, &quot;Sword&quot;);</span></code></pre><p>위 예제에서 <code>EquipmentFor&lt;T&gt;</code> 타입은 제네릭 조건부 타입을 사용하여 캐릭터 클래스에 따라 적절한 장비 타입을 선택합니다. <code>equipCharacter</code> 함수는 캐릭터 클래스에 맞는 장비만 착용할 수 있도록 제한합니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 TypeScript에서 더 복잡하고 강력한 타입을 정의할 수 있는 <strong>고급 제네릭 패턴</strong>과 <strong>재귀 제네릭</strong>, 그리고 <strong>제네릭 조건부 타입</strong>에 대해 알아보았습니다. 이 기능들은 타입 안전성을 극대화하면서도 유연한 코드를 작성할 수 있게 도와줍니다. TypeScript의 제네릭을 잘 활용하여 더욱 견고하고 확장 가능한 코드를 작성해보세요!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> TS_필살기 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>데이터 정의 언어(DDL)</title>
      <link href="/database/3/"/>
      <url>/database/3/</url>
      
        <content type="html"><![CDATA[<h1 id="데이터-정의-언어-DDL"><a href="#데이터-정의-언어-DDL" class="headerlink" title="데이터 정의 언어(DDL)"></a>데이터 정의 언어(DDL)</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 데이터베이스에서 데이터 정의 언어(DDL, Data Definition Language)에 대해 알아보겠습니다. DDL은 데이터베이스 구조를 정의하고 수정하는 데 사용되는 명령어입니다. 테이블 생성, 수정, 삭제와 같은 작업을 DDL을 통해 수행할 수 있습니다.</p><h2 id="DDL-개요"><a href="#DDL-개요" class="headerlink" title="DDL 개요"></a>DDL 개요</h2><h3 id="DDL의-정의와-역할"><a href="#DDL의-정의와-역할" class="headerlink" title="DDL의 정의와 역할"></a>DDL의 정의와 역할</h3><p>**데이터 정의 언어(DDL)**는 데이터베이스의 스키마를 정의하거나 수정하는 데 사용되는 SQL 명령어입니다. DDL 명령어는 테이블, 인덱스, 뷰, 스키마 등의 데이터베이스 객체를 생성, 수정, 삭제하는 데 사용됩니다. DDL은 데이터의 구조를 정의하므로 데이터베이스의 근간을 형성하는 중요한 역할을 합니다.</p><h3 id="주요-DDL-명령어"><a href="#주요-DDL-명령어" class="headerlink" title="주요 DDL 명령어"></a>주요 DDL 명령어</h3><ul><li><strong>CREATE</strong>: 데이터베이스 객체를 생성합니다.</li><li><strong>ALTER</strong>: 데이터베이스 객체를 수정합니다.</li><li><strong>DROP</strong>: 데이터베이스 객체를 삭제합니다.</li></ul><h2 id="테이블-생성-및-수정"><a href="#테이블-생성-및-수정" class="headerlink" title="테이블 생성 및 수정"></a>테이블 생성 및 수정</h2><h3 id="테이블-생성-CREATE-TABLE"><a href="#테이블-생성-CREATE-TABLE" class="headerlink" title="테이블 생성 (CREATE TABLE)"></a>테이블 생성 (CREATE TABLE)</h3><p>테이블을 생성하기 위해 <code>CREATE TABLE</code> 명령어를 사용합니다. RPG 게임에서 캐릭터 정보를 저장하는 <code>characters</code> 테이블을 생성해보겠습니다.</p><pre><code class="highlight sql"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> characters (    id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,    name <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,    class <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,    level <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">1</span>,    health <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">100</span>);</code></pre><p>위 명령어는 <code>characters</code> 테이블을 생성하며, 캐릭터의 ID, 이름, 클래스, 레벨, 체력 정보를 저장합니다. <code>id</code> 열은 기본 키(Primary Key)로 설정되어 있으며 자동 증가(AUTO_INCREMENT)합니다.</p><h3 id="테이블-수정-ALTER-TABLE"><a href="#테이블-수정-ALTER-TABLE" class="headerlink" title="테이블 수정 (ALTER TABLE)"></a>테이블 수정 (ALTER TABLE)</h3><p>테이블 구조를 수정하기 위해 <code>ALTER TABLE</code> 명령어를 사용합니다. 예를 들어, <code>characters</code> 테이블에 <code>mana</code> 열을 추가해보겠습니다.</p><pre><code class="highlight sql"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> characters <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> mana <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">50</span>;</code></pre><p>위 명령어는 <code>characters</code> 테이블에 <code>mana</code> 열을 추가하며 기본값을 50으로 설정합니다.</p><h3 id="테이블-삭제-DROP-TABLE"><a href="#테이블-삭제-DROP-TABLE" class="headerlink" title="테이블 삭제 (DROP TABLE)"></a>테이블 삭제 (DROP TABLE)</h3><p>테이블을 삭제하기 위해 <code>DROP TABLE</code> 명령어를 사용합니다. <code>characters</code> 테이블을 삭제해보겠습니다.</p><pre><code class="highlight sql"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> characters;</code></pre><p>위 명령어는 <code>characters</code> 테이블을 데이터베이스에서 완전히 삭제합니다.</p><h2 id="제약-조건"><a href="#제약-조건" class="headerlink" title="제약 조건"></a>제약 조건</h2><h3 id="기본-키-Primary-Key-와-외래-키-Foreign-Key"><a href="#기본-키-Primary-Key-와-외래-키-Foreign-Key" class="headerlink" title="기본 키(Primary Key)와 외래 키(Foreign Key)"></a>기본 키(Primary Key)와 외래 키(Foreign Key)</h3><p>**기본 키(Primary Key)**는 테이블의 각 행을 고유하게 식별하는 열입니다. 기본 키는 NULL 값을 가질 수 없으며, 각 값이 유일해야 합니다.</p><p>**외래 키(Foreign Key)**는 다른 테이블의 기본 키를 참조하는 열입니다. 외래 키는 두 테이블 간의 관계를 정의하며, 데이터 무결성을 유지하는 데 도움을 줍니다.</p><p>예를 들어, <code>characters</code> 테이블과 <code>inventory</code> 테이블 간의 관계를 정의해보겠습니다.</p><pre><code class="highlight sql"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> inventory (    item_id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,    character_id <span class="type">INT</span>,    item_name <span class="type">VARCHAR</span>(<span class="number">50</span>),    quantity <span class="type">INT</span>,    <span class="keyword">FOREIGN</span> KEY (character_id) <span class="keyword">REFERENCES</span> characters(id));</code></pre><p>위 명령어는 <code>inventory</code> 테이블을 생성하며, <code>character_id</code> 열은 <code>characters</code> 테이블의 <code>id</code> 열을 참조하는 외래 키입니다.</p><h3 id="유일성-Unique-NOT-NULL-CHECK-제약-조건"><a href="#유일성-Unique-NOT-NULL-CHECK-제약-조건" class="headerlink" title="유일성(Unique), NOT NULL, CHECK 제약 조건"></a>유일성(Unique), NOT NULL, CHECK 제약 조건</h3><p><strong>유일성(Unique)</strong> 제약 조건은 열의 값이 고유해야 함을 보장합니다.</p><pre><code class="highlight sql"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> players (    player_id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,    username <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">UNIQUE</span>,    email <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">UNIQUE</span>);</code></pre><p>위 명령어는 <code>players</code> 테이블을 생성하며, <code>username</code>과 <code>email</code> 열은 유일성 제약 조건이 적용됩니다.</p><p><strong>NOT NULL</strong> 제약 조건은 열이 NULL 값을 가질 수 없음을 보장합니다.</p><pre><code class="highlight sql"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> guilds (    guild_id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,    guild_name <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>);</code></pre><p>위 명령어는 <code>guilds</code> 테이블을 생성하며, <code>guild_name</code> 열은 NULL 값을 가질 수 없습니다.</p><p><strong>CHECK</strong> 제약 조건은 열의 값이 특정 조건을 만족해야 함을 보장합니다.</p><pre><code class="highlight sql"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> quests (    quest_id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,    quest_name <span class="type">VARCHAR</span>(<span class="number">100</span>),    difficulty_level <span class="type">INT</span>,    <span class="keyword">CHECK</span> (difficulty_level <span class="keyword">BETWEEN</span> <span class="number">1</span> <span class="keyword">AND</span> <span class="number">10</span>));</code></pre><p>위 명령어는 <code>quests</code> 테이블을 생성하며, <code>difficulty_level</code> 열은 1과 10 사이의 값을 가져야 합니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 데이터 정의 언어(DDL)에 대해 알아보았습니다. DDL은 데이터베이스 구조를 정의하고 수정하는 데 사용되며, 테이블 생성, 수정, 삭제와 같은 작업을 수행할 수 있습니다. 또한, 기본 키, 외래 키, 유일성, NOT NULL, CHECK 등의 제약 조건을 통해 데이터 무결성을 유지할 수 있습니다. 이를 통해 효율적이고 신뢰할 수 있는 데이터베이스를 설계할 수 있습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> database </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript Intersection Types와 Union Types</title>
      <link href="/typescript/special/8/"/>
      <url>/typescript/special/8/</url>
      
        <content type="html"><![CDATA[<h1 id="TypeScript-Intersection-Types와-Union-Types"><a href="#TypeScript-Intersection-Types와-Union-Types" class="headerlink" title="TypeScript Intersection Types와 Union Types"></a>TypeScript Intersection Types와 Union Types</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 TypeScript의 <strong>Intersection Types</strong>(교차 타입)과 <strong>Union Types</strong>(합집합 타입)에 대해 알아보겠습니다. 이 두 가지 타입 시스템은 TypeScript에서 복잡한 타입을 정의하고 활용하는 데 매우 유용합니다.</p><h2 id="Intersection-Types-교차-타입"><a href="#Intersection-Types-교차-타입" class="headerlink" title="Intersection Types (교차 타입)"></a>Intersection Types (교차 타입)</h2><h3 id="Intersection-Types의-개념"><a href="#Intersection-Types의-개념" class="headerlink" title="Intersection Types의 개념"></a>Intersection Types의 개념</h3><p>Intersection Type(교차 타입)은 두 개 이상의 타입을 결합하여 모든 타입의 속성과 메서드를 동시에 가진 새로운 타입을 생성하는 것을 의미합니다. 말 그대로 타입들의 교차점을 나타내며, 여러 타입의 모든 특성을 포함하는 단일 타입을 정의할 수 있습니다.</p><h3 id="Intersection-Types-사용-예제"><a href="#Intersection-Types-사용-예제" class="headerlink" title="Intersection Types 사용 예제"></a>Intersection Types 사용 예제</h3><p>RPG 게임에서 전사(Warrior)와 마법사(Mage)를 결합한 마법 전사(Magic Warrior) 캐릭터를 정의한다고 가정해봅시다.</p><pre><code class="highlight typescript"><span class="keyword">interface</span> <span class="title class_">Warrior</span> &#123;  <span class="attr">name</span>: <span class="built_in">string</span>;  <span class="attr">weapon</span>: <span class="built_in">string</span>;  <span class="attr">attack</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span>;&#125;<span class="keyword">interface</span> <span class="title class_">Mage</span> &#123;  <span class="attr">name</span>: <span class="built_in">string</span>;  <span class="attr">spell</span>: <span class="built_in">string</span>;  <span class="attr">castSpell</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span>;&#125;<span class="keyword">type</span> <span class="title class_">MagicWarrior</span> = <span class="title class_">Warrior</span> &amp; <span class="title class_">Mage</span>;<span class="keyword">const</span> <span class="attr">character</span>: <span class="title class_">MagicWarrior</span> = &#123;  <span class="attr">name</span>: <span class="string">&quot;Aragon&quot;</span>,  <span class="attr">weapon</span>: <span class="string">&quot;Sword&quot;</span>,  <span class="attr">spell</span>: <span class="string">&quot;Fireball&quot;</span>,  <span class="title function_">attack</span>(<span class="params"></span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> attacks with <span class="subst">$&#123;<span class="variable language_">this</span>.weapon&#125;</span>!`</span>);  &#125;,  <span class="title function_">castSpell</span>(<span class="params"></span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> casts <span class="subst">$&#123;<span class="variable language_">this</span>.spell&#125;</span>!`</span>);  &#125;,&#125;;character.<span class="title function_">attack</span>(); <span class="comment">// Aragon attacks with Sword!</span>character.<span class="title function_">castSpell</span>(); <span class="comment">// Aragon casts Fireball!</span></code></pre><p>위 예제에서 <code>MagicWarrior</code> 타입은 <code>Warrior</code>와 <code>Mage</code>의 모든 속성과 메서드를 포함합니다. <code>character</code> 객체는 전사로서의 공격 능력과 마법사로서의 주문 능력을 동시에 가지게 됩니다.</p><h3 id="Intersection-Types의-활용"><a href="#Intersection-Types의-활용" class="headerlink" title="Intersection Types의 활용"></a>Intersection Types의 활용</h3><p>교차 타입은 두 개 이상의 인터페이스나 타입을 결합하여 보다 복잡한 객체를 정의하는 데 유용합니다. 이는 특히 여러 기능을 결합한 객체나 클래스에서 많이 사용됩니다.</p><h2 id="Union-Types-합집합-타입"><a href="#Union-Types-합집합-타입" class="headerlink" title="Union Types (합집합 타입)"></a>Union Types (합집합 타입)</h2><h3 id="Union-Types의-개념"><a href="#Union-Types의-개념" class="headerlink" title="Union Types의 개념"></a>Union Types의 개념</h3><p>Union Type(합집합 타입)은 여러 타입 중 하나의 타입을 가질 수 있는 변수를 정의할 때 사용됩니다. 이는 <code>|</code> 연산자를 사용하여 타입들을 연결하며, 변수는 해당 타입들 중 하나의 타입을 가질 수 있습니다.</p><h3 id="Union-Types-사용-예제"><a href="#Union-Types-사용-예제" class="headerlink" title="Union Types 사용 예제"></a>Union Types 사용 예제</h3><p>RPG 게임에서 캐릭터가 무기나 마법을 사용할 수 있도록 정의해봅시다.</p><pre><code class="highlight typescript"><span class="keyword">type</span> <span class="title class_">Weapon</span> = <span class="string">&quot;Sword&quot;</span> | <span class="string">&quot;Bow&quot;</span> | <span class="string">&quot;Dagger&quot;</span>;<span class="keyword">type</span> <span class="title class_">Spell</span> = <span class="string">&quot;Fireball&quot;</span> | <span class="string">&quot;IceBlast&quot;</span> | <span class="string">&quot;LightningStrike&quot;</span>;<span class="keyword">type</span> <span class="title class_">Action</span> = <span class="title class_">Weapon</span> | <span class="title class_">Spell</span>;<span class="keyword">function</span> <span class="title function_">performAction</span>(<span class="params"><span class="attr">action</span>: <span class="title class_">Action</span></span>) &#123;  <span class="keyword">if</span> (<span class="keyword">typeof</span> action === <span class="string">&quot;string&quot;</span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`The character uses <span class="subst">$&#123;action&#125;</span>.`</span>);  &#125;&#125;<span class="title function_">performAction</span>(<span class="string">&quot;Sword&quot;</span>); <span class="comment">// The character uses Sword.</span><span class="title function_">performAction</span>(<span class="string">&quot;Fireball&quot;</span>); <span class="comment">// The character uses Fireball.</span></code></pre><p>위 예제에서 <code>Action</code> 타입은 <code>Weapon</code>과 <code>Spell</code> 타입의 Union Type으로 정의되었습니다. <code>performAction</code> 함수는 무기나 주문 중 하나를 사용할 수 있으며, 이에 따라 적절한 동작을 수행합니다.</p><h3 id="Union-Types의-활용"><a href="#Union-Types의-활용" class="headerlink" title="Union Types의 활용"></a>Union Types의 활용</h3><p>합집합 타입은 함수의 매개변수나 변수에 여러 가지 타입을 허용해야 할 때 유용합니다. 이는 조건에 따라 다른 타입을 처리하거나, 함수 오버로딩을 단순화하는 데 도움을 줍니다.</p><h2 id="복잡한-타입-정의와-활용"><a href="#복잡한-타입-정의와-활용" class="headerlink" title="복잡한 타입 정의와 활용"></a>복잡한 타입 정의와 활용</h2><p>Intersection Type과 Union Type은 함께 사용하여 매우 복잡한 타입을 정의할 수 있습니다. 예를 들어, 전사나 마법사 중 하나일 수 있으며, 두 가지 능력을 동시에 가진 캐릭터를 정의할 수 있습니다.</p><pre><code class="highlight typescript"><span class="keyword">type</span> <span class="title class_">Character</span> = <span class="title class_">Warrior</span> | <span class="title class_">Mage</span> | (<span class="title class_">Warrior</span> &amp; <span class="title class_">Mage</span>);<span class="keyword">const</span> <span class="attr">character1</span>: <span class="title class_">Character</span> = &#123;  <span class="attr">name</span>: <span class="string">&quot;Aragon&quot;</span>,  <span class="attr">weapon</span>: <span class="string">&quot;Sword&quot;</span>,  <span class="title function_">attack</span>(<span class="params"></span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> attacks with <span class="subst">$&#123;<span class="variable language_">this</span>.weapon&#125;</span>!`</span>);  &#125;,&#125;;<span class="keyword">const</span> <span class="attr">character2</span>: <span class="title class_">Character</span> = &#123;  <span class="attr">name</span>: <span class="string">&quot;Gandalf&quot;</span>,  <span class="attr">spell</span>: <span class="string">&quot;LightningStrike&quot;</span>,  <span class="title function_">castSpell</span>(<span class="params"></span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> casts <span class="subst">$&#123;<span class="variable language_">this</span>.spell&#125;</span>!`</span>);  &#125;,&#125;;<span class="keyword">const</span> <span class="attr">character3</span>: <span class="title class_">Character</span> = &#123;  <span class="attr">name</span>: <span class="string">&quot;Merlin&quot;</span>,  <span class="attr">weapon</span>: <span class="string">&quot;Staff&quot;</span>,  <span class="attr">spell</span>: <span class="string">&quot;IceBlast&quot;</span>,  <span class="title function_">attack</span>(<span class="params"></span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> attacks with <span class="subst">$&#123;<span class="variable language_">this</span>.weapon&#125;</span>!`</span>);  &#125;,  <span class="title function_">castSpell</span>(<span class="params"></span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> casts <span class="subst">$&#123;<span class="variable language_">this</span>.spell&#125;</span>!`</span>);  &#125;,&#125;;character1.<span class="title function_">attack</span>(); <span class="comment">// Aragon attacks with Sword!</span>character2.<span class="title function_">castSpell</span>(); <span class="comment">// Gandalf casts LightningStrike!</span>character3.<span class="title function_">attack</span>(); <span class="comment">// Merlin attacks with Staff!</span>character3.<span class="title function_">castSpell</span>(); <span class="comment">// Merlin casts IceBlast!</span></code></pre><p>위 예제에서 <code>Character</code> 타입은 <code>Warrior</code>, <code>Mage</code>, 또는 두 타입을 결합한 교차 타입이 될 수 있습니다. 이를 통해 다양한 형태의 캐릭터를 정의하고 사용할 수 있습니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 TypeScript에서 중요한 개념인 <strong>Intersection Types</strong>과 <strong>Union Types</strong>에 대해 알아보았습니다. 이 두 타입 시스템을 활용하면 복잡한 타입을 유연하게 정의하고, 코드의 안전성과 가독성을 높일 수 있습니다. TypeScript의 강력한 타입 시스템을 잘 활용하여 더 안전하고 견고한 코드를 작성해보세요!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> TS_필살기 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>데이터베이스 모델(RDB vs NOSQL)</title>
      <link href="/database/2/"/>
      <url>/database/2/</url>
      
        <content type="html"><![CDATA[<h1 id="데이터베이스-모델"><a href="#데이터베이스-모델" class="headerlink" title="데이터베이스 모델"></a>데이터베이스 모델</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 데이터베이스 모델에 대해 알아보겠습니다. 데이터베이스 모델에는 주로 관계형 데이터베이스와 NoSQL 데이터베이스가 있습니다. 이 두 가지 모델의 개념, 구조, 주요 시스템, 장단점을 비교하여 알아보겠습니다.</p><h2 id="관계형-데이터베이스-Relational-Database"><a href="#관계형-데이터베이스-Relational-Database" class="headerlink" title="관계형 데이터베이스(Relational Database)"></a>관계형 데이터베이스(Relational Database)</h2><h3 id="관계형-데이터베이스의-개념과-구조"><a href="#관계형-데이터베이스의-개념과-구조" class="headerlink" title="관계형 데이터베이스의 개념과 구조"></a>관계형 데이터베이스의 개념과 구조</h3><p>**관계형 데이터베이스(Relational Database)**는 데이터를 테이블 형식으로 저장하고, 테이블 간의 관계를 정의하여 데이터를 관리하는 데이터베이스입니다. 각 테이블은 행(Row)과 열(Column)로 구성되며, 행은 데이터 항목을 나타내고 열은 데이터 속성을 나타냅니다.</p><p>관계형 데이터베이스의 핵심 개념은 <strong>관계</strong>입니다. 테이블 간의 관계를 정의하여 데이터 중복을 최소화하고 데이터 무결성을 유지할 수 있습니다.</p><h3 id="주요-관계형-데이터베이스-시스템"><a href="#주요-관계형-데이터베이스-시스템" class="headerlink" title="주요 관계형 데이터베이스 시스템"></a>주요 관계형 데이터베이스 시스템</h3><ul><li><strong>MySQL</strong>: 오픈 소스 관계형 데이터베이스 관리 시스템(RDBMS)으로, 웹 애플리케이션에서 많이 사용됩니다.</li><li><strong>PostgreSQL</strong>: 객체-관계형 데이터베이스 관리 시스템으로, 고급 기능과 확장성을 제공합니다.</li><li><strong>Oracle Database</strong>: 기업 환경에서 많이 사용되는 상용 관계형 데이터베이스 관리 시스템입니다.</li><li><strong>Microsoft SQL Server</strong>: 마이크로소프트에서 개발한 관계형 데이터베이스 관리 시스템으로, 윈도우 환경에서 주로 사용됩니다.</li></ul><h3 id="관계형-데이터베이스의-장점과-단점"><a href="#관계형-데이터베이스의-장점과-단점" class="headerlink" title="관계형 데이터베이스의 장점과 단점"></a>관계형 데이터베이스의 장점과 단점</h3><h4 id="장점"><a href="#장점" class="headerlink" title="장점"></a>장점</h4><ul><li><strong>데이터 무결성</strong>: 테이블 간의 관계를 통해 데이터 무결성을 유지할 수 있습니다.</li><li><strong>표준화된 쿼리 언어(SQL)</strong>: SQL을 사용하여 데이터를 쉽게 조회하고 조작할 수 있습니다.</li><li><strong>데이터 중복 최소화</strong>: 테이블 간의 관계를 통해 데이터 중복을 최소화할 수 있습니다.</li><li><strong>트랜잭션 관리</strong>: 트랜잭션을 통해 데이터의 일관성을 유지할 수 있습니다.</li></ul><h4 id="단점"><a href="#단점" class="headerlink" title="단점"></a>단점</h4><ul><li><strong>확장성 제한</strong>: 대규모 데이터와 높은 트래픽을 처리하는 데 한계가 있을 수 있습니다.</li><li><strong>복잡한 스키마 설계</strong>: 스키마를 설계하고 관리하는 데 복잡성이 있을 수 있습니다.</li></ul><h2 id="NoSQL-데이터베이스"><a href="#NoSQL-데이터베이스" class="headerlink" title="NoSQL 데이터베이스"></a>NoSQL 데이터베이스</h2><h3 id="NoSQL의-개념과-필요성"><a href="#NoSQL의-개념과-필요성" class="headerlink" title="NoSQL의 개념과 필요성"></a>NoSQL의 개념과 필요성</h3><p><strong>NoSQL</strong>은 비관계형 데이터베이스를 지칭하는 용어로, 전통적인 관계형 데이터베이스의 제약을 벗어나 다양한 데이터 모델을 지원합니다. NoSQL 데이터베이스는 대규모 데이터 처리, 비정형 데이터 저장, 고성능 요구 사항을 충족하기 위해 개발되었습니다.</p><h3 id="주요-NoSQL-데이터베이스-시스템"><a href="#주요-NoSQL-데이터베이스-시스템" class="headerlink" title="주요 NoSQL 데이터베이스 시스템"></a>주요 NoSQL 데이터베이스 시스템</h3><ul><li><strong>MongoDB</strong>: 문서 지향 데이터베이스로, JSON 형태의 데이터를 저장하고 관리합니다.</li><li><strong>Cassandra</strong>: 분산형 데이터베이스로, 높은 가용성과 확장성을 제공합니다.</li><li><strong>Redis</strong>: 키-값 저장소로, 빠른 데이터 접근이 필요한 애플리케이션에서 사용됩니다.</li><li><strong>CouchDB</strong>: 문서 지향 데이터베이스로, HTTP&#x2F;JSON API를 통해 접근할 수 있습니다.</li></ul><h3 id="NoSQL의-장점과-단점"><a href="#NoSQL의-장점과-단점" class="headerlink" title="NoSQL의 장점과 단점"></a>NoSQL의 장점과 단점</h3><h4 id="장점-1"><a href="#장점-1" class="headerlink" title="장점"></a>장점</h4><ul><li><strong>확장성</strong>: 수평 확장이 용이하여 대규모 데이터와 높은 트래픽을 처리할 수 있습니다.</li><li><strong>유연한 스키마</strong>: 정해진 스키마 없이 데이터 구조를 유연하게 변경할 수 있습니다.</li><li><strong>고성능</strong>: 빠른 데이터 접근과 쓰기 성능을 제공합니다.</li><li><strong>비정형 데이터 처리</strong>: 다양한 형태의 비정형 데이터를 저장하고 관리할 수 있습니다.</li></ul><h4 id="단점-1"><a href="#단점-1" class="headerlink" title="단점"></a>단점</h4><ul><li><strong>데이터 중복</strong>: 데이터 중복이 발생할 수 있으며, 데이터 무결성 관리가 어려울 수 있습니다.</li><li><strong>일관된 쿼리 언어 부족</strong>: 표준화된 쿼리 언어가 없어 각 데이터베이스마다 쿼리 방법이 다를 수 있습니다.</li><li><strong>복잡한 트랜잭션 관리</strong>: 관계형 데이터베이스와 같은 트랜잭션 관리를 제공하지 않을 수 있습니다.</li></ul><h3 id="NoSQL과-관계형-데이터베이스의-비교"><a href="#NoSQL과-관계형-데이터베이스의-비교" class="headerlink" title="NoSQL과 관계형 데이터베이스의 비교"></a>NoSQL과 관계형 데이터베이스의 비교</h3><table><thead><tr><th>특징</th><th>관계형 데이터베이스</th><th>NoSQL 데이터베이스</th></tr></thead><tbody><tr><td>데이터 모델</td><td>테이블 기반</td><td>문서, 키-값, 그래프, 컬럼 기반</td></tr><tr><td>스키마</td><td>고정된 스키마</td><td>유연한 스키마</td></tr><tr><td>쿼리 언어</td><td>SQL</td><td>데이터베이스마다 다름 (예: MongoDB의 MQL)</td></tr><tr><td>확장성</td><td>수직 확장 (서버 성능 향상)</td><td>수평 확장 (서버 추가)</td></tr><tr><td>트랜잭션</td><td>강력한 ACID 트랜잭션 지원</td><td>제한적인 트랜잭션 지원</td></tr><tr><td>데이터 무결성</td><td>높은 데이터 무결성 유지</td><td>데이터 무결성 유지 어려움</td></tr></tbody></table><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 데이터베이스 모델의 개념과 주요 시스템, 장단점에 대해 알아보았습니다. 관계형 데이터베이스와 NoSQL 데이터베이스는 각각의 특성과 용도가 다르며, 사용 목적에 따라 적절한 데이터베이스를 선택하는 것이 중요합니다.<br>다음 시간에는 데이터베이스 설계와 쿼리 작성에 대해 더 자세히 알아보겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> database </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>데이터베이스 개요</title>
      <link href="/database/1/"/>
      <url>/database/1/</url>
      
        <content type="html"><![CDATA[<h1 id="데이터베이스-개요"><a href="#데이터베이스-개요" class="headerlink" title="데이터베이스 개요"></a>데이터베이스 개요</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 데이터베이스의 개념과 중요성, 역사와 발전, 그리고 데이터베이스 관리 시스템(DBMS)의 역할에 대해 알아보겠습니다.<br>데이터베이스는 현대 정보 시스템의 핵심 요소로, 데이터의 효율적인 저장과 관리를 가능하게 합니다.</p><h2 id="데이터베이스란-무엇인가"><a href="#데이터베이스란-무엇인가" class="headerlink" title="데이터베이스란 무엇인가?"></a>데이터베이스란 무엇인가?</h2><h3 id="데이터베이스의-정의와-중요성"><a href="#데이터베이스의-정의와-중요성" class="headerlink" title="데이터베이스의 정의와 중요성"></a>데이터베이스의 정의와 중요성</h3><p>**데이터베이스(Database)**는 체계적으로 구성된 데이터의 집합을 의미합니다. 데이터베이스는 데이터를 구조적으로 저장하여 효율적으로 관리하고, 필요할 때 쉽게 접근하고 조작할 수 있게 합니다.<br>데이터베이스는 우리가 사용하는 많은 애플리케이션의 중심에 있습니다. 예를 들어, 우리가 사용하는 소셜 미디어, 온라인 쇼핑몰, 은행 시스템 등은 모두 데이터베이스를 사용하여 사용자 정보, 상품 정보, 거래 기록 등을 저장하고 관리합니다. 데이터베이스가 없다면, 이러한 시스템들은 효율적으로 운영될 수 없습니다.</p><p><strong>데이터베이스의 중요성</strong>:</p><ul><li><strong>효율적인 데이터 관리</strong>: 대량의 데이터를 효율적으로 저장하고 검색할 수 있습니다.</li><li><strong>데이터 무결성 보장</strong>: 데이터의 정확성과 일관성을 유지합니다.</li><li><strong>데이터 보안</strong>: 데이터 접근 권한을 제어하고, 데이터를 보호합니다.</li><li><strong>데이터 공유</strong>: 여러 사용자나 응용 프로그램이 데이터를 공유할 수 있습니다.</li></ul><h3 id="데이터베이스의-역사와-발전"><a href="#데이터베이스의-역사와-발전" class="headerlink" title="데이터베이스의 역사와 발전"></a>데이터베이스의 역사와 발전</h3><p>데이터베이스의 개념은 1960년대에 등장했으며, 시간이 지나면서 더 효율적이고 강력하게 발전해왔습니다.<br>초기에는 단순한 파일 저장 시스템이었지만, 이후에 테이블 형태로 데이터를 저장하고 관리할 수 있는 관계형 데이터베이스가 등장했습니다.<br>최근에는 다양한 형태의 데이터를 처리할 수 있는 NoSQL 데이터베이스도 사용되고 있습니다.</p><ol><li><strong>1960년대</strong>: 초기 데이터베이스 시스템은 파일 기반 시스템으로, 데이터를 파일에 저장하고 관리했습니다. 이 시기의 대표적인 예는 IBM의 IMS(Information Management System)입니다.</li><li><strong>1970년대</strong>: 관계형 데이터베이스(Relational Database) 모델이 등장했습니다. E.F. Codd가 제안한 관계형 모델은 테이블 형태로 데이터를 저장하고, SQL(Structured Query Language)을 사용하여 데이터를 관리합니다.</li><li><strong>1980년대</strong>: 관계형 데이터베이스 관리 시스템(RDBMS)이 상용화되었습니다. 대표적인 RDBMS로는 Oracle, IBM DB2, Microsoft SQL Server 등이 있습니다.</li><li><strong>2000년대 이후</strong>: NoSQL 데이터베이스가 등장하여, 비정형 데이터와 대규모 데이터를 처리하는 데 사용됩니다. 대표적인 NoSQL 데이터베이스로는 MongoDB, Cassandra, Redis 등이 있습니다.</li></ol><h3 id="데이터베이스-관리-시스템-DBMS-의-역할"><a href="#데이터베이스-관리-시스템-DBMS-의-역할" class="headerlink" title="데이터베이스 관리 시스템(DBMS)의 역할"></a>데이터베이스 관리 시스템(DBMS)의 역할</h3><p>**데이터베이스 관리 시스템(DBMS)**은 데이터베이스를 관리하는 소프트웨어입니다.<br>DBMS는 사용자와 데이터베이스 간의 인터페이스를 제공하며, 데이터를 효율적으로 저장, 검색, 갱신, 삭제하는 기능을 수행합니다.<br>예를 들어, 은행 시스템에서 고객 정보를 저장하고 관리할 때, DBMS를 사용하면 고객 정보를 쉽게 추가, 수정, 삭제할 수 있습니다.<br>또한, 여러 사용자가 동시에 데이터를 사용할 때 발생할 수 있는 문제를 방지하고, 데이터가 손상되지 않도록 보호합니다.</p><p><strong>DBMS의 주요 역할</strong>:</p><ul><li><strong>데이터 정의</strong>: 데이터베이스 구조와 데이터 타입을 정의합니다.</li><li><strong>데이터 조작</strong>: 데이터를 추가, 수정, 삭제, 검색하는 기능을 제공합니다.</li><li><strong>데이터 보안</strong>: 사용자 접근 권한을 관리하고, 데이터 보안을 유지합니다.</li><li><strong>데이터 무결성</strong>: 데이터의 정확성과 일관성을 보장합니다.</li><li><strong>데이터 회복</strong>: 시스템 장애 시 데이터를 복구하는 기능을 제공합니다.</li><li><strong>동시성 제어</strong>: 여러 사용자가 동시에 데이터를 조작할 때 발생하는 충돌을 방지합니다.</li></ul><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 데이터베이스의 개념과 중요성, 역사와 발전, 그리고 데이터베이스 관리 시스템(DBMS)의 역할에 대해 알아보았습니다.<br>데이터베이스는 현대 정보 시스템에서 필수적인 요소로, 데이터를 효율적으로 관리하고 보호하는 데 중요한 역할을 합니다.<br>다음 시간에는 데이터베이스의 구체적인 구조와 작동 방식에 대해 더 자세히 알아보겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> database </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>함수형 프로그래밍 기법을 JavaScript에 적용하기</title>
      <link href="/javascript/special/6/"/>
      <url>/javascript/special/6/</url>
      
        <content type="html"><![CDATA[<h1 id="함수형-프로그래밍-기법을-JavaScript에-적용하기"><a href="#함수형-프로그래밍-기법을-JavaScript에-적용하기" class="headerlink" title="함수형 프로그래밍 기법을 JavaScript에 적용하기"></a>함수형 프로그래밍 기법을 JavaScript에 적용하기</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!</p><p>함수형 프로그래밍(Functional Programming, FP)은 프로그래밍 패러다임 중 하나로, 함수를 일급 객체로 다루며 부수 효과(Side Effect)를 최소화하는 것을 목표로 합니다.<br>JavaScript는 다중 패러다임 언어로, 함수형 프로그래밍 기법을 적용할 수 있습니다.<br>이번 글에서는 함수형 프로그래밍의 기본 개념과 JavaScript에서 함수형 프로그래밍 기법을 사용하는 방법을 설명합니다.</p><h2 id="함수형-프로그래밍의-기본-개념"><a href="#함수형-프로그래밍의-기본-개념" class="headerlink" title="함수형 프로그래밍의 기본 개념"></a>함수형 프로그래밍의 기본 개념</h2><h3 id="순수-함수-Pure-Function"><a href="#순수-함수-Pure-Function" class="headerlink" title="순수 함수 (Pure Function)"></a>순수 함수 (Pure Function)</h3><p>순수 함수는 동일한 입력에 대해 항상 동일한 출력을 반환하고, 함수 외부 상태를 변경하지 않는 함수입니다. 즉, 부수 효과가 없는 함수입니다.</p><pre><code class="highlight javascript"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;  <span class="keyword">return</span> a + b;&#125;</code></pre><h3 id="불변성-Immutability"><a href="#불변성-Immutability" class="headerlink" title="불변성 (Immutability)"></a>불변성 (Immutability)</h3><p>함수형 프로그래밍에서는 상태를 변경하지 않고, 변경된 상태를 새로운 값으로 반환합니다. JavaScript에서는 <code>Object.assign</code> 또는 스프레드 연산자(…)를 사용하여 불변성을 유지할 수 있습니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;;<span class="keyword">const</span> newObj = &#123; ...obj, <span class="attr">b</span>: <span class="number">3</span> &#125;; <span class="comment">// 새로운 객체 생성</span></code></pre><h3 id="일급-객체-First-Class-Citizen"><a href="#일급-객체-First-Class-Citizen" class="headerlink" title="일급 객체 (First-Class Citizen)"></a>일급 객체 (First-Class Citizen)</h3><p>JavaScript의 함수는 일급 객체로, 변수에 할당하거나, 다른 함수의 인자로 전달하거나, 함수에서 반환할 수 있습니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> greet = <span class="keyword">function</span> (<span class="params">name</span>) &#123;  <span class="keyword">return</span> <span class="string">`Hello, <span class="subst">$&#123;name&#125;</span>`</span>;&#125;;<span class="keyword">const</span> sayHello = greet;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sayHello</span>(<span class="string">&quot;World&quot;</span>)); <span class="comment">// 출력: Hello, World</span></code></pre><h3 id="고차-함수-Higher-Order-Function"><a href="#고차-함수-Higher-Order-Function" class="headerlink" title="고차 함수 (Higher-Order Function)"></a>고차 함수 (Higher-Order Function)</h3><p>고차 함수는 함수를 인자로 받거나, 함수를 반환하는 함수입니다. JavaScript의 배열 메서드(<code>map</code>, <code>filter</code>, <code>reduce</code> 등)는 고차 함수의 좋은 예입니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];<span class="keyword">const</span> doubled = numbers.<span class="title function_">map</span>(<span class="function">(<span class="params">n</span>) =&gt;</span> n * <span class="number">2</span>);<span class="variable language_">console</span>.<span class="title function_">log</span>(doubled); <span class="comment">// 출력: [2, 4, 6, 8, 10]</span></code></pre><h2 id="JavaScript에서-함수형-프로그래밍-기법-사용하기"><a href="#JavaScript에서-함수형-프로그래밍-기법-사용하기" class="headerlink" title="JavaScript에서 함수형 프로그래밍 기법 사용하기"></a>JavaScript에서 함수형 프로그래밍 기법 사용하기</h2><h3 id="배열-메서드-활용"><a href="#배열-메서드-활용" class="headerlink" title="배열 메서드 활용"></a>배열 메서드 활용</h3><p>JavaScript의 배열 메서드를 사용하여 함수형 프로그래밍 기법을 적용할 수 있습니다. <code>map</code>, <code>filter</code>, <code>reduce</code> 메서드를 사용한 예제를 살펴보겠습니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];<span class="comment">// map: 배열의 각 요소를 변환하여 새로운 배열을 생성</span><span class="keyword">const</span> doubled = numbers.<span class="title function_">map</span>(<span class="function">(<span class="params">n</span>) =&gt;</span> n * <span class="number">2</span>);<span class="variable language_">console</span>.<span class="title function_">log</span>(doubled); <span class="comment">// 출력: [2, 4, 6, 8, 10]</span><span class="comment">// filter: 조건을 만족하는 요소만을 포함하는 새로운 배열을 생성</span><span class="keyword">const</span> even = numbers.<span class="title function_">filter</span>(<span class="function">(<span class="params">n</span>) =&gt;</span> n % <span class="number">2</span> === <span class="number">0</span>);<span class="variable language_">console</span>.<span class="title function_">log</span>(even); <span class="comment">// 출력: [2, 4]</span><span class="comment">// reduce: 배열을 순회하며 누적값을 계산</span><span class="keyword">const</span> sum = numbers.<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, curr</span>) =&gt;</span> acc + curr, <span class="number">0</span>);<span class="variable language_">console</span>.<span class="title function_">log</span>(sum); <span class="comment">// 출력: 15</span></code></pre><h3 id="커링-Currying"><a href="#커링-Currying" class="headerlink" title="커링 (Currying)"></a>커링 (Currying)</h3><p>커링은 여러 인자를 받는 함수를 인자를 하나만 받는 함수들의 연속으로 변환하는 기법입니다. JavaScript에서 커링을 구현하는 예제를 살펴보겠습니다.</p><pre><code class="highlight javascript"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a</span>) &#123;  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">b</span>) &#123;    <span class="keyword">return</span> a + b;  &#125;;&#125;<span class="keyword">const</span> addFive = <span class="title function_">add</span>(<span class="number">5</span>);<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">addFive</span>(<span class="number">3</span>)); <span class="comment">// 출력: 8</span></code></pre><h3 id="함수-조합-Function-Composition"><a href="#함수-조합-Function-Composition" class="headerlink" title="함수 조합 (Function Composition)"></a>함수 조합 (Function Composition)</h3><p>함수 조합은 작은 함수를 결합하여 더 복잡한 함수를 만드는 기법입니다. 함수 조합을 사용하면 코드의 재사용성과 가독성을 높일 수 있습니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> <span class="title function_">compose</span> = (<span class="params">f, g</span>) =&gt; <span class="function">(<span class="params">x</span>) =&gt;</span> <span class="title function_">f</span>(<span class="title function_">g</span>(x));<span class="keyword">const</span> <span class="title function_">toUpperCase</span> = (<span class="params">str</span>) =&gt; str.<span class="title function_">toUpperCase</span>();<span class="keyword">const</span> <span class="title function_">exclaim</span> = (<span class="params">str</span>) =&gt; <span class="string">`<span class="subst">$&#123;str&#125;</span>!`</span>;<span class="keyword">const</span> shout = <span class="title function_">compose</span>(exclaim, toUpperCase);<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">shout</span>(<span class="string">&quot;hello&quot;</span>)); <span class="comment">// 출력: HELLO!</span></code></pre><h2 id="함수형-프로그래밍의-장점"><a href="#함수형-프로그래밍의-장점" class="headerlink" title="함수형 프로그래밍의 장점"></a>함수형 프로그래밍의 장점</h2><h3 id="코드의-가독성-및-유지보수성-향상"><a href="#코드의-가독성-및-유지보수성-향상" class="headerlink" title="코드의 가독성 및 유지보수성 향상"></a>코드의 가독성 및 유지보수성 향상</h3><p>함수형 프로그래밍은 작은 함수들을 조합하여 문제를 해결하므로, 코드의 가독성과 유지보수성을 높일 수 있습니다. 또한, 순수 함수와 불변성을 유지하면 부수 효과를 줄여 예측 가능한 코드를 작성할 수 있습니다.</p><h3 id="디버깅-용이"><a href="#디버깅-용이" class="headerlink" title="디버깅 용이"></a>디버깅 용이</h3><p>순수 함수는 동일한 입력에 대해 항상 동일한 출력을 반환하므로, 디버깅이 용이합니다. 상태를 변경하지 않기 때문에 함수 호출 결과를 쉽게 예측할 수 있습니다.</p><h3 id="병렬-처리에-유리"><a href="#병렬-처리에-유리" class="headerlink" title="병렬 처리에 유리"></a>병렬 처리에 유리</h3><p>함수형 프로그래밍은 상태 변경을 피하기 때문에, 병렬 처리를 쉽게 구현할 수 있습니다. 이는 대규모 데이터 처리나 고성능 애플리케이션 개발에 유리합니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>함수형 프로그래밍은 JavaScript의 강력한 프로그래밍 패러다임 중 하나로, 코드의 가독성, 유지보수성, 디버깅 용이성을 높여줍니다. JavaScript에서 함수형 프로그래밍 기법을 사용하여 더 안전하고 예측 가능한 코드를 작성해 보세요! 배열 메서드, 커링, 함수 조합 등의 기법을 활용하여 함수형 프로그래밍의 장점을 최대한 활용해 보시기 바랍니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> JS_필살기 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript 타입 호환성 (Type Compatibility)</title>
      <link href="/typescript/special/7/"/>
      <url>/typescript/special/7/</url>
      
        <content type="html"><![CDATA[<h1 id="TypeScript-타입-호환성-Type-Compatibility"><a href="#TypeScript-타입-호환성-Type-Compatibility" class="headerlink" title="TypeScript 타입 호환성 (Type Compatibility)"></a>TypeScript 타입 호환성 (Type Compatibility)</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 TypeScript에서 중요한 개념 중 하나인 <strong>타입 호환성</strong>에 대해 알아보겠습니다. 타입 호환성은 TypeScript의 타입 시스템에서 두 타입이 얼마나 호환되는지를 결정하는 규칙을 의미합니다. 이 규칙을 이해하면 코드의 안정성을 높이고, 예기치 않은 타입 오류를 피할 수 있습니다.</p><h2 id="타입-호환성이란"><a href="#타입-호환성이란" class="headerlink" title="타입 호환성이란?"></a>타입 호환성이란?</h2><p>타입 호환성은 한 타입의 값을 다른 타입으로 할당할 수 있는지 여부를 결정하는 TypeScript의 규칙입니다. TypeScript는 <strong>구조적 타이핑</strong>(structural typing) 시스템을 기반으로 하기 때문에, 타입의 구조가 중요합니다. 구조적 타이핑에서는 두 객체의 형태가 같다면, 그 객체들은 동일한 타입으로 간주됩니다.</p><h2 id="구조적-타이핑"><a href="#구조적-타이핑" class="headerlink" title="구조적 타이핑"></a>구조적 타이핑</h2><h3 id="구조적-타이핑의-개념"><a href="#구조적-타이핑의-개념" class="headerlink" title="구조적 타이핑의 개념"></a>구조적 타이핑의 개념</h3><p>구조적 타이핑은 객체의 실제 구조에 따라 타입을 결정하는 방식입니다. 즉, 두 객체가 동일한 속성과 메서드를 가지고 있다면, 이들은 동일한 타입으로 간주됩니다.</p><h3 id="구조적-타이핑-예제"><a href="#구조적-타이핑-예제" class="headerlink" title="구조적 타이핑 예제"></a>구조적 타이핑 예제</h3><p>RPG 게임에서 캐릭터의 능력치를 관리하는 객체를 예로 들어보겠습니다.</p><pre><code class="highlight typescript"><span class="keyword">interface</span> <span class="title class_">Character</span> &#123;  <span class="attr">name</span>: <span class="built_in">string</span>;  <span class="attr">level</span>: <span class="built_in">number</span>;&#125;<span class="keyword">const</span> <span class="attr">warrior</span>: <span class="title class_">Character</span> = &#123;  <span class="attr">name</span>: <span class="string">&quot;Aragon&quot;</span>,  <span class="attr">level</span>: <span class="number">10</span>,&#125;;<span class="keyword">const</span> mage = &#123;  <span class="attr">name</span>: <span class="string">&quot;Gandalf&quot;</span>,  <span class="attr">level</span>: <span class="number">15</span>,  <span class="attr">mana</span>: <span class="number">100</span>, <span class="comment">// 추가 속성</span>&#125;;<span class="comment">// `mage` 객체는 `Character` 인터페이스와 호환됨</span><span class="keyword">const</span> <span class="attr">character</span>: <span class="title class_">Character</span> = mage;<span class="variable language_">console</span>.<span class="title function_">log</span>(character.<span class="property">name</span>); <span class="comment">// Gandalf</span></code></pre><p>위 예제에서 <code>mage</code> 객체는 <code>Character</code> 인터페이스에 정의된 속성뿐만 아니라 추가적인 <code>mana</code> 속성을 가지고 있습니다. 그러나 <code>name</code>과 <code>level</code> 속성만 존재하면 <code>Character</code> 타입과 호환되므로, <code>mage</code> 객체를 <code>Character</code> 타입의 변수에 할당할 수 있습니다. 이것이 구조적 타이핑의 핵심입니다.</p><h2 id="타입-호환성-규칙"><a href="#타입-호환성-규칙" class="headerlink" title="타입 호환성 규칙"></a>타입 호환성 규칙</h2><h3 id="1-할당-가능성-Assignability"><a href="#1-할당-가능성-Assignability" class="headerlink" title="1. 할당 가능성 (Assignability)"></a>1. 할당 가능성 (Assignability)</h3><p>할당 가능성은 한 타입의 값을 다른 타입의 변수에 할당할 수 있는지 결정합니다. TypeScript는 기본적으로 다음과 같은 규칙을 따릅니다:</p><ul><li><strong>서브타입</strong>이 <strong>슈퍼타입</strong>에 할당될 수 있습니다.</li><li>추가적인 속성이 있는 객체는 그 객체의 슈퍼타입에 할당될 수 있습니다.</li></ul><pre><code class="highlight typescript"><span class="keyword">interface</span> <span class="title class_">Character</span> &#123;  <span class="attr">name</span>: <span class="built_in">string</span>;  <span class="attr">level</span>: <span class="built_in">number</span>;&#125;<span class="keyword">interface</span> <span class="title class_">Warrior</span> <span class="keyword">extends</span> <span class="title class_">Character</span> &#123;  <span class="attr">weapon</span>: <span class="built_in">string</span>;&#125;<span class="keyword">const</span> <span class="attr">warrior</span>: <span class="title class_">Warrior</span> = &#123;  <span class="attr">name</span>: <span class="string">&quot;Aragon&quot;</span>,  <span class="attr">level</span>: <span class="number">10</span>,  <span class="attr">weapon</span>: <span class="string">&quot;Sword&quot;</span>,&#125;;<span class="keyword">const</span> <span class="attr">character</span>: <span class="title class_">Character</span> = warrior; <span class="comment">// 허용됨</span></code></pre><p>위 예제에서 <code>Warrior</code> 인터페이스는 <code>Character</code> 인터페이스를 확장했기 때문에, <code>Warrior</code> 타입의 객체를 <code>Character</code> 타입의 변수에 할당할 수 있습니다. <code>Warrior</code>는 <code>Character</code>의 서브타입이기 때문입니다.</p><h3 id="2-함수의-타입-호환성"><a href="#2-함수의-타입-호환성" class="headerlink" title="2. 함수의 타입 호환성"></a>2. 함수의 타입 호환성</h3><p>함수의 타입 호환성은 매개변수와 반환 타입을 기준으로 결정됩니다. 함수의 매개변수는 구조적 타이핑에 따라 호환성을 평가하며, 반환 타입도 할당 가능성 규칙에 따라 평가됩니다.</p><pre><code class="highlight typescript"><span class="keyword">type</span> <span class="title class_">AttackFunction</span> = <span class="function">(<span class="params"><span class="attr">target</span>: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">void</span>;<span class="keyword">const</span> <span class="attr">basicAttack</span>: <span class="title class_">AttackFunction</span> = <span class="function">(<span class="params">target</span>) =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;target&#125;</span>을(를) 공격합니다!`</span>);&#125;;<span class="keyword">const</span> <span class="attr">specialAttack</span>: <span class="title class_">AttackFunction</span> = <span class="function">(<span class="params">target, <span class="attr">damage</span>: <span class="built_in">number</span></span>) =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;target&#125;</span>을(를) <span class="subst">$&#123;damage&#125;</span>의 데미지로 공격합니다!`</span>);&#125;;<span class="comment">// 함수 타입 호환성</span><span class="keyword">let</span> <span class="attr">attack</span>: <span class="title class_">AttackFunction</span>;attack = basicAttack; <span class="comment">// 허용됨</span><span class="comment">// attack = specialAttack; // 오류 발생 (매개변수 개수 불일치)</span></code></pre><p>위 예제에서 <code>specialAttack</code> 함수는 <code>AttackFunction</code> 타입과 호환되지 않습니다. 왜냐하면 <code>specialAttack</code> 함수는 <code>target</code> 매개변수 외에도 <code>damage</code> 매개변수를 추가로 요구하기 때문입니다.</p><h2 id="구조적-타이핑과-타입-호환성의-실제-활용"><a href="#구조적-타이핑과-타입-호환성의-실제-활용" class="headerlink" title="구조적 타이핑과 타입 호환성의 실제 활용"></a>구조적 타이핑과 타입 호환성의 실제 활용</h2><p>타입 호환성과 구조적 타이핑을 이해하면, 클래스나 인터페이스의 확장뿐만 아니라, 라이브러리나 프레임워크와의 통합 작업에서도 안정성을 높일 수 있습니다. 또한, 함수형 프로그래밍 패턴을 사용할 때도 유연한 코드 작성을 도와줍니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 TypeScript에서 중요한 개념인 <strong>타입 호환성</strong>과 <strong>구조적 타이핑</strong>에 대해 알아보았습니다. TypeScript의 타입 호환성 규칙을 이해하면, 더욱 안전하고 예측 가능한 코드를 작성할 수 있습니다. 이를 활용해 다양한 상황에서 타입 안전성을 유지하면서 유연한 TypeScript 코드를 작성해보세요!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> TS_필살기 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript Mixin과 Decorator</title>
      <link href="/typescript/special/6/"/>
      <url>/typescript/special/6/</url>
      
        <content type="html"><![CDATA[<h1 id="TypeScript-Mixin과-Decorator"><a href="#TypeScript-Mixin과-Decorator" class="headerlink" title="TypeScript Mixin과 Decorator"></a>TypeScript Mixin과 Decorator</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 TypeScript에서 코드 재사용과 동작 확장을 위한 두 가지 중요한 패턴인 <strong>Mixin</strong>과 <strong>Decorator</strong>에 대해 알아보겠습니다. 이 패턴들은 객체 지향 프로그래밍에서 클래스의 기능을 확장하거나, 중복 코드를 줄이는 데 매우 유용합니다.</p><h2 id="Mixin-패턴"><a href="#Mixin-패턴" class="headerlink" title="Mixin 패턴"></a>Mixin 패턴</h2><h3 id="Mixin-패턴의-개념"><a href="#Mixin-패턴의-개념" class="headerlink" title="Mixin 패턴의 개념"></a>Mixin 패턴의 개념</h3><p>Mixin은 여러 클래스에 공통적으로 필요한 기능을 하나의 클래스나 객체로 만들어서, 이를 다른 클래스에 주입하여 재사용할 수 있도록 하는 패턴입니다. JavaScript나 TypeScript에서는 클래스 상속을 통해 다중 상속을 직접 지원하지 않기 때문에, Mixin 패턴을 사용하여 유사한 기능을 구현할 수 있습니다.</p><h3 id="Mixin-사용-예제"><a href="#Mixin-사용-예제" class="headerlink" title="Mixin 사용 예제"></a>Mixin 사용 예제</h3><p>RPG 게임에서 여러 클래스 간에 공유되는 기능을 Mixin으로 정의해보겠습니다. 예를 들어, 모든 캐릭터가 사용할 수 있는 <code>Attacker</code> Mixin을 정의하여 공격력을 확장할 수 있습니다.</p><pre><code class="highlight typescript"><span class="keyword">type</span> <span class="title class_">Constructor</span>&lt;T = &#123;&#125;&gt; = <span class="title function_">new</span> (...<span class="attr">args</span>: <span class="built_in">any</span>[]) =&gt; T;<span class="keyword">function</span> <span class="title class_">Attacker</span>&lt;<span class="title class_">TBase</span> <span class="keyword">extends</span> <span class="title class_">Constructor</span>&gt;(<span class="title class_">Base</span>: <span class="title class_">TBase</span>) &#123;  <span class="keyword">return</span> <span class="keyword">class</span> <span class="title class_">extends</span> <span class="title class_">Base</span> &#123;    <span class="attr">attackPower</span>: <span class="built_in">number</span> = <span class="number">10</span>;    <span class="title function_">attack</span>(<span class="params"></span>) &#123;      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`공격력이 <span class="subst">$&#123;<span class="variable language_">this</span>.attackPower&#125;</span>인 공격을 실행합니다.`</span>);    &#125;  &#125;;&#125;<span class="keyword">class</span> <span class="title class_">Character</span> &#123;  <span class="attr">name</span>: <span class="built_in">string</span>;  <span class="title function_">constructor</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span></span>) &#123;    <span class="variable language_">this</span>.<span class="property">name</span> = name;  &#125;&#125;<span class="keyword">class</span> <span class="title class_">Warrior</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Attacker</span>(<span class="title class_">Character</span>) &#123;&#125;<span class="keyword">const</span> warrior = <span class="keyword">new</span> <span class="title class_">Warrior</span>(<span class="string">&quot;Aragon&quot;</span>);warrior.<span class="title function_">attack</span>();<span class="comment">// 공격력이 10인 공격을 실행합니다.</span></code></pre><p>위 예제에서 <code>Attacker</code> Mixin을 통해 <code>Warrior</code> 클래스에 공격 기능을 추가했습니다. Mixin을 사용하면 클래스 간의 중복 코드를 줄이고, 필요한 기능을 쉽게 주입할 수 있습니다.</p><h2 id="Decorator-패턴"><a href="#Decorator-패턴" class="headerlink" title="Decorator 패턴"></a>Decorator 패턴</h2><h3 id="Decorator-패턴의-개념"><a href="#Decorator-패턴의-개념" class="headerlink" title="Decorator 패턴의 개념"></a>Decorator 패턴의 개념</h3><p>Decorator는 클래스 또는 클래스의 멤버에 대해 추가적인 기능을 주입하거나, 기존 기능을 수정할 수 있도록 하는 패턴입니다. TypeScript에서는 <strong>클래스 데코레이터</strong>, <strong>메서드 데코레이터</strong>, <strong>프로퍼티 데코레이터</strong>, <strong>파라미터 데코레이터</strong> 등의 형태로 데코레이터를 사용할 수 있습니다.</p><h3 id="클래스-데코레이터-사용-예제"><a href="#클래스-데코레이터-사용-예제" class="headerlink" title="클래스 데코레이터 사용 예제"></a>클래스 데코레이터 사용 예제</h3><p>클래스 데코레이터를 사용하여 RPG 게임 캐릭터의 능력치를 확장해보겠습니다.</p><pre><code class="highlight typescript"><span class="keyword">function</span> <span class="title function_">Enhancer</span>(<span class="params"><span class="attr">target</span>: <span class="title class_">Function</span></span>) &#123;  target.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">level</span> = <span class="number">1</span>;  target.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">increaseLevel</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;    <span class="variable language_">this</span>.<span class="property">level</span>++;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>의 레벨이 <span class="subst">$&#123;<span class="variable language_">this</span>.level&#125;</span>로 증가했습니다.`</span>);  &#125;;&#125;<span class="meta">@Enhancer</span><span class="keyword">class</span> <span class="title class_">Mage</span> &#123;  <span class="attr">name</span>: <span class="built_in">string</span>;  <span class="title function_">constructor</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span></span>) &#123;    <span class="variable language_">this</span>.<span class="property">name</span> = name;  &#125;&#125;<span class="keyword">const</span> mage = <span class="keyword">new</span> <span class="title class_">Mage</span>(<span class="string">&quot;Gandalf&quot;</span>);mage.<span class="title function_">increaseLevel</span>();<span class="comment">// Gandalf의 레벨이 2로 증가했습니다.</span></code></pre><p>위 예제에서 <code>Enhancer</code> 데코레이터는 <code>Mage</code> 클래스에 <code>level</code> 프로퍼티와 <code>increaseLevel</code> 메서드를 추가합니다. 이처럼 데코레이터를 사용하면 기존 클래스의 동작을 수정하거나 새로운 기능을 추가할 수 있습니다.</p><h3 id="메서드-데코레이터-사용-예제"><a href="#메서드-데코레이터-사용-예제" class="headerlink" title="메서드 데코레이터 사용 예제"></a>메서드 데코레이터 사용 예제</h3><p>이번에는 메서드 데코레이터를 사용하여 캐릭터의 특정 행동을 로깅하는 기능을 추가해보겠습니다.</p><pre><code class="highlight typescript"><span class="keyword">function</span> <span class="title function_">Log</span>(<span class="params"></span><span class="params">  <span class="attr">target</span>: <span class="built_in">any</span>,</span><span class="params">  <span class="attr">propertyName</span>: <span class="built_in">string</span>,</span><span class="params">  <span class="attr">descriptor</span>: <span class="title class_">PropertyDescriptor</span></span><span class="params"></span>) &#123;  <span class="keyword">const</span> method = descriptor.<span class="property">value</span>;  descriptor.<span class="property">value</span> = <span class="keyword">function</span> (<span class="params">...<span class="attr">args</span>: <span class="built_in">any</span>[]</span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;propertyName&#125;</span> 메서드가 호출되었습니다.`</span>);    <span class="keyword">return</span> method.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);  &#125;;&#125;<span class="keyword">class</span> <span class="title class_">Warrior</span> &#123;  <span class="attr">name</span>: <span class="built_in">string</span>;  <span class="title function_">constructor</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span></span>) &#123;    <span class="variable language_">this</span>.<span class="property">name</span> = name;  &#125;  <span class="meta">@Log</span>  <span class="title function_">attack</span>(<span class="params"></span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>이(가) 공격을 시작합니다.`</span>);  &#125;&#125;<span class="keyword">const</span> warrior = <span class="keyword">new</span> <span class="title class_">Warrior</span>(<span class="string">&quot;Aragon&quot;</span>);warrior.<span class="title function_">attack</span>();<span class="comment">// attack 메서드가 호출되었습니다.</span><span class="comment">// Aragon이(가) 공격을 시작합니다.</span></code></pre><p>위 예제에서 <code>Log</code> 데코레이터는 <code>attack</code> 메서드가 호출될 때마다 로그를 출력하도록 메서드의 동작을 확장합니다. 메서드 데코레이터를 활용하면 메서드 호출 전후에 추가 작업을 수행하거나, 메서드의 동작을 수정할 수 있습니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 TypeScript에서 코드 재사용과 동작 확장을 위한 두 가지 중요한 패턴인 <strong>Mixin</strong>과 <strong>Decorator</strong>에 대해 알아보았습니다. Mixin 패턴을 통해 클래스 간의 중복 코드를 줄이고, Decorator 패턴을 통해 클래스와 메서드의 동작을 쉽게 확장할 수 있습니다. 이 패턴들을 적절히 활용하여 더욱 유연하고 유지보수 가능한 코드를 작성해보세요!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> TS_필살기 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue 양방향 데이터 바인딩 v-model</title>
      <link href="/vue/10/"/>
      <url>/vue/10/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-양방향-데이터-바인딩-v-model"><a href="#Vue-양방향-데이터-바인딩-v-model" class="headerlink" title="Vue 양방향 데이터 바인딩 v-model"></a>Vue 양방향 데이터 바인딩 v-model</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 Vue.js에서 데이터와 UI를 쉽게 동기화할 수 있는 강력한 기능인 <strong>양방향 데이터 바인딩</strong>, <code>v-model</code>에 대해 알아보겠습니다. 양방향 데이터 바인딩은 폼 입력 요소와 데이터 객체 간의 동기화를 자동으로 처리하여 사용자 입력을 더욱 간편하게 관리할 수 있게 해줍니다.</p><h2 id="1-양방향-데이터-바인딩의-원리"><a href="#1-양방향-데이터-바인딩의-원리" class="headerlink" title="1. 양방향 데이터 바인딩의 원리"></a>1. 양방향 데이터 바인딩의 원리</h2><h3 id="v-model의-개념"><a href="#v-model의-개념" class="headerlink" title="v-model의 개념"></a><code>v-model</code>의 개념</h3><p><code>v-model</code>은 Vue.js에서 가장 자주 사용되는 디렉티브 중 하나로, 폼 입력 요소와 Vue 인스턴스의 데이터 간에 양방향 바인딩을 설정합니다. 이를 통해 사용자가 입력 필드에 데이터를 입력할 때, 해당 데이터가 자동으로 Vue 인스턴스의 데이터 속성에 반영되며, 반대로 데이터 속성의 변경도 입력 필드에 즉시 반영됩니다.</p><p>이러한 양방향 데이터 바인딩은 폼 처리나 사용자 입력을 다루는 작업을 매우 간단하게 만들어줍니다.</p><h3 id="기본-사용법"><a href="#기본-사용법" class="headerlink" title="기본 사용법"></a>기본 사용법</h3><p><code>v-model</code> 디렉티브는 HTML 폼 요소에 사용되며, Vue 인스턴스의 데이터 속성과 연결됩니다.</p><pre><code class="highlight html"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;메시지를 입력하세요&quot;</span> /&gt;</span>  <span class="tag">&lt;<span class="name">p</span>&gt;</span>입력한 메시지: &#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;</span><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><span class="language-javascript">      <span class="keyword">return</span> &#123;</span><span class="language-javascript">        <span class="attr">message</span>: <span class="string">&quot;&quot;</span>,</span><span class="language-javascript">      &#125;;</span><span class="language-javascript">    &#125;,</span><span class="language-javascript">  &#125;);</span><span class="language-javascript"></span><span class="language-javascript">  app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></code></pre><p>위 예제에서 <code>v-model</code>은 <code>input</code> 요소와 <code>message</code> 데이터를 양방향으로 바인딩하여, 사용자가 입력한 내용이 실시간으로 <code>message</code>에 반영되고, 반대로 <code>message</code>의 내용도 <code>input</code> 필드에 즉시 반영됩니다.</p><h3 id="양방향-데이터-바인딩의-원리"><a href="#양방향-데이터-바인딩의-원리" class="headerlink" title="양방향 데이터 바인딩의 원리"></a>양방향 데이터 바인딩의 원리</h3><p>Vue.js는 <code>v-model</code>을 사용하여 내부적으로 <code>input</code>, <code>change</code>, <code>keydown</code> 등의 이벤트를 감지하고, 해당 이벤트에 따라 데이터와 DOM 간의 동기화를 처리합니다. 즉, 사용자가 입력을 변경하면 Vue.js가 자동으로 데이터를 업데이트하고, 데이터가 변경되면 DOM을 업데이트하는 방식입니다.</p><p>Vue3에서는 <code>v-model</code>이 개선되어 여러 개의 <code>v-model</code> 바인딩을 동시에 사용할 수 있으며, 커스텀 컴포넌트에서도 더욱 유연하게 사용할 수 있습니다.</p><pre><code class="highlight html"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">custom-input</span> <span class="attr">v-model</span>=<span class="string">&quot;username&quot;</span> <span class="attr">v-model:password</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">custom-input</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="keyword">const</span> <span class="title class_">CustomInput</span> = &#123;</span><span class="language-javascript">    <span class="attr">template</span>: <span class="string">`</span></span><span class="string"><span class="language-javascript">      &lt;div&gt;</span></span><span class="string"><span class="language-javascript">        &lt;input v-model=&quot;modelValue&quot; placeholder=&quot;이름을 입력하세요&quot; /&gt;</span></span><span class="string"><span class="language-javascript">        &lt;input v-model=&quot;passwordValue&quot; placeholder=&quot;비밀번호를 입력하세요&quot; /&gt;</span></span><span class="string"><span class="language-javascript">      &lt;/div&gt;</span></span><span class="string"><span class="language-javascript">    `</span>,</span><span class="language-javascript">    <span class="attr">props</span>: [<span class="string">&quot;modelValue&quot;</span>, <span class="string">&quot;passwordValue&quot;</span>],</span><span class="language-javascript">  &#125;;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;</span><span class="language-javascript">    <span class="attr">components</span>: &#123;</span><span class="language-javascript">      <span class="string">&quot;custom-input&quot;</span>: <span class="title class_">CustomInput</span>,</span><span class="language-javascript">    &#125;,</span><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><span class="language-javascript">      <span class="keyword">return</span> &#123;</span><span class="language-javascript">        <span class="attr">username</span>: <span class="string">&quot;&quot;</span>,</span><span class="language-javascript">        <span class="attr">password</span>: <span class="string">&quot;&quot;</span>,</span><span class="language-javascript">      &#125;;</span><span class="language-javascript">    &#125;,</span><span class="language-javascript">  &#125;);</span><span class="language-javascript"></span><span class="language-javascript">  app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></code></pre><p>위 예제에서는 Vue3의 새로운 기능을 활용하여 <code>v-model</code>을 사용한 복수의 양방향 바인딩을 구현한 것입니다. 이 기능을 통해 더 복잡한 폼 처리가 더욱 쉬워집니다.</p><h2 id="2-폼-입력-바인딩의-예제"><a href="#2-폼-입력-바인딩의-예제" class="headerlink" title="2. 폼 입력 바인딩의 예제"></a>2. 폼 입력 바인딩의 예제</h2><h3 id="기본-폼-요소-바인딩"><a href="#기본-폼-요소-바인딩" class="headerlink" title="기본 폼 요소 바인딩"></a>기본 폼 요소 바인딩</h3><p><code>v-model</code>은 다양한 폼 요소에서 사용될 수 있으며, 각 요소와 연결된 데이터는 자동으로 동기화됩니다.</p><h4 id="텍스트-입력"><a href="#텍스트-입력" class="headerlink" title="텍스트 입력"></a>텍스트 입력</h4><pre><code class="highlight html"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;사용자 이름을 입력하세요&quot;</span> /&gt;</span>  <span class="tag">&lt;<span class="name">p</span>&gt;</span>사용자 이름: &#123;&#123; username &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;</span><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><span class="language-javascript">      <span class="keyword">return</span> &#123;</span><span class="language-javascript">        <span class="attr">username</span>: <span class="string">&quot;&quot;</span>,</span><span class="language-javascript">      &#125;;</span><span class="language-javascript">    &#125;,</span><span class="language-javascript">  &#125;);</span><span class="language-javascript"></span><span class="language-javascript">  app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></code></pre><h4 id="체크박스"><a href="#체크박스" class="headerlink" title="체크박스"></a>체크박스</h4><pre><code class="highlight html"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;isSubscribed&quot;</span> /&gt;</span>  <span class="tag">&lt;<span class="name">p</span>&gt;</span>구독 여부: &#123;&#123; isSubscribed ? &quot;구독 중&quot; : &quot;구독 안 함&quot; &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;</span><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><span class="language-javascript">      <span class="keyword">return</span> &#123;</span><span class="language-javascript">        <span class="attr">isSubscribed</span>: <span class="literal">false</span>,</span><span class="language-javascript">      &#125;;</span><span class="language-javascript">    &#125;,</span><span class="language-javascript">  &#125;);</span><span class="language-javascript"></span><span class="language-javascript">  app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></code></pre><h4 id="라디오-버튼"><a href="#라디오-버튼" class="headerlink" title="라디오 버튼"></a>라디오 버튼</h4><pre><code class="highlight html"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;picked&quot;</span> <span class="attr">value</span>=<span class="string">&quot;option1&quot;</span> /&gt;</span> 옵션 1  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;picked&quot;</span> <span class="attr">value</span>=<span class="string">&quot;option2&quot;</span> /&gt;</span> 옵션 2  <span class="tag">&lt;<span class="name">p</span>&gt;</span>선택한 옵션: &#123;&#123; picked &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;</span><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><span class="language-javascript">      <span class="keyword">return</span> &#123;</span><span class="language-javascript">        <span class="attr">picked</span>: <span class="string">&quot;&quot;</span>,</span><span class="language-javascript">      &#125;;</span><span class="language-javascript">    &#125;,</span><span class="language-javascript">  &#125;);</span><span class="language-javascript"></span><span class="language-javascript">  app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></code></pre><h4 id="셀렉트-박스"><a href="#셀렉트-박스" class="headerlink" title="셀렉트 박스"></a>셀렉트 박스</h4><pre><code class="highlight html"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;selected&quot;</span>&gt;</span>    <span class="tag">&lt;<span class="name">option</span> <span class="attr">disabled</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>옵션을 선택하세요<span class="tag">&lt;/<span class="name">option</span>&gt;</span>    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;option1&quot;</span>&gt;</span>옵션 1<span class="tag">&lt;/<span class="name">option</span>&gt;</span>    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;option2&quot;</span>&gt;</span>옵션 2<span class="tag">&lt;/<span class="name">option</span>&gt;</span>  <span class="tag">&lt;/<span class="name">select</span>&gt;</span>  <span class="tag">&lt;<span class="name">p</span>&gt;</span>선택한 옵션: &#123;&#123; selected &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;</span><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><span class="language-javascript">      <span class="keyword">return</span> &#123;</span><span class="language-javascript">        <span class="attr">selected</span>: <span class="string">&quot;&quot;</span>,</span><span class="language-javascript">      &#125;;</span><span class="language-javascript">    &#125;,</span><span class="language-javascript">  &#125;);</span><span class="language-javascript"></span><span class="language-javascript">  app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></code></pre><h3 id="예제-RPG-게임에서의-폼-입력-바인딩-활용"><a href="#예제-RPG-게임에서의-폼-입력-바인딩-활용" class="headerlink" title="예제: RPG 게임에서의 폼 입력 바인딩 활용"></a>예제: RPG 게임에서의 폼 입력 바인딩 활용</h3><p>RPG 게임에서 캐릭터의 이름과 클래스(직업)를 입력받고, 선택한 옵션에 따라 캐릭터를 생성하는 예제를 만들어보겠습니다.</p><pre><code class="highlight html"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">head</span>&gt;</span>    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span>    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span>    <span class="tag">&lt;<span class="name">title</span>&gt;</span>RPG 캐릭터 생성 예제<span class="tag">&lt;/<span class="name">title</span>&gt;</span>  <span class="tag">&lt;/<span class="name">head</span>&gt;</span>  <span class="tag">&lt;<span class="name">body</span>&gt;</span>    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>캐릭터 생성<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>      <span class="tag">&lt;<span class="name">label</span>&gt;</span>        이름:        <span class="tag">&lt;<span class="name">input</span></span><span class="tag">          <span class="attr">v-model</span>=<span class="string">&quot;character.name&quot;</span></span><span class="tag">          <span class="attr">placeholder</span>=<span class="string">&quot;캐릭터 이름을 입력하세요&quot;</span></span><span class="tag">        /&gt;</span>      <span class="tag">&lt;/<span class="name">label</span>&gt;</span>      <span class="tag">&lt;<span class="name">br</span> /&gt;</span>      <span class="tag">&lt;<span class="name">label</span>&gt;</span>        클래스:        <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;character.class&quot;</span>&gt;</span>          <span class="tag">&lt;<span class="name">option</span> <span class="attr">disabled</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>클래스를 선택하세요<span class="tag">&lt;/<span class="name">option</span>&gt;</span>          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;전사&quot;</span>&gt;</span>전사<span class="tag">&lt;/<span class="name">option</span>&gt;</span>          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;법사&quot;</span>&gt;</span>법사<span class="tag">&lt;/<span class="name">option</span>&gt;</span>          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;도적&quot;</span>&gt;</span>도적<span class="tag">&lt;/<span class="name">option</span>&gt;</span>        <span class="tag">&lt;/<span class="name">select</span>&gt;</span>      <span class="tag">&lt;/<span class="name">label</span>&gt;</span>      <span class="tag">&lt;<span class="name">br</span> /&gt;</span>      <span class="tag">&lt;<span class="name">p</span>&gt;</span>캐릭터 이름: &#123;&#123; character.name &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span>      <span class="tag">&lt;<span class="name">p</span>&gt;</span>캐릭터 클래스: &#123;&#123; character.class &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span>      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;createCharacter&quot;</span>&gt;</span>캐릭터 생성<span class="tag">&lt;/<span class="name">button</span>&gt;</span>    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">      <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><span class="language-javascript">          <span class="keyword">return</span> &#123;</span><span class="language-javascript">            <span class="attr">character</span>: &#123;</span><span class="language-javascript">              <span class="attr">name</span>: <span class="string">&quot;&quot;</span>,</span><span class="language-javascript">              <span class="attr">class</span>: <span class="string">&quot;&quot;</span>,</span><span class="language-javascript">            &#125;,</span><span class="language-javascript">          &#125;;</span><span class="language-javascript">        &#125;,</span><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span><span class="language-javascript">          <span class="title function_">createCharacter</span>(<span class="params"></span>) &#123;</span><span class="language-javascript">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">character</span>.<span class="property">name</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">character</span>.<span class="property">class</span>) &#123;</span><span class="language-javascript">              <span class="title function_">alert</span>(</span><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">character</span>.<span class="property">name</span> +</span><span class="language-javascript">                  <span class="string">&quot; (&quot;</span> +</span><span class="language-javascript">                  <span class="variable language_">this</span>.<span class="property">character</span>.<span class="property">class</span> +</span><span class="language-javascript">                  <span class="string">&quot;) 캐릭터가 생성되었습니다!&quot;</span></span><span class="language-javascript">              );</span><span class="language-javascript">            &#125; <span class="keyword">else</span> &#123;</span><span class="language-javascript">              <span class="title function_">alert</span>(<span class="string">&quot;이름과 클래스를 모두 입력하세요.&quot;</span>);</span><span class="language-javascript">            &#125;</span><span class="language-javascript">          &#125;,</span><span class="language-javascript">        &#125;,</span><span class="language-javascript">      &#125;);</span><span class="language-javascript"></span><span class="language-javascript">      app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  <span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></code></pre><h3 id="예제-설명"><a href="#예제-설명" class="headerlink" title="예제 설명"></a>예제 설명</h3><p>이 예제에서는 사용자가 캐릭터의 이름을 입력하고, 클래스(직업)를 선택할 수 있습니다. 양방향 데이터 바인딩을 통해 입력된 데이터는 실시간으로 <code>character</code> 객체에 반영됩니다. 사용자가 모든 정보를 입력한 후 “캐릭터 생성” 버튼을 클릭하면, 캐릭터가 생성되었다는 알림이 표시됩니다.</p><h2 id="3-Composition-API에서-v-model-사용"><a href="#3-Composition-API에서-v-model-사용" class="headerlink" title="3. Composition API에서 v-model 사용"></a>3. Composition API에서 v-model 사용</h2><blockquote><p>만약 Vue가 처음이시라면 이 섹션은 건너 뛰어주세요!</p></blockquote><p>Vue3에 추가된 <a href="/vue/24/">Composition API</a>를 사용하여 컴포넌트를 더욱 유연하고 모듈화된 방식으로 작성할 수 있습니다.</p><h3 id="기본-양방향-바인딩"><a href="#기본-양방향-바인딩" class="headerlink" title="기본 양방향 바인딩"></a>기본 양방향 바인딩</h3><p>Composition API에서 <code>v-model</code>을 사용하는 기본적인 예제입니다.</p><pre><code class="highlight html"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;메시지를 입력하세요&quot;</span> /&gt;</span>  <span class="tag">&lt;<span class="name">p</span>&gt;</span>입력한 메시지: &#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="keyword">import</span> &#123; createApp, ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;</span><span class="language-javascript">    <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><span class="language-javascript">      <span class="keyword">const</span> message = <span class="title function_">ref</span>(<span class="string">&quot;&quot;</span>);</span><span class="language-javascript"></span><span class="language-javascript">      <span class="keyword">return</span> &#123;</span><span class="language-javascript">        message,</span><span class="language-javascript">      &#125;;</span><span class="language-javascript">    &#125;,</span><span class="language-javascript">  &#125;);</span><span class="language-javascript"></span><span class="language-javascript">  app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></code></pre><p>이 예제에서 <code>message</code>는 <code>ref</code>를 사용하여 선언되었으며, <code>v-model</code>을 통해 양방향으로 바인딩됩니다. 사용자가 입력한 값은 <code>message</code>에 실시간으로 반영되며, 반대로 <code>message</code>의 변경도 입력 필드에 즉시 반영됩니다.</p><h3 id="복수의-v-model-사용"><a href="#복수의-v-model-사용" class="headerlink" title="복수의 v-model 사용"></a>복수의 v-model 사용</h3><p>Vue3에서는 복수의 <code>v-model</code> 바인딩을 통해 더 복잡한 양방향 바인딩을 구현할 수 있습니다.</p><pre><code class="highlight html"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">custom-input</span> <span class="attr">v-model</span>=<span class="string">&quot;username&quot;</span> <span class="attr">v-model:password</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">custom-input</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="keyword">import</span> &#123; createApp, ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="keyword">const</span> <span class="title class_">CustomInput</span> = &#123;</span><span class="language-javascript">    <span class="attr">template</span>: <span class="string">`</span></span><span class="string"><span class="language-javascript">      &lt;div&gt;</span></span><span class="string"><span class="language-javascript">        &lt;input v-model=&quot;modelValue&quot; placeholder=&quot;이름을 입력하세요&quot; /&gt;</span></span><span class="string"><span class="language-javascript">        &lt;input v-model=&quot;passwordValue&quot; placeholder=&quot;비밀번호를 입력하세요&quot; /&gt;</span></span><span class="string"><span class="language-javascript">      &lt;/div&gt;</span></span><span class="string"><span class="language-javascript">    `</span>,</span><span class="language-javascript">    <span class="attr">props</span>: [<span class="string">&quot;modelValue&quot;</span>, <span class="string">&quot;passwordValue&quot;</span>],</span><span class="language-javascript">  &#125;;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;</span><span class="language-javascript">    <span class="attr">components</span>: &#123;</span><span class="language-javascript">      <span class="string">&quot;custom-input&quot;</span>: <span class="title class_">CustomInput</span>,</span><span class="language-javascript">    &#125;,</span><span class="language-javascript">    <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><span class="language-javascript">      <span class="keyword">const</span> username = <span class="title function_">ref</span>(<span class="string">&quot;&quot;</span>);</span><span class="language-javascript">      <span class="keyword">const</span> password = <span class="title function_">ref</span>(<span class="string">&quot;&quot;</span>);</span><span class="language-javascript"></span><span class="language-javascript">      <span class="keyword">return</span> &#123;</span><span class="language-javascript">        username,</span><span class="language-javascript">        password,</span><span class="language-javascript">      &#125;;</span><span class="language-javascript">    &#125;,</span><span class="language-javascript">  &#125;);</span><span class="language-javascript"></span><span class="language-javascript">  app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></code></pre><p>위 예제에서는 사용자 정의 컴포넌트 <code>custom-input</code>에 두 개의 <code>v-model</code>을 사용하여 <code>username</code>과 <code>password</code>를 각각 바인딩합니다. 이를 통해 더욱 복잡한 폼 데이터도 쉽게 처리할 수 있습니다.</p><h3 id="예제-RPG-게임에서의-Composition-API와-v-model-활용"><a href="#예제-RPG-게임에서의-Composition-API와-v-model-활용" class="headerlink" title="예제: RPG 게임에서의 Composition API와 v-model 활용"></a>예제: RPG 게임에서의 Composition API와 v-model 활용</h3><p>Composition API를 사용하여 RPG 게임에서 캐릭터의 이름과 클래스를 입력받고, 캐릭터를 생성하는 예제를 만들어보겠습니다.</p><pre><code class="highlight html"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">head</span>&gt;</span>    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span>    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span>    <span class="tag">&lt;<span class="name">title</span>&gt;</span>RPG 캐릭터 생성 예제<span class="tag">&lt;/<span class="name">title</span>&gt;</span>  <span class="tag">&lt;/<span class="name">head</span>&gt;</span>  <span class="tag">&lt;<span class="name">body</span>&gt;</span>    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>캐릭터 생성<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>      <span class="tag">&lt;<span class="name">label</span>&gt;</span>        이름:        <span class="tag">&lt;<span class="name">input</span></span><span class="tag">          <span class="attr">v-model</span>=<span class="string">&quot;character.name&quot;</span></span><span class="tag">          <span class="attr">placeholder</span>=<span class="string">&quot;캐릭터 이름을 입력하세요&quot;</span></span><span class="tag">        /&gt;</span>      <span class="tag">&lt;/<span class="name">label</span>&gt;</span>      <span class="tag">&lt;<span class="name">br</span> /&gt;</span>      <span class="tag">&lt;<span class="name">label</span>&gt;</span>        클래스:        <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;character.class&quot;</span>&gt;</span>          <span class="tag">&lt;<span class="name">option</span> <span class="attr">disabled</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>클래스를 선택하세요<span class="tag">&lt;/<span class="name">option</span>&gt;</span>          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;전사&quot;</span>&gt;</span>전사<span class="tag">&lt;/<span class="name">option</span>&gt;</span>          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;법사&quot;</span>&gt;</span>법사<span class="tag">&lt;/<span class="name">option</span>&gt;</span>          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;도적&quot;</span>&gt;</span>도적<span class="tag">&lt;/<span class="name">option</span>&gt;</span>        <span class="tag">&lt;/<span class="name">select</span>&gt;</span>      <span class="tag">&lt;/<span class="name">label</span>&gt;</span>      <span class="tag">&lt;<span class="name">br</span> /&gt;</span>      <span class="tag">&lt;<span class="name">p</span>&gt;</span>캐릭터 이름: &#123;&#123; character.name &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span>      <span class="tag">&lt;<span class="name">p</span>&gt;</span>캐릭터 클래스: &#123;&#123; character.class &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span>      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;createCharacter&quot;</span>&gt;</span>캐릭터 생성<span class="tag">&lt;/<span class="name">button</span>&gt;</span>    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">      <span class="keyword">import</span> &#123; createApp, reactive &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><span class="language-javascript"></span><span class="language-javascript">      <span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;</span><span class="language-javascript">        <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><span class="language-javascript">          <span class="keyword">const</span> character = <span class="title function_">reactive</span>(&#123;</span><span class="language-javascript">            <span class="attr">name</span>: <span class="string">&quot;&quot;</span>,</span><span class="language-javascript">            <span class="attr">class</span>: <span class="string">&quot;&quot;</span>,</span><span class="language-javascript">          &#125;);</span><span class="language-javascript"></span><span class="language-javascript">          <span class="keyword">const</span> <span class="title function_">createCharacter</span> = (<span class="params"></span>) =&gt; &#123;</span><span class="language-javascript">            <span class="keyword">if</span> (character.<span class="property">name</span> &amp;&amp; character.<span class="property">class</span>) &#123;</span><span class="language-javascript">              <span class="title function_">alert</span>(</span><span class="language-javascript">                <span class="string">`<span class="subst">$&#123;character.name&#125;</span> (<span class="subst">$&#123;character.<span class="keyword">class</span>&#125;</span>) 캐릭터가 생성되었습니다!`</span></span><span class="language-javascript">              );</span><span class="language-javascript">            &#125; <span class="keyword">else</span> &#123;</span><span class="language-javascript">              <span class="title function_">alert</span>(<span class="string">&quot;이름과 클래스를 모두 입력하세요.&quot;</span>);</span><span class="language-javascript">            &#125;</span><span class="language-javascript">          &#125;;</span><span class="language-javascript"></span><span class="language-javascript">          <span class="keyword">return</span> &#123;</span><span class="language-javascript">            character,</span><span class="language-javascript">            createCharacter,</span><span class="language-javascript">          &#125;;</span><span class="language-javascript">        &#125;,</span><span class="language-javascript">      &#125;);</span><span class="language-javascript"></span><span class="language-javascript">      app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  <span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></code></pre><h3 id="예제-설명-1"><a href="#예제-설명-1" class="headerlink" title="예제 설명"></a>예제 설명</h3><p>이 예제에서는 <code>reactive</code>를 사용하여 <code>character</code> 객체를 선언하고, <code>v-model</code>을 사용하여 양방향 데이터 바인딩을 설정합니다. 사용자가 이름과 클래스를 입력한 후 “캐릭터 생성” 버튼을 클릭하면, 해당 정보로 캐릭터가 생성됩니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 Vue.js에서 <code>v-model</code>을 사용한 양방향 데이터 바인딩의 원리와 폼 입력 요소에 이를 적용하는 방법에 대해 알아보았습니다. <code>v-model</code>은 사용자 입력을 처리하는 데 있어 매우 유용하며, 이를 통해 폼 데이터를 쉽게 관리할 수 있습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue 이벤트 핸들링 v-on</title>
      <link href="/vue/9/"/>
      <url>/vue/9/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-이벤트-핸들링-v-on"><a href="#Vue-이벤트-핸들링-v-on" class="headerlink" title="Vue 이벤트 핸들링 v-on"></a>Vue 이벤트 핸들링 v-on</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 Vue.js에서 사용자 인터랙션을 처리하는 방법인 <strong>이벤트 핸들링</strong>에 대해 알아보겠습니다. 이벤트 핸들링은 사용자가 웹 애플리케이션과 상호작용하는 방식을 제어하는 중요한 기능입니다. Vue.js에서는 <code>v-on</code> 디렉티브를 사용하여 DOM 이벤트를 쉽게 처리할 수 있으며, 이벤트 수식어와 키 수식어를 통해 더욱 세밀한 제어가 가능합니다.</p><h2 id="1-DOM-이벤트-리스닝-v-on"><a href="#1-DOM-이벤트-리스닝-v-on" class="headerlink" title="1. DOM 이벤트 리스닝 (v-on)"></a>1. DOM 이벤트 리스닝 (<code>v-on</code>)</h2><h3 id="v-on의-기본-사용법"><a href="#v-on의-기본-사용법" class="headerlink" title="v-on의 기본 사용법"></a><code>v-on</code>의 기본 사용법</h3><p>Vue.js에서 DOM 이벤트를 처리하려면 <code>v-on</code> 디렉티브를 사용합니다. 이 디렉티브는 이벤트가 발생했을 때 실행할 메소드를 지정할 수 있습니다. 또한, <code>v-on</code>은 축약형으로 <code>@</code>를 사용할 수 있어 코드가 더욱 간결해집니다.</p><pre><code class="highlight html"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;handleClick&quot;</span>&gt;</span>클릭하세요<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;</span><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span><span class="language-javascript">      <span class="title function_">handleClick</span>(<span class="params"></span>) &#123;</span><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&quot;버튼이 클릭되었습니다!&quot;</span>);</span><span class="language-javascript">      &#125;,</span><span class="language-javascript">    &#125;,</span><span class="language-javascript">  &#125;);</span><span class="language-javascript"></span><span class="language-javascript">  app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></code></pre><p>위 예제에서 <code>v-on:click</code> 디렉티브는 버튼이 클릭될 때 <code>handleClick</code> 메소드를 실행합니다. 이 메소드는 간단히 알림을 표시합니다.</p><h3 id="메소드에-이벤트-객체-전달하기"><a href="#메소드에-이벤트-객체-전달하기" class="headerlink" title="메소드에 이벤트 객체 전달하기"></a>메소드에 이벤트 객체 전달하기</h3><p>이벤트 핸들러 메소드에서 이벤트 객체에 접근하려면 메소드 호출 시 <code>$event</code>를 인자로 전달하면 됩니다.</p><pre><code class="highlight html"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:input</span>=<span class="string">&quot;handleInput&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;여기에 입력하세요&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;</span><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span><span class="language-javascript">      <span class="title function_">handleInput</span>(<span class="params">event</span>) &#123;</span><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;입력된 값:&quot;</span>, event.<span class="property">target</span>.<span class="property">value</span>);</span><span class="language-javascript">      &#125;,</span><span class="language-javascript">    &#125;,</span><span class="language-javascript">  &#125;);</span><span class="language-javascript"></span><span class="language-javascript">  app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></code></pre><p>위 예제에서 <code>handleInput</code> 메소드는 입력 이벤트를 처리하며, 이벤트 객체를 통해 입력된 값을 출력합니다.</p><h2 id="2-이벤트-수식어와-키-수식어-사용"><a href="#2-이벤트-수식어와-키-수식어-사용" class="headerlink" title="2. 이벤트 수식어와 키 수식어 사용"></a>2. 이벤트 수식어와 키 수식어 사용</h2><h3 id="이벤트-수식어"><a href="#이벤트-수식어" class="headerlink" title="이벤트 수식어"></a>이벤트 수식어</h3><p>이벤트 수식어는 이벤트 처리 로직을 간단하게 하기 위해 제공되는 기능입니다. Vue.js에서는 몇 가지 유용한 수식어를 제공하여 이벤트의 기본 동작을 쉽게 제어할 수 있습니다.</p><ul><li><strong><code>.stop</code></strong>: 이벤트의 전파를 중단합니다. (이벤트 버블링을 막음)</li><li><strong><code>.prevent</code></strong>: 이벤트의 기본 동작을 막습니다.</li><li><strong><code>.capture</code></strong>: 이벤트를 캡처 단계에서 처리합니다.</li><li><strong><code>.self</code></strong>: 이벤트가 해당 요소에서만 발생할 때만 처리합니다.</li><li><strong><code>.once</code></strong>: 이벤트를 한 번만 처리합니다.</li></ul><pre><code class="highlight html"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>=<span class="string">&quot;handleSubmit&quot;</span>&gt;</span>    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;이름을 입력하세요&quot;</span> /&gt;</span>    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>제출<span class="tag">&lt;/<span class="name">button</span>&gt;</span>  <span class="tag">&lt;/<span class="name">form</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;</span><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span><span class="language-javascript">      <span class="title function_">handleSubmit</span>(<span class="params"></span>) &#123;</span><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&quot;폼이 제출되었습니다!&quot;</span>);</span><span class="language-javascript">      &#125;,</span><span class="language-javascript">    &#125;,</span><span class="language-javascript">  &#125;);</span><span class="language-javascript"></span><span class="language-javascript">  app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></code></pre><p>위 예제에서 <code>.prevent</code> 수식어를 사용하여 폼이 실제로 제출되는 것을 막고, 대신 JavaScript로 처리하도록 했습니다.</p><h3 id="키-수식어"><a href="#키-수식어" class="headerlink" title="키 수식어"></a>키 수식어</h3><p>키 수식어는 키보드 이벤트를 처리할 때 유용합니다. 특정 키에만 반응하도록 설정할 수 있어, 사용자 입력을 더욱 정교하게 제어할 수 있습니다.</p><pre><code class="highlight html"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.enter</span>=<span class="string">&quot;submitForm&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Enter 키로 제출&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;</span><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span><span class="language-javascript">      <span class="title function_">submitForm</span>(<span class="params"></span>) &#123;</span><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&quot;폼이 제출되었습니다!&quot;</span>);</span><span class="language-javascript">      &#125;,</span><span class="language-javascript">    &#125;,</span><span class="language-javascript">  &#125;);</span><span class="language-javascript"></span><span class="language-javascript">  app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></code></pre><p>위 예제에서 <code>v-on:keyup.enter</code>는 사용자가 <code>Enter</code> 키를 눌렀을 때만 <code>submitForm</code> 메소드를 실행합니다.</p><h3 id="사용자-정의-키-수식어"><a href="#사용자-정의-키-수식어" class="headerlink" title="사용자 정의 키 수식어"></a>사용자 정의 키 수식어</h3><p>Vue.js는 미리 정의된 키 수식어 외에도 특정 키 코드를 사용하여 사용자 정의 키 수식어를 만들 수 있습니다.</p><pre><code class="highlight html"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.f1</span>=<span class="string">&quot;triggerHelp&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;F1 키로 도움말 표시&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;</span><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span><span class="language-javascript">      <span class="title function_">triggerHelp</span>(<span class="params"></span>) &#123;</span><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&quot;도움말을 표시합니다!&quot;</span>);</span><span class="language-javascript">      &#125;,</span><span class="language-javascript">    &#125;,</span><span class="language-javascript">  &#125;);</span><span class="language-javascript"></span><span class="language-javascript">  app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></code></pre><p>위 예제에서 <code>v-on:keyup.f1</code>는 사용자가 <code>F1</code> 키를 눌렀을 때만 <code>triggerHelp</code> 메소드를 실행합니다.</p><h2 id="3-예제-RPG-게임에서의-이벤트-핸들링-활용"><a href="#3-예제-RPG-게임에서의-이벤트-핸들링-활용" class="headerlink" title="3. 예제: RPG 게임에서의 이벤트 핸들링 활용"></a>3. 예제: RPG 게임에서의 이벤트 핸들링 활용</h2><p>RPG 게임에서 캐릭터의 공격 버튼을 만들고, 이 버튼을 클릭하면 캐릭터가 공격하는 이벤트를 처리하는 예제를 만들어보겠습니다.</p><pre><code class="highlight html"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">head</span>&gt;</span>    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span>    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span>    <span class="tag">&lt;<span class="name">title</span>&gt;</span>RPG 공격 예제<span class="tag">&lt;/<span class="name">title</span>&gt;</span>  <span class="tag">&lt;/<span class="name">head</span>&gt;</span>  <span class="tag">&lt;<span class="name">body</span>&gt;</span>    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; character.name &#125;&#125;의 공격<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;attack&quot;</span>&gt;</span>공격<span class="tag">&lt;/<span class="name">button</span>&gt;</span>      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.stop</span>=<span class="string">&quot;specialAttack&quot;</span>&gt;</span>특수 공격<span class="tag">&lt;/<span class="name">button</span>&gt;</span>      <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.space</span>=<span class="string">&quot;jump&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Space 키로 점프&quot;</span> /&gt;</span>    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">      <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><span class="language-javascript">          <span class="keyword">return</span> &#123;</span><span class="language-javascript">            <span class="attr">character</span>: &#123;</span><span class="language-javascript">              <span class="attr">name</span>: <span class="string">&quot;전사&quot;</span>,</span><span class="language-javascript">            &#125;,</span><span class="language-javascript">          &#125;;</span><span class="language-javascript">        &#125;,</span><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span><span class="language-javascript">          <span class="title function_">attack</span>(<span class="params"></span>) &#123;</span><span class="language-javascript">            <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">character</span>.<span class="property">name</span> + <span class="string">&quot;이(가) 공격합니다!&quot;</span>);</span><span class="language-javascript">          &#125;,</span><span class="language-javascript">          <span class="title function_">specialAttack</span>(<span class="params"></span>) &#123;</span><span class="language-javascript">            <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">character</span>.<span class="property">name</span> + <span class="string">&quot;이(가) 특수 공격을 사용합니다!&quot;</span>);</span><span class="language-javascript">          &#125;,</span><span class="language-javascript">          <span class="title function_">jump</span>(<span class="params"></span>) &#123;</span><span class="language-javascript">            <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">character</span>.<span class="property">name</span> + <span class="string">&quot;이(가) 점프합니다!&quot;</span>);</span><span class="language-javascript">          &#125;,</span><span class="language-javascript">        &#125;,</span><span class="language-javascript">      &#125;);</span><span class="language-javascript"></span><span class="language-javascript">      app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  <span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></code></pre><h3 id="예제-설명"><a href="#예제-설명" class="headerlink" title="예제 설명"></a>예제 설명</h3><p>이 예제에서는 세 가지 이벤트를 처리합니다:</p><ol><li><strong>공격 버튼</strong>: 클릭 시 캐릭터가 기본 공격을 수행합니다.</li><li><strong>특수 공격 버튼</strong>: 클릭 시 캐릭터가 특수 공격을 수행하며, <code>.stop</code> 수식어를 사용해 이벤트 전파를 막습니다.</li><li><strong>점프 입력</strong>: <code>Space</code> 키를 눌렀을 때 캐릭터가 점프를 수행합니다.</li></ol><h2 id="4-Composition-API에서-이벤트-핸들링-사용"><a href="#4-Composition-API에서-이벤트-핸들링-사용" class="headerlink" title="4. Composition API에서 이벤트 핸들링 사용"></a>4. Composition API에서 이벤트 핸들링 사용</h2><blockquote><p>만약 Vue가 처음이시라면 이 섹션은 건너 뛰어주세요!</p></blockquote><p>Vue3에 추가된 <a href="/vue/24/">Composition API</a>를 사용하여 컴포넌트를 더욱 유연하고 모듈화된 방식으로 작성할 수 있습니다.</p><h3 id="기본-이벤트-핸들링"><a href="#기본-이벤트-핸들링" class="headerlink" title="기본 이벤트 핸들링"></a>기본 이벤트 핸들링</h3><p>Composition API를 사용하여 이벤트를 처리하는 기본적인 예제입니다.</p><pre><code class="highlight html"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handleClick&quot;</span>&gt;</span>클릭하세요<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><span class="language-javascript">  <span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;</span><span class="language-javascript">    <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><span class="language-javascript">      <span class="keyword">const</span> <span class="title function_">handleClick</span> = (<span class="params"></span>) =&gt; &#123;</span><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&quot;버튼이 클릭되었습니다!&quot;</span>);</span><span class="language-javascript">      &#125;;</span><span class="language-javascript"></span><span class="language-javascript">      <span class="keyword">return</span> &#123;</span><span class="language-javascript">        handleClick,</span><span class="language-javascript">      &#125;;</span><span class="language-javascript">    &#125;,</span><span class="language-javascript">  &#125;);</span><span class="language-javascript"></span><span class="language-javascript">  app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></code></pre><h3 id="이벤트-객체-전달"><a href="#이벤트-객체-전달" class="headerlink" title="이벤트 객체 전달"></a>이벤트 객체 전달</h3><p>Composition API에서 이벤트 객체를 전달받아 사용하는 방법도 매우 간단합니다.</p><pre><code class="highlight html"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:input</span>=<span class="string">&quot;handleInput&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;여기에 입력하세요&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><span class="language-javascript">  <span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;</span><span class="language-javascript">    <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><span class="language-javascript">      <span class="keyword">const</span> <span class="title function_">handleInput</span> = (<span class="params">event</span>) =&gt; &#123;</span><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;입력된 값:&quot;</span>, event.<span class="property">target</span>.<span class="property">value</span>);</span><span class="language-javascript">      &#125;;</span><span class="language-javascript"></span><span class="language-javascript">      <span class="keyword">return</span> &#123;</span><span class="language-javascript">        handleInput,</span><span class="language-javascript">      &#125;;</span><span class="language-javascript">    &#125;,</span><span class="language-javascript">  &#125;);</span><span class="language-javascript"></span><span class="language-javascript">  app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></code></pre><p>이 예제에서 <code>handleInput</code> 함수는 <code>input</code> 이벤트의 이벤트 객체를 전달받아, 입력된 값을 콘솔에 출력합니다.</p><h3 id="이벤트-수식어와-키-수식어-사용"><a href="#이벤트-수식어와-키-수식어-사용" class="headerlink" title="이벤트 수식어와 키 수식어 사용"></a>이벤트 수식어와 키 수식어 사용</h3><p>Composition API에서도 이벤트 수식어와 키 수식어를 그대로 사용할 수 있습니다.</p><pre><code class="highlight html"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">form</span> @<span class="attr">submit.prevent</span>=<span class="string">&quot;handleSubmit&quot;</span>&gt;</span>    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;이름을 입력하세요&quot;</span> /&gt;</span>    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>제출<span class="tag">&lt;/<span class="name">button</span>&gt;</span>  <span class="tag">&lt;/<span class="name">form</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;</span><span class="language-javascript">    <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><span class="language-javascript">      <span class="keyword">const</span> <span class="title function_">handleSubmit</span> = (<span class="params"></span>) =&gt; &#123;</span><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&quot;폼이 제출되었습니다!&quot;</span>);</span><span class="language-javascript">      &#125;;</span><span class="language-javascript"></span><span class="language-javascript">      <span class="keyword">return</span> &#123;</span><span class="language-javascript">        handleSubmit,</span><span class="language-javascript">      &#125;;</span><span class="language-javascript">    &#125;,</span><span class="language-javascript">  &#125;);</span><span class="language-javascript"></span><span class="language-javascript">  app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></code></pre><h3 id="예제-RPG-게임에서의-Composition-API와-이벤트-핸들링-활용"><a href="#예제-RPG-게임에서의-Composition-API와-이벤트-핸들링-활용" class="headerlink" title="예제: RPG 게임에서의 Composition API와 이벤트 핸들링 활용"></a>예제: RPG 게임에서의 Composition API와 이벤트 핸들링 활용</h3><p>Composition API를 사용하여 RPG 게임에서 캐릭터의 공격 버튼을 만들고, 이 버튼을 클릭했을 때 캐릭터가 공격하는 이벤트를 처리하는 예제를 만들어보겠습니다.</p><pre><code class="highlight html"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">head</span>&gt;</span>    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span>    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span>    <span class="tag">&lt;<span class="name">title</span>&gt;</span>RPG 공격 예제<span class="tag">&lt;/<span class="name">title</span>&gt;</span>  <span class="tag">&lt;/<span class="name">head</span>&gt;</span>  <span class="tag">&lt;<span class="name">body</span>&gt;</span>    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; character.name &#125;&#125;의 공격<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;attack&quot;</span>&gt;</span>공격<span class="tag">&lt;/<span class="name">button</span>&gt;</span>      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.stop</span>=<span class="string">&quot;specialAttack&quot;</span>&gt;</span>특수 공격<span class="tag">&lt;/<span class="name">button</span>&gt;</span>      <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.space</span>=<span class="string">&quot;jump&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Space 키로 점프&quot;</span> /&gt;</span>    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">      <span class="keyword">import</span> &#123; createApp, ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><span class="language-javascript"></span><span class="language-javascript">      <span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;</span><span class="language-javascript">        <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><span class="language-javascript">          <span class="keyword">const</span> character = <span class="title function_">ref</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;전사&quot;</span> &#125;);</span><span class="language-javascript"></span><span class="language-javascript">          <span class="keyword">const</span> <span class="title function_">attack</span> = (<span class="params"></span>) =&gt; &#123;</span><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">`<span class="subst">$&#123;character.value.name&#125;</span>이(가) 공격합니다!`</span>);</span><span class="language-javascript">          &#125;;</span><span class="language-javascript"></span><span class="language-javascript">          <span class="keyword">const</span> <span class="title function_">specialAttack</span> = (<span class="params"></span>) =&gt; &#123;</span><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">`<span class="subst">$&#123;character.value.name&#125;</span>이(가) 특수 공격을 사용합니다!`</span>);</span><span class="language-javascript">          &#125;;</span><span class="language-javascript"></span><span class="language-javascript">          <span class="keyword">const</span> <span class="title function_">jump</span> = (<span class="params"></span>) =&gt; &#123;</span><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">`<span class="subst">$&#123;character.value.name&#125;</span>이(가) 점프합니다!`</span>);</span><span class="language-javascript">          &#125;;</span><span class="language-javascript"></span><span class="language-javascript">          <span class="keyword">return</span> &#123;</span><span class="language-javascript">            character,</span><span class="language-javascript">            attack,</span><span class="language-javascript">            specialAttack,</span><span class="language-javascript">            jump,</span><span class="language-javascript">          &#125;;</span><span class="language-javascript">        &#125;,</span><span class="language-javascript">      &#125;);</span><span class="language-javascript"></span><span class="language-javascript">      app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  <span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></code></pre><h3 id="예제-설명-1"><a href="#예제-설명-1" class="headerlink" title="예제 설명"></a>예제 설명</h3><p>이 예제에서는 Composition API를 사용하여 RPG 캐릭터의 다양한 동작(공격, 특수 공격, 점프)을 이벤트 핸들러로 처리합니다. 이벤트 수식어와 키 수식어를 결합하여 더 정교한 상호작용을 구현할 수 있습니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 Vue.js에서 DOM 이벤트를 처리하는 방법과 이벤트 수식어, 키 수식어를 활용하여 사용자 인터랙션을 더욱 정교하게 제어하는 방법에 대해 알아보았습니다. 이벤트 핸들링은 사용자와의 상호작용을 처리하는 중요한 부분이며, 이를 활용하여 더 인터랙티브한 웹 애플리케이션을 개발해보세요!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue 목록 렌더링 v-for</title>
      <link href="/vue/8/"/>
      <url>/vue/8/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-목록-렌더링-v-for"><a href="#Vue-목록-렌더링-v-for" class="headerlink" title="Vue 목록 렌더링 v-for"></a>Vue 목록 렌더링 v-for</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 Vue.js에서 데이터를 반복 렌더링하는 방법인 <strong>목록 렌더링</strong>에 대해 알아보겠습니다. <code>v-for</code> 디렉티브를 사용하면 배열이나 객체의 데이터를 쉽게 렌더링할 수 있으며, 각 항목에 대한 동작을 개별적으로 처리할 수 있습니다.</p><h2 id="1-v-for를-사용한-리스트-렌더링"><a href="#1-v-for를-사용한-리스트-렌더링" class="headerlink" title="1. v-for를 사용한 리스트 렌더링"></a>1. <code>v-for</code>를 사용한 리스트 렌더링</h2><h3 id="v-for의-기본-사용법"><a href="#v-for의-기본-사용법" class="headerlink" title="v-for의 기본 사용법"></a><code>v-for</code>의 기본 사용법</h3><p><code>v-for</code> 디렉티브는 배열 또는 객체의 각 항목을 반복적으로 렌더링할 때 사용됩니다. 가장 기본적인 형태로는 배열의 요소를 렌더링하는 예제가 있습니다.</p><pre><code class="highlight html"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">ul</span>&gt;</span>    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item&quot;</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span>  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;</span><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><span class="language-javascript">      <span class="keyword">return</span> &#123;</span><span class="language-javascript">        <span class="attr">items</span>: [<span class="string">&quot;검&quot;</span>, <span class="string">&quot;방패&quot;</span>, <span class="string">&quot;포션&quot;</span>, <span class="string">&quot;마법서&quot;</span>],</span><span class="language-javascript">      &#125;;</span><span class="language-javascript">    &#125;,</span><span class="language-javascript">  &#125;);</span><span class="language-javascript"></span><span class="language-javascript">  app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></code></pre><p>위 예제에서 <code>v-for</code> 디렉티브는 <code>items</code> 배열의 각 요소를 순회하며 <code>&lt;li&gt;</code> 요소로 렌더링합니다. <code>:key</code> 속성은 각 요소에 고유한 식별자를 부여하여 Vue.js가 효율적으로 DOM 업데이트를 관리할 수 있도록 돕습니다.</p><h3 id="인덱스-접근"><a href="#인덱스-접근" class="headerlink" title="인덱스 접근"></a>인덱스 접근</h3><p><code>v-for</code>를 사용할 때, 배열의 요소뿐만 아니라 해당 요소의 인덱스에도 접근할 수 있습니다.</p><pre><code class="highlight html"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">ul</span>&gt;</span>    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in items&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span>      &#123;&#123; index + 1 &#125;&#125;. &#123;&#123; item &#125;&#125;    <span class="tag">&lt;/<span class="name">li</span>&gt;</span>  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;</span><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><span class="language-javascript">      <span class="keyword">return</span> &#123;</span><span class="language-javascript">        <span class="attr">items</span>: [<span class="string">&quot;검&quot;</span>, <span class="string">&quot;방패&quot;</span>, <span class="string">&quot;포션&quot;</span>, <span class="string">&quot;마법서&quot;</span>],</span><span class="language-javascript">      &#125;;</span><span class="language-javascript">    &#125;,</span><span class="language-javascript">  &#125;);</span><span class="language-javascript"></span><span class="language-javascript">  app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></code></pre><p>위 예제에서 <code>index</code>는 각 항목의 인덱스를 나타내며, 이를 사용하여 목록의 순서를 표시할 수 있습니다.</p><h2 id="2-배열과-객체에-대한-루프-처리"><a href="#2-배열과-객체에-대한-루프-처리" class="headerlink" title="2. 배열과 객체에 대한 루프 처리"></a>2. 배열과 객체에 대한 루프 처리</h2><h3 id="배열에-대한-루프-처리"><a href="#배열에-대한-루프-처리" class="headerlink" title="배열에 대한 루프 처리"></a>배열에 대한 루프 처리</h3><p><code>v-for</code>는 배열을 처리할 때 각 요소를 순회하며, 이때 <code>item</code>과 <code>index</code>에 접근할 수 있습니다. 배열이 수정되면 Vue.js는 효율적으로 DOM을 업데이트하여 변경 사항을 반영합니다.</p><pre><code class="highlight html"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">ul</span>&gt;</span>    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in inventory&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span>      &#123;&#123; index + 1 &#125;&#125;: &#123;&#123; item.name &#125;&#125; (수량: &#123;&#123; item.quantity &#125;&#125;)    <span class="tag">&lt;/<span class="name">li</span>&gt;</span>  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;</span><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><span class="language-javascript">      <span class="keyword">return</span> &#123;</span><span class="language-javascript">        <span class="attr">inventory</span>: [</span><span class="language-javascript">          &#123; <span class="attr">name</span>: <span class="string">&quot;검&quot;</span>, <span class="attr">quantity</span>: <span class="number">1</span> &#125;,</span><span class="language-javascript">          &#123; <span class="attr">name</span>: <span class="string">&quot;방패&quot;</span>, <span class="attr">quantity</span>: <span class="number">2</span> &#125;,</span><span class="language-javascript">          &#123; <span class="attr">name</span>: <span class="string">&quot;포션&quot;</span>, <span class="attr">quantity</span>: <span class="number">5</span> &#125;,</span><span class="language-javascript">        ],</span><span class="language-javascript">      &#125;;</span><span class="language-javascript">    &#125;,</span><span class="language-javascript">  &#125;);</span><span class="language-javascript"></span><span class="language-javascript">  app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></code></pre><p>위 예제에서 <code>inventory</code> 배열의 각 항목은 객체이며, <code>v-for</code>를 사용하여 이름과 수량을 출력합니다.</p><h3 id="객체에-대한-루프-처리"><a href="#객체에-대한-루프-처리" class="headerlink" title="객체에 대한 루프 처리"></a>객체에 대한 루프 처리</h3><p><code>v-for</code>를 사용하면 객체의 속성에 대해서도 반복 렌더링을 할 수 있습니다. 이 경우 객체의 키와 값을 모두 접근할 수 있습니다.</p><pre><code class="highlight html"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">ul</span>&gt;</span>    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(value, key) in character&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;key&quot;</span>&gt;</span>&#123;&#123; key &#125;&#125;: &#123;&#123; value &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span>  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;</span><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><span class="language-javascript">      <span class="keyword">return</span> &#123;</span><span class="language-javascript">        <span class="attr">character</span>: &#123;</span><span class="language-javascript">          <span class="attr">name</span>: <span class="string">&quot;전사&quot;</span>,</span><span class="language-javascript">          <span class="attr">level</span>: <span class="number">10</span>,</span><span class="language-javascript">          <span class="attr">class</span>: <span class="string">&quot;탱커&quot;</span>,</span><span class="language-javascript">        &#125;,</span><span class="language-javascript">      &#125;;</span><span class="language-javascript">    &#125;,</span><span class="language-javascript">  &#125;);</span><span class="language-javascript"></span><span class="language-javascript">  app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></code></pre><p>위 예제에서 <code>v-for</code> 디렉티브는 객체의 각 속성을 순회하며, <code>key</code>와 <code>value</code>에 접근하여 이를 렌더링합니다.</p><h3 id="배열-수정에-따른-반응형-렌더링"><a href="#배열-수정에-따른-반응형-렌더링" class="headerlink" title="배열 수정에 따른 반응형 렌더링"></a>배열 수정에 따른 반응형 렌더링</h3><p>Vue.js에서 <code>v-for</code>로 렌더링된 배열을 수정하면 자동으로 화면이 업데이트됩니다. 예를 들어, 배열에 아이템을 추가하거나 제거할 수 있습니다.</p><pre><code class="highlight html"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">ul</span>&gt;</span>    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in inventory&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span>      &#123;&#123; index + 1 &#125;&#125;: &#123;&#123; item.name &#125;&#125; (수량: &#123;&#123; item.quantity &#125;&#125;)    <span class="tag">&lt;/<span class="name">li</span>&gt;</span>  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span>  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addItem&quot;</span>&gt;</span>아이템 추가<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;</span><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><span class="language-javascript">      <span class="keyword">return</span> &#123;</span><span class="language-javascript">        <span class="attr">inventory</span>: [</span><span class="language-javascript">          &#123; <span class="attr">name</span>: <span class="string">&quot;검&quot;</span>, <span class="attr">quantity</span>: <span class="number">1</span> &#125;,</span><span class="language-javascript">          &#123; <span class="attr">name</span>: <span class="string">&quot;방패&quot;</span>, <span class="attr">quantity</span>: <span class="number">2</span> &#125;,</span><span class="language-javascript">          &#123; <span class="attr">name</span>: <span class="string">&quot;포션&quot;</span>, <span class="attr">quantity</span>: <span class="number">5</span> &#125;,</span><span class="language-javascript">        ],</span><span class="language-javascript">      &#125;;</span><span class="language-javascript">    &#125;,</span><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span><span class="language-javascript">      <span class="title function_">addItem</span>(<span class="params"></span>) &#123;</span><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">inventory</span>.<span class="title function_">push</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;활&quot;</span>, <span class="attr">quantity</span>: <span class="number">1</span> &#125;);</span><span class="language-javascript">      &#125;,</span><span class="language-javascript">    &#125;,</span><span class="language-javascript">  &#125;);</span><span class="language-javascript"></span><span class="language-javascript">  app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></code></pre><p>위 예제에서 <code>addItem</code> 메소드는 <code>inventory</code> 배열에 새로운 아이템을 추가하며, Vue.js는 이를 자동으로 화면에 반영합니다.</p><h2 id="3-예제-RPG-게임에서의-목록-렌더링-활용"><a href="#3-예제-RPG-게임에서의-목록-렌더링-활용" class="headerlink" title="3. 예제: RPG 게임에서의 목록 렌더링 활용"></a>3. 예제: RPG 게임에서의 목록 렌더링 활용</h2><p>RPG 게임에서 파티의 멤버 목록을 렌더링하고, 각 멤버의 이름과 레벨을 표시하는 예제를 만들어보겠습니다.</p><pre><code class="highlight html"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">head</span>&gt;</span>    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span>    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span>    <span class="tag">&lt;<span class="name">title</span>&gt;</span>RPG 파티 목록 예제<span class="tag">&lt;/<span class="name">title</span>&gt;</span>  <span class="tag">&lt;/<span class="name">head</span>&gt;</span>  <span class="tag">&lt;<span class="name">body</span>&gt;</span>    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>파티 멤버<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>      <span class="tag">&lt;<span class="name">ul</span>&gt;</span>        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(member, index) in party&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span>          &#123;&#123; index + 1 &#125;&#125;: &#123;&#123; member.name &#125;&#125; (레벨: &#123;&#123; member.level &#125;&#125;)        <span class="tag">&lt;/<span class="name">li</span>&gt;</span>      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span>      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addMember&quot;</span>&gt;</span>새 멤버 추가<span class="tag">&lt;/<span class="name">button</span>&gt;</span>    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">      <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><span class="language-javascript">          <span class="keyword">return</span> &#123;</span><span class="language-javascript">            <span class="attr">party</span>: [</span><span class="language-javascript">              &#123; <span class="attr">name</span>: <span class="string">&quot;전사&quot;</span>, <span class="attr">level</span>: <span class="number">10</span> &#125;,</span><span class="language-javascript">              &#123; <span class="attr">name</span>: <span class="string">&quot;마법사&quot;</span>, <span class="attr">level</span>: <span class="number">12</span> &#125;,</span><span class="language-javascript">              &#123; <span class="attr">name</span>: <span class="string">&quot;궁수&quot;</span>, <span class="attr">level</span>: <span class="number">8</span> &#125;,</span><span class="language-javascript">            ],</span><span class="language-javascript">          &#125;;</span><span class="language-javascript">        &#125;,</span><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span><span class="language-javascript">          <span class="title function_">addMember</span>(<span class="params"></span>) &#123;</span><span class="language-javascript">            <span class="keyword">const</span> newMember = &#123; <span class="attr">name</span>: <span class="string">&quot;도적&quot;</span>, <span class="attr">level</span>: <span class="number">7</span> &#125;;</span><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">party</span>.<span class="title function_">push</span>(newMember);</span><span class="language-javascript">          &#125;,</span><span class="language-javascript">        &#125;,</span><span class="language-javascript">      &#125;);</span><span class="language-javascript"></span><span class="language-javascript">      app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  <span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></code></pre><h3 id="예제-설명"><a href="#예제-설명" class="headerlink" title="예제 설명"></a>예제 설명</h3><p>이 예제에서는 <code>party</code> 배열에 있는 파티 멤버의 이름과 레벨을 반복적으로 렌더링하고, 버튼을 클릭하면 새로운 멤버를 추가하여 목록에 표시합니다.</p><h2 id="4-Composition-API에서-v-for-사용"><a href="#4-Composition-API에서-v-for-사용" class="headerlink" title="4. Composition API에서 v-for 사용"></a>4. Composition API에서 v-for 사용</h2><blockquote><p>만약 Vue가 처음이시라면 이 섹션은 건너 뛰어주세요!</p></blockquote><p>Vue3에 추가된 <a href="/vue/24/">Composition API</a>를 사용하여 컴포넌트를 더욱 유연하고 모듈화된 방식으로 작성할 수 있습니다.</p><h3 id="Composition-API에서-리스트-렌더링"><a href="#Composition-API에서-리스트-렌더링" class="headerlink" title="Composition API에서 리스트 렌더링"></a>Composition API에서 리스트 렌더링</h3><p>Composition API를 사용해 <code>v-for</code>로 리스트를 렌더링하는 기본 예제입니다.</p><pre><code class="highlight html"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">ul</span>&gt;</span>    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in items&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span>  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="keyword">import</span> &#123; createApp, ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;</span><span class="language-javascript">    <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><span class="language-javascript">      <span class="keyword">const</span> items = <span class="title function_">ref</span>([<span class="string">&quot;검&quot;</span>, <span class="string">&quot;방패&quot;</span>, <span class="string">&quot;포션&quot;</span>, <span class="string">&quot;마법서&quot;</span>]);</span><span class="language-javascript"></span><span class="language-javascript">      <span class="keyword">return</span> &#123;</span><span class="language-javascript">        items,</span><span class="language-javascript">      &#125;;</span><span class="language-javascript">    &#125;,</span><span class="language-javascript">  &#125;);</span><span class="language-javascript"></span><span class="language-javascript">  app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></code></pre><h3 id="배열-수정과-반응형-렌더링"><a href="#배열-수정과-반응형-렌더링" class="headerlink" title="배열 수정과 반응형 렌더링"></a>배열 수정과 반응형 렌더링</h3><p>Composition API에서 <code>ref</code>를 사용하면 배열을 쉽게 수정하고 그에 따라 자동으로 화면이 업데이트됩니다.</p><pre><code class="highlight html"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">ul</span>&gt;</span>    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in items&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span>      &#123;&#123; index + 1 &#125;&#125;: &#123;&#123; item.name &#125;&#125; (수량: &#123;&#123; item.quantity &#125;&#125;)    <span class="tag">&lt;/<span class="name">li</span>&gt;</span>  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span>  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addItem&quot;</span>&gt;</span>아이템 추가<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="keyword">import</span> &#123; createApp, ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;</span><span class="language-javascript">    <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><span class="language-javascript">      <span class="keyword">const</span> items = <span class="title function_">ref</span>([</span><span class="language-javascript">        &#123; <span class="attr">name</span>: <span class="string">&quot;검&quot;</span>, <span class="attr">quantity</span>: <span class="number">1</span> &#125;,</span><span class="language-javascript">        &#123; <span class="attr">name</span>: <span class="string">&quot;방패&quot;</span>, <span class="attr">quantity</span>: <span class="number">2</span> &#125;,</span><span class="language-javascript">        &#123; <span class="attr">name</span>: <span class="string">&quot;포션&quot;</span>, <span class="attr">quantity</span>: <span class="number">5</span> &#125;,</span><span class="language-javascript">      ]);</span><span class="language-javascript"></span><span class="language-javascript">      <span class="keyword">const</span> <span class="title function_">addItem</span> = (<span class="params"></span>) =&gt; &#123;</span><span class="language-javascript">        items.<span class="property">value</span>.<span class="title function_">push</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;활&quot;</span>, <span class="attr">quantity</span>: <span class="number">1</span> &#125;);</span><span class="language-javascript">      &#125;;</span><span class="language-javascript"></span><span class="language-javascript">      <span class="keyword">return</span> &#123;</span><span class="language-javascript">        items,</span><span class="language-javascript">        addItem,</span><span class="language-javascript">      &#125;;</span><span class="language-javascript">    &#125;,</span><span class="language-javascript">  &#125;);</span><span class="language-javascript"></span><span class="language-javascript">  app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></code></pre><h3 id="예제-RPG-게임에서의-Composition-API와-목록-렌더링"><a href="#예제-RPG-게임에서의-Composition-API와-목록-렌더링" class="headerlink" title="예제: RPG 게임에서의 Composition API와 목록 렌더링"></a>예제: RPG 게임에서의 Composition API와 목록 렌더링</h3><p>RPG 게임에서 파티 멤버의 이름과 레벨을 관리하고, 새로운 멤버를 추가하는 예제를 Composition API로 작성해보겠습니다.</p><pre><code class="highlight html"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">head</span>&gt;</span>    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span>    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span>    <span class="tag">&lt;<span class="name">title</span>&gt;</span>RPG 파티 목록 예제<span class="tag">&lt;/<span class="name">title</span>&gt;</span>  <span class="tag">&lt;/<span class="name">head</span>&gt;</span>  <span class="tag">&lt;<span class="name">body</span>&gt;</span>    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>파티 멤버<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>      <span class="tag">&lt;<span class="name">ul</span>&gt;</span>        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(member, index) in party&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span>          &#123;&#123; index + 1 &#125;&#125;: &#123;&#123; member.name &#125;&#125; (레벨: &#123;&#123; member.level &#125;&#125;)        <span class="tag">&lt;/<span class="name">li</span>&gt;</span>      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span>      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addMember&quot;</span>&gt;</span>새 멤버 추가<span class="tag">&lt;/<span class="name">button</span>&gt;</span>    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">      <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span><span class="language-javascript">        <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><span class="language-javascript">          <span class="keyword">const</span> party = <span class="title function_">ref</span>([</span><span class="language-javascript">            &#123; <span class="attr">name</span>: <span class="string">&quot;전사&quot;</span>, <span class="attr">level</span>: <span class="number">10</span> &#125;,</span><span class="language-javascript">            &#123; <span class="attr">name</span>: <span class="string">&quot;마법사&quot;</span>, <span class="attr">level</span>: <span class="number">12</span> &#125;,</span><span class="language-javascript">            &#123; <span class="attr">name</span>: <span class="string">&quot;궁수&quot;</span>, <span class="attr">level</span>: <span class="number">8</span> &#125;,</span><span class="language-javascript">          ]);</span><span class="language-javascript"></span><span class="language-javascript">          <span class="keyword">const</span> <span class="title function_">addMember</span> = (<span class="params"></span>) =&gt; &#123;</span><span class="language-javascript">            party.<span class="property">value</span>.<span class="title function_">push</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;도적&quot;</span>, <span class="attr">level</span>: <span class="number">7</span> &#125;);</span><span class="language-javascript">          &#125;;</span><span class="language-javascript"></span><span class="language-javascript">          <span class="keyword">return</span> &#123;</span><span class="language-javascript">            party,</span><span class="language-javascript">            addMember,</span><span class="language-javascript">          &#125;;</span><span class="language-javascript">        &#125;,</span><span class="language-javascript">      &#125;);</span><span class="language-javascript"></span><span class="language-javascript">      app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  <span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></code></pre><h3 id="예제-설명-1"><a href="#예제-설명-1" class="headerlink" title="예제 설명"></a>예제 설명</h3><p>이 예제에서는 <code>ref</code>를 사용해 반응형 데이터를 관리하고 있으며, 버튼을 클릭할 때마다 파티 멤버가 추가됩니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 Vue.js에서 <code>v-for</code>를 사용하여 배열과 객체를 렌더링하는 방법에 대해 알아보았습니다. 목록 렌더링은 사용자 인터페이스에서 반복적인 데이터를 표시할 때 매우 유용합니다. 이를 잘 활용하면 더 동적인 애플리케이션을 만들어보세요!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue 조건부 렌더링 v-if</title>
      <link href="/vue/7/"/>
      <url>/vue/7/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-조건부-렌더링-v-if"><a href="#Vue-조건부-렌더링-v-if" class="headerlink" title="Vue 조건부 렌더링 v-if"></a>Vue 조건부 렌더링 v-if</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 Vue.js에서 <strong>조건부 렌더링</strong>을 사용하는 방법에 대해 알아보겠습니다. 조건부 렌더링은 특정 조건에 따라 DOM 요소를 표시하거나 숨길 수 있는 기능으로, 유연한 사용자 인터페이스를 구축하는 데 매우 유용합니다.</p><h2 id="1-v-if-v-else-v-else-if의-사용"><a href="#1-v-if-v-else-v-else-if의-사용" class="headerlink" title="1. v-if, v-else, v-else-if의 사용"></a>1. <code>v-if</code>, <code>v-else</code>, <code>v-else-if</code>의 사용</h2><h3 id="v-if-디렉티브"><a href="#v-if-디렉티브" class="headerlink" title="v-if 디렉티브"></a><code>v-if</code> 디렉티브</h3><p><code>v-if</code> 디렉티브는 주어진 조건이 <code>true</code>일 때만 해당 요소를 렌더링합니다. 조건이 <code>false</code>일 경우, 해당 요소는 DOM에서 완전히 제거됩니다.</p><pre><code class="highlight html"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;isLoggedIn&quot;</span>&gt;</span>환영합니다, 사용자님!<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;</span><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><span class="language-javascript">      <span class="keyword">return</span> &#123;</span><span class="language-javascript">        <span class="attr">isLoggedIn</span>: <span class="literal">true</span>,</span><span class="language-javascript">      &#125;;</span><span class="language-javascript">    &#125;,</span><span class="language-javascript">  &#125;);</span><span class="language-javascript"></span><span class="language-javascript">  app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></code></pre><p>위 예제에서 <code>isLoggedIn</code>이 <code>true</code>이면, “환영합니다, 사용자님!” 메시지가 표시되고, <code>false</code>이면 해당 요소가 렌더링되지 않습니다.</p><h3 id="v-else-디렉티브"><a href="#v-else-디렉티브" class="headerlink" title="v-else 디렉티브"></a><code>v-else</code> 디렉티브</h3><p><code>v-else</code> 디렉티브는 <code>v-if</code> 조건이 <code>false</code>일 때 렌더링할 요소를 정의합니다. <code>v-else</code>는 <code>v-if</code> 블록 바로 뒤에 위치해야 합니다.</p><pre><code class="highlight html"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;isLoggedIn&quot;</span>&gt;</span>환영합니다, 사용자님!<span class="tag">&lt;/<span class="name">p</span>&gt;</span>  <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else</span>&gt;</span>로그인이 필요합니다.<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;</span><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><span class="language-javascript">      <span class="keyword">return</span> &#123;</span><span class="language-javascript">        <span class="attr">isLoggedIn</span>: <span class="literal">false</span>,</span><span class="language-javascript">      &#125;;</span><span class="language-javascript">    &#125;,</span><span class="language-javascript">  &#125;);</span><span class="language-javascript"></span><span class="language-javascript">  app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></code></pre><p>위 예제에서 <code>isLoggedIn</code>이 <code>false</code>일 경우, “로그인이 필요합니다.”라는 메시지가 표시됩니다.</p><h3 id="v-else-if-디렉티브"><a href="#v-else-if-디렉티브" class="headerlink" title="v-else-if 디렉티브"></a><code>v-else-if</code> 디렉티브</h3><p><code>v-else-if</code> 디렉티브는 여러 조건을 처리할 때 사용됩니다. <code>v-if</code>와 <code>v-else</code> 사이에 위치하며, 조건이 <code>true</code>일 경우 해당 요소를 렌더링합니다.</p><pre><code class="highlight html"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;role === &#x27;admin&#x27;&quot;</span>&gt;</span>관리자 모드<span class="tag">&lt;/<span class="name">p</span>&gt;</span>  <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else-if</span>=<span class="string">&quot;role === &#x27;user&#x27;&quot;</span>&gt;</span>사용자 모드<span class="tag">&lt;/<span class="name">p</span>&gt;</span>  <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else</span>&gt;</span>게스트 모드<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;</span><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><span class="language-javascript">      <span class="keyword">return</span> &#123;</span><span class="language-javascript">        <span class="attr">role</span>: <span class="string">&quot;user&quot;</span>,</span><span class="language-javascript">      &#125;;</span><span class="language-javascript">    &#125;,</span><span class="language-javascript">  &#125;);</span><span class="language-javascript"></span><span class="language-javascript">  app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></code></pre><p>위 예제에서 <code>role</code>이 <code>&#39;user&#39;</code>일 경우, “사용자 모드”가 렌더링됩니다. 만약 <code>role</code>이 <code>&#39;admin&#39;</code>이라면 “관리자 모드”가, <code>role</code>이 다른 값이라면 “게스트 모드”가 표시됩니다.</p><h2 id="2-조건부-렌더링의-효율적-사용"><a href="#2-조건부-렌더링의-효율적-사용" class="headerlink" title="2. 조건부 렌더링의 효율적 사용"></a>2. 조건부 렌더링의 효율적 사용</h2><h3 id="효율적인-조건부-렌더링"><a href="#효율적인-조건부-렌더링" class="headerlink" title="효율적인 조건부 렌더링"></a>효율적인 조건부 렌더링</h3><p>Vue.js에서 <code>v-if</code>는 조건이 <code>false</code>일 때 요소를 DOM에서 완전히 제거하므로, 성능이 중요한 경우 사용하면 좋습니다. 그러나 반복적인 조건부 렌더링이 발생하면 성능에 영향을 줄 수 있으므로 <code>v-show</code>를 고려할 수 있습니다.</p><h3 id="v-show와의-차이점"><a href="#v-show와의-차이점" class="headerlink" title="v-show와의 차이점"></a><code>v-show</code>와의 차이점</h3><p><code>v-show</code>는 <code>v-if</code>와 달리 요소를 DOM에서 제거하지 않고, CSS의 <code>display</code> 속성을 <code>none</code>으로 설정하여 요소를 숨깁니다. 따라서 조건이 자주 변경되거나, 요소의 렌더링 비용이 클 때 <code>v-show</code>가 더 효율적일 수 있습니다.</p><pre><code class="highlight html"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">&quot;isVisible&quot;</span>&gt;</span>이 문장은 조건에 따라 보이거나 숨길 수 있습니다.<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;</span><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><span class="language-javascript">      <span class="keyword">return</span> &#123;</span><span class="language-javascript">        <span class="attr">isVisible</span>: <span class="literal">true</span>,</span><span class="language-javascript">      &#125;;</span><span class="language-javascript">    &#125;,</span><span class="language-javascript">  &#125;);</span><span class="language-javascript"></span><span class="language-javascript">  app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></code></pre><p>위 예제에서 <code>isVisible</code>이 <code>true</code>일 때 요소가 보이고, <code>false</code>일 때는 숨겨지지만, DOM에는 계속 존재합니다.</p><h3 id="예제-RPG-게임에서-조건부-렌더링-활용"><a href="#예제-RPG-게임에서-조건부-렌더링-활용" class="headerlink" title="예제: RPG 게임에서 조건부 렌더링 활용"></a>예제: RPG 게임에서 조건부 렌더링 활용</h3><p>RPG 게임에서 캐릭터의 상태에 따라 특정 정보를 표시하거나 숨기는 예제를 만들어보겠습니다.</p><pre><code class="highlight html"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">head</span>&gt;</span>    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span>    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span>    <span class="tag">&lt;<span class="name">title</span>&gt;</span>RPG 상태 예제<span class="tag">&lt;/<span class="name">title</span>&gt;</span>  <span class="tag">&lt;/<span class="name">head</span>&gt;</span>  <span class="tag">&lt;<span class="name">body</span>&gt;</span>    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; character.name &#125;&#125;의 상태<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>      <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;character.hp &gt; 0&quot;</span>&gt;</span>체력: &#123;&#123; character.hp &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span>      <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else</span>&gt;</span>캐릭터가 사망했습니다.<span class="tag">&lt;/<span class="name">p</span>&gt;</span>      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;attack&quot;</span>&gt;</span>공격받기<span class="tag">&lt;/<span class="name">button</span>&gt;</span>    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">      <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><span class="language-javascript">          <span class="keyword">return</span> &#123;</span><span class="language-javascript">            <span class="attr">character</span>: &#123;</span><span class="language-javascript">              <span class="attr">name</span>: <span class="string">&quot;전사&quot;</span>,</span><span class="language-javascript">              <span class="attr">hp</span>: <span class="number">100</span>,</span><span class="language-javascript">            &#125;,</span><span class="language-javascript">          &#125;;</span><span class="language-javascript">        &#125;,</span><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span><span class="language-javascript">          <span class="title function_">attack</span>(<span class="params"></span>) &#123;</span><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">character</span>.<span class="property">hp</span> -= <span class="number">30</span>;</span><span class="language-javascript">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">character</span>.<span class="property">hp</span> &lt; <span class="number">0</span>) &#123;</span><span class="language-javascript">              <span class="variable language_">this</span>.<span class="property">character</span>.<span class="property">hp</span> = <span class="number">0</span>;</span><span class="language-javascript">            &#125;</span><span class="language-javascript">          &#125;,</span><span class="language-javascript">        &#125;,</span><span class="language-javascript">      &#125;);</span><span class="language-javascript"></span><span class="language-javascript">      app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  <span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></code></pre><h3 id="예제-설명"><a href="#예제-설명" class="headerlink" title="예제 설명"></a>예제 설명</h3><p>이 예제에서는 <code>character.hp</code>가 0보다 클 때는 체력을 표시하고, 0 이하일 때는 “캐릭터가 사망했습니다.”라는 메시지를 표시합니다. 버튼을 클릭할 때마다 캐릭터의 체력이 30씩 줄어들며, 체력이 0이 되면 사망 메시지가 표시됩니다.</p><h2 id="3-Composition-API에서-조건부-렌더링"><a href="#3-Composition-API에서-조건부-렌더링" class="headerlink" title="3. Composition API에서 조건부 렌더링"></a>3. Composition API에서 조건부 렌더링</h2><blockquote><p>만약 Vue가 처음이시라면 이 섹션은 건너 뛰어주세요!</p></blockquote><p>Vue3에 추가된 <a href="/vue/24/">Composition API</a>를 사용하여 컴포넌트를 더욱 유연하고 모듈화된 방식으로 작성할 수 있습니다.</p><h3 id="Composition-API에서-v-if-사용"><a href="#Composition-API에서-v-if-사용" class="headerlink" title="Composition API에서 v-if 사용"></a>Composition API에서 <code>v-if</code> 사용</h3><p>Composition API에서 <code>ref</code>를 사용해 반응형 데이터를 정의하고, <code>v-if</code>와 <code>v-else</code>를 통해 DOM 요소를 동적으로 렌더링할 수 있습니다.</p><pre><code class="highlight html"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;isLoggedIn&quot;</span>&gt;</span>환영합니다, 사용자님!<span class="tag">&lt;/<span class="name">p</span>&gt;</span>  <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else</span>&gt;</span>로그인이 필요합니다.<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="keyword">import</span> &#123; createApp, ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;</span><span class="language-javascript">    <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><span class="language-javascript">      <span class="keyword">const</span> isLoggedIn = <span class="title function_">ref</span>(<span class="literal">false</span>);</span><span class="language-javascript"></span><span class="language-javascript">      <span class="keyword">return</span> &#123;</span><span class="language-javascript">        isLoggedIn,</span><span class="language-javascript">      &#125;;</span><span class="language-javascript">    &#125;,</span><span class="language-javascript">  &#125;);</span><span class="language-javascript"></span><span class="language-javascript">  app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></code></pre><h3 id="Composition-API에서-v-show-사용"><a href="#Composition-API에서-v-show-사용" class="headerlink" title="Composition API에서 v-show 사용"></a>Composition API에서 <code>v-show</code> 사용</h3><p><code>v-show</code> 역시 Composition API에서 <code>ref</code>와 함께 사용됩니다. 자주 변경되는 조건에 따라 요소를 보이거나 숨길 때 유용합니다.</p><pre><code class="highlight html"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">&quot;isVisible&quot;</span>&gt;</span>이 문장은 조건에 따라 보이거나 숨길 수 있습니다.<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="keyword">import</span> &#123; createApp, ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;</span><span class="language-javascript">    <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><span class="language-javascript">      <span class="keyword">const</span> isVisible = <span class="title function_">ref</span>(<span class="literal">true</span>);</span><span class="language-javascript"></span><span class="language-javascript">      <span class="keyword">return</span> &#123;</span><span class="language-javascript">        isVisible,</span><span class="language-javascript">      &#125;;</span><span class="language-javascript">    &#125;,</span><span class="language-javascript">  &#125;);</span><span class="language-javascript"></span><span class="language-javascript">  app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></code></pre><h3 id="Composition-API에서의-예제-RPG-게임"><a href="#Composition-API에서의-예제-RPG-게임" class="headerlink" title="Composition API에서의 예제: RPG 게임"></a>Composition API에서의 예제: RPG 게임</h3><p>RPG 게임에서 캐릭터의 체력에 따라 조건부로 상태 메시지를 표시하는 예제를 Composition API로 작성해보겠습니다.</p><pre><code class="highlight html"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">head</span>&gt;</span>    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span>    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span>    <span class="tag">&lt;<span class="name">title</span>&gt;</span>RPG 상태 예제<span class="tag">&lt;/<span class="name">title</span>&gt;</span>  <span class="tag">&lt;/<span class="name">head</span>&gt;</span>  <span class="tag">&lt;<span class="name">body</span>&gt;</span>    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; character.name &#125;&#125;의 상태<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>      <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;character.hp &gt; 0&quot;</span>&gt;</span>체력: &#123;&#123; character.hp &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span>      <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else</span>&gt;</span>캐릭터가 사망했습니다.<span class="tag">&lt;/<span class="name">p</span>&gt;</span>      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;attack&quot;</span>&gt;</span>공격받기<span class="tag">&lt;/<span class="name">button</span>&gt;</span>    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">      <span class="keyword">import</span> &#123; createApp, reactive &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><span class="language-javascript"></span><span class="language-javascript">      <span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;</span><span class="language-javascript">        <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><span class="language-javascript">          <span class="keyword">const</span> character = <span class="title function_">reactive</span>(&#123;</span><span class="language-javascript">            <span class="attr">name</span>: <span class="string">&quot;전사&quot;</span>,</span><span class="language-javascript">            <span class="attr">hp</span>: <span class="number">100</span>,</span><span class="language-javascript">          &#125;);</span><span class="language-javascript"></span><span class="language-javascript">          <span class="keyword">const</span> <span class="title function_">attack</span> = (<span class="params"></span>) =&gt; &#123;</span><span class="language-javascript">            character.<span class="property">hp</span> -= <span class="number">30</span>;</span><span class="language-javascript">            <span class="keyword">if</span> (character.<span class="property">hp</span> &lt; <span class="number">0</span>) &#123;</span><span class="language-javascript">              character.<span class="property">hp</span> = <span class="number">0</span>;</span><span class="language-javascript">            &#125;</span><span class="language-javascript">          &#125;;</span><span class="language-javascript"></span><span class="language-javascript">          <span class="keyword">return</span> &#123;</span><span class="language-javascript">            character,</span><span class="language-javascript">            attack,</span><span class="language-javascript">          &#125;;</span><span class="language-javascript">        &#125;,</span><span class="language-javascript">      &#125;);</span><span class="language-javascript"></span><span class="language-javascript">      app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  <span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></code></pre><h3 id="예제-설명-1"><a href="#예제-설명-1" class="headerlink" title="예제 설명"></a>예제 설명</h3><p>이 예제에서는 <code>reactive</code> 객체를 사용하여 <code>character</code>의 상태를 관리합니다. 버튼을 클릭할 때마다 <code>attack</code> 함수가 호출되어 체력이 줄어들고, 체력이 0이 되면 “캐릭터가 사망했습니다.”라는 메시지가 표시됩니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 Vue.js에서 조건부 렌더링을 효율적으로 사용하는 방법에 대해 알아보았습니다. <code>v-if</code>, <code>v-else</code>, <code>v-else-if</code>를 사용하여 다양한 조건을 처리하고, 상황에 맞게 DOM 요소를 동적으로 제어할 수 있습니다. 조건부 렌더링을 활용하여 사용자 인터페이스를 더욱 유연하고 직관적으로 만들어보세요!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript 타입 선언 파일 (Declaration Files)</title>
      <link href="/typescript/special/5/"/>
      <url>/typescript/special/5/</url>
      
        <content type="html"><![CDATA[<h1 id="TypeScript-타입-선언-파일-Declaration-Files"><a href="#TypeScript-타입-선언-파일-Declaration-Files" class="headerlink" title="TypeScript 타입 선언 파일 (Declaration Files)"></a>TypeScript 타입 선언 파일 (Declaration Files)</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 TypeScript에서 외부 자바스크립트 라이브러리나 모듈을 사용할 때 타입 정보를 제공하기 위해 사용하는 **타입 선언 파일(Declaration Files)**에 대해 알아보겠습니다. <code>.d.ts</code> 파일의 작성 및 사용법, 그리고 DefinitelyTyped와 타입 선언 관리에 대해서도 다루어보겠습니다.</p><h2 id="타입-선언-파일이란"><a href="#타입-선언-파일이란" class="headerlink" title="타입 선언 파일이란?"></a>타입 선언 파일이란?</h2><h3 id="타입-선언-파일의-개념"><a href="#타입-선언-파일의-개념" class="headerlink" title="타입 선언 파일의 개념"></a>타입 선언 파일의 개념</h3><p>타입 선언 파일은 <code>.d.ts</code> 확장자를 가진 파일로, TypeScript가 자바스크립트 라이브러리나 모듈의 타입을 알 수 있도록 타입 정의를 제공하는 파일입니다. 자바스크립트는 타입 시스템이 없기 때문에, TypeScript는 타입 선언 파일을 통해 해당 라이브러리의 함수, 객체, 클래스 등의 타입 정보를 알 수 있습니다.</p><p>타입 선언 파일은 TypeScript 컴파일러가 타입 검사를 수행하는 데 사용되며, 라이브러리의 내부 구현 코드 없이도 타입 정보만으로 정적 타입 검사를 가능하게 합니다.</p><h3 id="타입-선언-파일의-기본-구조"><a href="#타입-선언-파일의-기본-구조" class="headerlink" title="타입 선언 파일의 기본 구조"></a>타입 선언 파일의 기본 구조</h3><p>타입 선언 파일은 주로 외부 라이브러리나 모듈을 TypeScript에서 사용할 때, 해당 라이브러리의 타입 정보를 제공하기 위해 작성됩니다. 예를 들어, RPG 게임에서 사용할 커스텀 라이브러리의 타입 선언 파일을 작성해보겠습니다.</p><pre><code class="highlight typescript"><span class="comment">// src/types/myLibrary.d.ts</span><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&quot;myLibrary&quot;</span> &#123;  <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">createCharacter</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">classType</span>: <span class="built_in">string</span></span>): <span class="title class_">Character</span>;  <span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Character</span> &#123;    <span class="attr">name</span>: <span class="built_in">string</span>;    <span class="attr">classType</span>: <span class="built_in">string</span>;    <span class="attr">level</span>: <span class="built_in">number</span>;    <span class="title function_">levelUp</span>(): <span class="built_in">void</span>;  &#125;&#125;</code></pre><p>위 예제에서 <code>myLibrary</code>라는 모듈을 선언하고, <code>createCharacter</code> 함수와 <code>Character</code> 클래스를 정의했습니다. 이렇게 하면 TypeScript는 <code>myLibrary</code>를 사용할 때 해당 함수와 클래스의 타입을 인식할 수 있습니다.</p><h2 id="d-ts-파일-작성-및-사용법"><a href="#d-ts-파일-작성-및-사용법" class="headerlink" title=".d.ts 파일 작성 및 사용법"></a>.d.ts 파일 작성 및 사용법</h2><h3 id="타입-선언-파일-작성-예제"><a href="#타입-선언-파일-작성-예제" class="headerlink" title="타입 선언 파일 작성 예제"></a>타입 선언 파일 작성 예제</h3><p>RPG 게임에서 사용할 커스텀 라이브러리의 타입 선언 파일을 작성해보겠습니다. 이 예제에서는 캐릭터를 생성하고, 레벨을 올리는 기능을 가진 라이브러리를 정의합니다.</p><p><strong><code>src/types/myLibrary.d.ts</code></strong></p><pre><code class="highlight typescript"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&quot;myLibrary&quot;</span> &#123;  <span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">Character</span> &#123;    <span class="attr">name</span>: <span class="built_in">string</span>;    <span class="attr">classType</span>: <span class="built_in">string</span>;    <span class="attr">level</span>: <span class="built_in">number</span>;    <span class="title function_">levelUp</span>(): <span class="built_in">void</span>;  &#125;  <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">createCharacter</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">classType</span>: <span class="built_in">string</span></span>): <span class="title class_">Character</span>;&#125;</code></pre><h3 id="타입-선언-파일-사용-예제"><a href="#타입-선언-파일-사용-예제" class="headerlink" title="타입 선언 파일 사용 예제"></a>타입 선언 파일 사용 예제</h3><p>이제 위에서 작성한 타입 선언 파일을 사용하는 예제를 살펴보겠습니다.</p><p><strong><code>src/index.ts</code></strong></p><pre><code class="highlight typescript"><span class="keyword">import</span> &#123; createCharacter &#125; <span class="keyword">from</span> <span class="string">&quot;myLibrary&quot;</span>;<span class="keyword">const</span> warrior = <span class="title function_">createCharacter</span>(<span class="string">&quot;Aragon&quot;</span>, <span class="string">&quot;Warrior&quot;</span>);warrior.<span class="title function_">levelUp</span>();<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;warrior.name&#125;</span>의 레벨: <span class="subst">$&#123;warrior.level&#125;</span>`</span>);<span class="comment">// Aragon의 레벨: 2</span></code></pre><p>위 예제에서 <code>myLibrary</code> 모듈의 타입 선언 파일을 통해 <code>createCharacter</code> 함수와 <code>Character</code> 인터페이스의 타입 정보를 TypeScript가 인식하게 됩니다. 이를 통해 코드 작성 시 타입 안전성을 확보할 수 있습니다.</p><h2 id="DefinitelyTyped와-타입-선언-관리"><a href="#DefinitelyTyped와-타입-선언-관리" class="headerlink" title="DefinitelyTyped와 타입 선언 관리"></a>DefinitelyTyped와 타입 선언 관리</h2><h3 id="DefinitelyTyped란"><a href="#DefinitelyTyped란" class="headerlink" title="DefinitelyTyped란?"></a>DefinitelyTyped란?</h3><p><a href="https://definitelytyped.org/">DefinitelyTyped</a>는 JavaScript 라이브러리에 대한 TypeScript 타입 정의를 제공하는 오픈 소스 프로젝트입니다. 수천 개의 JavaScript 라이브러리에 대한 타입 선언 파일이 포함되어 있으며, TypeScript 프로젝트에서 쉽게 사용할 수 있도록 배포되고 있습니다.</p><h3 id="types-패키지-사용법"><a href="#types-패키지-사용법" class="headerlink" title="@types 패키지 사용법"></a>@types 패키지 사용법</h3><p>DefinitelyTyped에서 제공하는 타입 선언 파일은 <code>@types</code> 네임스페이스 하에 npm 패키지로 배포됩니다. 이 패키지들을 프로젝트에 추가하면, TypeScript는 해당 라이브러리의 타입을 인식할 수 있습니다.</p><p>예를 들어, RPG 게임에 사용할 외부 라이브러리인 <code>lodash</code>의 타입 선언 파일을 설치해보겠습니다.</p><pre><code class="highlight bash">npm install --save-dev @types/lodash</code></pre><p>이제 <code>lodash</code> 라이브러리를 TypeScript에서 사용할 때, 자동으로 타입 검사가 이루어집니다.</p><p><strong><code>src/index.ts</code></strong></p><pre><code class="highlight typescript"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">&quot;lodash&quot;</span>;<span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];<span class="keyword">const</span> doubled = _.<span class="title function_">map</span>(numbers, <span class="function">(<span class="params">n</span>) =&gt;</span> n * <span class="number">2</span>);<span class="variable language_">console</span>.<span class="title function_">log</span>(doubled);<span class="comment">// [2, 4, 6, 8, 10]</span></code></pre><p>위 예제에서 <code>@types/lodash</code> 패키지를 설치하면, <code>lodash</code>의 모든 함수와 메서드에 대한 타입 정보를 TypeScript가 인식하여 코드 작성 시 자동 완성 및 타입 검사를 지원합니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 TypeScript에서 외부 자바스크립트 라이브러리나 모듈을 사용할 때 중요한 **타입 선언 파일(Declaration Files)**에 대해 알아보았습니다. <code>.d.ts</code> 파일의 작성 방법과 DefinitelyTyped를 활용한 타입 선언 관리 방법을 이해하고, 이를 통해 타입 안전성을 확보한 TypeScript 프로젝트를 개발해보세요!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> TS_필살기 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue 클래스(Class)와 스타일 바인딩(Style binding)</title>
      <link href="/vue/6/"/>
      <url>/vue/6/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-클래스-Class-와-스타일-바인딩-Style-binding"><a href="#Vue-클래스-Class-와-스타일-바인딩-Style-binding" class="headerlink" title="Vue 클래스(Class)와 스타일 바인딩(Style binding)"></a>Vue 클래스(Class)와 스타일 바인딩(Style binding)</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 Vue.js에서 **클래스(Class)**와 **인라인 스타일(Style)**을 바인딩하는 방법에 대해 알아보겠습니다. 클래스와 스타일 바인딩은 Vue.js의 반응형 기능을 활용하여 동적으로 CSS 클래스를 적용하거나 인라인 스타일을 설정할 수 있게 해줍니다.</p><h2 id="1-클래스-바인딩의-기초"><a href="#1-클래스-바인딩의-기초" class="headerlink" title="1. 클래스 바인딩의 기초"></a>1. 클래스 바인딩의 기초</h2><h3 id="클래스-바인딩이란"><a href="#클래스-바인딩이란" class="headerlink" title="클래스 바인딩이란?"></a>클래스 바인딩이란?</h3><p>클래스 바인딩은 Vue.js에서 DOM 요소에 동적으로 CSS 클래스를 적용하는 기능입니다. 이는 템플릿에서 <code>:class</code> 디렉티브를 사용하여 데이터에 따라 조건부로 클래스를 추가하거나 제거하는 방식으로 이루어집니다.</p><h3 id="단일-클래스-바인딩"><a href="#단일-클래스-바인딩" class="headerlink" title="단일 클래스 바인딩"></a>단일 클래스 바인딩</h3><p>가장 기본적인 형태의 클래스 바인딩은 문자열을 사용하여 하나의 클래스를 바인딩하는 것입니다.</p><pre><code class="highlight html"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">p</span> <span class="attr">:class</span>=<span class="string">&quot;activeClass&quot;</span>&gt;</span>이 문장은 활성화된 클래스가 적용됩니다.<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;</span><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><span class="language-javascript">      <span class="keyword">return</span> &#123;</span><span class="language-javascript">        <span class="attr">activeClass</span>: <span class="string">&quot;active&quot;</span>,</span><span class="language-javascript">      &#125;;</span><span class="language-javascript">    &#125;,</span><span class="language-javascript">  &#125;);</span><span class="language-javascript"></span><span class="language-javascript">  app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span><span class="language-css">  <span class="selector-class">.active</span> &#123;</span><span class="language-css">    <span class="attribute">color</span>: green;</span><span class="language-css">    <span class="attribute">font-weight</span>: bold;</span><span class="language-css">  &#125;</span><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></code></pre><p>위 예제에서는 <code>activeClass</code> 데이터에 저장된 클래스 이름 <code>&#39;active&#39;</code>가 <code>&lt;p&gt;</code> 요소에 적용됩니다.</p><h3 id="객체-구문을-사용한-다중-클래스-바인딩"><a href="#객체-구문을-사용한-다중-클래스-바인딩" class="headerlink" title="객체 구문을 사용한 다중 클래스 바인딩"></a>객체 구문을 사용한 다중 클래스 바인딩</h3><p>Vue.js에서는 객체 구문을 사용하여 여러 클래스를 동적으로 바인딩할 수 있습니다. 객체의 키는 클래스 이름이고, 값은 해당 클래스를 적용할지 여부를 결정하는 불리언 값입니다.</p><pre><code class="highlight html"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">p</span> <span class="attr">:class</span>=<span class="string">&quot;&#123; active: isActive, &#x27;text-large&#x27;: isLarge &#125;&quot;</span>&gt;</span>    이 문장은 여러 클래스가 조건부로 적용됩니다.  <span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;</span><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><span class="language-javascript">      <span class="keyword">return</span> &#123;</span><span class="language-javascript">        <span class="attr">isActive</span>: <span class="literal">true</span>,</span><span class="language-javascript">        <span class="attr">isLarge</span>: <span class="literal">false</span>,</span><span class="language-javascript">      &#125;;</span><span class="language-javascript">    &#125;,</span><span class="language-javascript">  &#125;);</span><span class="language-javascript"></span><span class="language-javascript">  app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span><span class="language-css">  <span class="selector-class">.active</span> &#123;</span><span class="language-css">    <span class="attribute">color</span>: green;</span><span class="language-css">    <span class="attribute">font-weight</span>: bold;</span><span class="language-css">  &#125;</span><span class="language-css">  <span class="selector-class">.text-large</span> &#123;</span><span class="language-css">    <span class="attribute">font-size</span>: <span class="number">2em</span>;</span><span class="language-css">  &#125;</span><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></code></pre><p>위 예제에서 <code>isActive</code>가 <code>true</code>일 때 <code>active</code> 클래스가 적용되고, <code>isLarge</code>가 <code>false</code>이므로 <code>text-large</code> 클래스는 적용되지 않습니다.</p><h3 id="배열-구문을-사용한-다중-클래스-바인딩"><a href="#배열-구문을-사용한-다중-클래스-바인딩" class="headerlink" title="배열 구문을 사용한 다중 클래스 바인딩"></a>배열 구문을 사용한 다중 클래스 바인딩</h3><p>배열 구문을 사용하여 여러 클래스를 조건 없이 동시에 바인딩할 수도 있습니다. 배열의 각 항목은 클래스 이름이 됩니다.</p><pre><code class="highlight html"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">p</span> <span class="attr">:class</span>=<span class="string">&quot;[activeClass, &#x27;text-large&#x27;]&quot;</span>&gt;</span>    이 문장은 다중 클래스가 적용됩니다.  <span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;</span><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><span class="language-javascript">      <span class="keyword">return</span> &#123;</span><span class="language-javascript">        <span class="attr">activeClass</span>: <span class="string">&quot;active&quot;</span>,</span><span class="language-javascript">      &#125;;</span><span class="language-javascript">    &#125;,</span><span class="language-javascript">  &#125;);</span><span class="language-javascript"></span><span class="language-javascript">  app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span><span class="language-css">  <span class="selector-class">.active</span> &#123;</span><span class="language-css">    <span class="attribute">color</span>: green;</span><span class="language-css">    <span class="attribute">font-weight</span>: bold;</span><span class="language-css">  &#125;</span><span class="language-css">  <span class="selector-class">.text-large</span> &#123;</span><span class="language-css">    <span class="attribute">font-size</span>: <span class="number">2em</span>;</span><span class="language-css">  &#125;</span><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></code></pre><p>위 예제에서는 <code>active</code>와 <code>text-large</code> 클래스가 동시에 적용됩니다.</p><h2 id="2-인라인-스타일-바인딩"><a href="#2-인라인-스타일-바인딩" class="headerlink" title="2. 인라인 스타일 바인딩"></a>2. 인라인 스타일 바인딩</h2><h3 id="인라인-스타일-바인딩이란"><a href="#인라인-스타일-바인딩이란" class="headerlink" title="인라인 스타일 바인딩이란?"></a>인라인 스타일 바인딩이란?</h3><p>인라인 스타일 바인딩은 Vue.js에서 DOM 요소에 동적으로 CSS 스타일을 직접 설정하는 기능입니다. 클래스 바인딩과 유사하게, <code>:style</code> 디렉티브를 사용하여 데이터를 기반으로 스타일을 동적으로 적용할 수 있습니다.</p><h3 id="단일-인라인-스타일-바인딩"><a href="#단일-인라인-스타일-바인딩" class="headerlink" title="단일 인라인 스타일 바인딩"></a>단일 인라인 스타일 바인딩</h3><p>가장 간단한 형태의 인라인 스타일 바인딩은 객체 구문을 사용하여 하나의 스타일 속성을 바인딩하는 것입니다.</p><pre><code class="highlight html"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">p</span> <span class="attr">:style</span>=<span class="string">&quot;&#123; color: textColor &#125;&quot;</span>&gt;</span>이 문장은 동적 색상을 가집니다.<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;</span><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><span class="language-javascript">      <span class="keyword">return</span> &#123;</span><span class="language-javascript">        <span class="attr">textColor</span>: <span class="string">&quot;blue&quot;</span>,</span><span class="language-javascript">      &#125;;</span><span class="language-javascript">    &#125;,</span><span class="language-javascript">  &#125;);</span><span class="language-javascript"></span><span class="language-javascript">  app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></code></pre><p>위 예제에서 <code>textColor</code> 데이터에 설정된 값 <code>&#39;blue&#39;</code>가 <code>&lt;p&gt;</code> 요소의 <code>color</code> 스타일 속성에 적용됩니다.</p><h3 id="객체-구문을-사용한-다중-인라인-스타일-바인딩"><a href="#객체-구문을-사용한-다중-인라인-스타일-바인딩" class="headerlink" title="객체 구문을 사용한 다중 인라인 스타일 바인딩"></a>객체 구문을 사용한 다중 인라인 스타일 바인딩</h3><p>객체 구문을 사용하여 여러 스타일 속성을 동시에 바인딩할 수 있습니다.</p><pre><code class="highlight html"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">p</span> <span class="attr">:style</span>=<span class="string">&quot;&#123; color: textColor, fontSize: fontSize + &#x27;px&#x27; &#125;&quot;</span>&gt;</span>    이 문장은 다중 인라인 스타일이 적용됩니다.  <span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;</span><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><span class="language-javascript">      <span class="keyword">return</span> &#123;</span><span class="language-javascript">        <span class="attr">textColor</span>: <span class="string">&quot;blue&quot;</span>,</span><span class="language-javascript">        <span class="attr">fontSize</span>: <span class="number">20</span>,</span><span class="language-javascript">      &#125;;</span><span class="language-javascript">    &#125;,</span><span class="language-javascript">  &#125;);</span><span class="language-javascript"></span><span class="language-javascript">  app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></code></pre><p>위 예제에서는 <code>color</code>와 <code>fontSize</code> 속성이 동시에 적용됩니다. <code>fontSize</code>의 경우, 값에 <code>&#39;px&#39;</code>를 더하여 픽셀 단위로 설정하고 있습니다.</p><h3 id="배열-구문을-사용한-다중-인라인-스타일-바인딩"><a href="#배열-구문을-사용한-다중-인라인-스타일-바인딩" class="headerlink" title="배열 구문을 사용한 다중 인라인 스타일 바인딩"></a>배열 구문을 사용한 다중 인라인 스타일 바인딩</h3><p>배열 구문을 사용하여 여러 스타일 객체를 동시에 바인딩할 수 있습니다. 배열의 각 항목은 스타일 객체가 됩니다.</p><pre><code class="highlight html"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">p</span> <span class="attr">:style</span>=<span class="string">&quot;[baseStyles, additionalStyles]&quot;</span>&gt;</span>    이 문장은 여러 스타일 객체가 동시에 적용됩니다.  <span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;</span><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><span class="language-javascript">      <span class="keyword">return</span> &#123;</span><span class="language-javascript">        <span class="attr">baseStyles</span>: &#123;</span><span class="language-javascript">          <span class="attr">color</span>: <span class="string">&quot;blue&quot;</span>,</span><span class="language-javascript">          <span class="attr">fontSize</span>: <span class="string">&quot;20px&quot;</span>,</span><span class="language-javascript">        &#125;,</span><span class="language-javascript">        <span class="attr">additionalStyles</span>: &#123;</span><span class="language-javascript">          <span class="attr">fontWeight</span>: <span class="string">&quot;bold&quot;</span>,</span><span class="language-javascript">        &#125;,</span><span class="language-javascript">      &#125;;</span><span class="language-javascript">    &#125;,</span><span class="language-javascript">  &#125;);</span><span class="language-javascript"></span><span class="language-javascript">  app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></code></pre><p>위 예제에서는 <code>baseStyles</code>와 <code>additionalStyles</code> 객체의 스타일이 <code>&lt;p&gt;</code> 요소에 동시에 적용됩니다.</p><h2 id="3-Composition-API에서의-클래스와-스타일-바인딩"><a href="#3-Composition-API에서의-클래스와-스타일-바인딩" class="headerlink" title="3. Composition API에서의 클래스와 스타일 바인딩"></a>3. Composition API에서의 클래스와 스타일 바인딩</h2><blockquote><p>만약 Vue가 처음이시라면 이 섹션은 건너 뛰어주세요!</p></blockquote><p>Vue3에 추가된 <a href="/vue/24/">Composition API</a>를 사용하여 컴포넌트를 더욱 유연하고 모듈화된 방식으로 작성할 수 있습니다.</p><h3 id="Composition-API에서의-클래스-바인딩"><a href="#Composition-API에서의-클래스-바인딩" class="headerlink" title="Composition API에서의 클래스 바인딩"></a>Composition API에서의 클래스 바인딩</h3><p>Composition API를 사용할 때, <code>ref</code>나 <code>reactive</code>를 사용하여 데이터를 정의하고, <code>:class</code>를 통해 동적으로 클래스를 바인딩할 수 있습니다.</p><pre><code class="highlight javascript"><span class="keyword">import</span> &#123; createApp, ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;<span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;  <span class="title function_">setup</span>(<span class="params"></span>) &#123;    <span class="keyword">const</span> isActive = <span class="title function_">ref</span>(<span class="literal">true</span>);    <span class="keyword">const</span> isLarge = <span class="title function_">ref</span>(<span class="literal">false</span>);    <span class="keyword">const</span> activeClass = <span class="title function_">ref</span>(<span class="string">&quot;active&quot;</span>);    <span class="keyword">const</span> largeClass = <span class="title function_">ref</span>(<span class="string">&quot;text-large&quot;</span>);    <span class="keyword">return</span> &#123;      isActive,      isLarge,      activeClass,      largeClass,    &#125;;  &#125;,&#125;);app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</code></pre><pre><code class="highlight html"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">p</span> <span class="attr">:class</span>=<span class="string">&quot;[activeClass, &#123; [largeClass]: isLarge &#125;]&quot;</span>&gt;</span>    이 문장은 Composition API를 사용하여 클래스가 적용되었습니다.  <span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></code></pre><p>위 예제에서는 <code>ref</code>를 사용하여 클래스 바인딩을 구현했으며, 데이터의 변화에 따라 클래스가 동적으로 변경됩니다.</p><h3 id="Composition-API에서의-스타일-바인딩"><a href="#Composition-API에서의-스타일-바인딩" class="headerlink" title="Composition API에서의 스타일 바인딩"></a>Composition API에서의 스타일 바인딩</h3><p>Composition API에서 스타일 바인딩을 사용하려면 <code>ref</code> 또는 <code>reactive</code>를 통해 스타일 객체를 정의하고, <code>:style</code> 디렉티브로 바인딩할 수 있습니다.</p><pre><code class="highlight javascript"><span class="keyword">import</span> &#123; createApp, ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;<span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;  <span class="title function_">setup</span>(<span class="params"></span>) &#123;    <span class="keyword">const</span> baseStyles = <span class="title function_">ref</span>(&#123;      <span class="attr">color</span>: <span class="string">&quot;blue&quot;</span>,      <span class="attr">fontSize</span>: <span class="string">&quot;20px&quot;</span>,    &#125;);    <span class="keyword">const</span> additionalStyles = <span class="title function_">ref</span>(&#123;      <span class="attr">fontWeight</span>: <span class="string">&quot;bold&quot;</span>,    &#125;);    <span class="keyword">return</span> &#123;      baseStyles,      additionalStyles,    &#125;;  &#125;,&#125;);app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</code></pre><pre><code class="highlight html"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">p</span> <span class="attr">:style</span>=<span class="string">&quot;[baseStyles, additionalStyles]&quot;</span>&gt;</span>    이 문장은 Composition API를 사용하여 스타일이 적용되었습니다.  <span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></code></pre><p>위 예제에서는 <code>ref</code>를 사용하여 스타일 객체를 바인딩하고, 여러 스타일 객체를 배열로 동시에 적용하는 방법을 보여줍니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 Vue.js에서 **클래스(Class)**와 **인라인 스타일(Style)**을 바인딩하는 방법에 대해 알아보았습니다. 클래스와 스타일 바인딩을 활용하면, 데이터에 따라 동적으로 스타일을 적용할 수 있어 UI를 더 유연하게 관리할 수 있습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript 네임스페이스 (Namespaces)</title>
      <link href="/typescript/special/4/"/>
      <url>/typescript/special/4/</url>
      
        <content type="html"><![CDATA[<h1 id="TypeScript-네임스페이스-Namespaces"><a href="#TypeScript-네임스페이스-Namespaces" class="headerlink" title="TypeScript 네임스페이스 (Namespaces)"></a>TypeScript 네임스페이스 (Namespaces)</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 TypeScript에서 코드의 구조화를 도와주는 <strong>네임스페이스</strong>(Namespaces)에 대해 알아보겠습니다. 네임스페이스는 대규모 애플리케이션에서 코드의 가독성과 유지보수성을 높이기 위해 사용됩니다. 또한, 네임스페이스와 모듈의 차이점 및 각각의 활용 방법에 대해서도 살펴보겠습니다.</p><h2 id="네임스페이스의-정의와-사용법"><a href="#네임스페이스의-정의와-사용법" class="headerlink" title="네임스페이스의 정의와 사용법"></a>네임스페이스의 정의와 사용법</h2><h3 id="네임스페이스란"><a href="#네임스페이스란" class="headerlink" title="네임스페이스란?"></a>네임스페이스란?</h3><p>네임스페이스는 하나의 전역 객체를 생성하여 코드의 여러 부분에서 사용할 수 있는 공간을 제공하는 TypeScript의 기능입니다. 이를 통해 코드의 구조를 체계적으로 관리하고, 충돌을 방지할 수 있습니다. 네임스페이스를 사용하면 관련된 기능들을 하나의 그룹으로 묶어 가독성을 높일 수 있습니다.</p><h3 id="네임스페이스-사용-예제"><a href="#네임스페이스-사용-예제" class="headerlink" title="네임스페이스 사용 예제"></a>네임스페이스 사용 예제</h3><p>RPG 게임에서 캐릭터와 아이템을 관리하는 네임스페이스를 정의해보겠습니다.</p><pre><code class="highlight typescript"><span class="keyword">namespace</span> <span class="title class_">Game</span> &#123;  <span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Character</span> &#123;    <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> <span class="attr">name</span>: <span class="built_in">string</span>, <span class="keyword">public</span> <span class="attr">level</span>: <span class="built_in">number</span></span>) &#123;&#125;    <span class="title function_">levelUp</span>(<span class="params"></span>) &#123;      <span class="variable language_">this</span>.<span class="property">level</span>++;      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>의 레벨이 <span class="subst">$&#123;<span class="variable language_">this</span>.level&#125;</span>로 증가했습니다!`</span>);    &#125;  &#125;  <span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Item</span> &#123;    <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> <span class="attr">name</span>: <span class="built_in">string</span>, <span class="keyword">public</span> <span class="attr">effect</span>: <span class="built_in">string</span></span>) &#123;&#125;    <span class="title function_">use</span>(<span class="params"></span>) &#123;      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>을(를) 사용했습니다! 효과: <span class="subst">$&#123;<span class="variable language_">this</span>.effect&#125;</span>`</span>);    &#125;  &#125;&#125;<span class="keyword">const</span> warrior = <span class="keyword">new</span> <span class="title class_">Game</span>.<span class="title class_">Character</span>(<span class="string">&quot;Aragon&quot;</span>, <span class="number">10</span>);<span class="keyword">const</span> potion = <span class="keyword">new</span> <span class="title class_">Game</span>.<span class="title class_">Item</span>(<span class="string">&quot;Healing Potion&quot;</span>, <span class="string">&quot;체력 회복&quot;</span>);warrior.<span class="title function_">levelUp</span>(); <span class="comment">// Aragon의 레벨이 11로 증가했습니다!</span>potion.<span class="title function_">use</span>(); <span class="comment">// Healing Potion을(를) 사용했습니다! 효과: 체력 회복</span></code></pre><p>위 예제에서 <code>Game</code> 네임스페이스는 <code>Character</code>와 <code>Item</code> 클래스를 포함하고 있으며, <code>export</code> 키워드를 사용해 외부에서 이 클래스들을 사용할 수 있게 했습니다. 네임스페이스를 사용하면 관련된 기능을 하나의 그룹으로 묶어 관리할 수 있습니다.</p><h3 id="네임스페이스의-내부-네임스페이스"><a href="#네임스페이스의-내부-네임스페이스" class="headerlink" title="네임스페이스의 내부 네임스페이스"></a>네임스페이스의 내부 네임스페이스</h3><p>네임스페이스는 중첩될 수 있으며, 이를 통해 코드의 계층 구조를 더 깊게 설정할 수 있습니다.</p><pre><code class="highlight typescript"><span class="keyword">namespace</span> <span class="title class_">Game</span> &#123;  <span class="keyword">export</span> <span class="keyword">namespace</span> <span class="title class_">Weapons</span> &#123;    <span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Sword</span> &#123;      <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> <span class="attr">name</span>: <span class="built_in">string</span>, <span class="keyword">public</span> <span class="attr">damage</span>: <span class="built_in">number</span></span>) &#123;&#125;      <span class="title function_">attack</span>(<span class="params"></span>) &#123;        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>이(가) <span class="subst">$&#123;<span class="variable language_">this</span>.damage&#125;</span>의 데미지를 입혔습니다!`</span>);      &#125;    &#125;  &#125;&#125;<span class="keyword">const</span> sword = <span class="keyword">new</span> <span class="title class_">Game</span>.<span class="property">Weapons</span>.<span class="title class_">Sword</span>(<span class="string">&quot;Excalibur&quot;</span>, <span class="number">50</span>);sword.<span class="title function_">attack</span>(); <span class="comment">// Excalibur이(가) 50의 데미지를 입혔습니다!</span></code></pre><p>위 예제에서는 <code>Game</code> 네임스페이스 안에 <code>Weapons</code>라는 하위 네임스페이스를 추가하여, 무기 관련 클래스를 그룹화했습니다.</p><h2 id="네임스페이스와-모듈의-차이점-및-활용-방법"><a href="#네임스페이스와-모듈의-차이점-및-활용-방법" class="headerlink" title="네임스페이스와 모듈의 차이점 및 활용 방법"></a>네임스페이스와 모듈의 차이점 및 활용 방법</h2><h3 id="모듈이란"><a href="#모듈이란" class="headerlink" title="모듈이란?"></a>모듈이란?</h3><p>모듈은 JavaScript와 TypeScript에서 코드를 재사용 가능한 단위로 분리하고, 필요한 부분에서 불러올 수 있도록 하는 기능입니다. TypeScript의 모듈 시스템은 ES6 모듈을 기반으로 하며, <code>import</code>와 <code>export</code> 키워드를 사용해 모듈 간의 의존성을 관리합니다.</p><h3 id="네임스페이스와-모듈의-차이점"><a href="#네임스페이스와-모듈의-차이점" class="headerlink" title="네임스페이스와 모듈의 차이점"></a>네임스페이스와 모듈의 차이점</h3><table><thead><tr><th>특징</th><th>네임스페이스 (Namespaces)</th><th>모듈 (Modules)</th></tr></thead><tbody><tr><td><strong>목적</strong></td><td>전역 네임스페이스 안에서 코드 구조화</td><td>파일 단위로 코드를 분리하여 재사용 및 의존성 관리</td></tr><tr><td><strong>스코프</strong></td><td>전역 스코프에서 사용</td><td>모듈 스코프에서 사용</td></tr><tr><td><strong>사용 용도</strong></td><td>같은 파일 내 또는 전역에서의 코드 그룹화</td><td>파일 간의 코드 재사용 및 의존성 관리</td></tr><tr><td><strong>불러오기 방식</strong></td><td>네임스페이스 이름을 통해 접근</td><td><code>import</code>를 통해 모듈을 불러옴</td></tr><tr><td><strong>트리셔킹</strong></td><td>지원하지 않음</td><td>트리셔킹(Tree Shaking) 가능, 불필요한 코드 제거 가능</td></tr></tbody></table><h3 id="네임스페이스와-모듈의-활용-방법"><a href="#네임스페이스와-모듈의-활용-방법" class="headerlink" title="네임스페이스와 모듈의 활용 방법"></a>네임스페이스와 모듈의 활용 방법</h3><ul><li><strong>네임스페이스</strong>는 대규모 애플리케이션에서 코드의 그룹화를 위해 주로 사용됩니다. 같은 파일 내에서 관련된 코드들을 묶어 관리하거나, 전역적으로 사용할 유틸리티 함수나 클래스를 그룹화할 때 유용합니다.</li><li><strong>모듈</strong>은 파일 단위로 코드를 분리하여, 의존성을 명확히 관리하고, 재사용성을 높이기 위해 사용됩니다. 특히, 모듈은 트리셔킹을 지원하여 불필요한 코드를 제거하고, 번들 크기를 줄이는 데 도움을 줍니다.</li></ul><p>예를 들어, RPG 게임에서 각기 다른 캐릭터 클래스(전사, 마법사 등)를 별도의 파일로 관리하고, 게임 로직에서 이를 불러와 사용하는 경우, 모듈 시스템이 적합합니다.</p><p><strong>Warrior.ts</strong></p><pre><code class="highlight typescript"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Warrior</span> &#123;  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> <span class="attr">name</span>: <span class="built_in">string</span>, <span class="keyword">public</span> <span class="attr">strength</span>: <span class="built_in">number</span></span>) &#123;&#125;  <span class="title function_">attack</span>(<span class="params"></span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>이(가) <span class="subst">$&#123;<span class="variable language_">this</span>.strength&#125;</span>의 힘으로 공격합니다!`</span>);  &#125;&#125;</code></pre><p><strong>Mage.ts</strong></p><pre><code class="highlight typescript"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Mage</span> &#123;  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> <span class="attr">name</span>: <span class="built_in">string</span>, <span class="keyword">public</span> <span class="attr">mana</span>: <span class="built_in">number</span></span>) &#123;&#125;  <span class="title function_">castSpell</span>(<span class="params"></span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>이(가) <span class="subst">$&#123;<span class="variable language_">this</span>.mana&#125;</span>의 마나로 주문을 겁니다!`</span>);  &#125;&#125;</code></pre><p><strong>Game.ts</strong></p><pre><code class="highlight typescript"><span class="keyword">import</span> &#123; <span class="title class_">Warrior</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./Warrior&quot;</span>;<span class="keyword">import</span> &#123; <span class="title class_">Mage</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./Mage&quot;</span>;<span class="keyword">const</span> warrior = <span class="keyword">new</span> <span class="title class_">Warrior</span>(<span class="string">&quot;Aragon&quot;</span>, <span class="number">20</span>);<span class="keyword">const</span> mage = <span class="keyword">new</span> <span class="title class_">Mage</span>(<span class="string">&quot;Gandalf&quot;</span>, <span class="number">100</span>);warrior.<span class="title function_">attack</span>(); <span class="comment">// Aragon이(가) 20의 힘으로 공격합니다!</span>mage.<span class="title function_">castSpell</span>(); <span class="comment">// Gandalf이(가) 100의 마나로 주문을 겁니다!</span></code></pre><p>위 코드에서 <code>Warrior</code>와 <code>Mage</code> 클래스를 각각의 파일로 분리하고, <code>Game.ts</code> 파일에서 필요할 때만 불러와 사용하는 구조를 모듈 시스템으로 구현했습니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 TypeScript에서 <strong>네임스페이스</strong>와 <strong>모듈</strong>의 개념과 차이점, 그리고 활용 방법에 대해 알아보았습니다. 네임스페이스는 전역 스코프에서 코드 구조화를 돕는 반면, 모듈은 파일 단위로 코드의 재사용성과 의존성을 관리하는 데 유용합니다. 두 개념을 잘 이해하고 상황에 맞게 사용하여 더욱 구조화된 TypeScript 애플리케이션을 개발해보세요!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> TS_필살기 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript 유틸리티 타입 (Utility Types)</title>
      <link href="/typescript/special/3/"/>
      <url>/typescript/special/3/</url>
      
        <content type="html"><![CDATA[<h1 id="TypeScript-유틸리티-타입-Utility-Types"><a href="#TypeScript-유틸리티-타입-Utility-Types" class="headerlink" title="TypeScript 유틸리티 타입 (Utility Types)"></a>TypeScript 유틸리티 타입 (Utility Types)</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 TypeScript에서 코드의 간결함과 재사용성을 높이기 위해 제공되는 <strong>유틸리티 타입</strong>(Utility Types)에 대해 알아보겠습니다. TypeScript는 <code>Partial</code>, <code>Readonly</code>, <code>Pick</code>, <code>Omit</code> 등 다양한 유틸리티 타입을 제공하며, 이를 활용하면 복잡한 타입을 간단하게 처리할 수 있습니다. 또한, 고유한 유틸리티 타입을 직접 작성하는 방법도 함께 살펴보겠습니다.</p><h2 id="유틸리티-타입-사용법"><a href="#유틸리티-타입-사용법" class="headerlink" title="유틸리티 타입 사용법"></a>유틸리티 타입 사용법</h2><h3 id="Partial"><a href="#Partial" class="headerlink" title="Partial&lt;T&gt;"></a><code>Partial&lt;T&gt;</code></h3><p><code>Partial&lt;T&gt;</code> 타입은 특정 타입의 모든 속성을 선택적으로 만들어줍니다. 즉, 기존 타입의 모든 속성을 <code>undefined</code>일 수 있는 상태로 변경하여 일부 속성만 설정할 수 있게 합니다.</p><p>예를 들어, RPG 게임에서 캐릭터의 기본 정보를 담고 있는 <code>Character</code> 타입이 있다고 가정해보겠습니다.</p><pre><code class="highlight typescript"><span class="keyword">interface</span> <span class="title class_">Character</span> &#123;  <span class="attr">name</span>: <span class="built_in">string</span>;  <span class="attr">level</span>: <span class="built_in">number</span>;  <span class="attr">class</span>: <span class="built_in">string</span>;  <span class="attr">equipment</span>: <span class="built_in">string</span>[];&#125;<span class="keyword">const</span> <span class="title function_">updateCharacter</span> = (<span class="params"><span class="attr">character</span>: <span class="title class_">Partial</span>&lt;<span class="title class_">Character</span>&gt;</span>) =&gt; &#123;  <span class="comment">// 캐릭터 정보를 업데이트하는 함수</span>&#125;;<span class="title function_">updateCharacter</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;Aragon&quot;</span> &#125;); <span class="comment">// 일부 속성만 업데이트 가능</span></code></pre><p>위 코드에서 <code>Partial&lt;Character&gt;</code>를 사용하여 <code>updateCharacter</code> 함수는 <code>Character</code> 타입의 모든 속성을 선택적으로 받을 수 있게 됩니다. 이를 통해 부분적으로 업데이트가 가능합니다.</p><h3 id="Readonly"><a href="#Readonly" class="headerlink" title="Readonly&lt;T&gt;"></a><code>Readonly&lt;T&gt;</code></h3><p><code>Readonly&lt;T&gt;</code> 타입은 특정 타입의 모든 속성을 읽기 전용으로 만듭니다. 즉, 해당 속성은 한 번 설정되면 수정할 수 없습니다.</p><p>예를 들어, RPG 게임에서 캐릭터의 장비를 읽기 전용으로 설정하고 싶을 때 사용할 수 있습니다.</p><pre><code class="highlight typescript"><span class="keyword">const</span> <span class="attr">warrior</span>: <span class="title class_">Readonly</span>&lt;<span class="title class_">Character</span>&gt; = &#123;  <span class="attr">name</span>: <span class="string">&quot;Aragon&quot;</span>,  <span class="attr">level</span>: <span class="number">50</span>,  <span class="attr">class</span>: <span class="string">&quot;Warrior&quot;</span>,  <span class="attr">equipment</span>: [<span class="string">&quot;Sword&quot;</span>, <span class="string">&quot;Shield&quot;</span>],&#125;;warrior.<span class="property">equipment</span>.<span class="title function_">push</span>(<span class="string">&quot;Helmet&quot;</span>); <span class="comment">// 오류 발생: 읽기 전용 속성입니다.</span></code></pre><p>위 코드에서 <code>Readonly&lt;Character&gt;</code>를 사용하여 <code>warrior</code> 객체의 모든 속성이 읽기 전용이 되어, 이후 속성을 변경하려고 하면 오류가 발생합니다.</p><h3 id="Pick"><a href="#Pick" class="headerlink" title="Pick&lt;T, K&gt;"></a><code>Pick&lt;T, K&gt;</code></h3><p><code>Pick&lt;T, K&gt;</code> 타입은 특정 타입에서 일부 속성만 선택하여 새로운 타입을 생성합니다. 이때 <code>K</code>는 선택할 속성들의 집합입니다.</p><p>RPG 게임에서 캐릭터의 기본 정보만 선택적으로 사용할 수 있는 타입을 정의해보겠습니다.</p><pre><code class="highlight typescript"><span class="keyword">type</span> <span class="title class_">CharacterBaseInfo</span> = <span class="title class_">Pick</span>&lt;<span class="title class_">Character</span>, <span class="string">&quot;name&quot;</span> | <span class="string">&quot;class&quot;</span>&gt;;<span class="keyword">const</span> <span class="attr">baseInfo</span>: <span class="title class_">CharacterBaseInfo</span> = &#123;  <span class="attr">name</span>: <span class="string">&quot;Gandalf&quot;</span>,  <span class="attr">class</span>: <span class="string">&quot;Mage&quot;</span>,&#125;;</code></pre><p>위 코드에서 <code>Pick&lt;Character, &quot;name&quot; | &quot;class&quot;&gt;</code>를 사용하여 <code>Character</code> 타입에서 <code>name</code>과 <code>class</code> 속성만을 선택한 새로운 <code>CharacterBaseInfo</code> 타입을 생성했습니다.</p><h3 id="Omit"><a href="#Omit" class="headerlink" title="Omit&lt;T, K&gt;"></a><code>Omit&lt;T, K&gt;</code></h3><p><code>Omit&lt;T, K&gt;</code> 타입은 특정 타입에서 일부 속성을 제외하고 새로운 타입을 생성합니다. 이때 <code>K</code>는 제외할 속성들의 집합입니다.</p><p>RPG 게임에서 캐릭터의 민감한 정보를 제외한 타입을 정의해보겠습니다.</p><pre><code class="highlight typescript"><span class="keyword">type</span> <span class="title class_">CharacterPublicInfo</span> = <span class="title class_">Omit</span>&lt;<span class="title class_">Character</span>, <span class="string">&quot;level&quot;</span> | <span class="string">&quot;equipment&quot;</span>&gt;;<span class="keyword">const</span> <span class="attr">publicInfo</span>: <span class="title class_">CharacterPublicInfo</span> = &#123;  <span class="attr">name</span>: <span class="string">&quot;Legolas&quot;</span>,  <span class="attr">class</span>: <span class="string">&quot;Archer&quot;</span>,&#125;;</code></pre><p>위 코드에서 <code>Omit&lt;Character, &quot;level&quot; | &quot;equipment&quot;&gt;</code>를 사용하여 <code>Character</code> 타입에서 <code>level</code>과 <code>equipment</code> 속성을 제외한 새로운 <code>CharacterPublicInfo</code> 타입을 생성했습니다.</p><h2 id="고유한-유틸리티-타입-작성-방법"><a href="#고유한-유틸리티-타입-작성-방법" class="headerlink" title="고유한 유틸리티 타입 작성 방법"></a>고유한 유틸리티 타입 작성 방법</h2><p>TypeScript의 기본 유틸리티 타입 외에도, 상황에 맞게 고유한 유틸리티 타입을 작성할 수 있습니다. 예를 들어, RPG 게임에서 특정 속성을 필수로 설정하는 유틸리티 타입을 작성해보겠습니다.</p><h3 id="RequiredBy"><a href="#RequiredBy" class="headerlink" title="RequiredBy&lt;T, K&gt;"></a><code>RequiredBy&lt;T, K&gt;</code></h3><p><code>RequiredBy&lt;T, K&gt;</code> 타입은 기존 타입 <code>T</code>에서 선택된 속성 <code>K</code>만 필수 속성으로 만듭니다.</p><pre><code class="highlight typescript"><span class="keyword">type</span> <span class="title class_">RequiredBy</span>&lt;T, K <span class="keyword">extends</span> keyof T&gt; = T &amp; &#123; [P <span class="keyword">in</span> K]-?: T[P] &#125;;<span class="keyword">interface</span> <span class="title class_">Character</span> &#123;  <span class="attr">name</span>: <span class="built_in">string</span>;  level?: <span class="built_in">number</span>;  <span class="keyword">class</span>?: <span class="built_in">string</span>;  equipment?: <span class="built_in">string</span>[];&#125;<span class="keyword">type</span> <span class="title class_">RequiredCharacterInfo</span> = <span class="title class_">RequiredBy</span>&lt;<span class="title class_">Character</span>, <span class="string">&quot;name&quot;</span> | <span class="string">&quot;class&quot;</span>&gt;;<span class="keyword">const</span> <span class="attr">characterInfo</span>: <span class="title class_">RequiredCharacterInfo</span> = &#123;  <span class="attr">name</span>: <span class="string">&quot;Gimli&quot;</span>,  <span class="attr">class</span>: <span class="string">&quot;Dwarf&quot;</span>,  <span class="comment">// level과 equipment는 선택적</span>&#125;;</code></pre><p>위 코드에서 <code>RequiredBy&lt;T, K&gt;</code>를 정의하여 <code>Character</code> 타입의 <code>name</code>과 <code>class</code> 속성을 필수로 만들고, 나머지 속성들은 여전히 선택적으로 남겨두었습니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 TypeScript의 <strong>유틸리티 타입</strong>(Utility Types)에 대해 알아보았습니다. <code>Partial</code>, <code>Readonly</code>, <code>Pick</code>, <code>Omit</code> 등 다양한 유틸리티 타입을 활용하면 타입 정의를 보다 간결하고 효율적으로 만들 수 있으며, 고유한 유틸리티 타입을 직접 작성하여 상황에 맞는 타입을 정의할 수 있습니다. TypeScript의 유틸리티 타입을 잘 활용하여 더욱 생산적이고 견고한 코드를 작성해보세요!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> TS_필살기 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>세션 관리의 원리와 Node.js에서 express-session 사용법 실습</title>
      <link href="/web/essential/13/"/>
      <url>/web/essential/13/</url>
      
        <content type="html"><![CDATA[<h1 id="세션-관리의-원리와-Node-js에서-express-session-사용법-실습"><a href="#세션-관리의-원리와-Node-js에서-express-session-사용법-실습" class="headerlink" title="세션 관리의 원리와 Node.js에서 express-session 사용법 실습"></a>세션 관리의 원리와 Node.js에서 express-session 사용법 실습</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 세션 관리의 원리에 대해 알아보고, Node.js에서 <code>express-session</code>을 사용하여 세션을 관리하는 방법을 실습해보겠습니다. 세션 관리는 웹 애플리케이션에서 중요한 기능 중 하나입니다.</p><h2 id="세션-관리의-개념"><a href="#세션-관리의-개념" class="headerlink" title="세션 관리의 개념"></a>세션 관리의 개념</h2><h3 id="세션이란"><a href="#세션이란" class="headerlink" title="세션이란?"></a>세션이란?</h3><p>세션(Session)은 서버와 클라이언트 간의 상태를 유지하는 방법 중 하나입니다. 세션은 클라이언트가 서버에 접속할 때 생성되며, 서버는 클라이언트를 식별하기 위해 세션 ID를 발급합니다. 클라이언트는 이후 요청 시 세션 ID를 포함하여 서버와 통신합니다. 서버는 세션 ID를 통해 클라이언트의 상태를 추적합니다.</p><h3 id="세션-관리의-필요성"><a href="#세션-관리의-필요성" class="headerlink" title="세션 관리의 필요성"></a>세션 관리의 필요성</h3><ol><li><strong>상태 유지</strong>: HTTP는 무상태(stateless) 프로토콜이므로, 세션을 통해 사용자 상태를 유지할 수 있습니다.</li><li><strong>사용자 인증</strong>: 로그인 상태를 유지하고, 사용자 정보를 관리할 수 있습니다.</li><li><strong>개인화</strong>: 사용자의 설정이나 장바구니 정보 등을 세션을 통해 저장하고 관리할 수 있습니다.</li></ol><h3 id="세션-관리의-원리"><a href="#세션-관리의-원리" class="headerlink" title="세션 관리의 원리"></a>세션 관리의 원리</h3><ol><li><strong>세션 ID 발급</strong>: 클라이언트가 서버에 접속하면 서버는 고유한 세션 ID를 발급합니다.</li><li><strong>세션 저장소</strong>: 서버는 세션 데이터를 저장하기 위해 세션 저장소를 사용합니다. 메모리, 파일, 데이터베이스 등이 사용될 수 있습니다.</li><li><strong>쿠키</strong>: 클라이언트는 세션 ID를 쿠키에 저장하여 이후 요청 시 서버에 전달합니다.</li><li><strong>세션 추적</strong>: 서버는 세션 ID를 통해 클라이언트를 식별하고, 세션 데이터를 참조하여 상태를 유지합니다.</li></ol><h2 id="준비하기"><a href="#준비하기" class="headerlink" title="준비하기"></a>준비하기</h2><p>먼저 필요한 패키지를 설치합니다:</p><pre><code class="highlight bash">npm init -ynpm install express express-session</code></pre><h2 id="서버-설정"><a href="#서버-설정" class="headerlink" title="서버 설정"></a>서버 설정</h2><p>다음은 필요한 모듈을 가져오고 서버를 설정하는 코드입니다. 자세한 부분은 뒤에서 알아보겠습니다.</p><pre><code class="highlight javascript"><span class="comment">// server.js</span><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);<span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">&quot;express-session&quot;</span>);<span class="keyword">const</span> app = <span class="title function_">express</span>();<span class="keyword">const</span> port = <span class="number">3000</span>;<span class="comment">// 세션 설정</span>app.<span class="title function_">use</span>(  <span class="title function_">session</span>(&#123;    <span class="attr">secret</span>: <span class="string">&quot;secret-key&quot;</span>,    <span class="attr">resave</span>: <span class="literal">false</span>,    <span class="attr">saveUninitialized</span>: <span class="literal">true</span>,    <span class="attr">cookie</span>: &#123; <span class="attr">secure</span>: <span class="literal">false</span> &#125;, <span class="comment">// 개발 환경에서는 false, 프로덕션 환경에서는 true로 설정</span>  &#125;));<span class="comment">// 라우트 설정</span>app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  <span class="keyword">if</span> (!req.<span class="property">session</span>.<span class="property">views</span>) &#123;    req.<span class="property">session</span>.<span class="property">views</span> = <span class="number">1</span>;  &#125; <span class="keyword">else</span> &#123;    req.<span class="property">session</span>.<span class="property">views</span>++;  &#125;  res.<span class="title function_">send</span>(<span class="string">`Number of views: <span class="subst">$&#123;req.session.views&#125;</span>`</span>);&#125;);app.<span class="title function_">get</span>(<span class="string">&quot;/login&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  req.<span class="property">session</span>.<span class="property">user</span> = &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;John Doe&quot;</span> &#125;;  res.<span class="title function_">send</span>(<span class="string">&quot;User logged in&quot;</span>);&#125;);app.<span class="title function_">get</span>(<span class="string">&quot;/profile&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  <span class="keyword">if</span> (!req.<span class="property">session</span>.<span class="property">user</span>) &#123;    <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">401</span>).<span class="title function_">send</span>(<span class="string">&quot;Unauthorized&quot;</span>);  &#125;  res.<span class="title function_">send</span>(<span class="string">`User profile: <span class="subst">$&#123;req.session.user.name&#125;</span>`</span>);&#125;);app.<span class="title function_">get</span>(<span class="string">&quot;/logout&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  req.<span class="property">session</span>.<span class="title function_">destroy</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;    <span class="keyword">if</span> (err) &#123;      <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&quot;Failed to log out&quot;</span>);    &#125;    res.<span class="title function_">send</span>(<span class="string">&quot;User logged out&quot;</span>);  &#125;);&#125;);app.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Server is running on &lt;http://localhost&gt;:<span class="subst">$&#123;port&#125;</span>`</span>);&#125;);</code></pre><h2 id="설정-설명"><a href="#설정-설명" class="headerlink" title="설정 설명"></a>설정 설명</h2><p>Node.js에서 <code>express-session</code>을 사용하여 세션을 설정하고 관리하는 방법을 설명합니다.</p><ol><li><p><strong>세션 설정</strong>:</p><pre><code class="highlight javascript"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">&quot;express-session&quot;</span>);app.<span class="title function_">use</span>(  <span class="title function_">session</span>(&#123;    <span class="attr">secret</span>: <span class="string">&quot;secret-key&quot;</span>,    <span class="attr">resave</span>: <span class="literal">false</span>,    <span class="attr">saveUninitialized</span>: <span class="literal">true</span>,    <span class="attr">cookie</span>: &#123; <span class="attr">secure</span>: <span class="literal">false</span> &#125;,  &#125;));</code></pre><p><code>express-session</code> 미들웨어를 사용하여 세션을 설정합니다. <code>secret</code>은 세션을 암호화하는 키이며, <code>resave</code>와 <code>saveUninitialized</code>는 세션 저장 방식에 대한 설정입니다. <code>cookie</code> 옵션은 세션 쿠키의 보안 설정을 정의합니다. 개발 환경에서는 <code>secure</code>를 <code>false</code>로 설정하고, 프로덕션 환경에서는 <code>true</code>로 설정합니다.</p></li><li><p><strong>세션을 사용한 페이지 조회 카운트</strong>:</p><pre><code class="highlight javascript">app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  <span class="keyword">if</span> (!req.<span class="property">session</span>.<span class="property">views</span>) &#123;    req.<span class="property">session</span>.<span class="property">views</span> = <span class="number">1</span>;  &#125; <span class="keyword">else</span> &#123;    req.<span class="property">session</span>.<span class="property">views</span>++;  &#125;  res.<span class="title function_">send</span>(<span class="string">`Number of views: <span class="subst">$&#123;req.session.views&#125;</span>`</span>);&#125;);</code></pre><p>사용자의 페이지 조회 수를 세션에 저장하여 관리합니다. 세션이 초기화되지 않았다면 <code>views</code>를 1로 설정하고, 이후 요청에서는 <code>views</code>를 증가시킵니다.</p></li><li><p><strong>로그인 라우트</strong>:</p><pre><code class="highlight javascript">app.<span class="title function_">get</span>(<span class="string">&quot;/login&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  req.<span class="property">session</span>.<span class="property">user</span> = &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;John Doe&quot;</span> &#125;;  res.<span class="title function_">send</span>(<span class="string">&quot;User logged in&quot;</span>);&#125;);</code></pre><p>로그인 라우트에서 사용자의 세션에 사용자 정보를 저장합니다. 이는 사용자 인증을 시뮬레이션한 예제입니다.</p></li><li><p><strong>프로필 라우트</strong>:</p><pre><code class="highlight javascript">app.<span class="title function_">get</span>(<span class="string">&quot;/profile&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  <span class="keyword">if</span> (!req.<span class="property">session</span>.<span class="property">user</span>) &#123;    <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">401</span>).<span class="title function_">send</span>(<span class="string">&quot;Unauthorized&quot;</span>);  &#125;  res.<span class="title function_">send</span>(<span class="string">`User profile: <span class="subst">$&#123;req.session.user.name&#125;</span>`</span>);&#125;);</code></pre><p>프로필 라우트에서 세션에 저장된 사용자 정보를 사용하여 사용자 프로필을 반환합니다. 세션에 사용자 정보가 없으면 401 Unauthorized 상태 코드를 반환합니다.</p></li><li><p><strong>로그아웃 라우트</strong>:</p><pre><code class="highlight javascript">app.<span class="title function_">get</span>(<span class="string">&quot;/logout&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  req.<span class="property">session</span>.<span class="title function_">destroy</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;    <span class="keyword">if</span> (err) &#123;      <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&quot;Failed to log out&quot;</span>);    &#125;    res.<span class="title function_">send</span>(<span class="string">&quot;User logged out&quot;</span>);  &#125;);&#125;);</code></pre><p>로그아웃 라우트에서 세션을 삭제하여 사용자 로그아웃을 처리합니다. 세션 삭제 후 로그아웃 메시지를 반환합니다.</p></li></ol><h2 id="테스트"><a href="#테스트" class="headerlink" title="테스트"></a>테스트</h2><p>이렇게 하면 Node.js에서 <code>express-session</code>을 사용하여 세션을 관리할 수 있습니다. 이 코드를 실행하기 전에 <code>server.js</code> 파일을 실행하여 서버를 시작하세요.</p><pre><code class="highlight bash">node server.js</code></pre><p>서버가 성공적으로 실행되면, <code>http://localhost:3000</code>에서 세션 관리가 적용된 API를 테스트할 수 있습니다.</p><ol><li><strong>페이지 조회 수 확인</strong>: 브라우저에서 <code>http://localhost:3000</code>을 여러 번 새로 고침하여 조회 수가 증가하는지 확인합니다.</li><li><strong>로그인</strong>: <code>http://localhost:3000/login</code>에서 사용자 로그인을 시도합니다.</li><li><strong>프로필 확인</strong>: <code>http://localhost:3000/profile</code>에서 사용자 프로필을 확인합니다.</li><li><strong>로그아웃</strong>: <code>http://localhost:3000/logout</code>에서 사용자 로그아웃을 시도합니다.</li></ol><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 세션 관리의 원리와 필요성을 이해하고, Node.js에서 <code>express-session</code>을 사용하여 세션을 관리하는 방법을 알아보았습니다. 이를 바탕으로 더 안전하고 효율적인 웹 애플리케이션을 개발해보세요!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> web_필수 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript 타입 유추 (Type Inference)</title>
      <link href="/typescript/special/2/"/>
      <url>/typescript/special/2/</url>
      
        <content type="html"><![CDATA[<h1 id="TypeScript-타입-유추-Type-Inference"><a href="#TypeScript-타입-유추-Type-Inference" class="headerlink" title="TypeScript 타입 유추 (Type Inference)"></a>TypeScript 타입 유추 (Type Inference)</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 TypeScript의 <strong>타입 유추</strong>(Type Inference)에 대해 알아보겠습니다. TypeScript는 명시적으로 타입을 지정하지 않아도, 코드의 문맥을 바탕으로 타입을 유추할 수 있습니다. 이 기능은 개발자의 코드 작성 시간을 줄여주고, 코드의 가독성을 높여줍니다. 또한 <strong>Contextual Typing</strong>을 통해, 더욱 정교하게 타입을 유추할 수 있습니다.</p><h2 id="타입-유추의-개념과-동작-방식"><a href="#타입-유추의-개념과-동작-방식" class="headerlink" title="타입 유추의 개념과 동작 방식"></a>타입 유추의 개념과 동작 방식</h2><h3 id="타입-유추란"><a href="#타입-유추란" class="headerlink" title="타입 유추란?"></a>타입 유추란?</h3><p>타입 유추는 TypeScript가 명시적으로 타입을 지정하지 않은 변수, 함수의 반환 값 등을 코드의 문맥을 바탕으로 자동으로 타입을 추론하는 기능을 의미합니다. 예를 들어, RPG 게임에서 캐릭터의 체력을 초기화할 때 TypeScript가 타입을 유추하는 방식을 살펴보겠습니다.</p><pre><code class="highlight typescript"><span class="keyword">let</span> health = <span class="number">100</span>;</code></pre><p>위 코드에서 <code>health</code> 변수는 명시적으로 타입이 지정되지 않았지만, TypeScript는 할당된 값 <code>100</code>을 보고 <code>health</code>의 타입을 <code>number</code>로 유추합니다. 이로 인해 <code>health</code> 변수에 숫자가 아닌 다른 값을 할당하려고 하면 컴파일 타임에 오류가 발생합니다.</p><pre><code class="highlight typescript">health = <span class="string">&quot;full&quot;</span>; <span class="comment">// 오류: &#x27;string&#x27; 타입을 &#x27;number&#x27; 타입에 할당할 수 없습니다.</span></code></pre><h3 id="함수의-반환-타입-유추"><a href="#함수의-반환-타입-유추" class="headerlink" title="함수의 반환 타입 유추"></a>함수의 반환 타입 유추</h3><p>함수의 반환 타입도 자동으로 유추됩니다. 예를 들어, RPG 게임에서 경험치를 추가하는 함수를 작성할 때 TypeScript가 반환 타입을 유추하는 방식을 살펴보겠습니다.</p><pre><code class="highlight typescript"><span class="keyword">function</span> <span class="title function_">addExperience</span>(<span class="params"><span class="attr">currentExp</span>: <span class="built_in">number</span>, <span class="attr">earnedExp</span>: <span class="built_in">number</span></span>) &#123;  <span class="keyword">return</span> currentExp + earnedExp;&#125;<span class="keyword">let</span> totalExp = <span class="title function_">addExperience</span>(<span class="number">1000</span>, <span class="number">500</span>); <span class="comment">// totalExp는 자동으로 number 타입으로 유추됩니다.</span></code></pre><p>위 코드에서 <code>addExperience</code> 함수는 두 개의 <code>number</code> 타입 인수를 받아 이들의 합을 반환합니다. TypeScript는 반환된 값의 타입을 자동으로 <code>number</code>로 유추하며, <code>totalExp</code> 변수도 <code>number</code> 타입으로 유추됩니다.</p><h2 id="Contextual-Typing과-Type-Inference"><a href="#Contextual-Typing과-Type-Inference" class="headerlink" title="Contextual Typing과 Type Inference"></a>Contextual Typing과 Type Inference</h2><h3 id="Contextual-Typing이란"><a href="#Contextual-Typing이란" class="headerlink" title="Contextual Typing이란?"></a>Contextual Typing이란?</h3><p><strong>Contextual Typing</strong>은 코드의 문맥(Context)에서 타입을 유추하는 방식입니다. 이 기능은 특히 함수의 매개변수나 리턴 타입을 유추할 때 유용합니다. 예를 들어, RPG 게임에서 특정 행동을 처리하는 함수가 있다고 가정해 보겠습니다.</p><pre><code class="highlight typescript"><span class="keyword">interface</span> <span class="title class_">Action</span> &#123;  <span class="attr">execute</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span>;&#125;<span class="keyword">const</span> <span class="attr">attackAction</span>: <span class="title class_">Action</span> = &#123;  <span class="title function_">execute</span>(<span class="params"></span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;공격을 수행합니다!&quot;</span>);  &#125;,&#125;;</code></pre><p>위 코드에서 <code>attackAction</code> 객체의 <code>execute</code> 메서드는 명시적으로 타입이 지정되지 않았지만, <code>Action</code> 인터페이스를 기반으로 <code>execute</code> 메서드가 <code>() =&gt; void</code> 타입을 가지도록 유추됩니다. 이와 같은 방식으로 TypeScript는 객체의 맥락에서 타입을 유추하여, 명시적인 타입 선언 없이도 타입 안전성을 유지합니다.</p><h3 id="함수의-Contextual-Typing"><a href="#함수의-Contextual-Typing" class="headerlink" title="함수의 Contextual Typing"></a>함수의 Contextual Typing</h3><p>함수의 인수 타입을 자동으로 유추하는 것도 가능합니다. 예를 들어, RPG 게임에서 다양한 행동을 수행하는 함수를 작성해보겠습니다.</p><pre><code class="highlight typescript"><span class="keyword">function</span> <span class="title function_">performAction</span>(<span class="params"><span class="attr">action</span>: (target: <span class="built_in">string</span>) =&gt; <span class="built_in">void</span></span>) &#123;  <span class="title function_">action</span>(<span class="string">&quot;Dragon&quot;</span>);&#125;<span class="title function_">performAction</span>(<span class="function">(<span class="params">target</span>) =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;target&#125;</span>에게 강력한 공격을 가합니다!`</span>);&#125;);</code></pre><p>위 코드에서 <code>performAction</code> 함수는 <code>action</code>이라는 콜백 함수를 인수로 받습니다. <code>performAction</code> 함수 내부에서 <code>action</code>이 호출될 때 <code>target</code>은 <code>&quot;Dragon&quot;</code>이라는 문자열을 받습니다. TypeScript는 <code>performAction</code> 함수의 정의를 보고 <code>action</code> 함수의 <code>target</code> 인수를 <code>string</code> 타입으로 자동 유추합니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 TypeScript의 <strong>타입 유추</strong>(Type Inference)에 대해 알아보았습니다. 타입 유추는 TypeScript가 코드의 문맥을 바탕으로 자동으로 타입을 추론하는 기능으로, 개발자의 부담을 줄이고 코드의 가독성을 높이는 데 큰 역할을 합니다. 특히 <strong>Contextual Typing</strong>을 통해 더욱 정교하게 타입을 유추할 수 있으며, 이를 통해 보다 안전하고 효율적인 코드를 작성할 수 있습니다.<br>TypeScript의 타입 유추 기능을 활용하여 더욱 생산적인 개발을 해보세요!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> TS_필살기 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue Computed Properties와 Watchers</title>
      <link href="/vue/5/"/>
      <url>/vue/5/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-Computed-Properties와-Watchers"><a href="#Vue-Computed-Properties와-Watchers" class="headerlink" title="Vue Computed Properties와 Watchers"></a>Vue Computed Properties와 Watchers</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 Vue.js에서 매우 유용하게 사용되는 <strong>Computed Properties</strong>와 <strong>Watchers</strong>에 대해 알아보겠습니다. 이 두 가지 개념은 Vue.js 애플리케이션에서 데이터 변화를 효율적으로 관리하고, 보다 직관적인 방식으로 화면에 반영하기 위해 중요한 역할을 합니다.</p><h2 id="1-Computed-Properties"><a href="#1-Computed-Properties" class="headerlink" title="1. Computed Properties"></a>1. Computed Properties</h2><h3 id="Computed-Properties의-정의"><a href="#Computed-Properties의-정의" class="headerlink" title="Computed Properties의 정의"></a>Computed Properties의 정의</h3><p><strong>Computed Properties</strong>는 Vue.js에서 데이터의 변화를 실시간으로 반영하기 위해 사용하는 속성입니다. 기존의 데이터를 기반으로 새로운 값을 계산할 때 사용되며, Vue.js는 자동으로 종속된 데이터의 변화를 감지하고 계산된 속성을 업데이트합니다.</p><p>Vue3에서는 Computed Properties가 내부적으로 <code>reactive</code> 시스템과 연동되어 있으며, 종속된 데이터가 변경될 때만 다시 계산되도록 최적화되어 있습니다.</p><h3 id="Computed-Properties의-사용"><a href="#Computed-Properties의-사용" class="headerlink" title="Computed Properties의 사용"></a>Computed Properties의 사용</h3><p>Computed Properties는 <code>computed</code> 옵션 안에 정의됩니다. 이 속성들은 함수처럼 정의되지만, Vue.js 내부에서 캐싱되기 때문에 의존하는 데이터가 변경될 때만 다시 계산됩니다. 이는 성능 최적화에 매우 유리합니다.</p><pre><code class="highlight html"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">p</span>&gt;</span>원본 메시지: &#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span>  <span class="tag">&lt;<span class="name">p</span>&gt;</span>역순 메시지: &#123;&#123; reversedMessage &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="keyword">import</span> &#123; createApp, computed &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;</span><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><span class="language-javascript">      <span class="keyword">return</span> &#123;</span><span class="language-javascript">        <span class="attr">message</span>: <span class="string">&quot;안녕하세요, Vue.js!&quot;</span>,</span><span class="language-javascript">      &#125;;</span><span class="language-javascript">    &#125;,</span><span class="language-javascript">    <span class="attr">computed</span>: &#123;</span><span class="language-javascript">      <span class="title function_">reversedMessage</span>(<span class="params"></span>) &#123;</span><span class="language-javascript">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">message</span>.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>);</span><span class="language-javascript">      &#125;,</span><span class="language-javascript">    &#125;,</span><span class="language-javascript">  &#125;);</span><span class="language-javascript"></span><span class="language-javascript">  app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></code></pre><h3 id="Computed-Properties의-세부-기능"><a href="#Computed-Properties의-세부-기능" class="headerlink" title="Computed Properties의 세부 기능"></a>Computed Properties의 세부 기능</h3><p>Vue3에서의 Computed Properties는 단순히 데이터를 계산하여 반환하는 것 외에도, 다음과 같은 기능을 제공합니다.</p><h4 id="Computed-Properties의-Getter와-Setter"><a href="#Computed-Properties의-Getter와-Setter" class="headerlink" title="Computed Properties의 Getter와 Setter"></a>Computed Properties의 Getter와 Setter</h4><p>Computed Properties는 기본적으로 <strong>getter</strong> 함수만을 가지지만, 필요에 따라 <strong>setter</strong>를 정의할 수도 있습니다. 이 기능을 사용하면 계산된 속성을 양방향 데이터 바인딩에 활용할 수 있습니다.</p><pre><code class="highlight javascript"><span class="attr">computed</span>: &#123;  <span class="attr">fullName</span>: &#123;    <span class="title function_">get</span>(<span class="params"></span>) &#123;      <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.firstName&#125;</span> <span class="subst">$&#123;<span class="variable language_">this</span>.lastName&#125;</span>`</span>;    &#125;,    <span class="title function_">set</span>(<span class="params">newValue</span>) &#123;      <span class="keyword">const</span> names = newValue.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>);      <span class="variable language_">this</span>.<span class="property">firstName</span> = names[<span class="number">0</span>];      <span class="variable language_">this</span>.<span class="property">lastName</span> = names[<span class="number">1</span>];    &#125;  &#125;&#125;</code></pre><p>위 예제에서 <code>fullName</code>은 <code>firstName</code>과 <code>lastName</code>을 결합하여 반환하는 Computed Property입니다. 또한, <code>fullName</code>에 새로운 값을 설정할 때 <code>firstName</code>과 <code>lastName</code>을 분리하여 각각의 데이터 속성을 업데이트합니다.</p><h4 id="Computed-Properties와-Methods의-차이점"><a href="#Computed-Properties와-Methods의-차이점" class="headerlink" title="Computed Properties와 Methods의 차이점"></a>Computed Properties와 Methods의 차이점</h4><p>Vue.js에서 Computed Properties와 Methods는 비슷해 보이지만, 중요한 차이가 있습니다. Computed Properties는 의존하는 데이터가 변경될 때만 다시 계산되며, 결과를 캐싱합니다. 반면, Methods는 매번 호출될 때마다 실행되기 때문에 같은 연산을 반복하게 됩니다. 따라서, Computed Properties는 성능상 더 유리한 선택입니다.</p><h2 id="2-Watchers"><a href="#2-Watchers" class="headerlink" title="2. Watchers"></a>2. Watchers</h2><h3 id="Watchers의-정의"><a href="#Watchers의-정의" class="headerlink" title="Watchers의 정의"></a>Watchers의 정의</h3><p><strong>Watchers</strong>는 Vue.js에서 특정 데이터의 변화를 감지하여 그에 따른 동작을 수행하기 위해 사용됩니다. Computed Properties와 달리, Watchers는 데이터의 변화에 반응하여 비동기 작업, API 호출 등 다양한 작업을 수행할 때 유용합니다.</p><h3 id="Watchers의-사용-예제"><a href="#Watchers의-사용-예제" class="headerlink" title="Watchers의 사용 예제"></a>Watchers의 사용 예제</h3><pre><code class="highlight html"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">p</span>&gt;</span>이름: <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;name&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span>  <span class="tag">&lt;<span class="name">p</span>&gt;</span>이름 길이: &#123;&#123; nameLength &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="keyword">import</span> &#123; createApp, watch &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;</span><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><span class="language-javascript">      <span class="keyword">return</span> &#123;</span><span class="language-javascript">        <span class="attr">name</span>: <span class="string">&quot;&quot;</span>,</span><span class="language-javascript">        <span class="attr">nameLength</span>: <span class="number">0</span>,</span><span class="language-javascript">      &#125;;</span><span class="language-javascript">    &#125;,</span><span class="language-javascript">    <span class="attr">watch</span>: &#123;</span><span class="language-javascript">      <span class="title function_">name</span>(<span class="params">newValue</span>) &#123;</span><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">nameLength</span> = newValue.<span class="property">length</span>;</span><span class="language-javascript">      &#125;,</span><span class="language-javascript">    &#125;,</span><span class="language-javascript">  &#125;);</span><span class="language-javascript"></span><span class="language-javascript">  app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></code></pre><h3 id="Watchers의-세부-기능"><a href="#Watchers의-세부-기능" class="headerlink" title="Watchers의 세부 기능"></a>Watchers의 세부 기능</h3><p>Vue3에서는 Watchers를 활용한 다양한 기능을 제공하며, 다음과 같은 세부 기능을 지원합니다.</p><h4 id="Immediate-옵션"><a href="#Immediate-옵션" class="headerlink" title="Immediate 옵션"></a>Immediate 옵션</h4><p>Watchers는 기본적으로 데이터가 변경될 때만 실행됩니다. 그러나 <code>immediate</code> 옵션을 사용하면 데이터의 초기 값이 설정되었을 때에도 Watcher가 한 번 실행되도록 할 수 있습니다.</p><pre><code class="highlight javascript"><span class="attr">watch</span>: &#123;  <span class="attr">name</span>: &#123;    <span class="title function_">handler</span>(<span class="params">newValue</span>) &#123;      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Name changed:&#x27;</span>, newValue);    &#125;,    <span class="attr">immediate</span>: <span class="literal">true</span>  &#125;&#125;</code></pre><h4 id="Deep-옵션"><a href="#Deep-옵션" class="headerlink" title="Deep 옵션"></a>Deep 옵션</h4><p>Vue.js에서 객체 내부의 속성을 감시하려면 <code>deep</code> 옵션을 사용하여 객체의 모든 속성을 재귀적으로 감시할 수 있습니다.</p><pre><code class="highlight javascript"><span class="attr">watch</span>: &#123;  <span class="attr">character</span>: &#123;    <span class="title function_">handler</span>(<span class="params">newValue</span>) &#123;      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Character data changed:&#x27;</span>, newValue);    &#125;,    <span class="attr">deep</span>: <span class="literal">true</span>  &#125;&#125;</code></pre><h3 id="Watchers의-활용-예시"><a href="#Watchers의-활용-예시" class="headerlink" title="Watchers의 활용 예시"></a>Watchers의 활용 예시</h3><p>Watchers는 다음과 같은 상황에서 주로 사용됩니다:</p><ul><li><strong>비동기 작업</strong>: 데이터 변화에 따라 API 호출을 해야 할 때.</li><li><strong>복잡한 로직</strong>: Computed Properties로 해결할 수 없는 복잡한 작업을 수행할 때.</li><li><strong>타이머</strong>: 특정 데이터가 변할 때 타이머를 시작하거나 중지할 때.</li></ul><h2 id="3-Composition-API에서의-Computed-Properties와-Watchers"><a href="#3-Composition-API에서의-Computed-Properties와-Watchers" class="headerlink" title="3. Composition API에서의 Computed Properties와 Watchers"></a>3. Composition API에서의 Computed Properties와 Watchers</h2><blockquote><p>만약 Vue가 처음이시라면 이 섹션은 건너 뛰어주세요!</p></blockquote><p>Vue3에 추가된 <a href="/vue/24/">Composition API</a>를 사용하여 컴포넌트를 더욱 유연하고 모듈화된 방식으로 작성할 수 있습니다.</p><h3 id="Composition-API에서의-Computed-Properties"><a href="#Composition-API에서의-Computed-Properties" class="headerlink" title="Composition API에서의 Computed Properties"></a>Composition API에서의 Computed Properties</h3><p>Composition API를 사용할 때, <code>computed</code> 함수를 사용하여 계산된 속성을 정의할 수 있습니다. 이는 Options API에서 <code>computed</code> 옵션을 사용하는 것과 매우 유사하지만, 더 많은 유연성을 제공합니다.</p><pre><code class="highlight javascript"><span class="keyword">import</span> &#123; ref, computed &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;<span class="keyword">export</span> <span class="keyword">default</span> &#123;  <span class="title function_">setup</span>(<span class="params"></span>) &#123;    <span class="keyword">const</span> message = <span class="title function_">ref</span>(<span class="string">&quot;안녕하세요, Vue.js!&quot;</span>);    <span class="keyword">const</span> reversedMessage = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;      <span class="keyword">return</span> message.<span class="property">value</span>.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>);    &#125;);    <span class="keyword">return</span> &#123;      message,      reversedMessage,    &#125;;  &#125;,&#125;;</code></pre><h3 id="Composition-API에서의-Watchers"><a href="#Composition-API에서의-Watchers" class="headerlink" title="Composition API에서의 Watchers"></a>Composition API에서의 Watchers</h3><p>Composition API에서는 <code>watch</code> 함수를 사용하여 데이터를 감시하고, 데이터의 변경에 반응하는 로직을 작성할 수 있습니다.</p><pre><code class="highlight javascript"><span class="keyword">import</span> &#123; ref, watch &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;<span class="keyword">export</span> <span class="keyword">default</span> &#123;  <span class="title function_">setup</span>(<span class="params"></span>) &#123;    <span class="keyword">const</span> name = <span class="title function_">ref</span>(<span class="string">&quot;&quot;</span>);    <span class="keyword">const</span> nameLength = <span class="title function_">ref</span>(<span class="number">0</span>);    <span class="title function_">watch</span>(name, <span class="function">(<span class="params">newValue</span>) =&gt;</span> &#123;      nameLength.<span class="property">value</span> = newValue.<span class="property">length</span>;    &#125;);    <span class="keyword">return</span> &#123;      name,      nameLength,    &#125;;  &#125;,&#125;;</code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 Vue.js에서 중요한 <strong>Computed Properties</strong>와 <strong>Watchers</strong>에 대해 알아보았습니다. Computed Properties는 성능을 최적화하면서 데이터 변화를 자동으로 반영할 수 있게 해주며, Watchers는 데이터 변화를 감지하여 특정 동작을 수행할 수 있도록 도와줍니다. 이 두 가지 기능을 잘 활용하면 더 효율적이고 반응성 높은 Vue.js 애플리케이션을 개발할 수 있습니다.<br>다음 시간에는 Vue.js의 **클래스(Class)**와 **인라인 스타일(Style)**에 대해 알아보겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript 고급 타입 (Advanced Types)</title>
      <link href="/typescript/special/1/"/>
      <url>/typescript/special/1/</url>
      
        <content type="html"><![CDATA[<h1 id="TypeScript-고급-타입-Advanced-Types"><a href="#TypeScript-고급-타입-Advanced-Types" class="headerlink" title="TypeScript 고급 타입 (Advanced Types)"></a>TypeScript 고급 타입 (Advanced Types)</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 TypeScript의 고급 타입 기능에 대해 알아보겠습니다. TypeScript는 기본적인 타입 외에도 복잡한 데이터 구조를 다루기 위한 다양한 고급 타입을 제공합니다. 이번 글에서는 유니언 타입과 인터섹션 타입, 타입 가드와 타입 단언(Type Assertions), 그리고 타입 별칭(Type Aliases)에 대해 살펴보겠습니다.</p><h2 id="유니언-타입과-인터섹션-타입"><a href="#유니언-타입과-인터섹션-타입" class="headerlink" title="유니언 타입과 인터섹션 타입"></a>유니언 타입과 인터섹션 타입</h2><h3 id="유니언-타입-Union-Types"><a href="#유니언-타입-Union-Types" class="headerlink" title="유니언 타입 (Union Types)"></a>유니언 타입 (Union Types)</h3><p>유니언 타입은 하나의 변수가 여러 가지 타입을 가질 수 있도록 할 때 사용됩니다. 예를 들어, RPG 게임에서 캐릭터가 사용할 수 있는 무기 종류가 여러 가지인 경우, 유니언 타입을 사용하여 이를 정의할 수 있습니다.</p><pre><code class="highlight typescript"><span class="keyword">type</span> <span class="title class_">Weapon</span> = <span class="string">&quot;Sword&quot;</span> | <span class="string">&quot;Bow&quot;</span> | <span class="string">&quot;Staff&quot;</span>;<span class="keyword">let</span> <span class="attr">currentWeapon</span>: <span class="title class_">Weapon</span>;currentWeapon = <span class="string">&quot;Sword&quot;</span>; <span class="comment">// 정상</span>currentWeapon = <span class="string">&quot;Bow&quot;</span>; <span class="comment">// 정상</span>currentWeapon = <span class="string">&quot;Axe&quot;</span>; <span class="comment">// 오류: &#x27;Axe&#x27;는 &#x27;Weapon&#x27; 타입에 할당할 수 없습니다.</span></code></pre><p>이 예제에서 <code>Weapon</code> 타입은 <code>Sword</code>, <code>Bow</code>, <code>Staff</code> 중 하나의 값을 가질 수 있습니다. 다양한 무기 타입을 처리할 수 있도록 하여 코드의 유연성을 높여줍니다.</p><h3 id="인터섹션-타입-Intersection-Types"><a href="#인터섹션-타입-Intersection-Types" class="headerlink" title="인터섹션 타입 (Intersection Types)"></a>인터섹션 타입 (Intersection Types)</h3><p>인터섹션 타입은 두 개 이상의 타입을 결합하여 하나의 타입을 정의할 때 사용됩니다. 예를 들어, RPG 게임에서 캐릭터가 여러 역할을 동시에 수행해야 하는 경우, 인터섹션 타입을 사용하여 캐릭터의 다양한 역할을 결합할 수 있습니다.</p><pre><code class="highlight typescript"><span class="keyword">interface</span> <span class="title class_">Warrior</span> &#123;  <span class="attr">weapon</span>: <span class="string">&quot;Sword&quot;</span> | <span class="string">&quot;Axe&quot;</span>;  <span class="attr">attack</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span>;&#125;<span class="keyword">interface</span> <span class="title class_">Mage</span> &#123;  <span class="attr">spell</span>: <span class="string">&quot;Fireball&quot;</span> | <span class="string">&quot;Ice Lance&quot;</span>;  <span class="attr">castSpell</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span>;&#125;<span class="keyword">type</span> <span class="title class_">Battlemage</span> = <span class="title class_">Warrior</span> &amp; <span class="title class_">Mage</span>;<span class="keyword">const</span> <span class="attr">battlemage</span>: <span class="title class_">Battlemage</span> = &#123;  <span class="attr">weapon</span>: <span class="string">&quot;Sword&quot;</span>,  <span class="title function_">attack</span>(<span class="params"></span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;칼로 공격합니다!&quot;</span>);  &#125;,  <span class="attr">spell</span>: <span class="string">&quot;Fireball&quot;</span>,  <span class="title function_">castSpell</span>(<span class="params"></span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;화염구를 시전합니다!&quot;</span>);  &#125;,&#125;;</code></pre><p>위 예제에서 <code>Battlemage</code> 타입은 <code>Warrior</code>와 <code>Mage</code>의 모든 속성을 포함하는 인터섹션 타입입니다. 이를 통해 전사와 마법사의 능력을 모두 가진 캐릭터를 정의할 수 있습니다.</p><h2 id="타입-가드와-타입-단언-Type-Assertions"><a href="#타입-가드와-타입-단언-Type-Assertions" class="headerlink" title="타입 가드와 타입 단언 (Type Assertions)"></a>타입 가드와 타입 단언 (Type Assertions)</h2><h3 id="타입-가드-Type-Guards"><a href="#타입-가드-Type-Guards" class="headerlink" title="타입 가드 (Type Guards)"></a>타입 가드 (Type Guards)</h3><p>타입 가드는 유니언 타입처럼 여러 가지 타입을 가질 수 있는 변수가 특정 타입인지 확인할 때 사용됩니다. 예를 들어, RPG 게임에서 캐릭터가 사용하는 무기나 마법이 상황에 따라 달라질 수 있습니다. 이때 타입 가드를 사용하여 안전하게 동작을 처리할 수 있습니다.</p><pre><code class="highlight typescript"><span class="keyword">function</span> <span class="title function_">useSkill</span>(<span class="params"><span class="attr">skill</span>: <span class="string">&quot;Sword&quot;</span> | <span class="string">&quot;Fireball&quot;</span></span>) &#123;  <span class="keyword">if</span> (skill === <span class="string">&quot;Sword&quot;</span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;검을 휘두릅니다!&quot;</span>);  &#125; <span class="keyword">else</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;화염구를 시전합니다!&quot;</span>);  &#125;&#125;<span class="title function_">useSkill</span>(<span class="string">&quot;Sword&quot;</span>); <span class="comment">// 검을 휘두릅니다!</span><span class="title function_">useSkill</span>(<span class="string">&quot;Fireball&quot;</span>); <span class="comment">// 화염구를 시전합니다!</span></code></pre><p>위 예제에서 <code>if</code> 문을 사용하여 <code>skill</code>이 “Sword”인지 “Fireball”인지 확인한 후, 각각의 스킬에 맞는 동작을 수행합니다.</p><h3 id="타입-단언-Type-Assertions"><a href="#타입-단언-Type-Assertions" class="headerlink" title="타입 단언 (Type Assertions)"></a>타입 단언 (Type Assertions)</h3><p>타입 단언은 개발자가 특정 값의 타입을 더 잘 알고 있다고 컴파일러에 알려줄 때 사용합니다. 예를 들어, RPG 게임에서 플레이어가 선택한 아이템의 속성을 특정 타입으로 간주하고 싶을 때 사용할 수 있습니다.</p><pre><code class="highlight typescript"><span class="keyword">let</span> <span class="attr">selectedItem</span>: <span class="built_in">unknown</span> = &#123; <span class="attr">name</span>: <span class="string">&quot;Health Potion&quot;</span>, <span class="attr">effect</span>: <span class="string">&quot;Restore HP&quot;</span> &#125;;<span class="keyword">let</span> <span class="attr">itemName</span>: <span class="built_in">string</span> = (selectedItem <span class="keyword">as</span> &#123; <span class="attr">name</span>: <span class="built_in">string</span> &#125;).<span class="property">name</span>;<span class="variable language_">console</span>.<span class="title function_">log</span>(itemName); <span class="comment">// 출력: Health Potion</span></code></pre><p>위 예제에서 <code>selectedItem</code> 변수는 <code>unknown</code> 타입이지만, 개발자는 이 값이 아이템 객체라는 것을 알고 있습니다. 따라서 <code>as &#123; name: string &#125;</code>을 사용하여 타입을 단언하고, 아이템의 이름을 안전하게 접근합니다.</p><h2 id="타입-별칭-Type-Aliases"><a href="#타입-별칭-Type-Aliases" class="headerlink" title="타입 별칭 (Type Aliases)"></a>타입 별칭 (Type Aliases)</h2><p>타입 별칭은 타입에 이름을 붙여주어 코드의 가독성을 높이고, 복잡한 타입을 재사용할 수 있도록 합니다. 예를 들어, RPG 게임에서 여러 가지 가능한 캐릭터 클래스와 그들이 사용할 수 있는 스킬을 정의할 때 유용하게 사용할 수 있습니다.</p><pre><code class="highlight typescript"><span class="keyword">type</span> <span class="title class_">CharacterClass</span> = <span class="string">&quot;Warrior&quot;</span> | <span class="string">&quot;Mage&quot;</span> | <span class="string">&quot;Rogue&quot;</span>;<span class="keyword">type</span> <span class="title class_">Skill</span> = <span class="string">&quot;Sword&quot;</span> | <span class="string">&quot;Fireball&quot;</span> | <span class="string">&quot;Stealth&quot;</span>;<span class="keyword">let</span> <span class="attr">characterClass</span>: <span class="title class_">CharacterClass</span> = <span class="string">&quot;Mage&quot;</span>;<span class="keyword">let</span> <span class="attr">currentSkill</span>: <span class="title class_">Skill</span> = <span class="string">&quot;Fireball&quot;</span>;</code></pre><p>위 예제에서 <code>CharacterClass</code>와 <code>Skill</code>이라는 타입 별칭을 정의하여 각각 가능한 캐릭터 클래스와 스킬 타입을 명확하게 표현할 수 있습니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 TypeScript의 고급 타입 기능에 대해 알아보았습니다. 유니언 타입과 인터섹션 타입, 타입 가드와 타입 단언, 그리고 타입 별칭을 활용하면 RPG 게임과 같은 복잡한 데이터 구조를 보다 명확하고 안전하게 다룰 수 있습니다.<br>고급 타입 기능을 활용하여 더욱 견고하고 확장 가능한 TypeScript 코드를 작성해보세요!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> TS_필살기 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue 컴포넌트(Component)</title>
      <link href="/vue/4/"/>
      <url>/vue/4/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-컴포넌트-Component"><a href="#Vue-컴포넌트-Component" class="headerlink" title="Vue 컴포넌트(Component)"></a>Vue 컴포넌트(Component)</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 Vue.js의 핵심 개념 중 하나인 <strong>컴포넌트</strong>에 대해 알아보겠습니다. 컴포넌트는 Vue.js 애플리케이션에서 재사용 가능한 독립적인 UI 단위로, 복잡한 인터페이스를 작은 단위로 나누어 효율적으로 관리할 수 있게 해줍니다.</p><h2 id="1-컴포넌트란-무엇인가"><a href="#1-컴포넌트란-무엇인가" class="headerlink" title="1. 컴포넌트란 무엇인가"></a>1. 컴포넌트란 무엇인가</h2><h3 id="컴포넌트의-개념"><a href="#컴포넌트의-개념" class="headerlink" title="컴포넌트의 개념"></a>컴포넌트의 개념</h3><p>컴포넌트(Component)는 Vue.js 애플리케이션에서 UI를 구성하는 독립적인 블록입니다. 각각의 컴포넌트는 HTML, CSS, JavaScript를 결합하여 특정 기능을 가진 UI 요소를 정의할 수 있습니다. 컴포넌트를 사용하면 복잡한 인터페이스를 작은 단위로 나누어 관리할 수 있으며, 이를 재사용하여 코드의 중복을 줄이고 유지보수성을 높일 수 있습니다.</p><h3 id="컴포넌트의-예시"><a href="#컴포넌트의-예시" class="headerlink" title="컴포넌트의 예시"></a>컴포넌트의 예시</h3><p>RPG 게임에서 컴포넌트를 사용해 캐릭터 카드, 인벤토리, 퀘스트 목록 등을 독립적인 UI 요소로 구현할 수 있습니다. 각 컴포넌트는 특정 역할을 수행하며, 필요한 경우 다른 컴포넌트와 상호작용할 수 있습니다.</p><pre><code class="highlight javascript"><span class="comment">// 컴포넌트 정의</span><span class="keyword">const</span> <span class="title class_">CharacterCard</span> = &#123;  <span class="attr">template</span>: <span class="string">`</span><span class="string">    &lt;div class=&quot;character-card&quot;&gt;</span><span class="string">      &lt;h2&gt;&#123;&#123; name &#125;&#125;&lt;/h2&gt;</span><span class="string">      &lt;p&gt;레벨: &#123;&#123; level &#125;&#125;&lt;/p&gt;</span><span class="string">      &lt;p&gt;직업: &#123;&#123; job &#125;&#125;&lt;/p&gt;</span><span class="string">    &lt;/div&gt;</span><span class="string">  `</span>,  <span class="title function_">data</span>(<span class="params"></span>) &#123;    <span class="keyword">return</span> &#123;      <span class="attr">name</span>: <span class="string">&quot;전사&quot;</span>,      <span class="attr">level</span>: <span class="number">10</span>,      <span class="attr">job</span>: <span class="string">&quot;탱커&quot;</span>,    &#125;;  &#125;,&#125;;</code></pre><p>위 예제에서 <code>CharacterCard</code> 컴포넌트는 <code>name</code>, <code>level</code>, <code>job</code> 속성을 가지고 있으며, 이를 템플릿에 바인딩하여 캐릭터의 정보를 표시합니다.</p><h2 id="2-전역-컴포넌트와-지역-컴포넌트"><a href="#2-전역-컴포넌트와-지역-컴포넌트" class="headerlink" title="2. 전역 컴포넌트와 지역 컴포넌트"></a>2. 전역 컴포넌트와 지역 컴포넌트</h2><h3 id="전역-컴포넌트"><a href="#전역-컴포넌트" class="headerlink" title="전역 컴포넌트"></a>전역 컴포넌트</h3><p>전역 컴포넌트는 애플리케이션 전체에서 사용할 수 있는 컴포넌트입니다. Vue3에서는 전역 컴포넌트를 등록하기 위해 <code>app.component</code> 메서드를 사용합니다. 전역 컴포넌트는 애플리케이션의 모든 인스턴스에서 사용할 수 있습니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;&#125;);app.<span class="title function_">component</span>(<span class="string">&quot;character-card&quot;</span>, &#123;  <span class="attr">template</span>: <span class="string">`</span><span class="string">    &lt;div class=&quot;character-card&quot;&gt;</span><span class="string">      &lt;h2&gt;&#123;&#123; name &#125;&#125;&lt;/h2&gt;</span><span class="string">      &lt;p&gt;레벨: &#123;&#123; level &#125;&#125;&lt;/p&gt;</span><span class="string">      &lt;p&gt;직업: &#123;&#123; job &#125;&#125;&lt;/p&gt;</span><span class="string">    &lt;/div&gt;</span><span class="string">  `</span>,  <span class="title function_">data</span>(<span class="params"></span>) &#123;    <span class="keyword">return</span> &#123;      <span class="attr">name</span>: <span class="string">&quot;전사&quot;</span>,      <span class="attr">level</span>: <span class="number">10</span>,      <span class="attr">job</span>: <span class="string">&quot;탱커&quot;</span>,    &#125;;  &#125;,&#125;);app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</code></pre><h3 id="지역-컴포넌트"><a href="#지역-컴포넌트" class="headerlink" title="지역 컴포넌트"></a>지역 컴포넌트</h3><p>지역 컴포넌트는 특정 Vue 인스턴스나 컴포넌트 내부에서만 사용할 수 있는 컴포넌트입니다. 컴포넌트를 사용하려는 Vue 인스턴스나 컴포넌트의 <code>components</code> 옵션에 등록하여 사용합니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> <span class="title class_">CharacterCard</span> = &#123;  <span class="attr">template</span>: <span class="string">`</span><span class="string">    &lt;div class=&quot;character-card&quot;&gt;</span><span class="string">      &lt;h2&gt;&#123;&#123; name &#125;&#125;&lt;/h2&gt;</span><span class="string">      &lt;p&gt;레벨: &#123;&#123; level &#125;&#125;&lt;/p&gt;</span><span class="string">      &lt;p&gt;직업: &#123;&#123; job &#125;&#125;&lt;/p&gt;</span><span class="string">    &lt;/div&gt;</span><span class="string">  `</span>,  <span class="title function_">data</span>(<span class="params"></span>) &#123;    <span class="keyword">return</span> &#123;      <span class="attr">name</span>: <span class="string">&quot;법사&quot;</span>,      <span class="attr">level</span>: <span class="number">15</span>,      <span class="attr">job</span>: <span class="string">&quot;딜러&quot;</span>,    &#125;;  &#125;,&#125;;<span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;  <span class="attr">components</span>: &#123;    <span class="title class_">CharacterCard</span>,  &#125;,&#125;);app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</code></pre><p>위 예제에서 <code>CharacterCard</code> 컴포넌트는 특정 Vue 인스턴스에서만 사용할 수 있는 지역 컴포넌트로 등록되었습니다.</p><h2 id="3-Props와-Events를-사용한-부모-자식-컴포넌트-간-통신"><a href="#3-Props와-Events를-사용한-부모-자식-컴포넌트-간-통신" class="headerlink" title="3. Props와 Events를 사용한 부모-자식 컴포넌트 간 통신"></a>3. Props와 Events를 사용한 부모-자식 컴포넌트 간 통신</h2><h3 id="Props를-통한-데이터-전달"><a href="#Props를-통한-데이터-전달" class="headerlink" title="Props를 통한 데이터 전달"></a>Props를 통한 데이터 전달</h3><p>Props는 부모 컴포넌트에서 자식 컴포넌트로 데이터를 전달하는 데 사용됩니다. 자식 컴포넌트는 부모로부터 전달받은 데이터를 자신의 속성처럼 사용할 수 있습니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> <span class="title class_">CharacterCard</span> = &#123;  <span class="attr">template</span>: <span class="string">`</span><span class="string">    &lt;div class=&quot;character-card&quot;&gt;</span><span class="string">      &lt;h2&gt;&#123;&#123; name &#125;&#125;&lt;/h2&gt;</span><span class="string">      &lt;p&gt;레벨: &#123;&#123; level &#125;&#125;&lt;/p&gt;</span><span class="string">      &lt;p&gt;직업: &#123;&#123; job &#125;&#125;&lt;/p&gt;</span><span class="string">    &lt;/div&gt;</span><span class="string">  `</span>,  <span class="attr">props</span>: [<span class="string">&quot;name&quot;</span>, <span class="string">&quot;level&quot;</span>, <span class="string">&quot;job&quot;</span>],&#125;;<span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;  <span class="title function_">data</span>(<span class="params"></span>) &#123;    <span class="keyword">return</span> &#123;      <span class="attr">character</span>: &#123;        <span class="attr">name</span>: <span class="string">&quot;궁수&quot;</span>,        <span class="attr">level</span>: <span class="number">12</span>,        <span class="attr">job</span>: <span class="string">&quot;원거리 딜러&quot;</span>,      &#125;,    &#125;;  &#125;,&#125;);app.<span class="title function_">component</span>(<span class="string">&quot;character-card&quot;</span>, <span class="title class_">CharacterCard</span>);app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</code></pre><pre><code class="highlight html"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">character-card</span></span><span class="tag">    <span class="attr">:name</span>=<span class="string">&quot;character.name&quot;</span></span><span class="tag">    <span class="attr">:level</span>=<span class="string">&quot;character.level&quot;</span></span><span class="tag">    <span class="attr">:job</span>=<span class="string">&quot;character.job&quot;</span></span><span class="tag">  &gt;</span>  <span class="tag">&lt;/<span class="name">character-card</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></code></pre><p>위 예제에서 <code>CharacterCard</code> 컴포넌트는 부모 컴포넌트로부터 <code>name</code>, <code>level</code>, <code>job</code>을 <code>props</code>로 받아와서 사용합니다.</p><h3 id="Events를-통한-자식-부모-간-통신"><a href="#Events를-통한-자식-부모-간-통신" class="headerlink" title="Events를 통한 자식-부모 간 통신"></a>Events를 통한 자식-부모 간 통신</h3><p>이벤트는 자식 컴포넌트에서 부모 컴포넌트로 데이터를 전달하는 데 사용됩니다. 자식 컴포넌트는 이벤트를 발생시키고, 부모 컴포넌트는 그 이벤트를 수신하여 데이터를 처리합니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> <span class="title class_">CharacterCard</span> = &#123;  <span class="attr">template</span>: <span class="string">`</span><span class="string">    &lt;div class=&quot;character-card&quot;&gt;</span><span class="string">      &lt;h2&gt;&#123;&#123; name &#125;&#125;&lt;/h2&gt;</span><span class="string">      &lt;button @click=&quot;levelUp&quot;&gt;레벨 업&lt;/button&gt;</span><span class="string">    &lt;/div&gt;</span><span class="string">  `</span>,  <span class="attr">props</span>: [<span class="string">&quot;name&quot;</span>, <span class="string">&quot;level&quot;</span>],  <span class="attr">methods</span>: &#123;    <span class="title function_">levelUp</span>(<span class="params"></span>) &#123;      <span class="variable language_">this</span>.$emit(<span class="string">&quot;level-up&quot;</span>, <span class="variable language_">this</span>.<span class="property">name</span>);    &#125;,  &#125;,&#125;;<span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;  <span class="title function_">data</span>(<span class="params"></span>) &#123;    <span class="keyword">return</span> &#123;      <span class="attr">character</span>: &#123;        <span class="attr">name</span>: <span class="string">&quot;도적&quot;</span>,        <span class="attr">level</span>: <span class="number">8</span>,      &#125;,    &#125;;  &#125;,  <span class="attr">methods</span>: &#123;    <span class="title function_">handleLevelUp</span>(<span class="params">name</span>) &#123;      <span class="title function_">alert</span>(name + <span class="string">&quot;의 레벨이 증가했습니다!&quot;</span>);    &#125;,  &#125;,&#125;);app.<span class="title function_">component</span>(<span class="string">&quot;character-card&quot;</span>, <span class="title class_">CharacterCard</span>);app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</code></pre><pre><code class="highlight html"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">character-card</span></span><span class="tag">    <span class="attr">:name</span>=<span class="string">&quot;character.name&quot;</span></span><span class="tag">    <span class="attr">:level</span>=<span class="string">&quot;character.level&quot;</span></span><span class="tag">    @<span class="attr">level-up</span>=<span class="string">&quot;handleLevelUp&quot;</span></span><span class="tag">  &gt;</span>  <span class="tag">&lt;/<span class="name">character-card</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></code></pre><p>위 예제에서 <code>CharacterCard</code> 컴포넌트는 <code>level-up</code> 이벤트를 발생시키고, 부모 컴포넌트는 그 이벤트를 처리하여 메시지를 표시합니다.</p><h2 id="4-컴포넌트-이벤트-핸들링"><a href="#4-컴포넌트-이벤트-핸들링" class="headerlink" title="4. 컴포넌트 이벤트 핸들링"></a>4. 컴포넌트 이벤트 핸들링</h2><h3 id="이벤트-핸들링의-개념"><a href="#이벤트-핸들링의-개념" class="headerlink" title="이벤트 핸들링의 개념"></a>이벤트 핸들링의 개념</h3><p>이벤트 핸들링(Event Handling)은 컴포넌트가 사용자 인터랙션에 반응하는 방식입니다. Vue.js에서는 <code>v-on</code> 디렉티브나 <code>@</code> 구문을 사용하여 이벤트 리스너를 추가하고, 사용자가 발생시키는 이벤트를 처리할 수 있습니다.</p><h3 id="이벤트-핸들링-예제"><a href="#이벤트-핸들링-예제" class="headerlink" title="이벤트 핸들링 예제"></a>이벤트 핸들링 예제</h3><pre><code class="highlight javascript"><span class="keyword">const</span> <span class="title class_">AttackButton</span> = &#123;  <span class="attr">template</span>: <span class="string">`</span><span class="string">    &lt;button @click=&quot;attack&quot;&gt;공격&lt;/button&gt;</span><span class="string">  `</span>,  <span class="attr">methods</span>: &#123;    <span class="title function_">attack</span>(<span class="params"></span>) &#123;      <span class="variable language_">this</span>.$emit(<span class="string">&quot;attack&quot;</span>);    &#125;,  &#125;,&#125;;<span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;  <span class="attr">methods</span>: &#123;    <span class="title function_">handleAttack</span>(<span class="params"></span>) &#123;      <span class="title function_">alert</span>(<span class="string">&quot;적을 공격합니다!&quot;</span>);    &#125;,  &#125;,&#125;);app.<span class="title function_">component</span>(<span class="string">&quot;attack-button&quot;</span>, <span class="title class_">AttackButton</span>);app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</code></pre><pre><code class="highlight html"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">attack-button</span> @<span class="attr">attack</span>=<span class="string">&quot;handleAttack&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">attack-button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></code></pre><p>위 예제에서 <code>AttackButton</code> 컴포넌트는 <code>click</code> 이벤트를 발생시키고, 부모 컴포넌트에서 그 이벤트를 수신하여 공격 동작을 처리합니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 Vue.js의 핵심 개념 중 하나인 <strong>컴포넌트</strong>에 대해 알아보았습니다. 컴포넌트를 사용하면 UI를 작은 단위로 나누어 효율적으로 관리할 수 있으며, Props와 Events를 통해 부모-자식 컴포넌트 간의 통신을 처리할 수 있습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Node.js npx</title>
      <link href="/cli/5/"/>
      <url>/cli/5/</url>
      
        <content type="html"><![CDATA[<h1 id="npx-Node-js-패키지-실행-도구"><a href="#npx-Node-js-패키지-실행-도구" class="headerlink" title="npx: Node.js 패키지 실행 도구"></a>npx: Node.js 패키지 실행 도구</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 Node.js 애플리케이션을 쉽게 실행할 수 있는 도구인 npx에 대해 알아보겠습니다. npx의 역할과 필요성, 설치 방법, 기본 사용법과 고급 사용법, 그리고 실제 프로젝트에서 npx를 활용하는 방법을 알아보겠습니다.</p><h2 id="1-npx-소개"><a href="#1-npx-소개" class="headerlink" title="1. npx 소개"></a>1. npx 소개</h2><h3 id="npx란-무엇인가"><a href="#npx란-무엇인가" class="headerlink" title="npx란 무엇인가?"></a>npx란 무엇인가?</h3><p>npx는 npm 5.2.0부터 기본적으로 포함된 도구로, Node.js 패키지를 쉽게 실행할 수 있도록 해줍니다. npx를 사용하면 로컬에 설치되지 않은 패키지도 쉽게 실행할 수 있습니다.</p><h3 id="npx의-역할과-필요성"><a href="#npx의-역할과-필요성" class="headerlink" title="npx의 역할과 필요성"></a>npx의 역할과 필요성</h3><ul><li><strong>즉시 실행</strong>: 설치되지 않은 패키지를 즉시 실행할 수 있습니다.</li><li><strong>패키지 관리</strong>: 패키지를 로컬에 설치하지 않고도 필요한 작업을 수행할 수 있습니다.</li><li><strong>버전 관리</strong>: 특정 버전의 패키지를 실행할 수 있습니다.</li></ul><h2 id="2-설치-방법"><a href="#2-설치-방법" class="headerlink" title="2. 설치 방법"></a>2. 설치 방법</h2><p>npx는 npm 5.2.0 이상 버전에 기본적으로 포함되어 있습니다. 따라서 별도로 설치할 필요는 없습니다. npm이 설치되어 있지 않다면, Node.js를 설치하여 npm을 함께 설치하세요.</p><pre><code class="highlight bash">npm install -g npm</code></pre><p>설치가 완료되면 터미널에서 <code>npx -v</code> 명령어를 실행하여 설치가 제대로 되었는지 확인할 수 있습니다.</p><pre><code class="highlight bash">npx -v</code></pre><h2 id="3-기본-사용법"><a href="#3-기본-사용법" class="headerlink" title="3. 기본 사용법"></a>3. 기본 사용법</h2><h3 id="패키지-실행"><a href="#패키지-실행" class="headerlink" title="패키지 실행"></a>패키지 실행</h3><ul><li><strong>패키지 실행</strong>: <code>npx &lt;package-name&gt;</code></li></ul><pre><code class="highlight bash">npx cowsay <span class="string">&quot;Hello, npx!&quot;</span></code></pre><h3 id="패키지-설치-후-실행"><a href="#패키지-설치-후-실행" class="headerlink" title="패키지 설치 후 실행"></a>패키지 설치 후 실행</h3><ul><li><strong>패키지 설치 후 실행</strong>: <code>npx &lt;package-name&gt;</code></li></ul><pre><code class="highlight bash">npx eslint .</code></pre><h3 id="특정-버전-실행"><a href="#특정-버전-실행" class="headerlink" title="특정 버전 실행"></a>특정 버전 실행</h3><ul><li><strong>특정 버전 실행</strong>: <code>npx &lt;package-name&gt;@&lt;version&gt;</code></li></ul><pre><code class="highlight bash">npx create-react-app@3.4.1 my-app</code></pre><h2 id="4-유용한-예제"><a href="#4-유용한-예제" class="headerlink" title="4. 유용한 예제"></a>4. 유용한 예제</h2><h3 id="Create-React-App"><a href="#Create-React-App" class="headerlink" title="Create React App"></a>Create React App</h3><ul><li><strong>Create React App 실행</strong>: <code>npx create-react-app &lt;app-name&gt;</code></li></ul><pre><code class="highlight bash">npx create-react-app my-new-app</code></pre><h3 id="ESLint"><a href="#ESLint" class="headerlink" title="ESLint"></a>ESLint</h3><ul><li><strong>ESLint 실행</strong>: <code>npx eslint &lt;file-or-directory&gt;</code></li></ul><pre><code class="highlight bash">npx eslint src/</code></pre><h3 id="기타-예제"><a href="#기타-예제" class="headerlink" title="기타 예제"></a>기타 예제</h3><ul><li><strong>Webpack 실행</strong>: <code>npx webpack</code></li></ul><pre><code class="highlight bash">npx webpack --config webpack.config.js</code></pre><ul><li><strong>Parcel 실행</strong>: <code>npx parcel</code></li></ul><pre><code class="highlight bash">npx parcel index.html</code></pre><h2 id="5-실습-예제"><a href="#5-실습-예제" class="headerlink" title="5. 실습 예제"></a>5. 실습 예제</h2><h3 id="프로젝트-생성-및-npx-사용"><a href="#프로젝트-생성-및-npx-사용" class="headerlink" title="프로젝트 생성 및 npx 사용"></a>프로젝트 생성 및 npx 사용</h3><ol><li><strong>새 프로젝트 생성</strong>: 새로운 디렉토리를 만들고 이동합니다.</li></ol><pre><code class="highlight bash"><span class="built_in">mkdir</span> my-npx-project<span class="built_in">cd</span> my-npx-project</code></pre><ol start="2"><li><strong>Create React App 실행</strong>: npx를 사용하여 새로운 React 애플리케이션을 생성합니다.</li></ol><pre><code class="highlight bash">npx create-react-app my-app<span class="built_in">cd</span> my-app</code></pre><ol start="3"><li><strong>ESLint 실행</strong>: npx를 사용하여 ESLint로 코드 검사를 수행합니다.</li></ol><pre><code class="highlight bash">npx eslint src/</code></pre><ol start="4"><li><strong>Parcel 실행</strong>: npx를 사용하여 Parcel로 프로젝트를 빌드합니다.</li></ol><pre><code class="highlight bash">npx parcel build index.html</code></pre><h2 id="6-npx-명령어-사전"><a href="#6-npx-명령어-사전" class="headerlink" title="6. npx 명령어 사전"></a>6. npx 명령어 사전</h2><ul><li><strong><code>npx &lt;package-name&gt;</code></strong>: 패키지를 실행합니다.</li></ul><pre><code class="highlight bash">npx cowsay <span class="string">&quot;Hello, npx!&quot;</span></code></pre><ul><li><strong><code>npx &lt;package-name&gt;@&lt;version&gt;</code></strong>: 특정 버전의 패키지를 실행합니다.</li></ul><pre><code class="highlight bash">npx create-react-app@3.4.1 my-app</code></pre><ul><li><strong><code>npx -p &lt;package-name&gt; -c &lt;command&gt;</code></strong>: 패키지를 설치하고 명령을 실행합니다.</li></ul><pre><code class="highlight bash">npx -p lolcatjs -c <span class="string">&quot;lolcatjs package.json&quot;</span></code></pre><ul><li><strong><code>npx --no-install &lt;package-name&gt;</code></strong>: 로컬에 설치된 패키지를 실행합니다.</li></ul><pre><code class="highlight bash">npx --no-install eslint src/</code></pre><h3 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h3><p>이번 시간에는 npx의 기본 개념부터 설치 방법, 기본 및 고급 사용법, 추가 명령어까지 다루었습니다. npx를 통해 Node.js 패키지를 효율적으로 실행하고 관리할 수 있습니다. 다음 시간에는 또 다른 유용한 CLI 도구를 소개하겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> CLI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue 템플릿 문법</title>
      <link href="/vue/3/"/>
      <url>/vue/3/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-템플릿-문법"><a href="#Vue-템플릿-문법" class="headerlink" title="Vue 템플릿 문법"></a>Vue 템플릿 문법</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 Vue.js에서 템플릿 문법을 사용하여 데이터를 화면에 출력하고, 동적인 조건부 렌더링과 반복 렌더링을 구현하는 방법에 대해 알아보겠습니다.<br>템플릿 문법은 Vue.js의 핵심 요소로, 데이터를 DOM에 바인딩하고 사용자 인터랙션을 처리할 수 있게 해줍니다.</p><h2 id="1-텍스트와-HTML-바인딩"><a href="#1-텍스트와-HTML-바인딩" class="headerlink" title="1. 텍스트와 HTML 바인딩"></a>1. 텍스트와 HTML 바인딩</h2><h3 id="텍스트-바인딩"><a href="#텍스트-바인딩" class="headerlink" title="텍스트 바인딩"></a>텍스트 바인딩</h3><p>Vue.js에서 텍스트를 화면에 바인딩하는 가장 기본적인 방법은 <code>&#123;&#123; &#125;&#125;</code>를 사용하는 것입니다. 이를 통해 <code>data</code> 객체의 속성을 템플릿에 바인딩할 수 있습니다.</p><pre><code class="highlight html"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@next&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><span class="language-javascript">      <span class="keyword">return</span> &#123;</span><span class="language-javascript">        <span class="attr">message</span>: <span class="string">&quot;안녕하세요, Vue.js!&quot;</span>,</span><span class="language-javascript">      &#125;;</span><span class="language-javascript">    &#125;,</span><span class="language-javascript">  &#125;);</span><span class="language-javascript"></span><span class="language-javascript">  app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></code></pre><p>위 예제에서 <code>&#123;&#123; message &#125;&#125;</code>는 <code>data</code> 객체의 <code>message</code> 속성에 바인딩되어 텍스트를 출력합니다.</p><h3 id="HTML-바인딩"><a href="#HTML-바인딩" class="headerlink" title="HTML 바인딩"></a>HTML 바인딩</h3><p>때로는 텍스트뿐만 아니라 HTML 코드를 동적으로 바인딩하고 싶을 때가 있습니다. 이 경우 <code>v-html</code> 디렉티브를 사용합니다.</p><pre><code class="highlight html"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-html</span>=<span class="string">&quot;rawHtml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@next&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><span class="language-javascript">      <span class="keyword">return</span> &#123;</span><span class="language-javascript">        <span class="attr">rawHtml</span>: <span class="string">&quot;&lt;strong&gt;Vue.js&lt;/strong&gt;를 배워봅시다!&quot;</span>,</span><span class="language-javascript">      &#125;;</span><span class="language-javascript">    &#125;,</span><span class="language-javascript">  &#125;);</span><span class="language-javascript"></span><span class="language-javascript">  app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></code></pre><p>위 예제에서 <code>v-html</code> 디렉티브는 <code>rawHtml</code> 속성에 정의된 HTML 코드를 그대로 렌더링합니다. 이 방법은 사용자 입력을 직접 처리할 때는 주의해서 사용해야 하며, 가능한 경우 <code>&#123;&#123; &#125;&#125;</code>를 사용하는 것이 좋습니다.</p><h2 id="2-디렉티브의-사용"><a href="#2-디렉티브의-사용" class="headerlink" title="2. 디렉티브의 사용"></a>2. 디렉티브의 사용</h2><p>Vue.js 디렉티브는 DOM 요소에 특별한 반응형 동작을 적용하기 위한 특수한 속성입니다. 자주 사용하는 디렉티브로는 <code>v-if</code>, <code>v-for</code>, <code>v-show</code>, <code>v-bind</code>, <code>v-on</code> 등이 있습니다.</p><h3 id="v-if와-v-show를-사용한-조건부-렌더링"><a href="#v-if와-v-show를-사용한-조건부-렌더링" class="headerlink" title="v-if와 v-show를 사용한 조건부 렌더링"></a><code>v-if</code>와 <code>v-show</code>를 사용한 조건부 렌더링</h3><ul><li><strong><code>v-if</code></strong>: 조건이 참일 때만 요소를 렌더링합니다.</li></ul><pre><code class="highlight html"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;isLoggedIn&quot;</span>&gt;</span>환영합니다, 사용자님!<span class="tag">&lt;/<span class="name">p</span>&gt;</span>  <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else</span>&gt;</span>로그인이 필요합니다.<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@next&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><span class="language-javascript">      <span class="keyword">return</span> &#123;</span><span class="language-javascript">        <span class="attr">isLoggedIn</span>: <span class="literal">true</span>,</span><span class="language-javascript">      &#125;;</span><span class="language-javascript">    &#125;,</span><span class="language-javascript">  &#125;);</span><span class="language-javascript"></span><span class="language-javascript">  app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></code></pre><ul><li><strong><code>v-show</code></strong>: 조건이 참일 때 요소를 렌더링하지만, <code>v-if</code>와는 달리 요소를 제거하지 않고 CSS를 사용해 보이거나 숨깁니다.</li></ul><pre><code class="highlight html"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">&quot;isLoggedIn&quot;</span>&gt;</span>환영합니다, 사용자님!<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@next&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><span class="language-javascript">      <span class="keyword">return</span> &#123;</span><span class="language-javascript">        <span class="attr">isLoggedIn</span>: <span class="literal">true</span>,</span><span class="language-javascript">      &#125;;</span><span class="language-javascript">    &#125;,</span><span class="language-javascript">  &#125;);</span><span class="language-javascript"></span><span class="language-javascript">  app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></code></pre><h3 id="v-for를-사용한-리스트-렌더링"><a href="#v-for를-사용한-리스트-렌더링" class="headerlink" title="v-for를 사용한 리스트 렌더링"></a><code>v-for</code>를 사용한 리스트 렌더링</h3><ul><li><strong><code>v-for</code></strong>: 배열이나 객체의 각 요소를 반복하여 렌더링할 때 사용합니다.</li></ul><pre><code class="highlight html"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">ul</span>&gt;</span>    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in items&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span>  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@next&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><span class="language-javascript">      <span class="keyword">return</span> &#123;</span><span class="language-javascript">        <span class="attr">items</span>: [<span class="string">&quot;검&quot;</span>, <span class="string">&quot;방패&quot;</span>, <span class="string">&quot;포션&quot;</span>, <span class="string">&quot;마법서&quot;</span>],</span><span class="language-javascript">      &#125;;</span><span class="language-javascript">    &#125;,</span><span class="language-javascript">  &#125;);</span><span class="language-javascript"></span><span class="language-javascript">  app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></code></pre><p>위 예제에서 <code>v-for</code> 디렉티브를 사용하여 <code>items</code> 배열의 각 항목을 <code>&lt;li&gt;</code> 요소로 렌더링합니다. <code>:key</code>는 각 요소에 고유한 키를 부여하여 성능을 최적화하는 데 사용됩니다.</p><h3 id="v-bind를-사용한-속성-바인딩"><a href="#v-bind를-사용한-속성-바인딩" class="headerlink" title="v-bind를 사용한 속성 바인딩"></a><code>v-bind</code>를 사용한 속성 바인딩</h3><ul><li><strong><code>v-bind</code></strong>: HTML 속성에 데이터를 바인딩합니다. 줄여서 <code>:</code>로 사용할 수 있습니다.</li></ul><pre><code class="highlight html"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>Vue.js 공식 사이트<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@next&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><span class="language-javascript">      <span class="keyword">return</span> &#123;</span><span class="language-javascript">        <span class="attr">url</span>: <span class="string">&quot;https://vuejs.org&quot;</span>,</span><span class="language-javascript">      &#125;;</span><span class="language-javascript">    &#125;,</span><span class="language-javascript">  &#125;);</span><span class="language-javascript"></span><span class="language-javascript">  app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></code></pre><p>위 예제에서 <code>v-bind:href</code>는 <code>url</code> 데이터를 <code>&lt;a&gt;</code> 요소의 <code>href</code> 속성에 바인딩합니다.</p><h3 id="v-on을-사용한-이벤트-핸들링"><a href="#v-on을-사용한-이벤트-핸들링" class="headerlink" title="v-on을 사용한 이벤트 핸들링"></a><code>v-on</code>을 사용한 이벤트 핸들링</h3><ul><li><strong><code>v-on</code></strong>: DOM 이벤트에 메소드를 바인딩합니다. 줄여서 <code>@</code>로 사용할 수 있습니다.</li></ul><pre><code class="highlight html"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;attack&quot;</span>&gt;</span>공격<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@next&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span><span class="language-javascript">      <span class="title function_">attack</span>(<span class="params"></span>) &#123;</span><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&quot;공격을 시작합니다!&quot;</span>);</span><span class="language-javascript">      &#125;,</span><span class="language-javascript">    &#125;,</span><span class="language-javascript">  &#125;);</span><span class="language-javascript"></span><span class="language-javascript">  app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></code></pre><p>위 예제에서 <code>v-on:click</code>은 버튼 클릭 이벤트에 <code>attack</code> 메소드를 바인딩하여, 버튼을 클릭하면 알림 메시지가 표시됩니다.</p><h2 id="예제-RPG-게임에서의-템플릿-문법-활용"><a href="#예제-RPG-게임에서의-템플릿-문법-활용" class="headerlink" title="예제: RPG 게임에서의 템플릿 문법 활용"></a>예제: RPG 게임에서의 템플릿 문법 활용</h2><p>RPG 게임에서 캐릭터의 인벤토리를 관리하고, 인벤토리에 있는 아이템을 조건부로 표시하거나, 아이템을 사용할 때 이벤트를 처리하는 예제를 만들어보겠습니다.</p><pre><code class="highlight html"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">head</span>&gt;</span>    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span>    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span>    <span class="tag">&lt;<span class="name">title</span>&gt;</span>RPG 인벤토리 예제<span class="tag">&lt;/<span class="name">title</span>&gt;</span>  <span class="tag">&lt;/<span class="name">head</span>&gt;</span>  <span class="tag">&lt;<span class="name">body</span>&gt;</span>    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; character.name &#125;&#125;의 인벤토리<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>      <span class="tag">&lt;<span class="name">ul</span>&gt;</span>        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in character.inventory&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span>          <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;item&quot;</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span>          <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else</span>&gt;</span>빈 슬롯<span class="tag">&lt;/<span class="name">span</span>&gt;</span>          <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;useItem(index)&quot;</span> <span class="attr">v-bind:disabled</span>=<span class="string">&quot;!item&quot;</span>&gt;</span>            사용          <span class="tag">&lt;/<span class="name">button</span>&gt;</span>        <span class="tag">&lt;/<span class="name">li</span>&gt;</span>      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span>      <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;addItem&quot;</span>&gt;</span>아이템 추가<span class="tag">&lt;/<span class="name">button</span>&gt;</span>    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@next&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">      <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><span class="language-javascript">          <span class="keyword">return</span> &#123;</span><span class="language-javascript">            <span class="attr">character</span>: &#123;</span><span class="language-javascript">              <span class="attr">name</span>: <span class="string">&quot;전사&quot;</span>,</span><span class="language-javascript">              <span class="attr">inventory</span>: [<span class="string">&quot;검&quot;</span>, <span class="string">&quot;방패&quot;</span>, <span class="string">&quot;포션&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>],</span><span class="language-javascript">            &#125;,</span><span class="language-javascript">          &#125;;</span><span class="language-javascript">        &#125;,</span><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span><span class="language-javascript">          <span class="title function_">useItem</span>(<span class="params">index</span>) &#123;</span><span class="language-javascript">            <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">character</span>.<span class="property">inventory</span>[index] + <span class="string">&quot;을(를) 사용했습니다.&quot;</span>);</span><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">character</span>.<span class="property">inventory</span>[index] = <span class="literal">null</span>;</span><span class="language-javascript">          &#125;,</span><span class="language-javascript">          <span class="title function_">addItem</span>(<span class="params"></span>) &#123;</span><span class="language-javascript">            <span class="keyword">const</span> items = [<span class="string">&quot;검&quot;</span>, <span class="string">&quot;방패&quot;</span>, <span class="string">&quot;포션&quot;</span>, <span class="string">&quot;활&quot;</span>, <span class="string">&quot;갑옷&quot;</span>];</span><span class="language-javascript">            <span class="keyword">const</span> emptySlot = <span class="variable language_">this</span>.<span class="property">character</span>.<span class="property">inventory</span>.<span class="title function_">indexOf</span>(<span class="literal">null</span>);</span><span class="language-javascript">            <span class="keyword">if</span> (emptySlot !== -<span class="number">1</span>) &#123;</span><span class="language-javascript">              <span class="variable language_">this</span>.<span class="property">character</span>.<span class="property">inventory</span>[emptySlot] =</span><span class="language-javascript">                items[<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * items.<span class="property">length</span>)];</span><span class="language-javascript">            &#125; <span class="keyword">else</span> &#123;</span><span class="language-javascript">              <span class="title function_">alert</span>(<span class="string">&quot;인벤토리에 빈 슬롯이 없습니다.&quot;</span>);</span><span class="language-javascript">            &#125;</span><span class="language-javascript">          &#125;,</span><span class="language-javascript">        &#125;,</span><span class="language-javascript">      &#125;);</span><span class="language-javascript"></span><span class="language-javascript">      app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  <span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></code></pre><h3 id="예제-설명"><a href="#예제-설명" class="headerlink" title="예제 설명"></a>예제 설명</h3><p>이 예제에서는 <code>character</code> 객체에 <code>inventory</code> 배열을 추가하여 캐릭터의 인벤토리를 관리합니다. <code>v-for</code>를 사용해 인벤토리 슬롯을 렌더링하고, <code>v-if</code>를 통해 아이템이 있는 슬롯과 빈 슬롯을 조건부로 렌더링합니다. <code>v-on</code>을 사용해 아이템을 사용하는 기능과 새로운 아이템을 추가하는 기능을 구현했습니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 Vue.js 템플릿 문법의 기본적인 사용법과 자주 사용하는 디렉티브에 대해 알아보았습니다. 템플릿 문법을 잘 이해하면 데이터를 더 직관적으로 화면에 바인딩하고, 조건부 렌더링이나 반복 렌더링 같은 동적인 동작을 쉽게 구현할 수 있습니다.<br>다음 시간에는 컴포넌트의 개념에 대해 알아보겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue 인스턴스(Instance)</title>
      <link href="/vue/2/"/>
      <url>/vue/2/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-인스턴스-Instance"><a href="#Vue-인스턴스-Instance" class="headerlink" title="Vue 인스턴스(Instance)"></a>Vue 인스턴스(Instance)</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 Vue.js 애플리케이션의 핵심인 <strong>Vue 인스턴스</strong>에 대해 알아보겠습니다.<br>Vue 인스턴스는 Vue.js의 모든 기능이 시작되는 곳으로, 데이터를 관리하고, DOM과 상호작용하며, 메소드를 통해 동작을 제어하는 데 사용됩니다.</p><h2 id="1-Vue-인스턴스-생성-및-기본-구조-이해"><a href="#1-Vue-인스턴스-생성-및-기본-구조-이해" class="headerlink" title="1. Vue 인스턴스 생성 및 기본 구조 이해"></a>1. Vue 인스턴스 생성 및 기본 구조 이해</h2><h3 id="Vue-인스턴스란"><a href="#Vue-인스턴스란" class="headerlink" title="Vue 인스턴스란?"></a>Vue 인스턴스란?</h3><p>Vue 인스턴스는 Vue.js 애플리케이션의 핵심이며, 모든 Vue 컴포넌트의 뿌리입니다. Vue 인스턴스는 HTML DOM 요소와 연결되어 데이터와 DOM을 동기화하고, 사용자와의 상호작용을 처리합니다.</p><h3 id="Vue-인스턴스-생성"><a href="#Vue-인스턴스-생성" class="headerlink" title="Vue 인스턴스 생성"></a>Vue 인스턴스 생성</h3><p>Vue 인스턴스를 생성하려면 <code>new Vue()</code>를 사용합니다. Vue 인스턴스를 생성할 때는 보통 <code>el</code>, <code>data</code>, <code>methods</code> 등의 옵션을 포함시켜 설정합니다.</p><pre><code class="highlight html"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">head</span>&gt;</span>    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span>    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span>    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue 인스턴스 예제<span class="tag">&lt;/<span class="name">title</span>&gt;</span>  <span class="tag">&lt;/<span class="name">head</span>&gt;</span>  <span class="tag">&lt;<span class="name">body</span>&gt;</span>    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>      <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span>      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeMessage&quot;</span>&gt;</span>메시지 변경<span class="tag">&lt;/<span class="name">button</span>&gt;</span>    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@next&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">      <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><span class="language-javascript">          <span class="keyword">return</span> &#123;</span><span class="language-javascript">            <span class="attr">title</span>: <span class="string">&quot;Vue.js 소개&quot;</span>,</span><span class="language-javascript">            <span class="attr">message</span>: <span class="string">&quot;안녕하세요! Vue.js로 뭐 좀 만들어봅시다&quot;</span>,</span><span class="language-javascript">          &#125;;</span><span class="language-javascript">        &#125;,</span><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span><span class="language-javascript">          <span class="title function_">changeMessage</span>(<span class="params"></span>) &#123;</span><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">message</span> = <span class="string">&quot;메시지가 변경되었습니다!&quot;</span>;</span><span class="language-javascript">          &#125;,</span><span class="language-javascript">        &#125;,</span><span class="language-javascript">      &#125;);</span><span class="language-javascript"></span><span class="language-javascript">      app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  <span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></code></pre><h3 id="Vue-인스턴스의-기본-구조"><a href="#Vue-인스턴스의-기본-구조" class="headerlink" title="Vue 인스턴스의 기본 구조"></a>Vue 인스턴스의 기본 구조</h3><ul><li><strong>el</strong>: Vue 인스턴스가 마운트될 DOM 요소를 지정합니다. 예제에서는 <code>#app</code>이라는 ID를 가진 요소에 Vue 인스턴스가 마운트됩니다.</li><li><strong>data</strong>: Vue 인스턴스에서 사용하는 데이터 객체를 정의합니다. <code>data</code>에 정의된 속성들은 Vue 인스턴스에서 관리되며, 템플릿에서 <code>&#123;&#123; &#125;&#125;</code>를 사용하여 바인딩할 수 있습니다.</li><li><strong>methods</strong>: Vue 인스턴스에서 사용할 메소드를 정의합니다. 메소드는 사용자 이벤트(예: 클릭, 입력 등)에 반응하여 동작을 수행할 수 있습니다.</li></ul><h3 id="예제-설명"><a href="#예제-설명" class="headerlink" title="예제 설명"></a>예제 설명</h3><p>위의 예제에서 Vue 인스턴스는 <code>#app</code>이라는 DOM 요소에 마운트됩니다. <code>data</code> 객체에 정의된 <code>title</code>과 <code>message</code>는 템플릿에서 <code>&#123;&#123; title &#125;&#125;</code>, <code>&#123;&#123; message &#125;&#125;</code>로 바인딩되어 출력됩니다. 버튼을 클릭하면 <code>changeMessage</code> 메소드가 호출되어 <code>message</code> 값이 변경되고, 변경된 값이 실시간으로 화면에 반영됩니다.</p><h2 id="2-데이터-바인딩과-메소드"><a href="#2-데이터-바인딩과-메소드" class="headerlink" title="2. 데이터 바인딩과 메소드"></a>2. 데이터 바인딩과 메소드</h2><h3 id="데이터-바인딩"><a href="#데이터-바인딩" class="headerlink" title="데이터 바인딩"></a>데이터 바인딩</h3><p>Vue.js의 데이터 바인딩은 템플릿과 데이터 객체 간의 연결을 의미합니다. Vue.js는 데이터 객체의 속성이 변경되면 자동으로 DOM을 업데이트하여 화면에 반영합니다.</p><ul><li><strong>텍스트 바인딩</strong>: <code>&#123;&#123; &#125;&#125;</code> 문법을 사용하여 데이터 객체의 속성을 텍스트로 출력할 수 있습니다.</li></ul><pre><code class="highlight html"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></code></pre><ul><li><strong>속성 바인딩</strong>: <code>v-bind</code> 디렉티브를 사용하여 HTML 속성에 데이터를 바인딩할 수 있습니다.</li></ul><pre><code class="highlight html"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>링크<span class="tag">&lt;/<span class="name">a</span>&gt;</span></code></pre><ul><li><strong>양방향 데이터 바인딩</strong>: <code>v-model</code> 디렉티브를 사용하여 입력 필드와 데이터 객체 간의 양방향 바인딩을 설정할 수 있습니다.</li></ul><pre><code class="highlight html"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></code></pre><h3 id="메소드"><a href="#메소드" class="headerlink" title="메소드"></a>메소드</h3><p>Vue 인스턴스의 메소드는 사용자 인터랙션이나 기타 이벤트에 반응하여 동작을 수행합니다. 메소드는 Vue 인스턴스 내에서 정의되며, 템플릿에서 호출할 수 있습니다.</p><pre><code class="highlight javascript"><span class="attr">methods</span>: &#123;  <span class="title function_">changeMessage</span>(<span class="params"></span>) &#123;    <span class="variable language_">this</span>.<span class="property">message</span> = <span class="string">&#x27;메시지가 변경되었습니다!&#x27;</span>;  &#125;&#125;</code></pre><p>위 예제에서 <code>changeMessage</code> 메소드는 <code>this.message</code> 값을 변경하는 역할을 합니다. 템플릿에서는 <code>@click=&quot;changeMessage&quot;</code>를 사용하여 버튼 클릭 시 메소드를 호출합니다.</p><h3 id="예제-RPG-게임에서의-Vue-인스턴스-활용"><a href="#예제-RPG-게임에서의-Vue-인스턴스-활용" class="headerlink" title="예제: RPG 게임에서의 Vue 인스턴스 활용"></a>예제: RPG 게임에서의 Vue 인스턴스 활용</h3><p>RPG 게임에서 캐릭터의 이름과 레벨을 표시하고, 버튼을 클릭하면 캐릭터의 레벨이 증가하는 간단한 예제를 만들어보겠습니다.</p><pre><code class="highlight html"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">head</span>&gt;</span>    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span>    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span>    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue RPG 예제<span class="tag">&lt;/<span class="name">title</span>&gt;</span>  <span class="tag">&lt;/<span class="name">head</span>&gt;</span>  <span class="tag">&lt;<span class="name">body</span>&gt;</span>    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; character.name &#125;&#125; (레벨: &#123;&#123; character.level &#125;&#125;)<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;levelUp&quot;</span>&gt;</span>레벨 업<span class="tag">&lt;/<span class="name">button</span>&gt;</span>    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@next&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">      <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><span class="language-javascript">          <span class="keyword">return</span> &#123;</span><span class="language-javascript">            <span class="attr">character</span>: &#123;</span><span class="language-javascript">              <span class="attr">name</span>: <span class="string">&quot;전사&quot;</span>,</span><span class="language-javascript">              <span class="attr">level</span>: <span class="number">1</span>,</span><span class="language-javascript">            &#125;,</span><span class="language-javascript">          &#125;;</span><span class="language-javascript">        &#125;,</span><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span><span class="language-javascript">          <span class="title function_">levelUp</span>(<span class="params"></span>) &#123;</span><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">character</span>.<span class="property">level</span>++;</span><span class="language-javascript">          &#125;,</span><span class="language-javascript">        &#125;,</span><span class="language-javascript">      &#125;);</span><span class="language-javascript"></span><span class="language-javascript">      app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  <span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></code></pre><h3 id="예제-설명-1"><a href="#예제-설명-1" class="headerlink" title="예제 설명"></a>예제 설명</h3><p>이 예제에서는 <code>character</code>라는 객체를 <code>data</code>에 정의하여 <code>name</code>과 <code>level</code>을 관리합니다. 버튼을 클릭하면 <code>levelUp</code> 메소드가 호출되어 캐릭터의 <code>level</code>이 증가하며, 화면에 실시간으로 반영됩니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 Vue 인스턴스의 개념과 기본 구조, 그리고 데이터 바인딩과 메소드를 사용하는 방법에 대해 알아보았습니다.<br>Vue 인스턴스는 Vue.js 애플리케이션의 핵심으로, 데이터를 관리하고 사용자와의 상호작용을 처리하는 데 중요한 역할을 합니다.<br>다음 시간에는 Vue의 템플릿 문법에 대해 알아보겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CSS 기초</title>
      <link href="/web/newb/4/"/>
      <url>/web/newb/4/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS-기초"><a href="#CSS-기초" class="headerlink" title="CSS 기초"></a>CSS 기초</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 웹 페이지의 스타일을 정의하는 CSS에 대해 알아보겠습니다. CSS는 HTML 문서의 레이아웃, 색상, 폰트 등을 지정하여 웹 페이지를 더 다채롭고, 사용하기 쉽게 만드는 데 중요한 역할을 합니다.</p><h2 id="CSS의-기본-개념과-역할"><a href="#CSS의-기본-개념과-역할" class="headerlink" title="CSS의 기본 개념과 역할"></a>CSS의 기본 개념과 역할</h2><h3 id="CSS란-무엇인가"><a href="#CSS란-무엇인가" class="headerlink" title="CSS란 무엇인가?"></a>CSS란 무엇인가?</h3><p>CSS(Cascading Style Sheets)는 HTML 요소의 스타일을 지정하는 스타일 시트 언어입니다. CSS를 사용하면 웹 페이지의 레이아웃, 색상, 폰트 등을 쉽게 변경할 수 있습니다.</p><h3 id="CSS의-역할"><a href="#CSS의-역할" class="headerlink" title="CSS의 역할"></a>CSS의 역할</h3><ul><li><strong>레이아웃</strong>: 웹 페이지의 레이아웃을 정의합니다.</li><li><strong>스타일</strong>: 텍스트, 색상, 배경 등의 스타일을 지정합니다.</li><li><strong>반응형 디자인</strong>: 다양한 화면 크기에 맞게 웹 페이지를 조정합니다.</li></ul><h2 id="CSS-선택자와-속성"><a href="#CSS-선택자와-속성" class="headerlink" title="CSS 선택자와 속성"></a>CSS 선택자와 속성</h2><h3 id="CSS-선택자"><a href="#CSS-선택자" class="headerlink" title="CSS 선택자"></a>CSS 선택자</h3><p>CSS 선택자는 HTML 요소를 선택하여 스타일을 적용하는 데 사용됩니다. 주요 선택자는 다음과 같습니다:</p><ul><li><strong>태그 선택자</strong>: 특정 태그를 선택합니다.</li></ul><pre><code class="highlight css"><span class="comment">/* 모든 &lt;p&gt; 태그를 선택 */</span><span class="selector-tag">p</span> &#123;  <span class="attribute">color</span>: blue;&#125;</code></pre><ul><li><strong>클래스 선택자</strong>: 특정 클래스를 가진 요소를 선택합니다.</li></ul><pre><code class="highlight css"><span class="comment">/* .highlight 클래스를 가진 모든 요소를 선택 */</span><span class="selector-class">.highlight</span> &#123;  <span class="attribute">background-color</span>: yellow;&#125;</code></pre><ul><li><strong>ID 선택자</strong>: 특정 ID를 가진 요소를 선택합니다.</li></ul><pre><code class="highlight css"><span class="comment">/* #main-title ID를 가진 요소를 선택 */</span><span class="selector-id">#main-title</span> &#123;  <span class="attribute">font-size</span>: <span class="number">24px</span>;  <span class="attribute">font-weight</span>: bold;&#125;</code></pre><ul><li><strong>자손 선택자</strong>: 특정 부모 요소의 자손 요소를 선택합니다.</li></ul><pre><code class="highlight css"><span class="comment">/* &lt;div&gt; 태그 내의 모든 &lt;p&gt; 태그를 선택 */</span><span class="selector-tag">div</span> <span class="selector-tag">p</span> &#123;  <span class="attribute">margin</span>: <span class="number">10px</span>;&#125;</code></pre><h3 id="CSS-속성"><a href="#CSS-속성" class="headerlink" title="CSS 속성"></a>CSS 속성</h3><p>CSS 속성은 선택된 요소에 적용할 스타일을 정의합니다. 주요 속성은 다음과 같습니다:</p><ul><li><strong>텍스트 스타일링</strong>: <code>color</code>, <code>font-size</code>, <code>text-align</code></li></ul><pre><code class="highlight css"><span class="selector-tag">p</span> &#123;  <span class="attribute">color</span>: red;  <span class="attribute">font-size</span>: <span class="number">16px</span>;  <span class="attribute">text-align</span>: center;&#125;</code></pre><ul><li><strong>배경 스타일링</strong>: <code>background-color</code>, <code>background-image</code></li></ul><pre><code class="highlight css"><span class="selector-tag">div</span> &#123;  <span class="attribute">background-color</span>: lightblue;  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;background.jpg&quot;</span>);&#125;</code></pre><ul><li><strong>레이아웃 스타일링</strong>: <code>margin</code>, <code>padding</code>, <code>border</code></li></ul><pre><code class="highlight css"><span class="selector-class">.container</span> &#123;  <span class="attribute">margin</span>: <span class="number">20px</span>;  <span class="attribute">padding</span>: <span class="number">15px</span>;  <span class="attribute">border</span>: <span class="number">2px</span> solid black;&#125;</code></pre><h2 id="텍스트-색상-레이아웃-스타일링"><a href="#텍스트-색상-레이아웃-스타일링" class="headerlink" title="텍스트, 색상, 레이아웃 스타일링"></a>텍스트, 색상, 레이아웃 스타일링</h2><h3 id="텍스트-스타일링"><a href="#텍스트-스타일링" class="headerlink" title="텍스트 스타일링"></a>텍스트 스타일링</h3><p>텍스트의 색상, 크기, 정렬 등을 CSS를 사용하여 스타일링할 수 있습니다.</p><pre><code class="highlight css"><span class="selector-tag">h1</span> &#123;  <span class="attribute">color</span>: darkblue;  <span class="attribute">font-size</span>: <span class="number">32px</span>;  <span class="attribute">text-align</span>: left;&#125;<span class="selector-tag">p</span> &#123;  <span class="attribute">color</span>: gray;  <span class="attribute">font-size</span>: <span class="number">14px</span>;  <span class="attribute">line-height</span>: <span class="number">1.6</span>;&#125;</code></pre><h3 id="색상-스타일링"><a href="#색상-스타일링" class="headerlink" title="색상 스타일링"></a>색상 스타일링</h3><p>CSS를 사용하여 요소의 배경색과 텍스트 색상을 변경할 수 있습니다.</p><pre><code class="highlight css"><span class="selector-tag">body</span> &#123;  <span class="attribute">background-color</span>: white;&#125;<span class="selector-class">.highlight</span> &#123;  <span class="attribute">background-color</span>: yellow;  <span class="attribute">color</span>: black;&#125;</code></pre><h3 id="레이아웃-스타일링"><a href="#레이아웃-스타일링" class="headerlink" title="레이아웃 스타일링"></a>레이아웃 스타일링</h3><p>CSS를 사용하여 요소의 크기, 위치, 여백 등을 조정할 수 있습니다.</p><pre><code class="highlight css"><span class="selector-class">.container</span> &#123;  <span class="attribute">width</span>: <span class="number">80%</span>;  <span class="attribute">margin</span>: <span class="number">0</span> auto;  <span class="attribute">padding</span>: <span class="number">20px</span>;  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;&#125;<span class="selector-class">.box</span> &#123;  <span class="attribute">width</span>: <span class="number">50%</span>;  <span class="attribute">padding</span>: <span class="number">10px</span>;  <span class="attribute">float</span>: left;&#125;</code></pre><h2 id="예제-간단한-웹-페이지-스타일링"><a href="#예제-간단한-웹-페이지-스타일링" class="headerlink" title="예제: 간단한 웹 페이지 스타일링"></a>예제: 간단한 웹 페이지 스타일링</h2><pre><code class="highlight html"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">head</span>&gt;</span>    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span>    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span>    <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS 기초 예제<span class="tag">&lt;/<span class="name">title</span>&gt;</span>    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span><span class="language-css">      <span class="selector-tag">body</span> &#123;</span><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#f0f0f0</span>;</span><span class="language-css">        <span class="attribute">font-family</span>: Arial, sans-serif;</span><span class="language-css">      &#125;</span><span class="language-css">      <span class="selector-tag">h1</span> &#123;</span><span class="language-css">        <span class="attribute">color</span>: <span class="number">#333</span>;</span><span class="language-css">        <span class="attribute">text-align</span>: center;</span><span class="language-css">      &#125;</span><span class="language-css">      <span class="selector-tag">p</span> &#123;</span><span class="language-css">        <span class="attribute">color</span>: <span class="number">#666</span>;</span><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">1.5</span>;</span><span class="language-css">      &#125;</span><span class="language-css">      <span class="selector-class">.highlight</span> &#123;</span><span class="language-css">        <span class="attribute">background-color</span>: yellow;</span><span class="language-css">      &#125;</span><span class="language-css">      <span class="selector-class">.container</span> &#123;</span><span class="language-css">        <span class="attribute">width</span>: <span class="number">80%</span>;</span><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><span class="language-css">        <span class="attribute">padding</span>: <span class="number">20px</span>;</span><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</span><span class="language-css">      &#125;</span><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span>  <span class="tag">&lt;/<span class="name">head</span>&gt;</span>  <span class="tag">&lt;<span class="name">body</span>&gt;</span>    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span>      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>안녕하세요!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>      <span class="tag">&lt;<span class="name">p</span>&gt;</span>이것은 <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;highlight&quot;</span>&gt;</span>간단한<span class="tag">&lt;/<span class="name">span</span>&gt;</span> CSS 예제입니다.<span class="tag">&lt;/<span class="name">p</span>&gt;</span>    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>  <span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></code></pre><h2 id="CSS-디버깅"><a href="#CSS-디버깅" class="headerlink" title="CSS 디버깅"></a>CSS 디버깅</h2><p>CSS를 작성할 때 문제가 발생하면, 브라우저의 개발자 도구를 사용하여 스타일을 디버깅할 수 있습니다. 요소 선택기를 사용하여 특정 요소의 스타일을 검사하고, 실시간으로 변경해볼 수 있습니다.</p><h3 id="브라우저-개발자-도구-열기"><a href="#브라우저-개발자-도구-열기" class="headerlink" title="브라우저 개발자 도구 열기"></a>브라우저 개발자 도구 열기</h3><ul><li><strong>Chrome</strong>: 요소를 마우스 오른쪽 버튼으로 클릭하고 “검사”를 선택합니다.</li><li><strong>Firefox</strong>: 요소를 마우스 오른쪽 버튼으로 클릭하고 “요소 검사”를 선택합니다.</li></ul><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 CSS의 기본 개념과 역할, 주요 선택자와 속성, 텍스트, 색상, 레이아웃 스타일링 방법에 대해 알아보았습니다. 이러한 기초 개념을 이해하면, HTML 문서에 스타일을 적용하여 더 다채롭고 사용자 친화적인 웹 페이지를 만들 수 있습니다.<br>다음 시간에는 더욱 심화된 CSS 기법에 대해 알아보겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> web_입문 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue.js 입문서</title>
      <link href="/vue/1/"/>
      <url>/vue/1/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-js-입문서"><a href="#Vue-js-입문서" class="headerlink" title="Vue.js 입문서"></a>Vue.js 입문서</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 Vue.js의 기본 개념부터 시작해, Vue.js를 선택해야 하는 이유, 그리고 Vue.js 프로젝트를 설정하는 방법까지 차근차근 알아보겠습니다.</p><blockquote><p>Vue카테고리의 모든 글은 최신 버전인 Vue3를 기준으로 작성되었습니다!</p></blockquote><blockquote><p>Vue3에 <a href="/vue/24/">Composition API</a>가 추가되었습니다. 그래서 Vue 카테고리의 모든 글에 Composition API에 대응하는 내용들은 업데이트 해두었습니다. Vue를 처음 접하시는 분들은 이 내용은 건너뛰고 보시는 것을 추천드립니다!</p></blockquote><h2 id="1-Vue-js의-개념과-장점"><a href="#1-Vue-js의-개념과-장점" class="headerlink" title="1. Vue.js의 개념과 장점"></a>1. Vue.js의 개념과 장점</h2><h3 id="Vue-js"><a href="#Vue-js" class="headerlink" title="Vue.js"></a>Vue.js</h3><p>Vue.js는 사용자 인터페이스(UI)를 구축하기 위해 설계된 **프로그레시브 자바스크립트 프레임워크(Progressive JavaScript Framework)**입니다.<br>progressive는 사전 그대로 “점진적” 이라는 의미입니다. 즉, 이 프레임워크는 필요에 따라 점진적으로 적용하고 확장할 수 있도록 설계되어 있습니다.<br>Vue.js로 재사용 가능한 UI 요소(&#x3D;컴포넌트)를 생성하고, 이를 활용해 복잡한 웹까지도 쉽게 구축할 수 있습니다.</p><h3 id="Vue-js의-주요-장점"><a href="#Vue-js의-주요-장점" class="headerlink" title="Vue.js의 주요 장점"></a>Vue.js의 주요 장점</h3><ol><li><strong>배우기 쉬움</strong>: Vue.js는 HTML, CSS, JavaScript를 이미 알고 있는 개발자라면 쉽게 배울 수 있습니다. 복잡한 설정이나 문법 없이 간단한 문법으로 시작할 수 있습니다.</li><li><strong>가벼운 크기</strong>: Vue.js는 매우 가벼운 라이브러리로, 애플리케이션의 성능을 크게 저하시키지 않으면서도 강력한 기능을 제공합니다.</li><li><strong>단순한 통합</strong>: Vue.js는 기존 프로젝트에 쉽게 통합될 수 있습니다. 필요에 따라 Vue.js의 일부만을 사용할 수 있으며, 점진적으로 적용할 수 있습니다.</li><li><strong>풍부한 생태계</strong>: Vue.js는 다양한 플러그인, 도구, 공식 라이브러리 등을 통해 확장성과 유연성을 제공합니다. Vue Router, Vuex와 같은 도구를 통해 복잡한 SPA(Single Page Application)를 쉽게 개발할 수 있습니다.</li></ol><h2 id="2-Vue-js를-선택해야-하는-이유-React와의-차이점"><a href="#2-Vue-js를-선택해야-하는-이유-React와의-차이점" class="headerlink" title="2. Vue.js를 선택해야 하는 이유(React와의 차이점)"></a>2. Vue.js를 선택해야 하는 이유(React와의 차이점)</h2><p>Vue.js와 React는 둘 다 인기 있는 프론트엔드 프레임워크지만, 몇 가지 중요한 차이점이 있습니다.</p><h3 id="Vue-js-vs-React"><a href="#Vue-js-vs-React" class="headerlink" title="Vue.js vs React"></a>Vue.js vs React</h3><table><thead><tr><th>특징</th><th>Vue.js</th><th>React</th></tr></thead><tbody><tr><td><strong>러닝 커브</strong></td><td>상대적으로 완만함</td><td>다소 가파름</td></tr><tr><td><strong>설정 및 구성</strong></td><td>기본적으로 설정이 간단함</td><td>설정이 필요함</td></tr><tr><td><strong>템플릿</strong></td><td>HTML 기반 템플릿 사용</td><td>JSX 사용</td></tr><tr><td><strong>양방향 바인딩</strong></td><td>양방향 바인딩 지원</td><td>단방향 데이터 흐름</td></tr><tr><td><strong>커뮤니티</strong></td><td>빠르게 성장하는 커뮤니티</td><td>더 큰 커뮤니티와 생태계</td></tr><tr><td><strong>모듈성</strong></td><td>경량 모듈성 제공</td><td>더 많은 추가 설정 가능</td></tr></tbody></table><p>Vue.js는 React보다 배우기 쉬우며, 특히 템플릿 문법이 HTML과 유사해 직관적입니다. 또한 양방향 데이터 바인딩을 기본적으로 지원해 상태 관리가 더 간편합니다. 반면, React는 더 큰 커뮤니티와 생태계를 가지고 있으며, JSX를 통해 HTML과 JavaScript를 통합하여 사용할 수 있는 유연성을 제공합니다.</p><h2 id="3-Node-js와-npm-설치"><a href="#3-Node-js와-npm-설치" class="headerlink" title="3. Node.js와 npm 설치"></a>3. Node.js와 npm 설치</h2><h3 id="Node-js와-npm이란"><a href="#Node-js와-npm이란" class="headerlink" title="Node.js와 npm이란?"></a>Node.js와 npm이란?</h3><ul><li><strong>Node.js</strong>: Node.js는 서버 측에서 JavaScript를 실행할 수 있게 해주는 런타임 환경입니다. Vue.js 개발을 위해서는 Node.js가 필요합니다.</li><li><strong>npm</strong>: npm(Node Package Manager)은 Node.js의 패키지 관리 도구로, Vue.js와 같은 다양한 패키지를 설치하고 관리할 수 있습니다.</li></ul><h3 id="Node-js와-npm-설치하기"><a href="#Node-js와-npm-설치하기" class="headerlink" title="Node.js와 npm 설치하기"></a>Node.js와 npm 설치하기</h3><ol><li><p><strong>Node.js 설치</strong></p><ul><li><a href="https://nodejs.org/">Node.js 공식 웹사이트</a>에서 설치 파일을 다운로드하여 설치합니다.</li><li>설치가 완료되면, 터미널에서 <code>node -v</code> 명령어를 입력하여 Node.js가 올바르게 설치되었는지 확인합니다.</li></ul><pre><code class="highlight bash">node -v</code></pre></li><li><p><strong>npm 설치</strong></p><ul><li>npm은 Node.js를 설치하면 함께 설치됩니다. <code>npm -v</code> 명령어를 사용하여 npm이 설치되었는지 확인합니다.</li></ul><pre><code class="highlight bash">npm -v</code></pre></li></ol><h2 id="4-Vue-CLI를-사용한-프로젝트-생성-및-실행"><a href="#4-Vue-CLI를-사용한-프로젝트-생성-및-실행" class="headerlink" title="4. Vue CLI를 사용한 프로젝트 생성 및 실행"></a>4. Vue CLI를 사용한 프로젝트 생성 및 실행</h2><h3 id="Vue-CLI란"><a href="#Vue-CLI란" class="headerlink" title="Vue CLI란?"></a>Vue CLI란?</h3><p>Vue CLI는 Vue.js 프로젝트를 쉽게 생성하고 관리할 수 있는 강력한 도구입니다. 기본적인 프로젝트 구조를 자동으로 생성해주며, 다양한 설정을 쉽게 구성할 수 있습니다.</p><h3 id="Vue-CLI-설치"><a href="#Vue-CLI-설치" class="headerlink" title="Vue CLI 설치"></a>Vue CLI 설치</h3><p>터미널에서 다음 명령어를 사용하여 Vue CLI를 전역으로 설치합니다.</p><pre><code class="highlight bash">npm install -g @vue/cli</code></pre><h3 id="Vue-js-프로젝트-생성"><a href="#Vue-js-프로젝트-생성" class="headerlink" title="Vue.js 프로젝트 생성"></a>Vue.js 프로젝트 생성</h3><p>Vue CLI를 사용하여 새로운 Vue.js 프로젝트를 생성합니다.</p><pre><code class="highlight bash">vue create my-vue-app</code></pre><ol><li><strong>프로젝트 이름 입력</strong>: <code>my-vue-app</code>은 프로젝트의 이름입니다.</li><li><strong>기본 설정 선택</strong>: 기본 설정을 선택하거나 커스텀 설정을 구성할 수 있습니다.</li></ol><h3 id="Vue-js-프로젝트-실행"><a href="#Vue-js-프로젝트-실행" class="headerlink" title="Vue.js 프로젝트 실행"></a>Vue.js 프로젝트 실행</h3><p>프로젝트 디렉토리로 이동한 후, 다음 명령어를 사용하여 개발 서버를 실행합니다.</p><pre><code class="highlight bash"><span class="built_in">cd</span> my-vue-appnpm run serve</code></pre><p>브라우저에서 <code>http://localhost:8080</code>을 열어 Vue.js 애플리케이션이 정상적으로 실행되는지 확인합니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 Vue.js의 개념과 장점, React와의 차이점, 그리고 Vue.js 프로젝트를 시작하는 방법에 대해 알아보았습니다.<br>Vue.js는 가볍고 배우기 쉬운 프레임워크로, 초보자부터 숙련된 개발자까지 모두에게 유용한 도구입니다.<br>다음 시간에는 Vue.js의 인스턴스 개념에 대해 알아보겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>프록시 패턴 (Proxy Pattern)</title>
      <link href="/design-pattern/15/"/>
      <url>/design-pattern/15/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-프록시-패턴-Proxy-Pattern"><a href="#JavaScript-프록시-패턴-Proxy-Pattern" class="headerlink" title="JavaScript 프록시 패턴 (Proxy Pattern)"></a>JavaScript 프록시 패턴 (Proxy Pattern)</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 자바스크립트 디자인 패턴 중 하나인 프록시 패턴(Proxy Pattern)에 대해 알아보겠습니다. 프록시 패턴은 접근 제어, 로깅, 캐싱 등 다양한 기능을 추가하기 위해 객체에 대한 접근을 제어하는 디자인 패턴입니다.</p><h2 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h2><h3 id="프록시-패턴이란"><a href="#프록시-패턴이란" class="headerlink" title="프록시 패턴이란?"></a>프록시 패턴이란?</h3><p>프록시 패턴(Proxy Pattern)은 실제 객체에 대한 접근을 제어하는 대리자 객체를 제공하는 패턴입니다. 프록시는 실제 객체에 대한 대리 역할을 하며, 접근 제어, 로깅, 캐싱 등 다양한 기능을 추가할 수 있습니다.</p><h3 id="프록시-패턴의-장점"><a href="#프록시-패턴의-장점" class="headerlink" title="프록시 패턴의 장점"></a>프록시 패턴의 장점</h3><ul><li><strong>접근 제어</strong>: 실제 객체에 대한 접근을 제어할 수 있습니다.</li><li><strong>로깅</strong>: 메서드 호출 등을 로깅할 수 있습니다.</li><li><strong>캐싱</strong>: 자주 사용되는 결과를 캐싱하여 성능을 향상시킬 수 있습니다.</li><li><strong>지연 초기화</strong>: 실제 객체의 생성을 지연시킬 수 있습니다.</li></ul><h2 id="예시-코드"><a href="#예시-코드" class="headerlink" title="예시 코드"></a>예시 코드</h2><p>이번 예제에서는 RPG 게임에서 캐릭터의 스킬 사용을 프록시 패턴을 사용하여 로깅하고, 캐싱하는 방법을 구현해보겠습니다.</p><h3 id="1-실제-객체"><a href="#1-실제-객체" class="headerlink" title="1. 실제 객체"></a>1. 실제 객체</h3><p>먼저, 실제 객체를 정의합니다.</p><pre><code class="highlight javascript"><span class="keyword">class</span> <span class="title class_">Character</span> &#123;  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;    <span class="variable language_">this</span>.<span class="property">name</span> = name;  &#125;  <span class="title function_">useSkill</span>(<span class="params">skill</span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> uses <span class="subst">$&#123;skill&#125;</span>!`</span>);    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> uses <span class="subst">$&#123;skill&#125;</span>!`</span>;  &#125;&#125;</code></pre><h3 id="2-프록시-객체"><a href="#2-프록시-객체" class="headerlink" title="2. 프록시 객체"></a>2. 프록시 객체</h3><p>프록시 객체를 정의하여 실제 객체에 대한 접근을 제어합니다.</p><pre><code class="highlight javascript"><span class="keyword">class</span> <span class="title class_">CharacterProxy</span> &#123;  <span class="title function_">constructor</span>(<span class="params">character</span>) &#123;    <span class="variable language_">this</span>.<span class="property">character</span> = character;    <span class="variable language_">this</span>.<span class="property">cache</span> = &#123;&#125;;  &#125;  <span class="title function_">useSkill</span>(<span class="params">skill</span>) &#123;    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">cache</span>[skill]) &#123;      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Cached: <span class="subst">$&#123;<span class="variable language_">this</span>.cache[skill]&#125;</span>`</span>);      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">cache</span>[skill];    &#125;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Logging: <span class="subst">$&#123;<span class="variable language_">this</span>.character.name&#125;</span> is about to use <span class="subst">$&#123;skill&#125;</span>`</span>);    <span class="keyword">const</span> result = <span class="variable language_">this</span>.<span class="property">character</span>.<span class="title function_">useSkill</span>(skill);    <span class="variable language_">this</span>.<span class="property">cache</span>[skill] = result;    <span class="keyword">return</span> result;  &#125;&#125;</code></pre><h3 id="3-RPG-게임에서의-활용-예제"><a href="#3-RPG-게임에서의-활용-예제" class="headerlink" title="3. RPG 게임에서의 활용 예제"></a>3. RPG 게임에서의 활용 예제</h3><p>프록시 패턴을 사용하여 RPG 게임에서 캐릭터의 스킬 사용을 로깅하고, 캐싱하는 예제입니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> warrior = <span class="keyword">new</span> <span class="title class_">Character</span>(<span class="string">&quot;Warrior&quot;</span>);<span class="keyword">const</span> warriorProxy = <span class="keyword">new</span> <span class="title class_">CharacterProxy</span>(warrior);warriorProxy.<span class="title function_">useSkill</span>(<span class="string">&quot;Slash&quot;</span>);<span class="comment">// Logging: Warrior is about to use Slash</span><span class="comment">// Warrior uses Slash!</span>warriorProxy.<span class="title function_">useSkill</span>(<span class="string">&quot;Slash&quot;</span>);<span class="comment">// Cached: Warrior uses Slash!</span>warriorProxy.<span class="title function_">useSkill</span>(<span class="string">&quot;Shield Block&quot;</span>);<span class="comment">// Logging: Warrior is about to use Shield Block</span><span class="comment">// Warrior uses Shield Block!</span>warriorProxy.<span class="title function_">useSkill</span>(<span class="string">&quot;Shield Block&quot;</span>);<span class="comment">// Cached: Warrior uses Shield Block!</span></code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 프록시 패턴의 개념과 사용 예제에 대해 알아보았습니다. 프록시 패턴은 실제 객체에 대한 접근을 제어하는 대리자 객체를 제공하여 접근 제어, 로깅, 캐싱 등 다양한 기능을 추가할 수 있는 패턴입니다. RPG 게임 예제를 통해 프록시 패턴을 실제로 어떻게 활용할 수 있는지 살펴보았습니다. 프록시 패턴을 사용하면 객체의 메서드 호출 등을 로깅하고, 자주 사용되는 결과를 캐싱하여 성능을 향상시킬 수 있습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> 디자인패턴 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>디스코드(Discord) emoji 모음</title>
      <link href="/emoji/discord/"/>
      <url>/emoji/discord/</url>
      
        <content type="html"><![CDATA[<details><summary>키워드</summary>디스코드 이모지 모음Discord emoji list디스코드 이모지 코드Discord emoji codes디스코드 이모지 사용법How to use Discord emojis디스코드 이모지 다운로드Download Discord emojis디스코드 이모지 추천Best Discord emojis디스코드 이모지 복사Copy Discord emojis디스코드 이모지 목록List of Discord emojis디스코드 이모지 컬렉션Discord emoji collection디스코드 이모지 검색Search Discord emojis디스코드 인기 이모지Popular Discord emojis</details><h1 id="디스코드-Discord-emoji-모음"><a href="#디스코드-Discord-emoji-모음" class="headerlink" title="디스코드(Discord) emoji 모음"></a>디스코드(Discord) emoji 모음</h1><blockquote><p>이모지를 누르시면 클립보드에 복사됩니다! (Click the emoji and it will be copied on the clipboard!)</p></blockquote><script>  function copyToClipboard(element, text) {    navigator.clipboard.writeText(text).then(function() {      var originalText = element.innerHTML;      element.innerHTML = "Copied! 📝";      setTimeout(function() {        element.innerHTML = originalText;      }, 1000);    });  }</script><table><thead><tr><th>Emoji &#x2F; Text</th><th>Emoji &#x2F; Text</th><th>Emoji &#x2F; Text</th></tr></thead><tbody><tr><td><span class="copyable" onclick="copyToClipboard(this, ':grinning:')">😀 :grinning:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':smiley:')">😃 :smiley:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':smile:')">😄 :smile:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':grin:')">😁 :grin:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':laughing:')">😆 :laughing:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':sweat_smile:')">😅 :sweat_smile:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':joy:')">😂 :joy:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':rofl:')">🤣 :rofl:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':blush:')">😊 :blush:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':innocent:')">😇 :innocent:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':slightly_smiling_face:')">🙂 :slightly_smiling_face:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':upside_down_face:')">🙃 :upside_down_face:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':wink:')">😉 :wink:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':yum:')">😋 :yum:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':relieved:')">😌 :relieved:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':smiling_face_with_three_hearts:')">🥰 :smiling_face_with_three_hearts:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':heart_eyes:')">😍 :heart_eyes:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':kissing_heart:')">😘 :kissing_heart:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':kissing:')">😗 :kissing:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':kissing_smiling_eyes:')">😙 :kissing_smiling_eyes:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':kissing_closed_eyes:')">😚 :kissing_closed_eyes:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':stuck_out_tongue_winking_eye:')">😜 :stuck_out_tongue_winking_eye:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':money_mouth_face:')">🤑 :money_mouth_face:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':stuck_out_tongue:')">😛 :stuck_out_tongue:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':stuck_out_tongue_closed_eyes:')">😝 :stuck_out_tongue_closed_eyes:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':hugs:')">🤗 :hugs:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':shushing_face:')">🤭 :shushing_face:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':thinking_face:')">🤫 :thinking_face:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':thinking:')">🤔 :thinking:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':zipper_mouth_face:')">🤐 :zipper_mouth_face:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':raised_eyebrow:')">🤨 :raised_eyebrow:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':neutral_face:')">😐 :neutral_face:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':expressionless:')">😑 :expressionless:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':no_mouth:')">😶 :no_mouth:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':roll_eyes:')">🙄 :roll_eyes:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':smirk:')">😏 :smirk:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':persevere:')">😣 :persevere:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':disappointed_relieved:')">😥 :disappointed_relieved:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':open_mouth:')">😮 :open_mouth:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':hushed:')">😯 :hushed:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':sleepy:')">😪 :sleepy:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':tired_face:')">😫 :tired_face:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':yawning_face:')">🥱 :yawning_face:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':sleeping:')">😴 :sleeping:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':hot_face:')">🥵 :hot_face:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':cold_face:')">🥶 :cold_face:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':partying_face:')">🥳 :partying_face:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':woozy_face:')">🥴 :woozy_face:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':dizzy_face:')">😵 :dizzy_face:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':exploding_head:')">🤯 :exploding_head:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':cowboy_hat_face:')">🤠 :cowboy_hat_face:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':sunglasses:')">😎 :sunglasses:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':nerd_face:')">🤓 :nerd_face:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':monocle_face:')">🧐 :monocle_face:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':confused:')">😕 :confused:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':worried:')">😟 :worried:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':slightly_frowning_face:')">🙁 :slightly_frowning_face:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':frowning_face:')">☹️ :frowning_face:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':open_mouth:')">😮 :open_mouth:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':hushed:')">😯 :hushed:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':astonished:')">😲 :astonished:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':flushed:')">😳 :flushed:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':pleading_face:')">🥺 :pleading_face:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':frowning:')">😦 :frowning:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':anguished:')">😧 :anguished:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':fearful:')">😨 :fearful:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':cold_sweat:')">😰 :cold_sweat:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':disappointed_relieved:')">😥 :disappointed_relieved:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':cry:')">😢 :cry:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':sob:')">😭 :sob:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':scream:')">😱 :scream:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':confounded:')">😖 :confounded:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':persevere:')">😣 :persevere:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':disappointed:')">😞 :disappointed:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':sweat:')">😓 :sweat:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':weary:')">😩 :weary:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':tired_face:')">😫 :tired_face:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':triumph:')">😤 :triumph:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':face_with_symbols_over_mouth:')">🤬 :face_with_symbols_over_mouth:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':rage:')">😡 :rage:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':angry:')">😠 :angry:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':smiling_imp:')">😈 :smiling_imp:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':imp:')">👿 :imp:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':skull:')">💀 :skull:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':skull_and_crossbones:')">☠️ :skull_and_crossbones:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':poop:')">💩 :poop:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':clown_face:')">🤡 :clown_face:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':japanese_ogre:')">👹 :japanese_ogre:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':japanese_goblin:')">👺 :japanese_goblin:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':ghost:')">👻 :ghost:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':alien:')">👽 :alien:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':space_invader:')">👾 :space_invader:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':robot:')">🤖 :robot:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':jack_o_lantern:')">🎃 :jack_o_lantern:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':smiley_cat:')">😺 :smiley_cat:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':smile_cat:')">😸 :smile_cat:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':joy_cat:')">😹 :joy_cat:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':heart_eyes_cat:')">😻 :heart_eyes_cat:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':smirk_cat:')">😼 :smirk_cat:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':kissing_cat:')">😽 :kissing_cat:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':scream_cat:')">🙀 :scream_cat:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':crying_cat_face:')">😿 :crying_cat_face:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':pouting_cat:')">😾 :pouting_cat:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':see_no_evil:')">🙈 :see_no_evil:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':hear_no_evil:')">🙉 :hear_no_evil:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':speak_no_evil:')">🙊 :speak_no_evil:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':kiss:')">💋 :kiss:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':love_letter:')">💌 :love_letter:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':cupid:')">💘 :cupid:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':gift_heart:')">💝 :gift_heart:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':sparkling_heart:')">💖 :sparkling_heart:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':heartpulse:')">💗 :heartpulse:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':heartbeat:')">💓 :heartbeat:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':revolving_hearts:')">💞 :revolving_hearts:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':two_hearts:')">💕 :two_hearts:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':heart_decoration:')">💟 :heart_decoration:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':heart_exclamation:')">❣️ :heart_exclamation:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':broken_heart:')">💔 :broken_heart:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':heart:')">❤️ :heart:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':orange_heart:')">🧡 :orange_heart:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':yellow_heart:')">💛 :yellow_heart:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':green_heart:')">💚 :green_heart:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':blue_heart:')">💙 :blue_heart:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':purple_heart:')">💜 :purple_heart:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':brown_heart:')">🤎 :brown_heart:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':black_heart:')">🖤 :black_heart:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':white_heart:')">🤍 :white_heart:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':100:')">💯 :100:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':anger:')">💢 :anger:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':boom:')">💥 :boom:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':dizzy:')">💫 :dizzy:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':sweat_drops:')">💦 :sweat_drops:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':dash:')">💨 :dash:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':hole:')">🕳 :hole:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':bomb:')">💣 :bomb:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':speech_balloon:')">💬 :speech_balloon:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':eye_speech_bubble:')">👁️‍🗨️ :eye_speech_bubble:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':left_speech_bubble:')">🗨 :left_speech_bubble:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':right_anger_bubble:')">🗯 :right_anger_bubble:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':thought_balloon:')">💭 :thought_balloon:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':zzz:')">💤 :zzz:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':fire:')">🔥 :fire:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':droplet:')">💧 :droplet:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':ocean:')">🌊 :ocean:</span></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> etc </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>메멘토 패턴 (Memento Pattern)</title>
      <link href="/design-pattern/14/"/>
      <url>/design-pattern/14/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-메멘토-패턴-Memento-Pattern"><a href="#JavaScript-메멘토-패턴-Memento-Pattern" class="headerlink" title="JavaScript 메멘토 패턴 (Memento Pattern)"></a>JavaScript 메멘토 패턴 (Memento Pattern)</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 자바스크립트 디자인 패턴 중 하나인 메멘토 패턴(Memento Pattern)에 대해 알아보겠습니다. 메멘토 패턴은 객체의 상태를 저장하고 복원할 수 있게 해주는 디자인 패턴입니다.</p><h2 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h2><h3 id="메멘토-패턴이란"><a href="#메멘토-패턴이란" class="headerlink" title="메멘토 패턴이란?"></a>메멘토 패턴이란?</h3><p>메멘토 패턴(Memento Pattern)은 객체의 상태를 저장하고 필요할 때 복원할 수 있게 해주는 디자인 패턴입니다. 객체의 상태를 캡슐화하여 외부에서 접근하지 못하게 하며, 객체의 상태를 저장하고 복원하는 기능을 제공합니다.</p><h3 id="메멘토-패턴의-장점"><a href="#메멘토-패턴의-장점" class="headerlink" title="메멘토 패턴의 장점"></a>메멘토 패턴의 장점</h3><ul><li><strong>상태 저장 및 복원</strong>: 객체의 상태를 저장하고 복원할 수 있습니다.</li><li><strong>캡슐화</strong>: 객체의 내부 상태를 외부에 노출하지 않고 저장할 수 있습니다.</li><li><strong>변경 이력 관리</strong>: 객체의 상태 변경 이력을 관리할 수 있습니다.</li></ul><h2 id="예시-코드"><a href="#예시-코드" class="headerlink" title="예시 코드"></a>예시 코드</h2><p>이번 예제에서는 RPG 게임에서 캐릭터의 상태를 저장하고 복원하는 방법을 메멘토 패턴을 사용하여 구현해보겠습니다.</p><h3 id="1-메멘토-클래스"><a href="#1-메멘토-클래스" class="headerlink" title="1. 메멘토 클래스"></a>1. 메멘토 클래스</h3><p>먼저, 객체의 상태를 저장하는 메멘토 클래스를 정의합니다.</p><pre><code class="highlight javascript"><span class="keyword">class</span> <span class="title class_">Memento</span> &#123;  <span class="title function_">constructor</span>(<span class="params">state</span>) &#123;    <span class="variable language_">this</span>.<span class="property">state</span> = state;  &#125;  <span class="title function_">getState</span>(<span class="params"></span>) &#123;    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">state</span>;  &#125;&#125;</code></pre><h3 id="2-캐릭터-클래스"><a href="#2-캐릭터-클래스" class="headerlink" title="2. 캐릭터 클래스"></a>2. 캐릭터 클래스</h3><p>다음으로, 캐릭터 클래스를 정의하고 메멘토 패턴을 적용합니다.</p><pre><code class="highlight javascript"><span class="keyword">class</span> <span class="title class_">Character</span> &#123;  <span class="title function_">constructor</span>(<span class="params">name, health, mana</span>) &#123;    <span class="variable language_">this</span>.<span class="property">name</span> = name;    <span class="variable language_">this</span>.<span class="property">health</span> = health;    <span class="variable language_">this</span>.<span class="property">mana</span> = mana;  &#125;  <span class="title function_">setState</span>(<span class="params">health, mana</span>) &#123;    <span class="variable language_">this</span>.<span class="property">health</span> = health;    <span class="variable language_">this</span>.<span class="property">mana</span> = mana;  &#125;  <span class="title function_">saveStateToMemento</span>(<span class="params"></span>) &#123;    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Memento</span>(&#123; <span class="attr">health</span>: <span class="variable language_">this</span>.<span class="property">health</span>, <span class="attr">mana</span>: <span class="variable language_">this</span>.<span class="property">mana</span> &#125;);  &#125;  <span class="title function_">getStateFromMemento</span>(<span class="params">memento</span>) &#123;    <span class="keyword">const</span> state = memento.<span class="title function_">getState</span>();    <span class="variable language_">this</span>.<span class="property">health</span> = state.<span class="property">health</span>;    <span class="variable language_">this</span>.<span class="property">mana</span> = state.<span class="property">mana</span>;  &#125;  <span class="title function_">displayState</span>(<span class="params"></span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> - Health: <span class="subst">$&#123;<span class="variable language_">this</span>.health&#125;</span>, Mana: <span class="subst">$&#123;<span class="variable language_">this</span>.mana&#125;</span>`</span>);  &#125;&#125;</code></pre><h3 id="3-케어테이커-클래스"><a href="#3-케어테이커-클래스" class="headerlink" title="3. 케어테이커 클래스"></a>3. 케어테이커 클래스</h3><p>메멘토를 관리하는 케어테이커 클래스를 정의합니다.</p><pre><code class="highlight javascript"><span class="keyword">class</span> <span class="title class_">Caretaker</span> &#123;  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;    <span class="variable language_">this</span>.<span class="property">mementoList</span> = [];  &#125;  <span class="title function_">add</span>(<span class="params">memento</span>) &#123;    <span class="variable language_">this</span>.<span class="property">mementoList</span>.<span class="title function_">push</span>(memento);  &#125;  <span class="title function_">get</span>(<span class="params">index</span>) &#123;    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">mementoList</span>[index];  &#125;&#125;</code></pre><h3 id="4-RPG-게임에서의-활용-예제"><a href="#4-RPG-게임에서의-활용-예제" class="headerlink" title="4. RPG 게임에서의 활용 예제"></a>4. RPG 게임에서의 활용 예제</h3><p>메멘토 패턴을 사용하여 RPG 게임에서 캐릭터의 상태를 저장하고 복원하는 예제입니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> caretaker = <span class="keyword">new</span> <span class="title class_">Caretaker</span>();<span class="keyword">const</span> character = <span class="keyword">new</span> <span class="title class_">Character</span>(<span class="string">&quot;Warrior&quot;</span>, <span class="number">100</span>, <span class="number">50</span>);character.<span class="title function_">displayState</span>(); <span class="comment">// Warrior - Health: 100, Mana: 50</span><span class="comment">// 상태 저장</span>caretaker.<span class="title function_">add</span>(character.<span class="title function_">saveStateToMemento</span>());character.<span class="title function_">setState</span>(<span class="number">80</span>, <span class="number">30</span>);character.<span class="title function_">displayState</span>(); <span class="comment">// Warrior - Health: 80, Mana: 30</span><span class="comment">// 상태 저장</span>caretaker.<span class="title function_">add</span>(character.<span class="title function_">saveStateToMemento</span>());character.<span class="title function_">setState</span>(<span class="number">60</span>, <span class="number">10</span>);character.<span class="title function_">displayState</span>(); <span class="comment">// Warrior - Health: 60, Mana: 10</span><span class="comment">// 이전 상태 복원</span>character.<span class="title function_">getStateFromMemento</span>(caretaker.<span class="title function_">get</span>(<span class="number">1</span>));character.<span class="title function_">displayState</span>(); <span class="comment">// Warrior - Health: 80, Mana: 30</span><span class="comment">// 초기 상태 복원</span>character.<span class="title function_">getStateFromMemento</span>(caretaker.<span class="title function_">get</span>(<span class="number">0</span>));character.<span class="title function_">displayState</span>(); <span class="comment">// Warrior - Health: 100, Mana: 50</span></code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 메멘토 패턴의 개념과 사용 예제에 대해 알아보았습니다. 메멘토 패턴은 객체의 상태를 저장하고 복원할 수 있게 해주는 패턴으로, 객체의 내부 상태를 외부에 노출하지 않고 저장할 수 있습니다. RPG 게임 예제를 통해 메멘토 패턴을 실제로 어떻게 활용할 수 있는지 살펴보았습니다. 메멘토 패턴을 사용하면 객체의 상태 변경 이력을 관리하고, 필요할 때 쉽게 복원할 수 있습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> 디자인패턴 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Jira emoji 모음</title>
      <link href="/emoji/jira/"/>
      <url>/emoji/jira/</url>
      
        <content type="html"><![CDATA[<details><summary>키워드</summary>Jira 이모지 모음Jira emoji listJira 이모지 코드Jira emoji codesJira 이모지 사용법How to use Jira emojisJira 이모지 다운로드Download Jira emojisJira 이모지 추천Best Jira emojisJira 이모지 복사Copy Jira emojisJira 이모지 목록List of Jira emojisJira 이모지 컬렉션Jira emoji collectionJira 이모지 검색Search Jira emojisJira 인기 이모지Popular Jira emojis</details><h1 id="Jira-emoji-모음"><a href="#Jira-emoji-모음" class="headerlink" title="Jira emoji 모음"></a>Jira emoji 모음</h1><blockquote><p>이모지를 누르시면 클립보드에 복사됩니다! (Click the emoji and it will be copied on the clipboard!)</p></blockquote><script>  function copyToClipboard(element, text) {    navigator.clipboard.writeText(text).then(function() {      var originalText = element.innerHTML;      element.innerHTML = "Copied! 📝";      setTimeout(function() {        element.innerHTML = originalText;      }, 1000);    });  }</script><table><thead><tr><th>Emoji &#x2F; Text</th><th>Emoji &#x2F; Text</th><th>Emoji &#x2F; Text</th></tr></thead><tbody><tr><td><span class="copyable" onclick="copyToClipboard(this, ':grinning:')">😀 :grinning:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':smiley:')">😃 :smiley:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':smile:')">😄 :smile:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':grin:')">😁 :grin:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':laughing:')">😆 :laughing:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':sweat_smile:')">😅 :sweat_smile:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':joy:')">😂 :joy:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':rofl:')">🤣 :rofl:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':blush:')">😊 :blush:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':innocent:')">😇 :innocent:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':slightly_smiling_face:')">🙂 :slightly_smiling_face:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':upside_down_face:')">🙃 :upside_down_face:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':wink:')">😉 :wink:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':yum:')">😋 :yum:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':relieved:')">😌 :relieved:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':heart_eyes:')">😍 :heart_eyes:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':smiling_face_with_three_hearts:')">🥰 :smiling_face_with_three_hearts:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':kissing_heart:')">😘 :kissing_heart:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':kissing:')">😗 :kissing:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':kissing_smiling_eyes:')">😙 :kissing_smiling_eyes:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':kissing_closed_eyes:')">😚 :kissing_closed_eyes:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':stuck_out_tongue_winking_eye:')">😜 :stuck_out_tongue_winking_eye:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':stuck_out_tongue_closed_eyes:')">😝 :stuck_out_tongue_closed_eyes:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':stuck_out_tongue:')">😛 :stuck_out_tongue:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':money_mouth_face:')">🤑 :money_mouth_face:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':hugs:')">🤗 :hugs:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':shushing_face:')">🤭 :shushing_face:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':thinking_face:')">🤫 :thinking_face:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':thinking:')">🤔 :thinking:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':zipper_mouth_face:')">🤐 :zipper_mouth_face:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':raised_eyebrow:')">🤨 :raised_eyebrow:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':neutral_face:')">😐 :neutral_face:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':expressionless:')">😑 :expressionless:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':no_mouth:')">😶 :no_mouth:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':roll_eyes:')">🙄 :roll_eyes:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':smirk:')">😏 :smirk:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':persevere:')">😣 :persevere:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':disappointed_relieved:')">😥 :disappointed_relieved:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':open_mouth:')">😮 :open_mouth:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':hushed:')">😯 :hushed:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':sleepy:')">😪 :sleepy:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':tired_face:')">😫 :tired_face:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':yawning_face:')">🥱 :yawning_face:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':sleeping:')">😴 :sleeping:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':hot_face:')">🥵 :hot_face:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':cold_face:')">🥶 :cold_face:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':partying_face:')">🥳 :partying_face:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':woozy_face:')">🥴 :woozy_face:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':dizzy_face:')">😵 :dizzy_face:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':exploding_head:')">🤯 :exploding_head:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':cowboy_hat_face:')">🤠 :cowboy_hat_face:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':sunglasses:')">😎 :sunglasses:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':nerd_face:')">🤓 :nerd_face:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':monocle_face:')">🧐 :monocle_face:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':confused:')">😕 :confused:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':worried:')">😟 :worried:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':slightly_frowning_face:')">🙁 :slightly_frowning_face:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':frowning_face:')">☹️ :frowning_face:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':open_mouth:')">😮 :open_mouth:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':hushed:')">😯 :hushed:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':astonished:')">😲 :astonished:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':flushed:')">😳 :flushed:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':pleading_face:')">🥺 :pleading_face:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':frowning:')">😦 :frowning:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':anguished:')">😧 :anguished:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':fearful:')">😨 :fearful:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':cold_sweat:')">😰 :cold_sweat:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':disappointed_relieved:')">😥 :disappointed_relieved:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':cry:')">😢 :cry:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':sob:')">😭 :sob:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':scream:')">😱 :scream:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':confounded:')">😖 :confounded:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':persevere:')">😣 :persevere:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':disappointed:')">😞 :disappointed:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':sweat:')">😓 :sweat:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':weary:')">😩 :weary:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':tired_face:')">😫 :tired_face:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':triumph:')">😤 :triumph:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':rage:')">😡 :rage:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':angry:')">😠 :angry:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':face_with_symbols_over_mouth:')">🤬 :face_with_symbols_over_mouth:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':smiling_imp:')">😈 :smiling_imp:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':imp:')">👿 :imp:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':skull:')">💀 :skull:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':skull_and_crossbones:')">☠️ :skull_and_crossbones:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':poop:')">💩 :poop:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':clown_face:')">🤡 :clown_face:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':japanese_ogre:')">👹 :japanese_ogre:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':japanese_goblin:')">👺 :japanese_goblin:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':ghost:')">👻 :ghost:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':alien:')">👽 :alien:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':space_invader:')">👾 :space_invader:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':robot:')">🤖 :robot:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':jack_o_lantern:')">🎃 :jack_o_lantern:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':smiley_cat:')">😺 :smiley_cat:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':smile_cat:')">😸 :smile_cat:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':joy_cat:')">😹 :joy_cat:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':heart_eyes_cat:')">😻 :heart_eyes_cat:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':smirk_cat:')">😼 :smirk_cat:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':kissing_cat:')">😽 :kissing_cat:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':scream_cat:')">🙀 :scream_cat:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':crying_cat_face:')">😿 :crying_cat_face:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':pouting_cat:')">😾 :pouting_cat:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':see_no_evil:')">🙈 :see_no_evil:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':hear_no_evil:')">🙉 :hear_no_evil:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':speak_no_evil:')">🙊 :speak_no_evil:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':kiss:')">💋 :kiss:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':love_letter:')">💌 :love_letter:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':cupid:')">💘 :cupid:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':gift_heart:')">💝 :gift_heart:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':sparkling_heart:')">💖 :sparkling_heart:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':heartpulse:')">💗 :heartpulse:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':heartbeat:')">💓 :heartbeat:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':revolving_hearts:')">💞 :revolving_hearts:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':two_hearts:')">💕 :two_hearts:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':heart_decoration:')">💟 :heart_decoration:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':heart_exclamation:')">❣️ :heart_exclamation:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':broken_heart:')">💔 :broken_heart:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':heart:')">❤️ :heart:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':orange_heart:')">🧡 :orange_heart:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':yellow_heart:')">💛 :yellow_heart:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':green_heart:')">💚 :green_heart:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':blue_heart:')">💙 :blue_heart:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':purple_heart:')">💜 :purple_heart:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':brown_heart:')">🤎 :brown_heart:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':black_heart:')">🖤 :black_heart:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':white_heart:')">🤍 :white_heart:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':100:')">💯 :100:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':anger:')">💢 :anger:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':boom:')">💥 :boom:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':dizzy:')">💫 :dizzy:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':sweat_drops:')">💦 :sweat_drops:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':dash:')">💨 :dash:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':hole:')">🕳 :hole:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':bomb:')">💣 :bomb:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':speech_balloon:')">💬 :speech_balloon:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':eye_speech_bubble:')">👁️‍🗨️ :eye_speech_bubble:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':left_speech_bubble:')">🗨 :left_speech_bubble:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':right_anger_bubble:')">🗯 :right_anger_bubble:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':thought_balloon:')">💭 :thought_balloon:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':zzz:')">💤 :zzz:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':fire:')">🔥 :fire:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':droplet:')">💧 :droplet:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':ocean:')">🌊 :ocean:</span></td></tr></tbody></table><h2 id="Work-Office"><a href="#Work-Office" class="headerlink" title="Work &amp; Office"></a>Work &amp; Office</h2><table><thead><tr><th>Emoji &#x2F; Text</th><th>Emoji &#x2F; Text</th><th>Emoji &#x2F; Text</th></tr></thead><tbody><tr><td><span class="copyable" onclick="copyToClipboard(this, ':briefcase:')">💼 :briefcase:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':file_folder:')">📁 :file_folder:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':open_file_folder:')">📂 :open_file_folder:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':card_index_dividers:')">🗂 :card_index_dividers:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':date:')">📅 :date:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':calendar:')">📆 :calendar:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':spiral_notepad:')">🗒 :spiral_notepad:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':spiral_calendar:')">🗓 :spiral_calendar:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':card_index:')">📇 :card_index:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':chart_with_upwards_trend:')">📈 :chart_with_upwards_trend:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':chart_with_downwards_trend:')">📉 :chart_with_downwards_trend:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':bar_chart:')">📊 :bar_chart:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':clipboard:')">📋 :clipboard:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':pushpin:')">📌 :pushpin:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':round_pushpin:')">📍 :round_pushpin:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':paperclip:')">📎 :paperclip:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':linked_paperclips:')">🖇 :linked_paperclips:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':straight_ruler:')">📏 :straight_ruler:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':triangular_ruler:')">📐 :triangular_ruler:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':scissors:')">✂️ :scissors:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':pen:')">🖊 :pen:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':fountain_pen:')">🖋 :fountain_pen:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':paintbrush:')">🖌 :paintbrush:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':crayon:')">🖍 :crayon:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':memo:')">📝 :memo:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':pencil2:')">✏️ :pencil2:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':card_file_box:')">🗃 :card_file_box:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':file_cabinet:')">🗄 :file_cabinet:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':wastebasket:')">🗑 :wastebasket:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':lock:')">🔒 :lock:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':unlock:')">🔓 :unlock:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':lock_with_ink_pen:')">🔏 :lock_with_ink_pen:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':closed_lock_with_key:')">🔐 :closed_lock_with_key:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':key:')">🔑 :key:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':old_key:')">🗝 :old_key:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':hammer:')">🔨 :hammer:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':pick:')">⛏ :pick:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':hammer_and_pick:')">⚒ :hammer_and_pick:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':hammer_and_wrench:')">🛠 :hammer_and_wrench:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':dagger:')">🗡 :dagger:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':crossed_swords:')">⚔️ :crossed_swords:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':gun:')">🔫 :gun:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':bow_and_arrow:')">🏹 :bow_and_arrow:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':shield:')">🛡 :shield:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':wrench:')">🔧 :wrench:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':nut_and_bolt:')">🔩 :nut_and_bolt:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':gear:')">⚙️ :gear:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':clamp:')">🗜 :clamp:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':balance_scale:')">⚖️ :balance_scale:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':link:')">🔗 :link:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':chains:')">⛓ :chains:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':syringe:')">💉 :syringe:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':pill:')">💊 :pill:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':door:')">🚪 :door:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':bed:')">🛏 :bed:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':couch_and_lamp:')">🛋 :couch_and_lamp:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':toilet:')">🚽 :toilet:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':shower:')">🚿 :shower:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':bathtub:')">🛁 :bathtub:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':bath:')">🛀 :bath:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':lotion_bottle:')">🧴 :lotion_bottle:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':safety_pin:')">🧷 :safety_pin:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':broom:')">🧹 :broom:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':basket:')">🧺 :basket:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':roll_of_paper:')">🧻 :roll_of_paper:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':soap:')">🧼 :soap:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':sponge:')">🧽 :sponge:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':fire_extinguisher:')">🧯 :fire_extinguisher:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':shopping_cart:')">🛒 :shopping_cart:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':toolbox:')">🧰 :toolbox:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':magnet:')">🧲 :magnet:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':test_tube:')">🧪 :test_tube:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':petri_dish:')">🧫 :petri_dish:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':dna:')">🧬 :dna:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':microscope:')">🔬 :microscope:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':telescope:')">🔭 :telescope:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':satellite:')">📡 :satellite:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':syringe:')">💉 :syringe:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':pill:')">💊 :pill:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':door:')">🚪 :door:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':bed:')">🛏 :bed:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':couch_and_lamp:')">🛋 :couch_and_lamp:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':toilet:')">🚽 :toilet:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':shower:')">🚿 :shower:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':bathtub:')">🛁 :bathtub:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':bath:')">🛀 :bath:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':lotion_bottle:')">🧴 :lotion_bottle:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':safety_pin:')">🧷 :safety_pin:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':broom:')">🧹 :broom:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':basket:')">🧺 :basket:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':roll_of_paper:')">🧻 :roll_of_paper:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':soap:')">🧼 :soap:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':sponge:')">🧽 :sponge:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':fire_extinguisher:')">🧯 :fire_extinguisher:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':shopping_cart:')">🛒 :shopping_cart:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':toolbox:')">🧰 :toolbox:</span></td></tr></tbody></table><h2 id="Travel-Places"><a href="#Travel-Places" class="headerlink" title="Travel &amp; Places"></a>Travel &amp; Places</h2><table><thead><tr><th>Emoji &#x2F; Text</th><th>Emoji &#x2F; Text</th><th>Emoji &#x2F; Text</th></tr></thead><tbody><tr><td><span class="copyable" onclick="copyToClipboard(this, ':car:')">🚗 :car:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':taxi:')">🚕 :taxi:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':blue_car:')">🚙 :blue_car:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':bus:')">🚌 :bus:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':trolleybus:')">🚎 :trolleybus:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':racing_car:')">🏎 :racing_car:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':police_car:')">🚓 :police_car:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':ambulance:')">🚑 :ambulance:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':fire_engine:')">🚒 :fire_engine:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':minibus:')">🚐 :minibus:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':pickup_truck:')">🛻 :pickup_truck:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':truck:')">🚚 :truck:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':articulated_lorry:')">🚛 :articulated_lorry:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':tractor:')">🚜 :tractor:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':motorcycle:')">🏍 :motorcycle:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':motor_scooter:')">🛵 :motor_scooter:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':manual_wheelchair:')">🦽 :manual_wheelchair:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':motorized_wheelchair:')">🦼 :motorized_wheelchair:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':auto_rickshaw:')">🛺 :auto_rickshaw:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':bicycle:')">🚲 :bicycle:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':kick_scooter:')">🛴 :kick_scooter:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':skateboard:')">🛹 :skateboard:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':roller_skate:')">🛼 :roller_skate:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':rotating_light:')">🚨 :rotating_light:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':vertical_traffic_light:')">🚥 :vertical_traffic_light:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':traffic_light:')">🚦 :traffic_light:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':stop_sign:')">🛑 :stop_sign:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':construction:')">🚧 :construction:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':anchor:')">⚓️ :anchor:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':sailboat:')">⛵️ :sailboat:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':speedboat:')">🚤 :speedboat:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':passenger_ship:')">🛳 :passenger_ship:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':ferry:')">⛴ :ferry:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':motor_boat:')">🛥 :motor_boat:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':ship:')">🚢 :ship:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':airplane:')">✈️ :airplane:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':small_airplane:')">🛩 :small_airplane:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':flight_departure:')">🛫 :flight_departure:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':flight_arrival:')">🛬 :flight_arrival:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':rocket:')">🚀 :rocket:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':flying_saucer:')">🛸 :flying_saucer:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':helicopter:')">🚁 :helicopter:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':locomotive:')">🚂 :locomotive:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':tram:')">🚊 :tram:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':station:')">🚉 :station:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':mountain_railway:')">🚞 :mountain_railway:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':train:')">🚆 :train:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':bullettrain_side:')">🚄 :bullettrain_side:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':bullettrain_front:')">🚅 :bullettrain_front:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':light_rail:')">🚈 :light_rail:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':monorail:')">🚝 :monorail:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':tram_car:')">🚋 :tram_car:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':oncoming_bus:')">🚌 :oncoming_bus:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':oncoming_bus:')">🚍 :oncoming_bus:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':trolleybus:')">🚎 :trolleybus:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':busstop:')">🚏 :busstop:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':school:')">🏫 :school:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':office:')">🏢 :office:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':post_office:')">🏣 :post_office:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':european_post_office:')">🏤 :european_post_office:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':hospital:')">🏥 :hospital:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':bank:')">🏦 :bank:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':hotel:')">🏨 :hotel:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':love_hotel:')">🏩 :love_hotel:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':convenience_store:')">🏪 :convenience_store:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':school:')">🏫 :school:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':department_store:')">🏬 :department_store:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':factory:')">🏭 :factory:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':japanese_castle:')">🏯 :japanese_castle:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':european_castle:')">🏰 :european_castle:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':wedding:')">💒 :wedding:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':classical_building:')">🏛 :classical_building:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':building_construction:')">🏗 :building_construction:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':homes:')">🏘 :homes:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':derelict_house:')">🏚 :derelict_house:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':house:')">🏠 :house:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':house_with_garden:')">🏡 :house_with_garden:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':office:')">🏢 :office:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':hospital:')">🏥 :hospital:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':hotel:')">🏨 :hotel:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':convenience_store:')">🏪 :convenience_store:</span></td></tr></tbody></table><h2 id="Objects"><a href="#Objects" class="headerlink" title="Objects"></a>Objects</h2><table><thead><tr><th>Emoji &#x2F; Text</th><th>Emoji &#x2F; Text</th><th>Emoji &#x2F; Text</th></tr></thead><tbody><tr><td><span class="copyable" onclick="copyToClipboard(this, ':iphone:')">📱 :iphone:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':calling:')">📲 :calling:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':computer:')">💻 :computer:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':desktop_computer:')">🖥 :desktop_computer:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':printer:')">🖨 :printer:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':keyboard:')">⌨️ :keyboard:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':computer_mouse:')">🖱 :computer_mouse:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':trackball:')">🖲 :trackball:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':minidisc:')">💽 :minidisc:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':floppy_disk:')">💾 :floppy_disk:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':cd:')">💿 :cd:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':dvd:')">📀 :dvd:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':vhs:')">📼 :vhs:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':camera:')">📷 :camera:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':camera_with_flash:')">📸 :camera_with_flash:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':video_camera:')">📹 :video_camera:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':movie_camera:')">🎥 :movie_camera:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':film_projector:')">📽 :film_projector:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':film_strip:')">🎞 :film_strip:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':telephone_receiver:')">📞 :telephone_receiver:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':pager:')">📟 :pager:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':fax:')">📠 :fax:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':tv:')">📺 :tv:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':radio:')">📻 :radio:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':studio_microphone:')">🎙 :studio_microphone:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':level_slider:')">🎚 :level_slider:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':control_knobs:')">🎛 :control_knobs:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':stopwatch:')">⏱ :stopwatch:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':timer_clock:')">⏲ :timer_clock:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':alarm_clock:')">⏰ :alarm_clock:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':mantelpiece_clock:')">🕰 :mantelpiece_clock:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':hourglass_flowing_sand:')">⏳ :hourglass_flowing_sand:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':hourglass:')">⌛ :hourglass:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':battery:')">🔋 :battery:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':electric_plug:')">🔌 :electric_plug:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':bulb:')">💡 :bulb:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':flashlight:')">🔦 :flashlight:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':candle:')">🕯 :candle:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':wastebasket:')">🗑 :wastebasket:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':oil_drum:')">🛢 :oil_drum:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':money_with_wings:')">💸 :money_with_wings:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':dollar:')">💵 :dollar:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':yen:')">💴 :yen:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':euro:')">💶 :euro:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':pound:')">💷 :pound:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':moneybag:')">💰 :moneybag:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':credit_card:')">💳 :credit_card:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':gem:')">💎 :gem:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':balance_scale:')">⚖️ :balance_scale:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':wrench:')">🔧 :wrench:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':hammer:')">🔨 :hammer:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':hammer_and_wrench:')">🛠 :hammer_and_wrench:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':pick:')">⛏ :pick:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':axe:')">🪓 :axe:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':nut_and_bolt:')">🔩 :nut_and_bolt:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':gear:')">⚙️ :gear:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':screwdriver:')">🪛 :screwdriver:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':gun:')">🔫 :gun:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':bomb:')">💣 :bomb:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':firecracker:')">🧨 :firecracker:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':boomerang:')">🪃 :boomerang:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':saw:')">🪚 :saw:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':toolbox:')">🧰 :toolbox:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':magnet:')">🧲 :magnet:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':microscope:')">🔬 :microscope:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':telescope:')">🔭 :telescope:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':satellite:')">📡 :satellite:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':syringe:')">💉 :syringe:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':pill:')">💊 :pill:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':drop_of_blood:')">🩸 :drop_of_blood:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':adhesive_bandage:')">🩹 :adhesive_bandage:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':stethoscope:')">🩺 :stethoscope:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':door:')">🚪 :door:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':bed:')">🛏 :bed:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':couch_and_lamp:')">🛋 :couch_and_lamp:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':chair:')">🪑 :chair:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':toilet:')">🚽 :toilet:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':shower:')">🚿 :shower:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':bathtub:')">🛁 :bathtub:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':plunger:')">🪠 :plunger:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':lotion_bottle:')">🧴 :lotion_bottle:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':safety_pin:')">🧷 :safety_pin:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':broom:')">🧹 :broom:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':basket:')">🧺 :basket:</span></td></tr></tbody></table><h2 id="Symbols"><a href="#Symbols" class="headerlink" title="Symbols"></a>Symbols</h2><table><thead><tr><th>Emoji &#x2F; Text</th><th>Emoji &#x2F; Text</th><th>Emoji &#x2F; Text</th></tr></thead><tbody><tr><td><span class="copyable" onclick="copyToClipboard(this, ':heart:')">❤️ :heart:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':orange_heart:')">🧡 :orange_heart:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':yellow_heart:')">💛 :yellow_heart:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':green_heart:')">💚 :green_heart:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':blue_heart:')">💙 :blue_heart:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':purple_heart:')">💜 :purple_heart:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':black_heart:')">🖤 :black_heart:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':white_heart:')">🤍 :white_heart:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':brown_heart:')">🤎 :brown_heart:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':broken_heart:')">💔 :broken_heart:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':heart_exclamation:')">❣️ :heart_exclamation:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':two_hearts:')">💕 :two_hearts:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':revolving_hearts:')">💞 :revolving_hearts:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':heartbeat:')">💓 :heartbeat:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':heartpulse:')">💗 :heartpulse:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':sparkling_heart:')">💖 :sparkling_heart:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':cupid:')">💘 :cupid:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':gift_heart:')">💝 :gift_heart:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':heart_decoration:')">💟 :heart_decoration:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':peace_symbol:')">☮️ :peace_symbol:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':cross:')">✝️ :cross:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':star_and_crescent:')">☪️ :star_and_crescent:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':om:')">🕉 :om:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':wheel_of_dharma:')">☸️ :wheel_of_dharma:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':star_of_david:')">✡️ :star_of_david:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':six_pointed_star:')">🔯 :six_pointed_star:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':menorah:')">🕎 :menorah:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':yin_yang:')">☯️ :yin_yang:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':orthodox_cross:')">☦️ :orthodox_cross:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':place_of_worship:')">🛐 :place_of_worship:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':ophiuchus:')">⛎ :ophiuchus:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':aries:')">♈️ :aries:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':taurus:')">♉️ :taurus:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':gemini:')">♊️ :gemini:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':cancer:')">♋️ :cancer:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':leo:')">♌️ :leo:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':virgo:')">♍️ :virgo:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':libra:')">♎️ :libra:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':scorpio:')">♏️ :scorpio:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':sagittarius:')">♐️ :sagittarius:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':capricorn:')">♑️ :capricorn:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':aquarius:')">♒️ :aquarius:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':pisces:')">♓️ :pisces:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':id:')">🆔 :id:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':ideograph_advantage:')">🉐 :ideograph_advantage:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':u7a7a:')">🈳 :u7a7a:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':u5408:')">🈴 :u5408:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':u6e80:')">🈵 :u6e80:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':u7981:')">🈲 :u7981:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':u6708:')">🈷️ :u6708:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':u6709:')">🈶 :u6709:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':u55b6:')">🈺 :u55b6:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':u7121:')">🈚️ :u7121:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':u7533:')">🈸 :u7533:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':u5272:')">🈂️ :u5272:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':u6307:')">🈁 :u6307:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':cl:')">🆑 :cl:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':sos:')">🆘 :sos:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':ok:')">🆗 :ok:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':up:')">🆙 :up:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':vs:')">🆚 :vs:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':ab:')">🆎 :ab:</span></td><td></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> etc </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>상태 패턴 (State Pattern)</title>
      <link href="/design-pattern/13/"/>
      <url>/design-pattern/13/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-상태-패턴-State-Pattern"><a href="#JavaScript-상태-패턴-State-Pattern" class="headerlink" title="JavaScript 상태 패턴 (State Pattern)"></a>JavaScript 상태 패턴 (State Pattern)</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 자바스크립트 디자인 패턴 중 하나인 상태 패턴(State Pattern)에 대해 알아보겠습니다. 상태 패턴은 객체의 상태에 따라 다른 행동을 수행할 수 있게 해주는 디자인 패턴입니다.</p><h2 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h2><h3 id="상태-패턴이란"><a href="#상태-패턴이란" class="headerlink" title="상태 패턴이란?"></a>상태 패턴이란?</h3><p>상태 패턴(State Pattern)은 객체의 상태를 객체로 캡슐화하여 상태에 따라 객체의 행동을 변경하는 디자인 패턴입니다. 상태 패턴을 사용하면 조건문을 줄이고, 상태 전환을 명확하게 관리할 수 있습니다.</p><h3 id="상태-패턴의-장점"><a href="#상태-패턴의-장점" class="headerlink" title="상태 패턴의 장점"></a>상태 패턴의 장점</h3><ul><li><strong>조건문 감소</strong>: 상태별로 행동을 분리하여 코드의 가독성을 높입니다.</li><li><strong>유연성</strong>: 새로운 상태를 쉽게 추가할 수 있습니다.</li><li><strong>상태 전환 관리</strong>: 상태 전환을 명확하게 관리할 수 있습니다.</li></ul><h2 id="예시-코드"><a href="#예시-코드" class="headerlink" title="예시 코드"></a>예시 코드</h2><p>이번 예제에서는 RPG 게임에서 캐릭터의 상태에 따라 다른 행동을 수행하는 방법을 상태 패턴을 사용하여 구현해보겠습니다.</p><h3 id="1-상태-클래스들"><a href="#1-상태-클래스들" class="headerlink" title="1. 상태 클래스들"></a>1. 상태 클래스들</h3><p>먼저, 캐릭터의 상태를 나타내는 클래스들을 정의합니다.</p><pre><code class="highlight javascript"><span class="keyword">class</span> <span class="title class_">State</span> &#123;  <span class="title function_">attack</span>(<span class="params"></span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Cannot attack in the current state.&quot;</span>);  &#125;  <span class="title function_">defend</span>(<span class="params"></span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Cannot defend in the current state.&quot;</span>);  &#125;  <span class="title function_">heal</span>(<span class="params"></span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Cannot heal in the current state.&quot;</span>);  &#125;&#125;<span class="keyword">class</span> <span class="title class_">NormalState</span> <span class="keyword">extends</span> <span class="title class_ inherited__">State</span> &#123;  <span class="title function_">attack</span>(<span class="params"></span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Attacking the enemy!&quot;</span>);  &#125;  <span class="title function_">defend</span>(<span class="params"></span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Defending against the attack!&quot;</span>);  &#125;  <span class="title function_">heal</span>(<span class="params"></span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Healing the wounds!&quot;</span>);  &#125;&#125;<span class="keyword">class</span> <span class="title class_">PoisonedState</span> <span class="keyword">extends</span> <span class="title class_ inherited__">State</span> &#123;  <span class="title function_">attack</span>(<span class="params"></span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Cannot attack, the character is poisoned.&quot;</span>);  &#125;  <span class="title function_">defend</span>(<span class="params"></span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Defending weakly due to poison.&quot;</span>);  &#125;  <span class="title function_">heal</span>(<span class="params"></span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Healing the poison.&quot;</span>);  &#125;&#125;<span class="keyword">class</span> <span class="title class_">DeadState</span> <span class="keyword">extends</span> <span class="title class_ inherited__">State</span> &#123;  <span class="title function_">attack</span>(<span class="params"></span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Cannot attack, the character is dead.&quot;</span>);  &#125;  <span class="title function_">defend</span>(<span class="params"></span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Cannot defend, the character is dead.&quot;</span>);  &#125;  <span class="title function_">heal</span>(<span class="params"></span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Cannot heal, the character is dead.&quot;</span>);  &#125;&#125;</code></pre><h3 id="2-캐릭터-클래스"><a href="#2-캐릭터-클래스" class="headerlink" title="2. 캐릭터 클래스"></a>2. 캐릭터 클래스</h3><p>다음으로, 캐릭터 클래스를 정의하고 상태 패턴을 적용합니다.</p><pre><code class="highlight javascript"><span class="keyword">class</span> <span class="title class_">Character</span> &#123;  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;    <span class="variable language_">this</span>.<span class="property">state</span> = <span class="keyword">new</span> <span class="title class_">NormalState</span>(); <span class="comment">// 기본 상태를 NormalState로 설정</span>  &#125;  <span class="title function_">setState</span>(<span class="params">state</span>) &#123;    <span class="variable language_">this</span>.<span class="property">state</span> = state;  &#125;  <span class="title function_">attack</span>(<span class="params"></span>) &#123;    <span class="variable language_">this</span>.<span class="property">state</span>.<span class="title function_">attack</span>();  &#125;  <span class="title function_">defend</span>(<span class="params"></span>) &#123;    <span class="variable language_">this</span>.<span class="property">state</span>.<span class="title function_">defend</span>();  &#125;  <span class="title function_">heal</span>(<span class="params"></span>) &#123;    <span class="variable language_">this</span>.<span class="property">state</span>.<span class="title function_">heal</span>();  &#125;&#125;</code></pre><h3 id="3-RPG-게임에서의-활용-예제"><a href="#3-RPG-게임에서의-활용-예제" class="headerlink" title="3. RPG 게임에서의 활용 예제"></a>3. RPG 게임에서의 활용 예제</h3><p>상태 패턴을 사용하여 RPG 게임에서 캐릭터의 상태에 따라 다른 행동을 수행하는 예제입니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> character = <span class="keyword">new</span> <span class="title class_">Character</span>();character.<span class="title function_">attack</span>(); <span class="comment">// Attacking the enemy!</span>character.<span class="title function_">defend</span>(); <span class="comment">// Defending against the attack!</span>character.<span class="title function_">heal</span>(); <span class="comment">// Healing the wounds!</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Character is poisoned!&quot;</span>);character.<span class="title function_">setState</span>(<span class="keyword">new</span> <span class="title class_">PoisonedState</span>());character.<span class="title function_">attack</span>(); <span class="comment">// Cannot attack, the character is poisoned.</span>character.<span class="title function_">defend</span>(); <span class="comment">// Defending weakly due to poison.</span>character.<span class="title function_">heal</span>(); <span class="comment">// Healing the poison.</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Character is dead!&quot;</span>);character.<span class="title function_">setState</span>(<span class="keyword">new</span> <span class="title class_">DeadState</span>());character.<span class="title function_">attack</span>(); <span class="comment">// Cannot attack, the character is dead.</span>character.<span class="title function_">defend</span>(); <span class="comment">// Cannot defend, the character is dead.</span>character.<span class="title function_">heal</span>(); <span class="comment">// Cannot heal, the character is dead.</span></code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 상태 패턴의 개념과 사용 예제에 대해 알아보았습니다. 상태 패턴은 객체의 상태를 객체로 캡슐화하여 상태에 따라 객체의 행동을 변경할 수 있게 해주는 패턴입니다. RPG 게임 예제를 통해 상태 패턴을 실제로 어떻게 활용할 수 있는지 살펴보았습니다. 상태 패턴을 사용하면 코드의 조건문을 줄이고, 상태 전환을 명확하게 관리할 수 있습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> 디자인패턴 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>슬랙(Slack) emoji 모음</title>
      <link href="/emoji/slack/"/>
      <url>/emoji/slack/</url>
      
        <content type="html"><![CDATA[<details><summary>키워드</summary>슬랙(Slack) 이모지 모음Slack emoji list슬랙(Slack) 이모지 코드Slack emoji codes슬랙(Slack) 이모지 사용법How to use Slack emojis슬랙(Slack) 이모지 다운로드Download Slack emojis슬랙(Slack) 이모지 추천Best Slack emojis슬랙(Slack) 이모지 복사Copy Slack emojis슬랙(Slack) 이모지 목록List of Slack emojis슬랙(Slack) 이모지 컬렉션Slack emoji collection슬랙(Slack) 이모지 검색Search Slack emojis슬랙(Slack) 인기 이모지Popular Slack emojis</details><h1 id="슬랙-Slack-emoji-모음"><a href="#슬랙-Slack-emoji-모음" class="headerlink" title="슬랙(Slack) emoji 모음"></a>슬랙(Slack) emoji 모음</h1><blockquote><p>이모지를 누르시면 클립보드에 복사됩니다! (Click the emoji and it will be copied on the clipboard!)</p></blockquote><script>  function copyToClipboard(element, text) {    navigator.clipboard.writeText(text).then(function() {      var originalText = element.innerHTML;      element.innerHTML = "Copied! 📝";      setTimeout(function() {        element.innerHTML = originalText;      }, 1000);    });  }</script><table><thead><tr><th>Emoji &amp; Text Code</th><th>Emoji &amp; Text Code</th><th>Emoji &amp; Text Code</th></tr></thead><tbody><tr><td><span class="copyable" onclick="copyToClipboard(this, ':grinning:')">😀 :grinning:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':smiley:')">😃 :smiley:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':smile:')">😄 :smile:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':grin:')">😁 :grin:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':laughing:')">😆 :laughing:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':sweat_smile:')">😅 :sweat_smile:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':joy:')">😂 :joy:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':rofl:')">🤣 :rofl:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':blush:')">😊 :blush:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':innocent:')">😇 :innocent:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':slightly_smiling_face:')">🙂 :slightly_smiling_face:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':upside_down_face:')">🙃 :upside_down_face:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':wink:')">😉 :wink:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':yum:')">😋 :yum:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':relieved:')">😌 :relieved:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':heart_eyes:')">😍 :heart_eyes:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':smiling_face_with_three_hearts:')">🥰 :smiling_face_with_three_hearts:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':kissing_heart:')">😘 :kissing_heart:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':kissing:')">😗 :kissing:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':kissing_smiling_eyes:')">😙 :kissing_smiling_eyes:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':kissing_closed_eyes:')">😚 :kissing_closed_eyes:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':stuck_out_tongue_winking_eye:')">😜 :stuck_out_tongue_winking_eye:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':stuck_out_tongue_closed_eyes:')">😝 :stuck_out_tongue_closed_eyes:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':stuck_out_tongue:')">😛 :stuck_out_tongue:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':money_mouth_face:')">🤑 :money_mouth_face:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':hugs:')">🤗 :hugs:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':shushing_face:')">🤫 :shushing_face:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':thinking:')">🤔 :thinking:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':zipper_mouth_face:')">🤐 :zipper_mouth_face:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':raised_eyebrow:')">🤨 :raised_eyebrow:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':neutral_face:')">😐 :neutral_face:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':expressionless:')">😑 :expressionless:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':no_mouth:')">😶 :no_mouth:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':roll_eyes:')">🙄 :roll_eyes:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':smirk:')">😏 :smirk:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':persevere:')">😣 :persevere:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':disappointed_relieved:')">😥 :disappointed_relieved:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':open_mouth:')">😮 :open_mouth:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':hushed:')">😯 :hushed:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':sleepy:')">😪 :sleepy:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':tired_face:')">😫 :tired_face:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':yawning_face:')">🥱 :yawning_face:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':sleeping:')">😴 :sleeping:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':hot_face:')">🥵 :hot_face:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':cold_face:')">🥶 :cold_face:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':partying_face:')">🥳 :partying_face:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':woozy_face:')">🥴 :woozy_face:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':dizzy_face:')">😵 :dizzy_face:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':exploding_head:')">🤯 :exploding_head:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':cowboy_hat_face:')">🤠 :cowboy_hat_face:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':sunglasses:')">😎 :sunglasses:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':nerd_face:')">🤓 :nerd_face:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':monocle_face:')">🧐 :monocle_face:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':confused:')">😕 :confused:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':worried:')">😟 :worried:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':slightly_frowning_face:')">🙁 :slightly_frowning_face:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':frowning_face:')">☹️ :frowning_face:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':open_mouth:')">😮 :open_mouth:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':astonished:')">😲 :astonished:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':flushed:')">😳 :flushed:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':pleading_face:')">🥺 :pleading_face:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':frowning:')">😦 :frowning:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':anguished:')">😧 :anguished:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':disappointed_relieved:')">😥 :disappointed_relieved:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':cold_sweat:')">😰 :cold_sweat:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':fearful:')">😨 :fearful:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':cry:')">😢 :cry:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':sob:')">😭 :sob:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':scream:')">😱 :scream:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':confounded:')">😖 :confounded:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':persevere:')">😣 :persevere:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':disappointed:')">😞 :disappointed:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':sweat:')">😓 :sweat:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':weary:')">😩 :weary:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':tired_face:')">😫 :tired_face:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':triumph:')">😤 :triumph:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':rage:')">😡 :rage:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':angry:')">😠 :angry:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':face_with_symbols_over_mouth:')">🤬 :face_with_symbols_over_mouth:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':smiling_imp:')">😈 :smiling_imp:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':imp:')">👿 :imp:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':skull:')">💀 :skull:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':skull_and_crossbones:')">☠️ :skull_and_crossbones:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':poop:')">💩 :poop:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':clown_face:')">🤡 :clown_face:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':japanese_ogre:')">👹 :japanese_ogre:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':japanese_goblin:')">👺 :japanese_goblin:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':ghost:')">👻 :ghost:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':alien:')">👽 :alien:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':space_invader:')">👾 :space_invader:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':robot:')">🤖 :robot:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':jack_o_lantern:')">🎃 :jack_o_lantern:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':smiley_cat:')">😺 :smiley_cat:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':smile_cat:')">😸 :smile_cat:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':joy_cat:')">😹 :joy_cat:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':heart_eyes_cat:')">😻 :heart_eyes_cat:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':smirk_cat:')">😼 :smirk_cat:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':kissing_cat:')">😽 :kissing_cat:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':scream_cat:')">🙀 :scream_cat:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':crying_cat_face:')">😿 :crying_cat_face:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':pouting_cat:')">😾 :pouting_cat:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':see_no_evil:')">🙈 :see_no_evil:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':hear_no_evil:')">🙉 :hear_no_evil:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':speak_no_evil:')">🙊 :speak_no_evil:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':kiss:')">💋 :kiss:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':love_letter:')">💌 :love_letter:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':cupid:')">💘 :cupid:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':gift_heart:')">💝 :gift_heart:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':sparkling_heart:')">💖 :sparkling_heart:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':heartpulse:')">💗 :heartpulse:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':heartbeat:')">💓 :heartbeat:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':revolving_hearts:')">💞 :revolving_hearts:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':two_hearts:')">💕 :two_hearts:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':heart_decoration:')">💟 :heart_decoration:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':heart_exclamation:')">❣️ :heart_exclamation:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':broken_heart:')">💔 :broken_heart:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':heart:')">❤️ :heart:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':orange_heart:')">🧡 :orange_heart:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':yellow_heart:')">💛 :yellow_heart:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':green_heart:')">💚 :green_heart:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':blue_heart:')">💙 :blue_heart:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':purple_heart:')">💜 :purple_heart:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':brown_heart:')">🤎 :brown_heart:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':black_heart:')">🖤 :black_heart:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':white_heart:')">🤍 :white_heart:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':100:')">💯 :100:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':anger:')">💢 :anger:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':boom:')">💥 :boom:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':dizzy:')">💫 :dizzy:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':sweat_drops:')">💦 :sweat_drops:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':dash:')">💨 :dash:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':hole:')">🕳 :hole:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':bomb:')">💣 :bomb:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':speech_balloon:')">💬 :speech_balloon:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':eye_speech_bubble:')">👁️‍🗨️ :eye_speech_bubble:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':left_speech_bubble:')">🗨 :left_speech_bubble:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':right_anger_bubble:')">🗯 :right_anger_bubble:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':thought_balloon:')">💭 :thought_balloon:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':zzz:')">💤 :zzz:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':zzz:')">💤 :zzz:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':fire:')">🔥 :fire:</span></td></tr></tbody></table><h2 id="Work-Office"><a href="#Work-Office" class="headerlink" title="Work &amp; Office"></a>Work &amp; Office</h2><table><thead><tr><th>Emoji &amp; Text Code</th><th>Emoji &amp; Text Code</th><th>Emoji &amp; Text Code</th></tr></thead><tbody><tr><td><span class="copyable" onclick="copyToClipboard(this, ':briefcase:')">💼 :briefcase:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':file_folder:')">📁 :file_folder:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':open_file_folder:')">📂 :open_file_folder:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':card_index_dividers:')">🗂 :card_index_dividers:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':date:')">📅 :date:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':calendar:')">📆 :calendar:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':spiral_notepad:')">🗒 :spiral_notepad:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':spiral_calendar:')">🗓 :spiral_calendar:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':card_index:')">📇 :card_index:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':chart_with_upwards_trend:')">📈 :chart_with_upwards_trend:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':chart_with_downwards_trend:')">📉 :chart_with_downwards_trend:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':bar_chart:')">📊 :bar_chart:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':clipboard:')">📋 :clipboard:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':pushpin:')">📌 :pushpin:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':round_pushpin:')">📍 :round_pushpin:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':paperclip:')">📎 :paperclip:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':linked_paperclips:')">🖇 :linked_paperclips:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':straight_ruler:')">📏 :straight_ruler:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':triangular_ruler:')">📐 :triangular_ruler:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':scissors:')">✂️ :scissors:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':pen:')">🖊 :pen:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':fountain_pen:')">🖋 :fountain_pen:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':paintbrush:')">🖌 :paintbrush:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':crayon:')">🖍 :crayon:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':memo:')">📝 :memo:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':pencil2:')">✏️ :pencil2:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':pen:')">🖊️ :pen:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':straight_ruler:')">📏 :straight_ruler:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':triangular_ruler:')">📐 :triangular_ruler:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':clipboard:')">📋 :clipboard:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':pushpin:')">📌 :pushpin:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':round_pushpin:')">📍 :round_pushpin:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':card_file_box:')">🗃 :card_file_box:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':file_cabinet:')">🗄 :file_cabinet:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':wastebasket:')">🗑 :wastebasket:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':lock:')">🔒 :lock:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':unlock:')">🔓 :unlock:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':lock_with_ink_pen:')">🔏 :lock_with_ink_pen:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':closed_lock_with_key:')">🔐 :closed_lock_with_key:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':key:')">🔑 :key:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':old_key:')">🗝 :old_key:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':hammer:')">🔨 :hammer:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':pick:')">⛏ :pick:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':hammer_and_pick:')">⚒ :hammer_and_pick:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':hammer_and_wrench:')">🛠 :hammer_and_wrench:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':dagger:')">🗡 :dagger:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':crossed_swords:')">⚔️ :crossed_swords:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':gun:')">🔫 :gun:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':bow_and_arrow:')">🏹 :bow_and_arrow:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':shield:')">🛡 :shield:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':wrench:')">🔧 :wrench:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':nut_and_bolt:')">🔩 :nut_and_bolt:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':gear:')">⚙️ :gear:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':clamp:')">🗜 :clamp:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':balance_scale:')">⚖️ :balance_scale:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':link:')">🔗 :link:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':chains:')">⛓ :chains:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':syringe:')">💉 :syringe:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':pill:')">💊 :pill:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':door:')">🚪 :door:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':bed:')">🛏 :bed:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':couch_and_lamp:')">🛋 :couch_and_lamp:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':toilet:')">🚽 :toilet:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':shower:')">🚿 :shower:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':bathtub:')">🛁 :bathtub:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':bath:')">🛀 :bath:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':lotion_bottle:')">🧴 :lotion_bottle:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':safety_pin:')">🧷 :safety_pin:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':broom:')">🧹 :broom:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':basket:')">🧺 :basket:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':roll_of_paper:')">🧻 :roll_of_paper:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':soap:')">🧼 :soap:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':sponge:')">🧽 :sponge:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':fire_extinguisher:')">🧯 :fire_extinguisher:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':shopping_cart:')">🛒 :shopping_cart:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':smoking:')">🚬 :smoking:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':coffin:')">⚰️ :coffin:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':funeral_urn:')">⚱️ :funeral_urn:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':moyai:')">🗿 :moyai:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':oil_drum:')">🛢 :oil_drum:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':battery:')">🔋 :battery:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':electric_plug:')">🔌 :electric_plug:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':bulb:')">💡 :bulb:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':flashlight:')">🔦 :flashlight:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':candle:')">🕯 :candle:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':wastebasket:')">🗑 :wastebasket:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':oil_drum:')">🛢 :oil_drum:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':money_with_wings:')">💸 :money_with_wings:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':dollar:')">💵 :dollar:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':yen:')">💴 :yen:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':euro:')">💶 :euro:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':pound:')">💷 :pound:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':moneybag:')">💰 :moneybag:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':credit_card:')">💳 :credit_card:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':gem:')">💎 :gem:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':balance_scale:')">⚖️ :balance_scale:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':wrench:')">🔧 :wrench:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':hammer:')">🔨 :hammer:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':pick:')">⛏ :pick:</span></td></tr></tbody></table><h2 id="Travel-Places"><a href="#Travel-Places" class="headerlink" title="Travel &amp; Places"></a>Travel &amp; Places</h2><table><thead><tr><th>Emoji &amp; Text Code</th><th>Emoji &amp; Text Code</th><th>Emoji &amp; Text Code</th></tr></thead><tbody><tr><td><span class="copyable" onclick="copyToClipboard(this, ':car:')">🚗 :car:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':taxi:')">🚕 :taxi:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':blue_car:')">🚙 :blue_car:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':bus:')">🚌 :bus:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':trolleybus:')">🚎 :trolleybus:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':racing_car:')">🏎 :racing_car:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':police_car:')">🚓 :police_car:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':ambulance:')">🚑 :ambulance:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':fire_engine:')">🚒 :fire_engine:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':minibus:')">🚐 :minibus:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':pickup_truck:')">🛻 :pickup_truck:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':truck:')">🚚 :truck:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':articulated_lorry:')">🚛 :articulated_lorry:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':tractor:')">🚜 :tractor:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':motorcycle:')">🏍 :motorcycle:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':motor_scooter:')">🛵 :motor_scooter:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':manual_wheelchair:')">🦽 :manual_wheelchair:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':motorized_wheelchair:')">🦼 :motorized_wheelchair:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':auto_rickshaw:')">🛺 :auto_rickshaw:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':bicycle:')">🚲 :bicycle:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':kick_scooter:')">🛴 :kick_scooter:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':skateboard:')">🛹 :skateboard:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':roller_skate:')">🛼 :roller_skate:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':rotating_light:')">🚨 :rotating_light:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':vertical_traffic_light:')">🚥 :vertical_traffic_light:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':traffic_light:')">🚦 :traffic_light:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':stop_sign:')">🛑 :stop_sign:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':construction:')">🚧 :construction:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':anchor:')">⚓️ :anchor:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':sailboat:')">⛵️ :sailboat:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':speedboat:')">🚤 :speedboat:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':passenger_ship:')">🛳 :passenger_ship:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':ferry:')">⛴ :ferry:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':motor_boat:')">🛥 :motor_boat:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':ship:')">🚢 :ship:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':airplane:')">✈️ :airplane:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':small_airplane:')">🛩 :small_airplane:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':flight_departure:')">🛫 :flight_departure:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':flight_arrival:')">🛬 :flight_arrival:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':rocket:')">🚀 :rocket:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':flying_saucer:')">🛸 :flying_saucer:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':helicopter:')">🚁 :helicopter:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':locomotive:')">🚂 :locomotive:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':tram:')">🚊 :tram:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':station:')">🚉 :station:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':mountain_railway:')">🚞 :mountain_railway:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':train:')">🚆 :train:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':bullettrain_side:')">🚄 :bullettrain_side:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':bullettrain_front:')">🚅 :bullettrain_front:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':light_rail:')">🚈 :light_rail:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':monorail:')">🚝 :monorail:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':tram_car:')">🚋 :tram_car:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':oncoming_bus:')">🚌 :oncoming_bus:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':oncoming_bus:')">🚍 :oncoming_bus:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':trolleybus:')">🚎 :trolleybus:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':busstop:')">🚏 :busstop:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':school:')">🏫 :school:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':office:')">🏢 :office:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':post_office:')">🏣 :post_office:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':european_post_office:')">🏤 :european_post_office:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':hospital:')">🏥 :hospital:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':bank:')">🏦 :bank:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':hotel:')">🏨 :hotel:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':love_hotel:')">🏩 :love_hotel:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':convenience_store:')">🏪 :convenience_store:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':school:')">🏫 :school:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':department_store:')">🏬 :department_store:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':factory:')">🏭 :factory:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':japanese_castle:')">🏯 :japanese_castle:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':european_castle:')">🏰 :european_castle:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':wedding:')">💒 :wedding:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':classical_building:')">🏛 :classical_building:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':building_construction:')">🏗 :building_construction:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':homes:')">🏘 :homes:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':derelict_house:')">🏚 :derelict_house:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':house:')">🏠 :house:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':house_with_garden:')">🏡 :house_with_garden:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':office:')">🏢 :office:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':hospital:')">🏥 :hospital:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':hotel:')">🏨 :hotel:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':convenience_store:')">🏪 :convenience_store:</span></td></tr></tbody></table><h2 id="Objects"><a href="#Objects" class="headerlink" title="Objects"></a>Objects</h2><table><thead><tr><th>Emoji &amp; Text Code</th><th>Emoji &amp; Text Code</th><th>Emoji &amp; Text Code</th></tr></thead><tbody><tr><td><span class="copyable" onclick="copyToClipboard(this, ':iphone:')">📱 :iphone:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':calling:')">📲 :calling:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':computer:')">💻 :computer:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':desktop_computer:')">🖥 :desktop_computer:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':printer:')">🖨 :printer:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':keyboard:')">⌨️ :keyboard:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':computer_mouse:')">🖱 :computer_mouse:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':trackball:')">🖲 :trackball:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':minidisc:')">💽 :minidisc:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':floppy_disk:')">💾 :floppy_disk:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':cd:')">💿 :cd:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':dvd:')">📀 :dvd:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':vhs:')">📼 :vhs:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':camera:')">📷 :camera:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':camera_with_flash:')">📸 :camera_with_flash:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':video_camera:')">📹 :video_camera:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':movie_camera:')">🎥 :movie_camera:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':film_projector:')">📽 :film_projector:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':film_strip:')">🎞 :film_strip:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':telephone_receiver:')">📞 :telephone_receiver:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':pager:')">📟 :pager:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':fax:')">📠 :fax:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':tv:')">📺 :tv:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':radio:')">📻 :radio:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':studio_microphone:')">🎙 :studio_microphone:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':level_slider:')">🎚 :level_slider:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':control_knobs:')">🎛 :control_knobs:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':stopwatch:')">⏱ :stopwatch:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':timer_clock:')">⏲ :timer_clock:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':alarm_clock:')">⏰ :alarm_clock:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':mantelpiece_clock:')">🕰 :mantelpiece_clock:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':hourglass_flowing_sand:')">⏳ :hourglass_flowing_sand:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':hourglass:')">⌛ :hourglass:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':battery:')">🔋 :battery:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':electric_plug:')">🔌 :electric_plug:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':bulb:')">💡 :bulb:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':flashlight:')">🔦 :flashlight:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':candle:')">🕯 :candle:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':wastebasket:')">🗑 :wastebasket:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':oil_drum:')">🛢 :oil_drum:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':money_with_wings:')">💸 :money_with_wings:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':dollar:')">💵 :dollar:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':yen:')">💴 :yen:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':euro:')">💶 :euro:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':pound:')">💷 :pound:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':moneybag:')">💰 :moneybag:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':credit_card:')">💳 :credit_card:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':gem:')">💎 :gem:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':balance_scale:')">⚖️ :balance_scale:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':wrench:')">🔧 :wrench:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':hammer:')">🔨 :hammer:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':hammer_and_wrench:')">🛠 :hammer_and_wrench:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':pick:')">⛏ :pick:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':axe:')">🪓 :axe:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':nut_and_bolt:')">🔩 :nut_and_bolt:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':gear:')">⚙️ :gear:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':screwdriver:')">🪛 :screwdriver:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':gun:')">🔫 :gun:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':bomb:')">💣 :bomb:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':firecracker:')">🧨 :firecracker:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':boomerang:')">🪃 :boomerang:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':saw:')">🪚 :saw:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':toolbox:')">🧰 :toolbox:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':magnet:')">🧲 :magnet:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':microscope:')">🔬 :microscope:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':telescope:')">🔭 :telescope:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':satellite:')">📡 :satellite:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':syringe:')">💉 :syringe:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':pill:')">💊 :pill:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':drop_of_blood:')">🩸 :drop_of_blood:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':adhesive_bandage:')">🩹 :adhesive_bandage:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':stethoscope:')">🩺 :stethoscope:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this,':door:')">🚪 :door:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':bed:')">🛏 :bed:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':couch_and_lamp:')">🛋 :couch_and_lamp:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':chair:')">🪑 :chair:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':toilet:')">🚽 :toilet:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':shower:')">🚿 :shower:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':bathtub:')">🛁 :bathtub:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':plunger:')">🪠 :plunger:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':lotion_bottle:')">🧴 :lotion_bottle:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':safety_pin:')">🧷 :safety_pin:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':broom:')">🧹 :broom:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':basket:')">🧺 :basket:</span></td></tr></tbody></table><h2 id="Symbols"><a href="#Symbols" class="headerlink" title="Symbols"></a>Symbols</h2><table><thead><tr><th>Emoji &amp; Text Code</th><th>Emoji &amp; Text Code</th><th>Emoji &amp; Text Code</th></tr></thead><tbody><tr><td><span class="copyable" onclick="copyToClipboard(this, ':heart:')">❤️ :heart:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':orange_heart:')">🧡 :orange_heart:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':yellow_heart:')">💛 :yellow_heart:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':green_heart:')">💚 :green_heart:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':blue_heart:')">💙 :blue_heart:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':purple_heart:')">💜 :purple_heart:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':black_heart:')">🖤 :black_heart:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':white_heart:')">🤍 :white_heart:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':brown_heart:')">🤎 :brown_heart:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':broken_heart:')">💔 :broken_heart:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':heart_exclamation:')">❣️ :heart_exclamation:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':two_hearts:')">💕 :two_hearts:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':revolving_hearts:')">💞 :revolving_hearts:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':heartbeat:')">💓 :heartbeat:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':heartpulse:')">💗 :heartpulse:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':sparkling_heart:')">💖 :sparkling_heart:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':cupid:')">💘 :cupid:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':gift_heart:')">💝 :gift_heart:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':heart_decoration:')">💟 :heart_decoration:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':peace_symbol:')">☮️ :peace_symbol:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':cross:')">✝️ :cross:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':star_and_crescent:')">☪️ :star_and_crescent:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':om:')">🕉 :om:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':wheel_of_dharma:')">☸️ :wheel_of_dharma:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':star_of_david:')">✡️ :star_of_david:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':six_pointed_star:')">🔯 :six_pointed_star:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':menorah:')">🕎 :menorah:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':yin_yang:')">☯️ :yin_yang:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':orthodox_cross:')">☦️ :orthodox_cross:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':place_of_worship:')">🛐 :place_of_worship:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':ophiuchus:')">⛎ :ophiuchus:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':aries:')">♈️ :aries:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':taurus:')">♉️ :taurus:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':gemini:')">♊️ :gemini:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':cancer:')">♋️ :cancer:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':leo:')">♌️ :leo:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':virgo:')">♍️ :virgo:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':libra:')">♎️ :libra:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':scorpio:')">♏️ :scorpio:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':sagittarius:')">♐️ :sagittarius:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':capricorn:')">♑️ :capricorn:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':aquarius:')">♒️ :aquarius:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':pisces:')">♓️ :pisces:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':id:')">🆔 :id:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':ideograph_advantage:')">🉐 :ideograph_advantage:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':u7a7a:')">🈳 :u7a7a:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':u5408:')">🈴 :u5408:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':u6e80:')">🈵 :u6e80:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':u7981:')">🈲 :u7981:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':u6708:')">🈷️ :u6708:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':u6709:')">🈶 :u6709:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':u55b6:')">🈺 :u55b6:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':u7121:')">🈚️ :u7121:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':u7533:')">🈸 :u7533:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':u5272:')">🈂️ :u5272:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':u6307:')">🈁 :u6307:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':cl:')">🆑 :cl:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':sos:')">🆘 :sos:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':ok:')">🆗 :ok:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':up:')">🆙 :up:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':vs:')">🆚 :vs:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':u5272:')">🈂️ :u5272:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':ab:')">🆎 :ab:</span></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> etc </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>책임 연쇄 패턴 (Chain of Responsibility Pattern)</title>
      <link href="/design-pattern/12/"/>
      <url>/design-pattern/12/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-책임-연쇄-패턴-Chain-of-Responsibility-Pattern"><a href="#JavaScript-책임-연쇄-패턴-Chain-of-Responsibility-Pattern" class="headerlink" title="JavaScript 책임 연쇄 패턴 (Chain of Responsibility Pattern)"></a>JavaScript 책임 연쇄 패턴 (Chain of Responsibility Pattern)</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 자바스크립트 디자인 패턴 중 하나인 책임 연쇄 패턴(Chain of Responsibility Pattern)에 대해 알아보겠습니다. 책임 연쇄 패턴은 요청을 처리할 수 있는 여러 객체들을 연결해 두고, 각 객체가 요청을 처리할 수 있는 기회를 갖게 하는 패턴입니다.</p><h2 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h2><h3 id="책임-연쇄-패턴이란"><a href="#책임-연쇄-패턴이란" class="headerlink" title="책임 연쇄 패턴이란?"></a>책임 연쇄 패턴이란?</h3><p>책임 연쇄 패턴(Chain of Responsibility Pattern)은 요청을 처리할 수 있는 여러 객체들이 연결된 체인을 구성하고, 요청이 체인을 따라 전달되며 각 객체가 요청을 처리할 수 있는 기회를 갖는 디자인 패턴입니다. 요청을 처리할 수 없는 객체는 다음 객체에게 요청을 넘기며, 최종적으로 요청이 처리될 때까지 체인을 따라 계속 전달됩니다.</p><h3 id="책임-연쇄-패턴의-장점"><a href="#책임-연쇄-패턴의-장점" class="headerlink" title="책임 연쇄 패턴의 장점"></a>책임 연쇄 패턴의 장점</h3><ul><li><strong>유연성</strong>: 요청을 처리하는 객체들을 동적으로 변경할 수 있습니다.</li><li><strong>단일 책임 원칙 준수</strong>: 각 객체는 하나의 책임만을 갖게 되어 코드의 유지보수성이 높아집니다.</li><li><strong>요청 처리의 분리</strong>: 요청을 처리하는 로직을 객체별로 분리하여 코드의 가독성을 높입니다.</li></ul><h2 id="예시-코드"><a href="#예시-코드" class="headerlink" title="예시 코드"></a>예시 코드</h2><p>이번 예제에서는 RPG 게임에서 책임 연쇄 패턴을 사용하여 여러 캐릭터가 공격을 처리하는 방법을 구현해보겠습니다.</p><h3 id="1-캐릭터-클래스들"><a href="#1-캐릭터-클래스들" class="headerlink" title="1. 캐릭터 클래스들"></a>1. 캐릭터 클래스들</h3><pre><code class="highlight javascript"><span class="keyword">class</span> <span class="title class_">Character</span> &#123;  <span class="title function_">setNext</span>(<span class="params">character</span>) &#123;    <span class="variable language_">this</span>.<span class="property">nextCharacter</span> = character;  &#125;  <span class="title function_">handle</span>(<span class="params">request</span>) &#123;    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">nextCharacter</span>) &#123;      <span class="variable language_">this</span>.<span class="property">nextCharacter</span>.<span class="title function_">handle</span>(request);    &#125;  &#125;&#125;<span class="keyword">class</span> <span class="title class_">Warrior</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Character</span> &#123;  <span class="title function_">handle</span>(<span class="params">request</span>) &#123;    <span class="keyword">if</span> (request === <span class="string">&quot;attack&quot;</span>) &#123;      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Warrior handles the attack!&quot;</span>);    &#125; <span class="keyword">else</span> &#123;      <span class="variable language_">super</span>.<span class="title function_">handle</span>(request);    &#125;  &#125;&#125;<span class="keyword">class</span> <span class="title class_">Mage</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Character</span> &#123;  <span class="title function_">handle</span>(<span class="params">request</span>) &#123;    <span class="keyword">if</span> (request === <span class="string">&quot;castSpell&quot;</span>) &#123;      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Mage handles the spell casting!&quot;</span>);    &#125; <span class="keyword">else</span> &#123;      <span class="variable language_">super</span>.<span class="title function_">handle</span>(request);    &#125;  &#125;&#125;<span class="keyword">class</span> <span class="title class_">Thief</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Character</span> &#123;  <span class="title function_">handle</span>(<span class="params">request</span>) &#123;    <span class="keyword">if</span> (request === <span class="string">&quot;steal&quot;</span>) &#123;      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Thief handles the stealing!&quot;</span>);    &#125; <span class="keyword">else</span> &#123;      <span class="variable language_">super</span>.<span class="title function_">handle</span>(request);    &#125;  &#125;&#125;</code></pre><h3 id="2-책임-연쇄-설정"><a href="#2-책임-연쇄-설정" class="headerlink" title="2. 책임 연쇄 설정"></a>2. 책임 연쇄 설정</h3><pre><code class="highlight javascript"><span class="keyword">const</span> warrior = <span class="keyword">new</span> <span class="title class_">Warrior</span>();<span class="keyword">const</span> mage = <span class="keyword">new</span> <span class="title class_">Mage</span>();<span class="keyword">const</span> thief = <span class="keyword">new</span> <span class="title class_">Thief</span>();warrior.<span class="title function_">setNext</span>(mage);mage.<span class="title function_">setNext</span>(thief);</code></pre><h3 id="3-RPG-게임에서의-활용-예제"><a href="#3-RPG-게임에서의-활용-예제" class="headerlink" title="3. RPG 게임에서의 활용 예제"></a>3. RPG 게임에서의 활용 예제</h3><p>책임 연쇄 패턴을 사용하여 RPG 게임에서 여러 캐릭터가 공격을 처리하는 예제입니다.</p><pre><code class="highlight javascript">warrior.<span class="title function_">handle</span>(<span class="string">&quot;attack&quot;</span>); <span class="comment">// Warrior handles the attack!</span>warrior.<span class="title function_">handle</span>(<span class="string">&quot;castSpell&quot;</span>); <span class="comment">// Mage handles the spell casting!</span>warrior.<span class="title function_">handle</span>(<span class="string">&quot;steal&quot;</span>); <span class="comment">// Thief handles the stealing!</span>warrior.<span class="title function_">handle</span>(<span class="string">&quot;defend&quot;</span>); <span class="comment">// 아무도 요청을 처리하지 않음</span></code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 책임 연쇄 패턴의 개념과 사용 예제에 대해 알아보았습니다. 책임 연쇄 패턴은 요청을 처리할 수 있는 여러 객체들을 연결해 두고, 각 객체가 요청을 처리할 수 있는 기회를 갖게 하는 패턴입니다. RPG 게임 예제를 통해 책임 연쇄 패턴을 실제로 어떻게 활용할 수 있는지 살펴보았습니다. 책임 연쇄 패턴을 사용하면 코드의 유연성을 높이고 단일 책임 원칙을 준수할 수 있습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> 디자인패턴 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Markdown emoji 모음</title>
      <link href="/emoji/markdown/"/>
      <url>/emoji/markdown/</url>
      
        <content type="html"><![CDATA[<details><summary>키워드</summary>Markdown 이모지 모음Markdown emoji listMarkdown 이모지 코드Markdown emoji codesMarkdown 이모지 사용법How to use Markdown emojisMarkdown 이모지 다운로드Download Markdown emojisMarkdown 이모지 추천Best Markdown emojisMarkdown 이모지 복사Copy Markdown emojisMarkdown 이모지 목록List of Markdown emojisMarkdown 이모지 컬렉션Markdown emoji collectionMarkdown 이모지 검색Search Markdown emojisMarkdown 인기 이모지Popular Markdown emojis</details><h1 id="Markdown-emoji-모음"><a href="#Markdown-emoji-모음" class="headerlink" title="Markdown emoji 모음"></a>Markdown emoji 모음</h1><blockquote><p>이모지를 누르시면 클립보드에 복사됩니다! (Click the emoji and it will be copied on the clipboard!)</p></blockquote><script>  function copyToClipboard(element, text) {    navigator.clipboard.writeText(text).then(function() {      var originalText = element.innerHTML;      element.innerHTML = "Copied! 📝";      setTimeout(function() {        element.innerHTML = originalText;      }, 1000);    });  }</script><table><thead><tr><th>Emoji</th><th>Emoji</th><th>Emoji &amp; Text Code</th></tr></thead><tbody><tr><td><span class="copyable" onclick="copyToClipboard(this, ':grinning:')">😀 :grinning:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':smiley:')">😃 :smiley:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':smile:')">😄 :smile:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':grin:')">😁 :grin:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':laughing:')">😆 :laughing:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':sweat_smile:')">😅 :sweat_smile:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':joy:')">😂 :joy:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':rofl:')">🤣 :rofl:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':innocent:')">😇 :innocent:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':wink:')">😉 :wink:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':blush:')">😊 :blush:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':slightly_smiling_face:')">🙂 :slightly_smiling_face:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':upside_down_face:')">🙃 :upside_down_face:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':yum:')">😋 :yum:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':relieved:')">😌 :relieved:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':heart_eyes:')">😍 :heart_eyes:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':smiling_face_with_three_hearts:')">🥰 :smiling_face_with_three_hearts:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':kissing_heart:')">😘 :kissing_heart:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':kissing:')">😗 :kissing:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':kissing_smiling_eyes:')">😙 :kissing_smiling_eyes:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':kissing_closed_eyes:')">😚 :kissing_closed_eyes:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':stuck_out_tongue_winking_eye:')">😜 :stuck_out_tongue_winking_eye:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':stuck_out_tongue_closed_eyes:')">😝 :stuck_out_tongue_closed_eyes:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':stuck_out_tongue:')">😛 :stuck_out_tongue:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':money_mouth_face:')">🤑 :money_mouth_face:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':hugs:')">🤗 :hugs:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':shushing_face:')">🤭 :shushing_face:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':thinking_face:')">🤫 :thinking_face:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':thinking:')">🤔 :thinking:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':zipper_mouth_face:')">🤐 :zipper_mouth_face:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':raised_eyebrow:')">🤨 :raised_eyebrow:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':neutral_face:')">😐 :neutral_face:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':expressionless:')">😑 :expressionless:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':no_mouth:')">😶 :no_mouth:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':roll_eyes:')">🙄 :roll_eyes:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':smirk:')">😏 :smirk:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':persevere:')">😣 :persevere:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':disappointed_relieved:')">😥 :disappointed_relieved:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':open_mouth:')">😮 :open_mouth:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':hushed:')">😯 :hushed:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':sleepy:')">😪 :sleepy:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':tired_face:')">😫 :tired_face:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':yawning_face:')">🥱 :yawning_face:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':sleeping:')">😴 :sleeping:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':relieved:')">😌 :relieved:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':hot_face:')">🥵 :hot_face:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':cold_face:')">🥶 :cold_face:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':heart_eyes:')">😍 :heart_eyes:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':partying_face:')">🥳 :partying_face:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':woozy_face:')">🥴 :woozy_face:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':dizzy_face:')">😵 :dizzy_face:</span></td></tr></tbody></table><h2 id="People-Body"><a href="#People-Body" class="headerlink" title="People &amp; Body"></a>People &amp; Body</h2><table><thead><tr><th>Emoji &amp; Text Code</th><th>Emoji &amp; Text Code</th><th>Emoji &amp; Text Code</th></tr></thead><tbody><tr><td><span class="copyable" onclick="copyToClipboard(this, ':baby:')">👶 :baby:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':child:')">🧒 :child:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':boy:')">👦 :boy:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':girl:')">👧 :girl:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':person:')">🧑 :person:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':man:')">👨 :man:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':woman:')">👩 :woman:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':older_person:')">🧓 :older_person:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':older_man:')">👴 :older_man:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':older_woman:')">👵 :older_woman:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':man_health_worker:')">👨‍⚕️ :man_health_worker:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':woman_health_worker:')">👩‍⚕️ :woman_health_worker:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':man_student:')">👨‍🎓 :man_student:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':woman_student:')">👩‍🎓 :woman_student:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':man_teacher:')">👨‍🏫 :man_teacher:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':woman_teacher:')">👩‍🏫 :woman_teacher:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':man_judge:')">👨‍⚖️ :man_judge:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':woman_judge:')">👩‍⚖️ :woman_judge:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':man_farmer:')">👨‍🌾 :man_farmer:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':woman_farmer:')">👩‍🌾 :woman_farmer:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':man_cook:')">👨‍🍳 :man_cook:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':woman_cook:')">👩‍🍳 :woman_cook:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':man_mechanic:')">👨‍🔧 :man_mechanic:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':woman_mechanic:')">👩‍🔧 :woman_mechanic:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':man_factory_worker:')">👨‍🏭 :man_factory_worker:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':woman_factory_worker:')">👩‍🏭 :woman_factory_worker:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':man_office_worker:')">👨‍💼 :man_office_worker:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':woman_office_worker:')">👩‍💼 :woman_office_worker:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':man_scientist:')">👨‍🔬 :man_scientist:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':woman_scientist:')">👩‍🔬 :woman_scientist:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':man_technologist:')">👨‍💻 :man_technologist:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':woman_technologist:')">👩‍💻 :woman_technologist:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':man_singer:')">👨‍🎤 :man_singer:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':woman_singer:')">👩‍🎤 :woman_singer:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':man_artist:')">👨‍🎨 :man_artist:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':woman_artist:')">👩‍🎨 :woman_artist:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':man_pilot:')">👨‍✈️ :man_pilot:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':woman_pilot:')">👩‍✈️ :woman_pilot:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':man_astronaut:')">👨‍🚀 :man_astronaut:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':woman_astronaut:')">👩‍🚀 :woman_astronaut:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':man_firefighter:')">👨‍🚒 :man_firefighter:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':woman_firefighter:')">👩‍🚒 :woman_firefighter:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':police_officer:')">👮 :police_officer:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':man_police_officer:')">👮‍♂️ :man_police_officer:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':woman_police_officer:')">👮‍♀️ :woman_police_officer:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':guard:')">💂 :guard:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':man_guard:')">💂‍♂️ :man_guard:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':woman_guard:')">💂‍♀️ :woman_guard:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':detective:')">🕵️ :detective:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':man_detective:')">🕵️‍♂️ :man_detective:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':woman_detective:')">🕵️‍♀️ :woman_detective:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':construction_worker:')">👷 :construction_worker:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':man_construction_worker:')">👷‍♂️ :man_construction_worker:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':woman_construction_worker:')">👷‍♀️ :woman_construction_worker:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':prince:')">🤴 :prince:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':princess:')">👸 :princess:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':person_wearing_turban:')">👳 :person_wearing_turban:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':man_wearing_turban:')">👳‍♂️ :man_wearing_turban:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':woman_wearing_turban:')">👳‍♀️ :woman_wearing_turban:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':person_with_skullcap:')">👲 :person_with_skullcap:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':woman_with_headscarf:')">🧕 :woman_with_headscarf:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':bearded_person:')">🧔 :bearded_person:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':blond_hair:')">👱 :blond_hair:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':blond_hair_man:')">👱‍♂️ :blond_hair_man:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':blond_hair_woman:')">👱‍♀️ :blond_hair_woman:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':red_haired_man:')">👨‍🦰 :red_haired_man:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':red_haired_woman:')">👩‍🦰 :red_haired_woman:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':curly_haired_man:')">👨‍🦱 :curly_haired_man:</span></td><td></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':curly_haired_woman:')">👩‍🦱 :curly_haired_woman:</span></td><td></td><td></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':white_haired_man:')">👨‍🦳 :white_haired_man:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':white_haired_woman:')">👩‍🦳 :white_haired_woman:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':bald_man:')">👨‍🦲 :bald_man:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':bald_woman:')">👩‍🦲 :bald_woman:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':bald_person:')">🧑‍🦲 :bald_person:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':curly_haired_person:')">🧑‍🦱 :curly_haired_person:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':older_person:')">🧓 :older_person:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':older_man:')">👴 :older_man:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':older_woman:')">👵 :older_woman:</span></td></tr></tbody></table><h2 id="Animals-Nature"><a href="#Animals-Nature" class="headerlink" title="Animals &amp; Nature"></a>Animals &amp; Nature</h2><table><thead><tr><th>Emoji &amp; Text Code</th><th>Emoji &amp; Text Code</th><th>Emoji &amp; Text Code</th></tr></thead><tbody><tr><td><span class="copyable" onclick="copyToClipboard(this, ':dog:')">🐶 :dog:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':cat:')">🐱 :cat:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':mouse:')">🐭 :mouse:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':hamster:')">🐹 :hamster:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':rabbit:')">🐰 :rabbit:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':fox:')">🦊 :fox:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':bear:')">🐻 :bear:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':panda:')">🐼 :panda:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':koala:')">🐨 :koala:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':tiger:')">🐯 :tiger:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':lion:')">🦁 :lion:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':cow:')">🐮 :cow:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':pig:')">🐷 :pig:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':pig_nose:')">🐽 :pig_nose:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':frog:')">🐸 :frog:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':monkey_face:')">🐵 :monkey_face:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':see_no_evil:')">🙈 :see_no_evil:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':hear_no_evil:')">🙉 :hear_no_evil:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':speak_no_evil:')">🙊 :speak_no_evil:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':monkey:')">🐒 :monkey:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':gorilla:')">🦍 :gorilla:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':orangutan:')">🦧 :orangutan:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':chicken:')">🐔 :chicken:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':penguin:')">🐧 :penguin:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':bird:')">🐦 :bird:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':baby_chick:')">🐤 :baby_chick:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':hatching_chick:')">🐣 :hatching_chick:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':front_facing_baby_chick:')">🐥 :front_facing_baby_chick:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':duck:')">🦆 :duck:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':eagle:')">🦅 :eagle:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':owl:')">🦉 :owl:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':bat:')">🦇 :bat:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':wolf:')">🐺 :wolf:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':unicorn:')">🦄 :unicorn:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':bee:')">🐝 :bee:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':bug:')">🐛 :bug:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':butterfly:')">🦋 :butterfly:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':snail:')">🐌 :snail:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':lady_beetle:')">🐞 :lady_beetle:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':ant:')">🐜 :ant:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':mosquito:')">🦟 :mosquito:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':cricket:')">🦗 :cricket:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':spider:')">🕷 :spider:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':spider_web:')">🕸 :spider_web:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':scorpion:')">🦂 :scorpion:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':turtle:')">🐢 :turtle:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':snake:')">🐍 :snake:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':lizard:')">🦎 :lizard:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':octopus:')">🐙 :octopus:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':fish:')">🐠 :fish:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':blowfish:')">🐡 :blowfish:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':fish:')">🐟 :fish:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':dolphin:')">🐬 :dolphin:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':whale:')">🐳 :whale:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':whale:')">🐋 :whale:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':crocodile:')">🐊 :crocodile:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':shark:')">🦈 :shark:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':seal:')">🦭 :seal:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':shrimp:')">🦐 :shrimp:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':squid:')">🦑 :squid:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':shell:')">🐚 :shell:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':crab:')">🦀 :crab:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':lobster:')">🦞 :lobster:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':oyster:')">🦪 :oyster:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':orangutan:')">🦧 :orangutan:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':tiger:')">🐅 :tiger:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':leopard:')">🐆 :leopard:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':zebra:')">🦓 :zebra:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':gorilla:')">🦍 :gorilla:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':giraffe:')">🦒 :giraffe:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':rhinoceros:')">🦏 :rhinoceros:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':hippopotamus:')">🦛 :hippopotamus:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':elephant:')">🐘 :elephant:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':camel:')">🐪 :camel:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':camel:')">🐫 :camel:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':kangaroo:')">🦘 :kangaroo:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':sloth:')">🦥 :sloth:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':otter:')">🦦 :otter:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':skunk:')">🦨 :skunk:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':sloth:')">🦥 :sloth:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':otter:')">🦦 :otter:</span></td></tr></tbody></table><h2 id="Food-Drink"><a href="#Food-Drink" class="headerlink" title="Food &amp; Drink"></a>Food &amp; Drink</h2><table><thead><tr><th>Emoji &amp; Text Code</th><th>Emoji &amp; Text Code</th><th>Emoji &amp; Text Code</th></tr></thead><tbody><tr><td><span class="copyable" onclick="copyToClipboard(this, ':green_apple:')">🍏 :green_apple:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':apple:')">🍎 :apple:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':pear:')">🍐 :pear:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':tangerine:')">🍊 :tangerine:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':lemon:')">🍋 :lemon:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':banana:')">🍌 :banana:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':watermelon:')">🍉 :watermelon:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':grapes:')">🍇 :grapes:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':strawberry:')">🍓 :strawberry:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':melon:')">🍈 :melon:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':cherries:')">🍒 :cherries:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':peach:')">🍑 :peach:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':pineapple:')">🍍 :pineapple:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':mango:')">🥭 :mango:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':tomato:')">🍅 :tomato:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':eggplant:')">🍆 :eggplant:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':avocado:')">🥑 :avocado:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':broccoli:')">🥦 :broccoli:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':leafy_green:')">🥬 :leafy_green:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':cucumber:')">🥒 :cucumber:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':hot_pepper:')">🌶 :hot_pepper:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':bell_pepper:')">🫑 :bell_pepper:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':corn:')">🌽 :corn:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':carrot:')">🥕 :carrot:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':potato:')">🥔 :potato:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':sweet_potato:')">🍠 :sweet_potato:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':croissant:')">🥐 :croissant:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':bread:')">🍞 :bread:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':baguette_bread:')">🥖 :baguette_bread:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':pretzel:')">🥨 :pretzel:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':bagel:')">🥯 :bagel:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':pancakes:')">🥞 :pancakes:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':waffle:')">🧇 :waffle:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':bacon:')">🥓 :bacon:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':cut_of_meat:')">🥩 :cut_of_meat:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':poultry_leg:')">🍗 :poultry_leg:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':meat_on_bone:')">🍖 :meat_on_bone:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':hotdog:')">🌭 :hotdog:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':hamburger:')">🍔 :hamburger:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':fries:')">🍟 :fries:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':pizza:')">🍕 :pizza:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':sandwich:')">🥪 :sandwich:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':stuffed_flatbread:')">🥙 :stuffed_flatbread:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':egg:')">🥚 :egg:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':fried_egg:')">🍳 :fried_egg:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':shallow_pan_of_food:')">🥘 :shallow_pan_of_food:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':pot_of_food:')">🍲 :pot_of_food:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':bowl_with_spoon:')">🥣 :bowl_with_spoon:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':green_salad:')">🥗 :green_salad:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':popcorn:')">🍿 :popcorn:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':butter:')">🧈 :butter:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':salt:')">🧂 :salt:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':canned_food:')">🥫 :canned_food:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':bento_box:')">🍱 :bento_box:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':rice_cracker:')">🍘 :rice_cracker:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':rice_ball:')">🍙 :rice_ball:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':cooked_rice:')">🍚 :cooked_rice:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':curry_rice:')">🍛 :curry_rice:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':steaming_bowl:')">🍜 :steaming_bowl:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':spaghetti:')">🍝 :spaghetti:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':roasted_sweet_potato:')">🍠 :roasted_sweet_potato:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':oden:')">🍢 :oden:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':dango:')">🍡 :dango:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':soft_ice_cream:')">🍦 :soft_ice_cream:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':shaved_ice:')">🍧 :shaved_ice:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':ice_cream:')">🍨 :ice_cream:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':doughnut:')">🍩 :doughnut:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':cookie:')">🍪 :cookie:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':birthday_cake:')">🎂 :birthday_cake:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':shortcake:')">🍰 :shortcake:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':cupcake:')">🧁 :cupcake:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':pie:')">🥧 :pie:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':chocolate_bar:')">🍫 :chocolate_bar:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':candy:')">🍬 :candy:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':lollipop:')">🍭 :lollipop:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':custard:')">🍮 :custard:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':honey_pot:')">🍯 :honey_pot:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':baby_bottle:')">🍼 :baby_bottle:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':cup_with_straw:')">🥤 :cup_with_straw:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':teacup_without_handle:')">🍵 :teacup_without_handle:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':sake:')">🍶 :sake:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':bottle_with_popping_cork:')">🍾 :bottle_with_popping_cork:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':wine_glass:')">🍷 :wine_glass:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':cocktail_glass:')">🍸 :cocktail_glass:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':tropical_drink:')">🍹 :tropical_drink:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':beer_mug:')">🍺 :beer_mug:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':clinking_beer_mugs:')">🍻 :clinking_beer_mugs:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':clinking_glasses:')">🥂 :clinking_glasses:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':tumbler_glass:')">🥃 :tumbler_glass:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':mate:')">🧉 :mate:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':ice_cube:')">🧊 :ice_cube:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':spoon:')">🥄 :spoon:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':fork_and_knife:')">🍴 :fork_and_knife:</span></td></tr></tbody></table><h2 id="Activity"><a href="#Activity" class="headerlink" title="Activity"></a>Activity</h2><table><thead><tr><th>Emoji &amp; Text Code</th><th>Emoji &amp; Text Code</th><th>Emoji &amp; Text Code</th></tr></thead><tbody><tr><td><span class="copyable" onclick="copyToClipboard(this, ':soccer:')">⚽️ :soccer:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':basketball:')">🏀 :basketball:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':football:')">🏈 :football:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':baseball:')">⚾️ :baseball:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':tennis:')">🎾 :tennis:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':volleyball:')">🏐 :volleyball:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':rugby_football:')">🏉 :rugby_football:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':8ball:')">🎱 :8ball:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':ping_pong:')">🏓 :ping_pong:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':badminton:')">🏸 :badminton:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':goal_net:')">🥅 :goal_net:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':ice_hockey:')">🏒 :ice_hockey:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':field_hockey:')">🏑 :field_hockey:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':lacrosse:')">🥍 :lacrosse:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':cricket:')">🏏 :cricket:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':golf:')">⛳️ :golf:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':bow_and_arrow:')">🏹 :bow_and_arrow:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':fishing_pole_and_fish:')">🎣 :fishing_pole_and_fish:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':diving_mask:')">🤿 :diving_mask:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':man_swimming:')">🏊‍♂️ :man_swimming:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':woman_swimming:')">🏊‍♀️ :woman_swimming:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':man_surfing:')">🏄‍♂️ :man_surfing:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':woman_surfing:')">🏄‍♀️ :woman_surfing:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':man_golfing:')">🏌️‍♂️ :man_golfing:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':woman_golfing:')">🏌️‍♀️ :woman_golfing:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':horse_racing:')">🏇 :horse_racing:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':man_in_lotus_position:')">🧘‍♂️ :man_in_lotus_position:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':woman_in_lotus_position:')">🧘‍♀️ :woman_in_lotus_position:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':man_climbing:')">🧗‍♂️ :man_climbing:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':woman_climbing:')">🧗‍♀️ :woman_climbing:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':man_lifting_weights:')">🏋️‍♂️ :man_lifting_weights:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':woman_lifting_weights:')">🏋️‍♀️ :woman_lifting_weights:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':man_biking:')">🚴‍♂️ :man_biking:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':woman_biking:')">🚴‍♀️ :woman_biking:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':man_mountain_biking:')">🚵‍♂️ :man_mountain_biking:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':woman_mountain_biking:')">🚵‍♀️ :woman_mountain_biking:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':running_shirt_with_sash:')">🎽 :running_shirt_with_sash:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':medal_sports:')">🏅 :medal_sports:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':medal_military:')">🎖 :medal_military:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':1st_place_medal:')">🥇 :1st_place_medal:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':2nd_place_medal:')">🥈 :2nd_place_medal:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':3rd_place_medal:')">🥉 :3rd_place_medal:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':trophy:')">🏆 :trophy:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':rosette:')">🏵 :rosette:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':reminder_ribbon:')">🎗 :reminder_ribbon:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':ticket:')">🎫 :ticket:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':tickets:')">🎟 :tickets:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':circus_tent:')">🎪 :circus_tent:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':man_juggling:')">🤹‍♂️ :man_juggling:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':woman_juggling:')">🤹‍♀️ :woman_juggling:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':performing_arts:')">🎭 :performing_arts:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':art:')">🎨 :art:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':clapper:')">🎬 :clapper:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':microphone:')">🎤 :microphone:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':headphones:')">🎧 :headphones:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':musical_score:')">🎼 :musical_score:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':musical_keyboard:')">🎹 :musical_keyboard:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':drum:')">🥁 :drum:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':saxophone:')">🎷 :saxophone:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':trumpet:')">🎺 :trumpet:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':guitar:')">🎸 :guitar:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':violin:')">🎻 :violin:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':game_die:')">🎲 :game_die:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':dart:')">🎯 :dart:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':bowling:')">🎳 :bowling:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':video_game:')">🎮 :video_game:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':slot_machine:')">🎰 :slot_machine:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':puzzle_piece:')">🧩 :puzzle_piece:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':teddy_bear:')">🧸 :teddy_bear:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':carp_streamer:')">🎏 :carp_streamer:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':ribbon:')">🎀 :ribbon:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':gift:')">🎁 :gift:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':confetti_ball:')">🎊 :confetti_ball:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':tada:')">🎉 :tada:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':dolls:')">🎎 :dolls:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':wind_chime:')">🎐 :wind_chime:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':tanabata_tree:')">🎋 :tanabata_tree:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':pine_decoration:')">🎍 :pine_decoration:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':rice_scene:')">🎑 :rice_scene:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':joystick:')">🕹 :joystick:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':level_slider:')">🎚 :level_slider:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':control_knobs:')">🎛 :control_knobs:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':admission_tickets:')">🎟 :admission_tickets:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':ticket:')">🎫 :ticket:</span></td></tr></tbody></table><h2 id="Travel-Places"><a href="#Travel-Places" class="headerlink" title="Travel &amp; Places"></a>Travel &amp; Places</h2><table><thead><tr><th>Emoji &amp; Text Code</th><th>Emoji &amp; Text Code</th><th>Emoji &amp; Text Code</th></tr></thead><tbody><tr><td><span class="copyable" onclick="copyToClipboard(this, ':car:')">🚗 :car:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':taxi:')">🚕 :taxi:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':blue_car:')">🚙 :blue_car:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':bus:')">🚌 :bus:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':trolleybus:')">🚎 :trolleybus:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':racing_car:')">🏎 :racing_car:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':police_car:')">🚓 :police_car:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':ambulance:')">🚑 :ambulance:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':fire_engine:')">🚒 :fire_engine:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':minibus:')">🚐 :minibus:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':pickup_truck:')">🛻 :pickup_truck:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':truck:')">🚚 :truck:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':articulated_lorry:')">🚛 :articulated_lorry:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':tractor:')">🚜 :tractor:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':motorcycle:')">🏍 :motorcycle:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':motor_scooter:')">🛵 :motor_scooter:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':manual_wheelchair:')">🦽 :manual_wheelchair:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':motorized_wheelchair:')">🦼 :motorized_wheelchair:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':auto_rickshaw:')">🛺 :auto_rickshaw:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':bicycle:')">🚲 :bicycle:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':kick_scooter:')">🛴 :kick_scooter:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':skateboard:')">🛹 :skateboard:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':roller_skate:')">🛼 :roller_skate:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':rotating_light:')">🚨 :rotating_light:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':vertical_traffic_light:')">🚥 :vertical_traffic_light:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':traffic_light:')">🚦 :traffic_light:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':stop_sign:')">🛑 :stop_sign:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':construction:')">🚧 :construction:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':anchor:')">⚓️ :anchor:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':sailboat:')">⛵️ :sailboat:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':speedboat:')">🚤 :speedboat:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':passenger_ship:')">🛳 :passenger_ship:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':ferry:')">⛴ :ferry:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':motor_boat:')">🛥 :motor_boat:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':ship:')">🚢 :ship:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':airplane:')">✈️ :airplane:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':small_airplane:')">🛩 :small_airplane:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':flight_departure:')">🛫 :flight_departure:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':flight_arrival:')">🛬 :flight_arrival:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':rocket:')">🚀 :rocket:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':flying_saucer:')">🛸 :flying_saucer:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':helicopter:')">🚁 :helicopter:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':locomotive:')">🚂 :locomotive:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':tram:')">🚊 :tram:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':station:')">🚉 :station:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':mountain_railway:')">🚞 :mountain_railway:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':train:')">🚆 :train:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':bullettrain_side:')">🚄 :bullettrain_side:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':bullettrain_front:')">🚅 :bullettrain_front:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':light_rail:')">🚈 :light_rail:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':monorail:')">🚝 :monorail:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':tram_car:')">🚋 :tram_car:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':oncoming_bus:')">🚌 :oncoming_bus:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':oncoming_bus:')">🚍 :oncoming_bus:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':trolleybus:')">🚎 :trolleybus:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':busstop:')">🚏 :busstop:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':school:')">🏫 :school:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':office:')">🏢 :office:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':post_office:')">🏣 :post_office:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':european_post_office:')">🏤 :european_post_office:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':hospital:')">🏥 :hospital:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':bank:')">🏦 :bank:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':hotel:')">🏨 :hotel:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':love_hotel:')">🏩 :love_hotel:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':convenience_store:')">🏪 :convenience_store:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':school:')">🏫 :school:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':department_store:')">🏬 :department_store:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':factory:')">🏭 :factory:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':japanese_castle:')">🏯 :japanese_castle:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':european_castle:')">🏰 :european_castle:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':wedding:')">💒 :wedding:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':classical_building:')">🏛 :classical_building:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':building_construction:')">🏗 :building_construction:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':homes:')">🏘 :homes:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':derelict_house:')">🏚 :derelict_house:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':house:')">🏠 :house:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':house_with_garden:')">🏡 :house_with_garden:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':office:')">🏢 :office:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':hospital:')">🏥 :hospital:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':hotel:')">🏨 :hotel:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':convenience_store:')">🏪 :convenience_store:</span></td></tr></tbody></table><h2 id="Objects"><a href="#Objects" class="headerlink" title="Objects"></a>Objects</h2><table><thead><tr><th>Emoji &amp; Text Code</th><th>Emoji &amp; Text Code</th><th>Emoji &amp; Text Code</th></tr></thead><tbody><tr><td><span class="copyable" onclick="copyToClipboard(this, ':iphone:')">📱 :iphone:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':calling:')">📲 :calling:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':computer:')">💻 :computer:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':desktop_computer:')">🖥 :desktop_computer:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':printer:')">🖨 :printer:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':keyboard:')">⌨️ :keyboard:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':computer_mouse:')">🖱 :computer_mouse:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':trackball:')">🖲 :trackball:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':minidisc:')">💽 :minidisc:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':floppy_disk:')">💾 :floppy_disk:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':cd:')">💿 :cd:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':dvd:')">📀 :dvd:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':vhs:')">📼 :vhs:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':camera:')">📷 :camera:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':camera_with_flash:')">📸 :camera_with_flash:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':video_camera:')">📹 :video_camera:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':movie_camera:')">🎥 :movie_camera:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':film_projector:')">📽 :film_projector:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':film_strip:')">🎞 :film_strip:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':telephone_receiver:')">📞 :telephone_receiver:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':pager:')">📟 :pager:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':fax:')">📠 :fax:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':tv:')">📺 :tv:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':radio:')">📻 :radio:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':studio_microphone:')">🎙 :studio_microphone:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':level_slider:')">🎚 :level_slider:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':control_knobs:')">🎛 :control_knobs:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':stopwatch:')">⏱ :stopwatch:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':timer_clock:')">⏲ :timer_clock:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':alarm_clock:')">⏰ :alarm_clock:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':mantelpiece_clock:')">🕰 :mantelpiece_clock:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':hourglass_flowing_sand:')">⏳ :hourglass_flowing_sand:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':hourglass:')">⌛ :hourglass:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':battery:')">🔋 :battery:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':electric_plug:')">🔌 :electric_plug:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':bulb:')">💡 :bulb:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':flashlight:')">🔦 :flashlight:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':candle:')">🕯 :candle:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':wastebasket:')">🗑 :wastebasket:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':oil_drum:')">🛢 :oil_drum:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':money_with_wings:')">💸 :money_with_wings:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':dollar:')">💵 :dollar:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':yen:')">💴 :yen:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':euro:')">💶 :euro:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':pound:')">💷 :pound:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':moneybag:')">💰 :moneybag:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':credit_card:')">💳 :credit_card:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':gem:')">💎 :gem:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':balance_scale:')">⚖️ :balance_scale:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':wrench:')">🔧 :wrench:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':hammer:')">🔨 :hammer:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':hammer_and_wrench:')">🛠 :hammer_and_wrench:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':pick:')">⛏ :pick:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':axe:')">🪓 :axe:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':nut_and_bolt:')">🔩 :nut_and_bolt:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':gear:')">⚙️ :gear:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':screwdriver:')">🪛 :screwdriver:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':gun:')">🔫 :gun:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':bomb:')">💣 :bomb:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':firecracker:')">🧨 :firecracker:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':boomerang:')">🪃 :boomerang:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':saw:')">🪚 :saw:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':toolbox:')">🧰 :toolbox:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':magnet:')">🧲 :magnet:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':microscope:')">🔬 :microscope:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':telescope:')">🔭 :telescope:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':satellite:')">📡 :satellite:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':syringe:')">💉 :syringe:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':pill:')">💊 :pill:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':drop_of_blood:')">🩸 :drop_of_blood:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':adhesive_bandage:')">🩹 :adhesive_bandage:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':stethoscope:')">🩺 :stethoscope:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':door:')">🚪 :door:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':bed:')">🛏 :bed:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':couch_and_lamp:')">🛋 :couch_and_lamp:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':chair:')">🪑 :chair:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':toilet:')">🚽 :toilet:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':shower:')">🚿 :shower:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':bathtub:')">🛁 :bathtub:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':plunger:')">🪠 :plunger:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':lotion_bottle:')">🧴 :lotion_bottle:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':safety_pin:')">🧷 :safety_pin:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':broom:')">🧹 :broom:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':basket:')">🧺 :basket:</span></td></tr></tbody></table><h2 id="Symbols"><a href="#Symbols" class="headerlink" title="Symbols"></a>Symbols</h2><table><thead><tr><th>Emoji &amp; Text Code</th><th>Emoji &amp; Text Code</th><th>Emoji &amp; Text Code</th></tr></thead><tbody><tr><td><span class="copyable" onclick="copyToClipboard(this, ':heart:')">❤️ :heart:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':orange_heart:')">🧡 :orange_heart:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':yellow_heart:')">💛 :yellow_heart:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':green_heart:')">💚 :green_heart:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':blue_heart:')">💙 :blue_heart:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':purple_heart:')">💜 :purple_heart:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':black_heart:')">🖤 :black_heart:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':white_heart:')">🤍 :white_heart:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':brown_heart:')">🤎 :brown_heart:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':broken_heart:')">💔 :broken_heart:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':heart_exclamation:')">❣️ :heart_exclamation:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':two_hearts:')">💕 :two_hearts:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this,':revolving_hearts:')">💞 :revolving_hearts:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':heartbeat:')">💓 :heartbeat:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':heartpulse:')">💗 :heartpulse:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':sparkling_heart:')">💖 :sparkling_heart:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':cupid:')">💘 :cupid:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':gift_heart:')">💝 :gift_heart:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':heart_decoration:')">💟 :heart_decoration:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':peace_symbol:')">☮️ :peace_symbol:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':cross:')">✝️ :cross:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':star_and_crescent:')">☪️ :star_and_crescent:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':om:')">🕉 :om:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':wheel_of_dharma:')">☸️ :wheel_of_dharma:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':star_of_david:')">✡️ :star_of_david:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':six_pointed_star:')">🔯 :six_pointed_star:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':menorah:')">🕎 :menorah:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':yin_yang:')">☯️ :yin_yang:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':orthodox_cross:')">☦️ :orthodox_cross:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':place_of_worship:')">🛐 :place_of_worship:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':ophiuchus:')">⛎ :ophiuchus:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':aries:')">♈️ :aries:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':taurus:')">♉️ :taurus:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':gemini:')">♊️ :gemini:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':cancer:')">♋️ :cancer:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':leo:')">♌️ :leo:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':virgo:')">♍️ :virgo:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':libra:')">♎️ :libra:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':scorpio:')">♏️ :scorpio:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':sagittarius:')">♐️ :sagittarius:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':capricorn:')">♑️ :capricorn:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':aquarius:')">♒️ :aquarius:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':pisces:')">♓️ :pisces:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':id:')">🆔 :id:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':ideograph_advantage:')">🉐 :ideograph_advantage:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':u7a7a:')">🈳 :u7a7a:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':u5408:')">🈴 :u5408:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':u6e80:')">🈵 :u6e80:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':u7981:')">🈲 :u7981:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':u6708:')">🈷️ :u6708:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':u6709:')">🈶 :u6709:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':u55b6:')">🈺 :u55b6:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':u7121:')">🈚️ :u7121:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':u7533:')">🈸 :u7533:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':u5272:')">🈂️ :u5272:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':u6307:')">🈁 :u6307:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':cl:')">🆑 :cl:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':sos:')">🆘 :sos:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':ok:')">🆗 :ok:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':up:')">🆙 :up:</span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':vs:')">🆚 :vs:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':u5272:')">🈂️ :u5272:</span></td><td><span class="copyable" onclick="copyToClipboard(this, ':ab:')">🆎 :ab:</span></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> etc </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Node.js pnpm</title>
      <link href="/cli/4/"/>
      <url>/cli/4/</url>
      
        <content type="html"><![CDATA[<h1 id="pnpm-빠르고-효율적인-패키지-관리자"><a href="#pnpm-빠르고-효율적인-패키지-관리자" class="headerlink" title="pnpm: 빠르고 효율적인 패키지 관리자"></a>pnpm: 빠르고 효율적인 패키지 관리자</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 빠르고 효율적인 패키지 관리자 도구인 pnpm에 대해 알아보겠습니다. pnpm의 역할과 필요성, 설치 및 설정 방법, 그리고 기본 사용법을 알아보겠습니다.</p><h2 id="1-pnpm-소개"><a href="#1-pnpm-소개" class="headerlink" title="1. pnpm 소개"></a>1. pnpm 소개</h2><h3 id="pnpm이란-무엇인가"><a href="#pnpm이란-무엇인가" class="headerlink" title="pnpm이란 무엇인가?"></a>pnpm이란 무엇인가?</h3><p>pnpm은 Node.js 패키지 관리 도구로, 설치 속도가 빠르고 디스크 공간을 절약할 수 있는 기능을 제공합니다. pnpm은 패키지의 중복 설치를 방지하고, 패키지 간의 의존성을 효율적으로 관리합니다.</p><h3 id="pnpm의-역할과-필요성"><a href="#pnpm의-역할과-필요성" class="headerlink" title="pnpm의 역할과 필요성"></a>pnpm의 역할과 필요성</h3><ul><li><strong>빠른 설치</strong>: 기존의 NPM이나 Yarn보다 더 빠르게 패키지를 설치할 수 있습니다.</li><li><strong>디스크 공간 절약</strong>: 동일한 패키지를 여러 프로젝트에서 공유하여 디스크 공간을 절약할 수 있습니다.</li><li><strong>효율적인 의존성 관리</strong>: 패키지의 의존성을 효율적으로 관리하고, 중복 설치를 방지합니다.</li></ul><h2 id="2-설치-및-설정"><a href="#2-설치-및-설정" class="headerlink" title="2. 설치 및 설정"></a>2. 설치 및 설정</h2><h3 id="pnpm-설치-방법"><a href="#pnpm-설치-방법" class="headerlink" title="pnpm 설치 방법"></a>pnpm 설치 방법</h3><p>pnpm을 설치하려면 다음 명령어를 사용합니다.</p><pre><code class="highlight bash">npm install -g pnpm</code></pre><p>설치가 완료되면 <code>pnpm -v</code> 명령어로 설치된 버전을 확인할 수 있습니다.</p><pre><code class="highlight bash">pnpm -v</code></pre><h2 id="3-기본-사용법"><a href="#3-기본-사용법" class="headerlink" title="3. 기본 사용법"></a>3. 기본 사용법</h2><h3 id="패키지-설치"><a href="#패키지-설치" class="headerlink" title="패키지 설치"></a>패키지 설치</h3><ul><li><strong>패키지 설치</strong>: <code>pnpm install</code></li></ul><pre><code class="highlight bash">pnpm install</code></pre><ul><li><strong>특정 패키지 추가</strong>: <code>pnpm add &lt;package-name&gt;</code></li></ul><pre><code class="highlight bash">pnpm add express</code></pre><ul><li><strong>특정 버전의 패키지 추가</strong>: <code>pnpm add &lt;package-name&gt;@&lt;version&gt;</code></li></ul><pre><code class="highlight bash">pnpm add express@4.17.1</code></pre><h3 id="패키지-제거"><a href="#패키지-제거" class="headerlink" title="패키지 제거"></a>패키지 제거</h3><ul><li><strong>패키지 제거</strong>: <code>pnpm remove &lt;package-name&gt;</code></li></ul><pre><code class="highlight bash">pnpm remove express</code></pre><h3 id="패키지-업데이트"><a href="#패키지-업데이트" class="headerlink" title="패키지 업데이트"></a>패키지 업데이트</h3><ul><li><strong>패키지 업데이트</strong>: <code>pnpm update</code></li></ul><pre><code class="highlight bash">pnpm update</code></pre><h2 id="4-고급-사용법"><a href="#4-고급-사용법" class="headerlink" title="4. 고급 사용법"></a>4. 고급 사용법</h2><h3 id="전역-패키지-설치"><a href="#전역-패키지-설치" class="headerlink" title="전역 패키지 설치"></a>전역 패키지 설치</h3><ul><li><strong>전역 패키지 설치</strong>: <code>pnpm add -g &lt;package-name&gt;</code></li></ul><pre><code class="highlight bash">pnpm add -g nodemon</code></pre><h3 id="패키지-검사"><a href="#패키지-검사" class="headerlink" title="패키지 검사"></a>패키지 검사</h3><ul><li><strong>보안 감사</strong>: <code>pnpm audit</code></li></ul><pre><code class="highlight bash">pnpm audit</code></pre><ul><li><strong>업데이트 필요한 패키지 확인</strong>: <code>pnpm outdated</code></li></ul><pre><code class="highlight bash">pnpm outdated</code></pre><h3 id="스크립트-실행"><a href="#스크립트-실행" class="headerlink" title="스크립트 실행"></a>스크립트 실행</h3><ul><li><strong>스크립트 실행</strong>: <code>pnpm run &lt;script-name&gt;</code></li></ul><pre><code class="highlight json"><span class="comment">// package.json</span><span class="punctuation">&#123;</span>  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node app.js&quot;</span><span class="punctuation">,</span>    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span>  <span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></code></pre><pre><code class="highlight bash">pnpm run start</code></pre><h2 id="5-실습-예제"><a href="#5-실습-예제" class="headerlink" title="5. 실습 예제"></a>5. 실습 예제</h2><h3 id="프로젝트-생성-및-pnpm-사용"><a href="#프로젝트-생성-및-pnpm-사용" class="headerlink" title="프로젝트 생성 및 pnpm 사용"></a>프로젝트 생성 및 pnpm 사용</h3><ol><li><strong>새 프로젝트 생성</strong>: 새로운 디렉토리를 만들고 이동합니다.</li></ol><pre><code class="highlight bash"><span class="built_in">mkdir</span> my-pnpm-project<span class="built_in">cd</span> my-pnpm-project</code></pre><ol start="2"><li><strong>프로젝트 초기화</strong>: <code>pnpm init</code> 명령어를 사용하여 프로젝트를 초기화합니다.</li></ol><pre><code class="highlight bash">pnpm init</code></pre><ol start="3"><li><strong>패키지 설치</strong>: 필요한 패키지를 설치합니다.</li></ol><pre><code class="highlight bash">pnpm add express</code></pre><ol start="4"><li><strong>스크립트 설정</strong>: <code>package.json</code> 파일에 스크립트를 추가합니다.</li></ol><pre><code class="highlight json"><span class="comment">// package.json</span><span class="punctuation">&#123;</span>  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;my-pnpm-project&quot;</span><span class="punctuation">,</span>  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span>  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span>  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span><span class="punctuation">,</span>  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node app.js&quot;</span><span class="punctuation">,</span>    <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;nodemon app.js&quot;</span>  <span class="punctuation">&#125;</span><span class="punctuation">,</span>  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>    <span class="attr">&quot;express&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.17.1&quot;</span>  <span class="punctuation">&#125;</span><span class="punctuation">,</span>  <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>    <span class="attr">&quot;nodemon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.0.7&quot;</span>  <span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></code></pre><ol start="5"><li><strong>애플리케이션 실행</strong>: <code>pnpm run start</code> 또는 <code>pnpm run dev</code> 명령어를 사용하여 애플리케이션을 실행합니다.</li></ol><pre><code class="highlight bash">pnpm run startpnpm run dev</code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 pnpm의 기본 개념부터 설치 방법, 기본 및 고급 사용법, 추가 명령어까지 다루었습니다. pnpm을 통해 Node.js 프로젝트를 빠르고 효율적으로 관리하고 개발할 수 있습니다. 다음 시간에는 또 다른 유용한 CLI 도구를 소개하겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> CLI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>미디에이터 패턴 (Mediator Pattern)</title>
      <link href="/design-pattern/11/"/>
      <url>/design-pattern/11/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-미디에이터-패턴-Mediator-Pattern"><a href="#JavaScript-미디에이터-패턴-Mediator-Pattern" class="headerlink" title="JavaScript 미디에이터 패턴 (Mediator Pattern)"></a>JavaScript 미디에이터 패턴 (Mediator Pattern)</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 자바스크립트 디자인 패턴 중 하나인 미디에이터 패턴(Mediator Pattern)에 대해 알아보겠습니다. 미디에이터 패턴은 객체 간의 복잡한 상호작용을 간소화하고, 객체들이 서로 직접 통신하지 않고 중재자를 통해 통신하도록 하는 패턴입니다.</p><h2 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h2><h3 id="미디에이터-패턴이란"><a href="#미디에이터-패턴이란" class="headerlink" title="미디에이터 패턴이란?"></a>미디에이터 패턴이란?</h3><p>미디에이터 패턴(Mediator Pattern)은 객체 간의 통신을 중재하는 객체(미디에이터)를 두어 객체 간의 직접적인 상호작용을 줄이는 디자인 패턴입니다. 이 패턴은 객체들이 서로 직접 통신하지 않고 미디에이터를 통해 통신하게 함으로써, 객체 간의 결합도를 낮추고 코드의 유지보수성을 높입니다.</p><h3 id="미디에이터-패턴의-장점"><a href="#미디에이터-패턴의-장점" class="headerlink" title="미디에이터 패턴의 장점"></a>미디에이터 패턴의 장점</h3><ul><li><strong>결합도 감소</strong>: 객체 간의 직접적인 상호작용을 줄여 결합도를 낮춥니다.</li><li><strong>유지보수성 향상</strong>: 객체 간의 상호작용을 중앙 집중식으로 관리하여 코드의 유지보수성을 높입니다.</li><li><strong>복잡성 관리</strong>: 객체 간의 복잡한 상호작용을 미디에이터를 통해 간소화합니다.</li></ul><h2 id="예시-코드"><a href="#예시-코드" class="headerlink" title="예시 코드"></a>예시 코드</h2><p>이번 예제에서는 RPG 게임에서 미디에이터 패턴을 사용하여 여러 캐릭터 간의 상호작용을 관리하는 방법을 구현해보겠습니다.</p><h3 id="1-캐릭터-클래스들"><a href="#1-캐릭터-클래스들" class="headerlink" title="1. 캐릭터 클래스들"></a>1. 캐릭터 클래스들</h3><pre><code class="highlight javascript"><span class="keyword">class</span> <span class="title class_">Warrior</span> &#123;  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;    <span class="variable language_">this</span>.<span class="property">name</span> = name;    <span class="variable language_">this</span>.<span class="property">mediator</span> = <span class="literal">null</span>;  &#125;  <span class="title function_">attack</span>(<span class="params"></span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> the Warrior attacks!`</span>);    <span class="variable language_">this</span>.<span class="property">mediator</span>.<span class="title function_">notify</span>(<span class="variable language_">this</span>, <span class="string">&quot;attack&quot;</span>);  &#125;  <span class="title function_">defend</span>(<span class="params"></span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> the Warrior defends!`</span>);  &#125;  <span class="title function_">setMediator</span>(<span class="params">mediator</span>) &#123;    <span class="variable language_">this</span>.<span class="property">mediator</span> = mediator;  &#125;&#125;<span class="keyword">class</span> <span class="title class_">Mage</span> &#123;  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;    <span class="variable language_">this</span>.<span class="property">name</span> = name;    <span class="variable language_">this</span>.<span class="property">mediator</span> = <span class="literal">null</span>;  &#125;  <span class="title function_">castSpell</span>(<span class="params"></span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> the Mage casts a spell!`</span>);    <span class="variable language_">this</span>.<span class="property">mediator</span>.<span class="title function_">notify</span>(<span class="variable language_">this</span>, <span class="string">&quot;castSpell&quot;</span>);  &#125;  <span class="title function_">heal</span>(<span class="params"></span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> the Mage heals!`</span>);  &#125;  <span class="title function_">setMediator</span>(<span class="params">mediator</span>) &#123;    <span class="variable language_">this</span>.<span class="property">mediator</span> = mediator;  &#125;&#125;</code></pre><h3 id="2-미디에이터-클래스"><a href="#2-미디에이터-클래스" class="headerlink" title="2. 미디에이터 클래스"></a>2. 미디에이터 클래스</h3><pre><code class="highlight javascript"><span class="keyword">class</span> <span class="title class_">Mediator</span> &#123;  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;    <span class="variable language_">this</span>.<span class="property">warrior</span> = <span class="literal">null</span>;    <span class="variable language_">this</span>.<span class="property">mage</span> = <span class="literal">null</span>;  &#125;  <span class="title function_">setWarrior</span>(<span class="params">warrior</span>) &#123;    <span class="variable language_">this</span>.<span class="property">warrior</span> = warrior;    <span class="variable language_">this</span>.<span class="property">warrior</span>.<span class="title function_">setMediator</span>(<span class="variable language_">this</span>);  &#125;  <span class="title function_">setMage</span>(<span class="params">mage</span>) &#123;    <span class="variable language_">this</span>.<span class="property">mage</span> = mage;    <span class="variable language_">this</span>.<span class="property">mage</span>.<span class="title function_">setMediator</span>(<span class="variable language_">this</span>);  &#125;  <span class="title function_">notify</span>(<span class="params">sender, event</span>) &#123;    <span class="keyword">if</span> (event === <span class="string">&quot;attack&quot;</span>) &#123;      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Mediator reacts on attack and triggers Mage&#x27;s response.&quot;</span>);      <span class="variable language_">this</span>.<span class="property">mage</span>.<span class="title function_">heal</span>();    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event === <span class="string">&quot;castSpell&quot;</span>) &#123;      <span class="variable language_">console</span>.<span class="title function_">log</span>(        <span class="string">&quot;Mediator reacts on castSpell and triggers Warrior&#x27;s response.&quot;</span>      );      <span class="variable language_">this</span>.<span class="property">warrior</span>.<span class="title function_">defend</span>();    &#125;  &#125;&#125;</code></pre><h3 id="3-RPG-게임에서의-활용-예제"><a href="#3-RPG-게임에서의-활용-예제" class="headerlink" title="3. RPG 게임에서의 활용 예제"></a>3. RPG 게임에서의 활용 예제</h3><p>미디에이터 패턴을 사용하여 RPG 게임에서 여러 캐릭터 간의 상호작용을 관리하는 예제입니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> mediator = <span class="keyword">new</span> <span class="title class_">Mediator</span>();<span class="keyword">const</span> warrior = <span class="keyword">new</span> <span class="title class_">Warrior</span>(<span class="string">&quot;Arthas&quot;</span>);<span class="keyword">const</span> mage = <span class="keyword">new</span> <span class="title class_">Mage</span>(<span class="string">&quot;Jaina&quot;</span>);mediator.<span class="title function_">setWarrior</span>(warrior);mediator.<span class="title function_">setMage</span>(mage);warrior.<span class="title function_">attack</span>(); <span class="comment">// Arthas the Warrior attacks! -&gt; Mediator reacts on attack and triggers Mage&#x27;s response. -&gt; Jaina the Mage heals!</span>mage.<span class="title function_">castSpell</span>(); <span class="comment">// Jaina the Mage casts a spell! -&gt; Mediator reacts on castSpell and triggers Warrior&#x27;s response. -&gt; Arthas the Warrior defends!</span></code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 미디에이터 패턴의 개념과 사용 예제에 대해 알아보았습니다. 미디에이터 패턴은 객체 간의 복잡한 상호작용을 간소화하고, 객체들이 서로 직접 통신하지 않고 중재자를 통해 통신하도록 하는 패턴입니다. RPG 게임 예제를 통해 미디에이터 패턴을 실제로 어떻게 활용할 수 있는지 살펴보았습니다. 미디에이터 패턴을 사용하면 코드의 결합도를 낮추고 유지보수성을 높일 수 있습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> 디자인패턴 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Git emoji 모음</title>
      <link href="/emoji/git/"/>
      <url>/emoji/git/</url>
      
        <content type="html"><![CDATA[<details><summary>키워드</summary>Git 이모지 모음Git emoji listGit 이모지 코드Git emoji codesGit 이모지 사용법How to use Git emojisGit 이모지 다운로드Download Git emojisGit 이모지 추천Best Git emojisGit 이모지 복사Copy Git emojisGit 이모지 목록List of Git emojisGit 이모지 컬렉션Git emoji collectionGit 이모지 검색Search Git emojisGit 인기 이모지Popular Git emojis</details><h1 id="Git-emoji-모음"><a href="#Git-emoji-모음" class="headerlink" title="Git emoji 모음"></a>Git emoji 모음</h1><blockquote><p>이모지를 누르시면 클립보드에 복사됩니다! (Click the emoji and it will be copied on the clipboard!)</p></blockquote><script>  function copyToClipboard(element, text) {    navigator.clipboard.writeText(text).then(function() {      var originalText = element.innerHTML;      element.innerHTML = "Copied! 📝";      setTimeout(function() {        element.innerHTML = originalText;      }, 1000);    });  }</script><table><thead><tr><th>Emoji &amp; Text Code</th><th>Emoji &amp; Text Code</th><th>Emoji &amp; Text Code</th></tr></thead><tbody><tr><td><span class="copyable" onclick="copyToClipboard(this, ':art:')">🎨 :art: </span></td><td><span class="copyable" onclick="copyToClipboard(this, ':rocket:')">🚀 :rocket: </span></td><td><span class="copyable" onclick="copyToClipboard(this, ':zap:')">⚡ :zap: </span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':bug:')">🐛 :bug: </span></td><td><span class="copyable" onclick="copyToClipboard(this, ':fire:')">🔥 :fire: </span></td><td><span class="copyable" onclick="copyToClipboard(this, ':memo:')">📝 :memo: </span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':ambulance:')">🚑 :ambulance: </span></td><td><span class="copyable" onclick="copyToClipboard(this, ':sparkles:')">✨ :sparkles: </span></td><td><span class="copyable" onclick="copyToClipboard(this, ':penguin:')">🐧 :penguin: </span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':house:')">🏠 :house: </span></td><td><span class="copyable" onclick="copyToClipboard(this, ':construction_worker:')">👷 :construction_worker: </span></td><td><span class="copyable" onclick="copyToClipboard(this, ':tada:')">🎉 :tada: </span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':construction:')">🚧 :construction: </span></td><td><span class="copyable" onclick="copyToClipboard(this, ':green_heart:')">💚 :green_heart: </span></td><td><span class="copyable" onclick="copyToClipboard(this, ':lock:')">🔒 :lock: </span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':bookmark:')">🔖 :bookmark: </span></td><td><span class="copyable" onclick="copyToClipboard(this, ':rotating_light:')">🚨 :rotating_light: </span></td><td><span class="copyable" onclick="copyToClipboard(this, ':traffic_light:')">🚦 :traffic_light: </span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':lipstick:')">💄 :lipstick: </span></td><td><span class="copyable" onclick="copyToClipboard(this, ':shower:')">🚿 :shower: </span></td><td><span class="copyable" onclick="copyToClipboard(this, ':whale:')">🐳 :whale: </span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':heavy_plus_sign:')">➕ :heavy_plus_sign: </span></td><td><span class="copyable" onclick="copyToClipboard(this, ':heavy_minus_sign:')">➖ :heavy_minus_sign: </span></td><td><span class="copyable" onclick="copyToClipboard(this, ':hammer_and_wrench:')">🛠 :hammer_and_wrench: </span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':wrench:')">🔧 :wrench: </span></td><td><span class="copyable" onclick="copyToClipboard(this, ':hammer:')">🔨 :hammer: </span></td><td><span class="copyable" onclick="copyToClipboard(this, ':globe_with_meridians:')">🌐 :globe_with_meridians: </span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':scissors:')">✂️ :scissors: </span></td><td><span class="copyable" onclick="copyToClipboard(this, ':twisted_rightwards_arrows:')">🔀 :twisted_rightwards_arrows: </span></td><td><span class="copyable" onclick="copyToClipboard(this, ':wastebasket:')">🗑 :wastebasket: </span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':recycle:')">♻️ :recycle: </span></td><td><span class="copyable" onclick="copyToClipboard(this, ':loud_sound:')">🔊 :loud_sound: </span></td><td><span class="copyable" onclick="copyToClipboard(this, ':mute:')">🔇 :mute: </span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':busts_in_silhouette:')">👥 :busts_in_silhouette: </span></td><td><span class="copyable" onclick="copyToClipboard(this, ':children_crossing:')">🚸 :children_crossing: </span></td><td><span class="copyable" onclick="copyToClipboard(this, ':checkered_flag:')">🏁 :checkered_flag: </span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':hammer:')">🔨 :hammer: </span></td><td><span class="copyable" onclick="copyToClipboard(this, ':package:')">📦 :package: </span></td><td><span class="copyable" onclick="copyToClipboard(this, ':pencil2:')">✏️ :pencil2: </span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':alien:')">👽 :alien: </span></td><td><span class="copyable" onclick="copyToClipboard(this, ':rocket:')">🚀 :rocket: </span></td><td><span class="copyable" onclick="copyToClipboard(this, ':chart_with_upwards_trend:')">📈 :chart_with_upwards_trend: </span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':seedling:')">🌱 :seedling: </span></td><td><span class="copyable" onclick="copyToClipboard(this, ':penguin:')">🐧 :penguin: </span></td><td><span class="copyable" onclick="copyToClipboard(this, ':apple:')">🍎 :apple: </span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':green_apple:')">🍏 :green_apple: </span></td><td><span class="copyable" onclick="copyToClipboard(this, ':scissors:')">✂️ :scissors: </span></td><td><span class="copyable" onclick="copyToClipboard(this, ':hammer_and_wrench:')">🛠 :hammer_and_wrench: </span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':page_facing_up:')">📄 :page_facing_up: </span></td><td><span class="copyable" onclick="copyToClipboard(this, ':mag:')">🔍 :mag: </span></td><td><span class="copyable" onclick="copyToClipboard(this, ':wrench:')">🔧 :wrench: </span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':boom:')">💥 :boom: </span></td><td><span class="copyable" onclick="copyToClipboard(this, ':fire:')">🔥 :fire: </span></td><td><span class="copyable" onclick="copyToClipboard(this, ':sparkles:')">✨ :sparkles: </span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':construction:')">🚧 :construction: </span></td><td><span class="copyable" onclick="copyToClipboard(this, ':art:')">🎨 :art: </span></td><td><span class="copyable" onclick="copyToClipboard(this, ':ambulance:')">🚑 :ambulance: </span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':bug:')">🐛 :bug: </span></td><td><span class="copyable" onclick="copyToClipboard(this, ':lock:')">🔒 :lock: </span></td><td><span class="copyable" onclick="copyToClipboard(this, ':bookmark:')">🔖 :bookmark: </span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':bulb:')">💡 :bulb: </span></td><td><span class="copyable" onclick="copyToClipboard(this, ':books:')">📚 :books: </span></td><td><span class="copyable" onclick="copyToClipboard(this, ':hammer:')">🔨 :hammer: </span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':wrench:')">🔧 :wrench: </span></td><td><span class="copyable" onclick="copyToClipboard(this, ':memo:')">📝 :memo: </span></td><td><span class="copyable" onclick="copyToClipboard(this, ':package:')">📦 :package: </span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':scissors:')">✂️ :scissors: </span></td><td><span class="copyable" onclick="copyToClipboard(this, ':arrows_counterclockwise:')">🔄 :arrows_counterclockwise: </span></td><td><span class="copyable" onclick="copyToClipboard(this, ':wastebasket:')">🗑 :wastebasket: </span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':busts_in_silhouette:')">👥 :busts_in_silhouette: </span></td><td><span class="copyable" onclick="copyToClipboard(this, ':chart_with_upwards_trend:')">📈 :chart_with_upwards_trend: </span></td><td><span class="copyable" onclick="copyToClipboard(this, ':rocket:')">🚀 :rocket: </span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':construction_worker:')">👷 :construction_worker: </span></td><td><span class="copyable" onclick="copyToClipboard(this, ':children_crossing:')">🚸 :children_crossing: </span></td><td><span class="copyable" onclick="copyToClipboard(this, ':art:')">🎨 :art: </span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':tada:')">🎉 :tada: </span></td><td><span class="copyable" onclick="copyToClipboard(this, ':sparkles:')">✨ :sparkles: </span></td><td><span class="copyable" onclick="copyToClipboard(this, ':seedling:')">🌱 :seedling: </span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':package:')">📦 :package: </span></td><td><span class="copyable" onclick="copyToClipboard(this, ':wrench:')">🔧 :wrench: </span></td><td><span class="copyable" onclick="copyToClipboard(this, ':hammer:')">🔨 :hammer: </span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':pencil2:')">✏️ :pencil2: </span></td><td><span class="copyable" onclick="copyToClipboard(this, ':hammer_and_wrench:')">🛠 :hammer_and_wrench: </span></td><td><span class="copyable" onclick="copyToClipboard(this, ':arrows_counterclockwise:')">🔄 :arrows_counterclockwise: </span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':package:')">📦 :package: </span></td><td><span class="copyable" onclick="copyToClipboard(this, ':hammer:')">🔨 :hammer: </span></td><td><span class="copyable" onclick="copyToClipboard(this, ':wrench:')">🔧 :wrench: </span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':bulb:')">💡 :bulb: </span></td><td><span class="copyable" onclick="copyToClipboard(this, ':memo:')">📝 :memo: </span></td><td><span class="copyable" onclick="copyToClipboard(this, ':page_facing_up:')">📄 :page_facing_up: </span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':package:')">📦 :package: </span></td><td><span class="copyable" onclick="copyToClipboard(this, ':construction:')">🚧 :construction: </span></td><td><span class="copyable" onclick="copyToClipboard(this, ':lock:')">🔒 :lock: </span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':bookmark:')">🔖 :bookmark: </span></td><td><span class="copyable" onclick="copyToClipboard(this, ':bug:')">🐛 :bug: </span></td><td><span class="copyable" onclick="copyToClipboard(this, ':sparkles:')">✨ :sparkles: </span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':wrench:')">🔧 :wrench: </span></td><td><span class="copyable" onclick="copyToClipboard(this, ':hammer:')">🔨 :hammer: </span></td><td><span class="copyable" onclick="copyToClipboard(this, ':memo:')">📝 :memo: </span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':package:')">📦 :package: </span></td><td><span class="copyable" onclick="copyToClipboard(this, ':scissors:')">✂️ :scissors: </span></td><td><span class="copyable" onclick="copyToClipboard(this, ':arrows_counterclockwise:')">🔄 :arrows_counterclockwise: </span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':wastebasket:')">🗑 :wastebasket: </span></td><td><span class="copyable" onclick="copyToClipboard(this, ':busts_in_silhouette:')">👥 :busts_in_silhouette: </span></td><td><span class="copyable" onclick="copyToClipboard(this, ':rocket:')">🚀 :rocket: </span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':chart_with_upwards_trend:')">📈 :chart_with_upwards_trend: </span></td><td><span class="copyable" onclick="copyToClipboard(this, ':art:')">🎨 :art: </span></td><td><span class="copyable" onclick="copyToClipboard(this, ':hammer_and_wrench:')">🛠 :hammer_and_wrench: </span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':tada:')">🎉 :tada: </span></td><td><span class="copyable" onclick="copyToClipboard(this, ':sparkles:')">✨ :sparkles: </span></td><td><span class="copyable" onclick="copyToClipboard(this, ':seedling:')">🌱 :seedling: </span></td></tr><tr><td><span class="copyable" onclick="copyToClipboard(this, ':penguin:')">🐧 :penguin: </span></td><td><span class="copyable" onclick="copyToClipboard(this, ':apple:')">🍎 :apple: </span></td><td><span class="copyable" onclick="copyToClipboard(this, ':green_apple:')">🍏 :green_apple: </span></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> etc </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>퍼사드 패턴 (Facade Pattern)</title>
      <link href="/design-pattern/10/"/>
      <url>/design-pattern/10/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-퍼사드-패턴-Facade-Pattern"><a href="#JavaScript-퍼사드-패턴-Facade-Pattern" class="headerlink" title="JavaScript 퍼사드 패턴 (Facade Pattern)"></a>JavaScript 퍼사드 패턴 (Facade Pattern)</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 자바스크립트 디자인 패턴 중 하나인 퍼사드 패턴(Facade Pattern)에 대해 알아보겠습니다. 퍼사드 패턴은 복잡한 시스템의 인터페이스를 단순화하여 사용하기 쉽게 만드는 패턴입니다.</p><h2 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h2><h3 id="퍼사드-패턴이란"><a href="#퍼사드-패턴이란" class="headerlink" title="퍼사드 패턴이란?"></a>퍼사드 패턴이란?</h3><p>퍼사드 패턴(Facade Pattern)은 서브시스템의 복잡한 인터페이스를 단순화하여 클라이언트가 쉽게 사용할 수 있도록 하는 디자인 패턴입니다. 퍼사드(Facade)는 건물의 정면이라는 의미로, 시스템의 복잡성을 숨기고 단순한 인터페이스를 제공하는 역할을 합니다. 이를 통해 클라이언트는 복잡한 내부 구조를 알 필요 없이 간단한 인터페이스를 통해 시스템을 사용할 수 있습니다.</p><h3 id="퍼사드-패턴의-장점"><a href="#퍼사드-패턴의-장점" class="headerlink" title="퍼사드 패턴의 장점"></a>퍼사드 패턴의 장점</h3><ul><li><strong>단순성</strong>: 복잡한 시스템의 인터페이스를 단순화하여 사용하기 쉽게 만듭니다.</li><li><strong>유연성</strong>: 시스템의 내부 구조를 변경하지 않고도 클라이언트 코드에 영향을 주지 않고 기능을 확장할 수 있습니다.</li><li><strong>캡슐화</strong>: 시스템의 내부 구현을 숨겨 캡슐화를 강화합니다.</li></ul><h2 id="예시-코드"><a href="#예시-코드" class="headerlink" title="예시 코드"></a>예시 코드</h2><p>이번 예제에서는 RPG 게임에서 퍼사드 패턴을 사용하여 캐릭터 생성, 전투, 회복 등의 복잡한 기능을 단순화하는 방법을 구현해보겠습니다.</p><h3 id="1-서브시스템-클래스들"><a href="#1-서브시스템-클래스들" class="headerlink" title="1. 서브시스템 클래스들"></a>1. 서브시스템 클래스들</h3><pre><code class="highlight javascript"><span class="comment">// 서브시스템 클래스들</span><span class="keyword">class</span> <span class="title class_">CharacterCreation</span> &#123;  <span class="title function_">createWarrior</span>(<span class="params">name</span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;name&#125;</span> the Warrior has been created.`</span>);    <span class="keyword">return</span> &#123; name, <span class="attr">type</span>: <span class="string">&quot;Warrior&quot;</span> &#125;;  &#125;  <span class="title function_">createMage</span>(<span class="params">name</span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;name&#125;</span> the Mage has been created.`</span>);    <span class="keyword">return</span> &#123; name, <span class="attr">type</span>: <span class="string">&quot;Mage&quot;</span> &#125;;  &#125;&#125;<span class="keyword">class</span> <span class="title class_">BattleSystem</span> &#123;  <span class="title function_">attack</span>(<span class="params">character</span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;character.name&#125;</span> attacks the enemy!`</span>);  &#125;  <span class="title function_">defend</span>(<span class="params">character</span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;character.name&#125;</span> defends against the attack!`</span>);  &#125;&#125;<span class="keyword">class</span> <span class="title class_">HealingSystem</span> &#123;  <span class="title function_">heal</span>(<span class="params">character</span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;character.name&#125;</span> heals their wounds.`</span>);  &#125;&#125;</code></pre><h3 id="2-퍼사드-클래스"><a href="#2-퍼사드-클래스" class="headerlink" title="2. 퍼사드 클래스"></a>2. 퍼사드 클래스</h3><pre><code class="highlight javascript"><span class="comment">// 퍼사드 클래스</span><span class="keyword">class</span> <span class="title class_">RPGGameFacade</span> &#123;  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;    <span class="variable language_">this</span>.<span class="property">characterCreation</span> = <span class="keyword">new</span> <span class="title class_">CharacterCreation</span>();    <span class="variable language_">this</span>.<span class="property">battleSystem</span> = <span class="keyword">new</span> <span class="title class_">BattleSystem</span>();    <span class="variable language_">this</span>.<span class="property">healingSystem</span> = <span class="keyword">new</span> <span class="title class_">HealingSystem</span>();  &#125;  <span class="title function_">createWarrior</span>(<span class="params">name</span>) &#123;    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">characterCreation</span>.<span class="title function_">createWarrior</span>(name);  &#125;  <span class="title function_">createMage</span>(<span class="params">name</span>) &#123;    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">characterCreation</span>.<span class="title function_">createMage</span>(name);  &#125;  <span class="title function_">attack</span>(<span class="params">character</span>) &#123;    <span class="variable language_">this</span>.<span class="property">battleSystem</span>.<span class="title function_">attack</span>(character);  &#125;  <span class="title function_">defend</span>(<span class="params">character</span>) &#123;    <span class="variable language_">this</span>.<span class="property">battleSystem</span>.<span class="title function_">defend</span>(character);  &#125;  <span class="title function_">heal</span>(<span class="params">character</span>) &#123;    <span class="variable language_">this</span>.<span class="property">healingSystem</span>.<span class="title function_">heal</span>(character);  &#125;&#125;</code></pre><h3 id="3-RPG-게임에서의-활용-예제"><a href="#3-RPG-게임에서의-활용-예제" class="headerlink" title="3. RPG 게임에서의 활용 예제"></a>3. RPG 게임에서의 활용 예제</h3><p>퍼사드 패턴을 사용하여 RPG 게임에서 캐릭터를 생성하고, 전투하고, 회복하는 과정을 단순화하는 예제입니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> game = <span class="keyword">new</span> <span class="title class_">RPGGameFacade</span>();<span class="keyword">const</span> warrior = game.<span class="title function_">createWarrior</span>(<span class="string">&quot;Arthas&quot;</span>);<span class="keyword">const</span> mage = game.<span class="title function_">createMage</span>(<span class="string">&quot;Jaina&quot;</span>);game.<span class="title function_">attack</span>(warrior); <span class="comment">// Arthas attacks the enemy!</span>game.<span class="title function_">defend</span>(warrior); <span class="comment">// Arthas defends against the attack!</span>game.<span class="title function_">heal</span>(warrior); <span class="comment">// Arthas heals their wounds.</span>game.<span class="title function_">attack</span>(mage); <span class="comment">// Jaina attacks the enemy!</span>game.<span class="title function_">defend</span>(mage); <span class="comment">// Jaina defends against the attack!</span>game.<span class="title function_">heal</span>(mage); <span class="comment">// Jaina heals their wounds.</span></code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 퍼사드 패턴의 개념과 사용 예제에 대해 알아보았습니다. 퍼사드 패턴은 복잡한 시스템의 인터페이스를 단순화하여 클라이언트가 쉽게 사용할 수 있도록 하는 디자인 패턴입니다. RPG 게임 예제를 통해 퍼사드 패턴을 실제로 어떻게 활용할 수 있는지 살펴보았습니다. 퍼사드 패턴을 사용하면 코드의 단순성, 유연성, 캡슐화를 높여 유지보수와 확장을 용이하게 할 수 있습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> 디자인패턴 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>캐싱 전략의 중요성과 Express와 Redis를 사용한 구현</title>
      <link href="/web/essential/12/"/>
      <url>/web/essential/12/</url>
      
        <content type="html"><![CDATA[<h1 id="캐싱-전략의-중요성과-Express와-Redis를-사용한-구현"><a href="#캐싱-전략의-중요성과-Express와-Redis를-사용한-구현" class="headerlink" title="캐싱 전략의 중요성과 Express와 Redis를 사용한 구현"></a>캐싱 전략의 중요성과 Express와 Redis를 사용한 구현</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 캐싱 전략의 중요성에 대해 알아보고, Express와 Redis를 사용하여 캐싱을 구현하는 방법을 실습해보겠습니다. 캐싱은 성능 최적화와 자원 절약을 위한 중요한 기술 중 하나입니다.</p><h2 id="캐싱-전략의-개념"><a href="#캐싱-전략의-개념" class="headerlink" title="캐싱 전략의 개념"></a>캐싱 전략의 개념</h2><h3 id="캐싱이란"><a href="#캐싱이란" class="headerlink" title="캐싱이란?"></a>캐싱이란?</h3><p>캐싱(Caching)은 자주 사용되는 데이터나 연산 결과를 임시 저장소에 저장하여, 동일한 요청이 들어올 때 데이터베이스나 원격 서버에 다시 접근하지 않고 빠르게 응답할 수 있도록 하는 기술입니다.</p><h3 id="캐싱의-필요성"><a href="#캐싱의-필요성" class="headerlink" title="캐싱의 필요성"></a>캐싱의 필요성</h3><ol><li><strong>성능 향상</strong>: 자주 조회되는 데이터를 캐시에 저장하여, 빠르게 응답할 수 있습니다.</li><li><strong>서버 부하 감소</strong>: 데이터베이스나 원격 서버에 대한 요청 횟수를 줄여 서버 부하를 줄일 수 있습니다.</li><li><strong>비용 절감</strong>: 네트워크 트래픽과 데이터베이스 쿼리 비용을 절감할 수 있습니다.</li><li><strong>사용자 경험 개선</strong>: 빠른 응답 시간을 통해 사용자 경험을 향상시킬 수 있습니다.</li></ol><h3 id="캐싱-전략"><a href="#캐싱-전략" class="headerlink" title="캐싱 전략"></a>캐싱 전략</h3><ol><li><strong>메모리 캐싱</strong>: 애플리케이션 서버의 메모리에 데이터를 캐싱합니다. 빠르지만 메모리 용량이 제한적입니다.</li><li><strong>디스크 캐싱</strong>: 데이터를 파일 시스템에 캐싱합니다. 메모리보다 느리지만 용량이 크고 영속성이 있습니다.</li><li><strong>분산 캐싱</strong>: 여러 서버에 데이터를 분산 저장합니다. 대규모 시스템에서 주로 사용됩니다.</li><li><strong>HTTP 캐싱</strong>: HTTP 헤더를 사용하여 브라우저나 프록시 서버에 데이터를 캐싱합니다.</li></ol><h2 id="준비하기"><a href="#준비하기" class="headerlink" title="준비하기"></a>준비하기</h2><p>먼저 필요한 패키지를 설치합니다:</p><pre><code class="highlight bash">npm init -ynpm install express redis</code></pre><p>Redis 서버를 설치하고 실행합니다. 로컬 환경에서 Redis를 설치하려면 <a href="https://redis.io/download">Redis 설치 가이드</a>를 참고하세요.</p><h2 id="서버-설정"><a href="#서버-설정" class="headerlink" title="서버 설정"></a>서버 설정</h2><p>다음은 필요한 모듈을 가져오고 서버를 설정하는 코드입니다. 자세한 부분은 뒤에서 알아보겠습니다.</p><pre><code class="highlight javascript"><span class="comment">// server.js</span><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);<span class="keyword">const</span> redis = <span class="built_in">require</span>(<span class="string">&quot;redis&quot;</span>);<span class="keyword">const</span> app = <span class="title function_">express</span>();<span class="keyword">const</span> port = <span class="number">3000</span>;<span class="keyword">const</span> redisClient = redis.<span class="title function_">createClient</span>();redisClient.<span class="title function_">on</span>(<span class="string">&quot;error&quot;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;Redis error:&quot;</span>, err);&#125;);<span class="comment">// 캐시 미들웨어</span><span class="keyword">const</span> <span class="title function_">cache</span> = (<span class="params">req, res, next</span>) =&gt; &#123;  <span class="keyword">const</span> &#123; id &#125; = req.<span class="property">params</span>;  redisClient.<span class="title function_">get</span>(id, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;    <span class="keyword">if</span> (err) &#123;      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;Redis get error:&quot;</span>, err);      <span class="keyword">return</span> <span class="title function_">next</span>();    &#125;    <span class="keyword">if</span> (data) &#123;      <span class="keyword">return</span> res.<span class="title function_">json</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(data));    &#125;    <span class="title function_">next</span>();  &#125;);&#125;;<span class="comment">// 데이터 요청 핸들러</span>app.<span class="title function_">get</span>(<span class="string">&quot;/data/:id&quot;</span>, cache, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  <span class="keyword">const</span> &#123; id &#125; = req.<span class="property">params</span>;  <span class="keyword">const</span> data = &#123; id, <span class="attr">value</span>: <span class="string">`Data for ID <span class="subst">$&#123;id&#125;</span>`</span> &#125;; <span class="comment">// 예제 데이터</span>  redisClient.<span class="title function_">setex</span>(id, <span class="number">3600</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data)); <span class="comment">// 데이터 캐싱 (1시간)</span>  res.<span class="title function_">json</span>(data);&#125;);app.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Server is running on http://localhost:<span class="subst">$&#123;port&#125;</span>`</span>);&#125;);</code></pre><h2 id="설정-설명"><a href="#설정-설명" class="headerlink" title="설정 설명"></a>설정 설명</h2><p>Express와 Redis를 사용하여 캐싱을 설정하는 방법을 설명합니다.</p><ol><li><p><strong>Redis 클라이언트 설정</strong>:</p><pre><code class="highlight javascript"><span class="keyword">const</span> redis = <span class="built_in">require</span>(<span class="string">&quot;redis&quot;</span>);<span class="keyword">const</span> redisClient = redis.<span class="title function_">createClient</span>();redisClient.<span class="title function_">on</span>(<span class="string">&quot;error&quot;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;Redis error:&quot;</span>, err);&#125;);</code></pre><p>Redis 클라이언트를 생성하고 에러 핸들러를 설정합니다.</p></li><li><p><strong>캐시 미들웨어</strong>:</p><pre><code class="highlight javascript"><span class="keyword">const</span> <span class="title function_">cache</span> = (<span class="params">req, res, next</span>) =&gt; &#123;  <span class="keyword">const</span> &#123; id &#125; = req.<span class="property">params</span>;  redisClient.<span class="title function_">get</span>(id, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;    <span class="keyword">if</span> (err) &#123;      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;Redis get error:&quot;</span>, err);      <span class="keyword">return</span> <span class="title function_">next</span>();    &#125;    <span class="keyword">if</span> (data) &#123;      <span class="keyword">return</span> res.<span class="title function_">json</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(data));    &#125;    <span class="title function_">next</span>();  &#125;);&#125;;</code></pre><p>캐시 미들웨어를 정의하여, 요청이 들어올 때 먼저 Redis 캐시에서 데이터를 조회합니다. 데이터가 캐시에 있으면 즉시 응답하고, 없으면 다음 미들웨어로 넘어갑니다.</p></li><li><p><strong>데이터 요청 핸들러</strong>:</p><pre><code class="highlight javascript">app.<span class="title function_">get</span>(<span class="string">&quot;/data/:id&quot;</span>, cache, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  <span class="keyword">const</span> &#123; id &#125; = req.<span class="property">params</span>;  <span class="keyword">const</span> data = &#123; id, <span class="attr">value</span>: <span class="string">`Data for ID <span class="subst">$&#123;id&#125;</span>`</span> &#125;; <span class="comment">// 예제 데이터</span>  redisClient.<span class="title function_">setex</span>(id, <span class="number">3600</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data)); <span class="comment">// 데이터 캐싱 (1시간)</span>  res.<span class="title function_">json</span>(data);&#125;);</code></pre><p>데이터 요청 핸들러에서 데이터를 생성하고, Redis에 1시간 동안 캐싱합니다. 응답으로 데이터를 반환합니다.</p></li></ol><h2 id="테스트"><a href="#테스트" class="headerlink" title="테스트"></a>테스트</h2><p>이렇게 하면 Express와 Redis를 사용하여 캐싱을 설정할 수 있습니다. 이 코드를 실행하기 전에 <code>server.js</code> 파일을 실행하여 서버를 시작하세요.</p><pre><code class="highlight bash">node server.js</code></pre><p>서버가 성공적으로 실행되면, <code>http://localhost:3000/data/1</code>에서 캐싱이 적용된 API를 테스트할 수 있습니다.</p><h3 id="테스트-방법"><a href="#테스트-방법" class="headerlink" title="테스트 방법"></a>테스트 방법</h3><ol><li><strong>첫 번째 요청</strong>: 브라우저에서 <code>http://localhost:3000/data/1</code>을 열어 데이터를 요청합니다. 이 때는 캐시가 없으므로 데이터가 생성되고 캐시에 저장됩니다.</li><li><strong>두 번째 요청</strong>: 동일한 URL로 다시 요청하여, 데이터가 Redis 캐시에서 제공되는지 확인합니다. 응답 시간이 빨라짐을 느낄 수 있습니다.</li><li><strong>캐시 만료 후 요청</strong>: 1시간 후 다시 요청하여, 캐시가 만료된 후 데이터가 다시 생성되고 캐싱되는지 확인합니다.</li></ol><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 캐싱 전략의 중요성을 이해하고, Express와 Redis를 사용하여 캐싱을 구현하는 방법을 알아보았습니다. 이를 바탕으로 더 효율적이고 성능이 뛰어난 웹 애플리케이션을 개발해보세요!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> web_필수 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>어댑터 패턴 (Adapter Pattern)</title>
      <link href="/design-pattern/9/"/>
      <url>/design-pattern/9/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-어댑터-패턴-Adapter-Pattern"><a href="#JavaScript-어댑터-패턴-Adapter-Pattern" class="headerlink" title="JavaScript 어댑터 패턴 (Adapter Pattern)"></a>JavaScript 어댑터 패턴 (Adapter Pattern)</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 자바스크립트 디자인 패턴 중 하나인 어댑터 패턴(Adapter Pattern)에 대해 알아보겠습니다. 어댑터 패턴은 기존의 인터페이스를 새로운 인터페이스로 변환하여, 호환되지 않는 인터페이스를 가진 클래스를 함께 사용할 수 있게 해주는 패턴입니다.</p><h2 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h2><h3 id="어댑터-패턴이란"><a href="#어댑터-패턴이란" class="headerlink" title="어댑터 패턴이란?"></a>어댑터 패턴이란?</h3><p>어댑터 패턴은 인터페이스 호환성 문제를 해결하기 위해 사용됩니다. 이를 통해 기존 코드를 변경하지 않고도 서로 다른 인터페이스를 가진 클래스들을 함께 사용할 수 있습니다. 주로 레거시 코드를 새 시스템에 통합하거나, 외부 라이브러리와의 호환성을 확보할 때 유용합니다.</p><h3 id="어댑터-패턴의-장점"><a href="#어댑터-패턴의-장점" class="headerlink" title="어댑터 패턴의 장점"></a>어댑터 패턴의 장점</h3><ul><li><strong>유연성</strong>: 기존 코드의 변경 없이 새로운 기능을 통합할 수 있습니다.</li><li><strong>재사용성</strong>: 기존 클래스를 재사용하여 새로운 인터페이스로 변환할 수 있습니다.</li><li><strong>호환성</strong>: 서로 다른 인터페이스를 가진 클래스들을 함께 사용할 수 있습니다.</li></ul><h2 id="예시-코드"><a href="#예시-코드" class="headerlink" title="예시 코드"></a>예시 코드</h2><p>이번 예제에서는 RPG 게임에서 기존 전투 시스템과 새로운 전투 시스템을 어댑터 패턴을 사용하여 통합하는 방법을 구현해보겠습니다.</p><h3 id="1-기존-전투-시스템"><a href="#1-기존-전투-시스템" class="headerlink" title="1. 기존 전투 시스템"></a>1. 기존 전투 시스템</h3><pre><code class="highlight javascript"><span class="comment">// 기존 전투 시스템</span><span class="keyword">class</span> <span class="title class_">OldBattleSystem</span> &#123;  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;    <span class="variable language_">this</span>.<span class="property">name</span> = name;  &#125;  <span class="title function_">attack</span>(<span class="params"></span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> performs a standard attack.`</span>);  &#125;  <span class="title function_">defend</span>(<span class="params"></span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> defends with a shield.`</span>);  &#125;&#125;<span class="keyword">const</span> oldWarrior = <span class="keyword">new</span> <span class="title class_">OldBattleSystem</span>(<span class="string">&quot;Old Warrior&quot;</span>);oldWarrior.<span class="title function_">attack</span>(); <span class="comment">// Old Warrior performs a standard attack.</span>oldWarrior.<span class="title function_">defend</span>(); <span class="comment">// Old Warrior defends with a shield.</span></code></pre><h3 id="2-새로운-전투-시스템"><a href="#2-새로운-전투-시스템" class="headerlink" title="2. 새로운 전투 시스템"></a>2. 새로운 전투 시스템</h3><pre><code class="highlight javascript"><span class="comment">// 새로운 전투 시스템</span><span class="keyword">class</span> <span class="title class_">NewBattleSystem</span> &#123;  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;    <span class="variable language_">this</span>.<span class="property">name</span> = name;  &#125;  <span class="title function_">executeAttack</span>(<span class="params"></span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> executes a powerful strike.`</span>);  &#125;  <span class="title function_">executeDefense</span>(<span class="params"></span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> uses a magical barrier.`</span>);  &#125;&#125;<span class="keyword">const</span> newWarrior = <span class="keyword">new</span> <span class="title class_">NewBattleSystem</span>(<span class="string">&quot;New Warrior&quot;</span>);newWarrior.<span class="title function_">executeAttack</span>(); <span class="comment">// New Warrior executes a powerful strike.</span>newWarrior.<span class="title function_">executeDefense</span>(); <span class="comment">// New Warrior uses a magical barrier.</span></code></pre><h3 id="3-어댑터-클래스"><a href="#3-어댑터-클래스" class="headerlink" title="3. 어댑터 클래스"></a>3. 어댑터 클래스</h3><p>기존 전투 시스템과 새로운 전투 시스템을 함께 사용하기 위해 어댑터 클래스를 구현합니다.</p><pre><code class="highlight javascript"><span class="comment">// 어댑터 클래스</span><span class="keyword">class</span> <span class="title class_">BattleSystemAdapter</span> &#123;  <span class="title function_">constructor</span>(<span class="params">newBattleSystem</span>) &#123;    <span class="variable language_">this</span>.<span class="property">newBattleSystem</span> = newBattleSystem;  &#125;  <span class="title function_">attack</span>(<span class="params"></span>) &#123;    <span class="variable language_">this</span>.<span class="property">newBattleSystem</span>.<span class="title function_">executeAttack</span>();  &#125;  <span class="title function_">defend</span>(<span class="params"></span>) &#123;    <span class="variable language_">this</span>.<span class="property">newBattleSystem</span>.<span class="title function_">executeDefense</span>();  &#125;&#125;</code></pre><h3 id="4-RPG-게임에서의-활용-예제"><a href="#4-RPG-게임에서의-활용-예제" class="headerlink" title="4. RPG 게임에서의 활용 예제"></a>4. RPG 게임에서의 활용 예제</h3><p>어댑터 패턴을 사용하여 기존 전투 시스템과 새로운 전투 시스템을 함께 사용하는 예제입니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> oldWarrior = <span class="keyword">new</span> <span class="title class_">OldBattleSystem</span>(<span class="string">&quot;Old Warrior&quot;</span>);<span class="keyword">const</span> newWarrior = <span class="keyword">new</span> <span class="title class_">NewBattleSystem</span>(<span class="string">&quot;New Warrior&quot;</span>);<span class="keyword">const</span> adaptedNewWarrior = <span class="keyword">new</span> <span class="title class_">BattleSystemAdapter</span>(newWarrior);<span class="comment">// 기존 전투 시스템 사용</span>oldWarrior.<span class="title function_">attack</span>(); <span class="comment">// Old Warrior performs a standard attack.</span>oldWarrior.<span class="title function_">defend</span>(); <span class="comment">// Old Warrior defends with a shield.</span><span class="comment">// 어댑터를 통해 새로운 전투 시스템 사용</span>adaptedNewWarrior.<span class="title function_">attack</span>(); <span class="comment">// New Warrior executes a powerful strike.</span>adaptedNewWarrior.<span class="title function_">defend</span>(); <span class="comment">// New Warrior uses a magical barrier.</span></code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 어댑터 패턴의 개념과 사용 예제에 대해 알아보았습니다. 어댑터 패턴은 인터페이스 호환성 문제를 해결하여 기존 코드를 변경하지 않고도 서로 다른 인터페이스를 가진 클래스들을 함께 사용할 수 있게 해주는 패턴입니다. RPG 게임 예제를 통해 어댑터 패턴을 실제로 어떻게 활용할 수 있는지 살펴보았습니다. 어댑터 패턴을 사용하면 코드의 유연성과 재사용성을 높여 유지보수와 확장을 용이하게 할 수 있습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> 디자인패턴 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>커맨드 패턴 (Command Pattern)</title>
      <link href="/design-pattern/8/"/>
      <url>/design-pattern/8/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-커맨드-패턴-Command-Pattern"><a href="#JavaScript-커맨드-패턴-Command-Pattern" class="headerlink" title="JavaScript 커맨드 패턴 (Command Pattern)"></a>JavaScript 커맨드 패턴 (Command Pattern)</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 자바스크립트 디자인 패턴 중 하나인 커맨드 패턴(Command Pattern)에 대해 알아보겠습니다. 커맨드 패턴은 요청을 객체로 캡슐화하여 서로 다른 요청, 로그, 큐잉 및 연산 취소를 매개변수화할 수 있게 해주는 패턴입니다.</p><h2 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h2><h3 id="커맨드-패턴이란"><a href="#커맨드-패턴이란" class="headerlink" title="커맨드 패턴이란?"></a>커맨드 패턴이란?</h3><p>커맨드 패턴은 요청을 객체의 형태로 캡슐화함으로써, 요청에 필요한 모든 정보를 포함하는 디자인 패턴입니다. 이를 통해 다음과 같은 장점을 제공합니다:</p><ul><li><strong>명령의 분리</strong>: 호출자와 수행자를 분리하여 독립적으로 명령을 관리할 수 있습니다.</li><li><strong>확장성</strong>: 새로운 명령을 쉽게 추가할 수 있습니다.</li><li><strong>유연성</strong>: 명령의 실행, 취소, 재실행을 유연하게 처리할 수 있습니다.</li></ul><h2 id="예시-코드"><a href="#예시-코드" class="headerlink" title="예시 코드"></a>예시 코드</h2><p>이번 예제에서는 RPG 게임에서 캐릭터의 행동(공격, 방어, 이동)을 커맨드 패턴을 사용하여 캡슐화하는 방법을 구현해보겠습니다.</p><h3 id="1-커맨드-인터페이스와-구체적인-커맨드-클래스"><a href="#1-커맨드-인터페이스와-구체적인-커맨드-클래스" class="headerlink" title="1. 커맨드 인터페이스와 구체적인 커맨드 클래스"></a>1. 커맨드 인터페이스와 구체적인 커맨드 클래스</h3><pre><code class="highlight javascript"><span class="comment">// 커맨드 인터페이스</span><span class="keyword">class</span> <span class="title class_">Command</span> &#123;  <span class="title function_">execute</span>(<span class="params"></span>) &#123;    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;This method should be overridden!&quot;</span>);  &#125;  <span class="title function_">undo</span>(<span class="params"></span>) &#123;    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;This method should be overridden!&quot;</span>);  &#125;&#125;<span class="comment">// 공격 명령</span><span class="keyword">class</span> <span class="title class_">AttackCommand</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Command</span> &#123;  <span class="title function_">constructor</span>(<span class="params">character</span>) &#123;    <span class="variable language_">super</span>();    <span class="variable language_">this</span>.<span class="property">character</span> = character;  &#125;  <span class="title function_">execute</span>(<span class="params"></span>) &#123;    <span class="variable language_">this</span>.<span class="property">character</span>.<span class="title function_">attack</span>();  &#125;  <span class="title function_">undo</span>(<span class="params"></span>) &#123;    <span class="variable language_">this</span>.<span class="property">character</span>.<span class="title function_">stopAttack</span>();  &#125;&#125;<span class="comment">// 방어 명령</span><span class="keyword">class</span> <span class="title class_">DefendCommand</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Command</span> &#123;  <span class="title function_">constructor</span>(<span class="params">character</span>) &#123;    <span class="variable language_">super</span>();    <span class="variable language_">this</span>.<span class="property">character</span> = character;  &#125;  <span class="title function_">execute</span>(<span class="params"></span>) &#123;    <span class="variable language_">this</span>.<span class="property">character</span>.<span class="title function_">defend</span>();  &#125;  <span class="title function_">undo</span>(<span class="params"></span>) &#123;    <span class="variable language_">this</span>.<span class="property">character</span>.<span class="title function_">stopDefend</span>();  &#125;&#125;<span class="comment">// 이동 명령</span><span class="keyword">class</span> <span class="title class_">MoveCommand</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Command</span> &#123;  <span class="title function_">constructor</span>(<span class="params">character, direction</span>) &#123;    <span class="variable language_">super</span>();    <span class="variable language_">this</span>.<span class="property">character</span> = character;    <span class="variable language_">this</span>.<span class="property">direction</span> = direction;  &#125;  <span class="title function_">execute</span>(<span class="params"></span>) &#123;    <span class="variable language_">this</span>.<span class="property">character</span>.<span class="title function_">move</span>(<span class="variable language_">this</span>.<span class="property">direction</span>);  &#125;  <span class="title function_">undo</span>(<span class="params"></span>) &#123;    <span class="variable language_">this</span>.<span class="property">character</span>.<span class="title function_">stopMove</span>();  &#125;&#125;</code></pre><h3 id="2-캐릭터-클래스"><a href="#2-캐릭터-클래스" class="headerlink" title="2. 캐릭터 클래스"></a>2. 캐릭터 클래스</h3><p>캐릭터 클래스는 실제 명령을 수행하는 역할을 합니다.</p><pre><code class="highlight javascript"><span class="keyword">class</span> <span class="title class_">Character</span> &#123;  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;    <span class="variable language_">this</span>.<span class="property">name</span> = name;  &#125;  <span class="title function_">attack</span>(<span class="params"></span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> attacks!`</span>);  &#125;  <span class="title function_">stopAttack</span>(<span class="params"></span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> stops attacking.`</span>);  &#125;  <span class="title function_">defend</span>(<span class="params"></span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> defends!`</span>);  &#125;  <span class="title function_">stopDefend</span>(<span class="params"></span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> stops defending.`</span>);  &#125;  <span class="title function_">move</span>(<span class="params">direction</span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> moves <span class="subst">$&#123;direction&#125;</span>!`</span>);  &#125;  <span class="title function_">stopMove</span>(<span class="params"></span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> stops moving.`</span>);  &#125;&#125;</code></pre><h3 id="3-인보커-클래스"><a href="#3-인보커-클래스" class="headerlink" title="3. 인보커 클래스"></a>3. 인보커 클래스</h3><p>인보커 클래스는 명령을 저장하고 실행하는 역할을 합니다.</p><pre><code class="highlight javascript"><span class="keyword">class</span> <span class="title class_">CommandInvoker</span> &#123;  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;    <span class="variable language_">this</span>.<span class="property">history</span> = [];  &#125;  <span class="title function_">executeCommand</span>(<span class="params">command</span>) &#123;    command.<span class="title function_">execute</span>();    <span class="variable language_">this</span>.<span class="property">history</span>.<span class="title function_">push</span>(command);  &#125;  <span class="title function_">undoCommand</span>(<span class="params"></span>) &#123;    <span class="keyword">const</span> command = <span class="variable language_">this</span>.<span class="property">history</span>.<span class="title function_">pop</span>();    <span class="keyword">if</span> (command) &#123;      command.<span class="title function_">undo</span>();    &#125;  &#125;&#125;</code></pre><h3 id="4-RPG-게임에서의-활용-예제"><a href="#4-RPG-게임에서의-활용-예제" class="headerlink" title="4. RPG 게임에서의 활용 예제"></a>4. RPG 게임에서의 활용 예제</h3><p>커맨드 패턴을 사용하여 캐릭터의 행동을 캡슐화하고, 인보커를 통해 명령을 실행하고 취소하는 예제입니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> warrior = <span class="keyword">new</span> <span class="title class_">Character</span>(<span class="string">&quot;Warrior&quot;</span>);<span class="keyword">const</span> invoker = <span class="keyword">new</span> <span class="title class_">CommandInvoker</span>();<span class="keyword">const</span> attackCommand = <span class="keyword">new</span> <span class="title class_">AttackCommand</span>(warrior);<span class="keyword">const</span> defendCommand = <span class="keyword">new</span> <span class="title class_">DefendCommand</span>(warrior);<span class="keyword">const</span> moveCommand = <span class="keyword">new</span> <span class="title class_">MoveCommand</span>(warrior, <span class="string">&quot;north&quot;</span>);<span class="comment">// 명령 실행</span>invoker.<span class="title function_">executeCommand</span>(attackCommand); <span class="comment">// Warrior attacks!</span>invoker.<span class="title function_">executeCommand</span>(defendCommand); <span class="comment">// Warrior defends!</span>invoker.<span class="title function_">executeCommand</span>(moveCommand); <span class="comment">// Warrior moves north!</span><span class="comment">// 명령 취소</span>invoker.<span class="title function_">undoCommand</span>(); <span class="comment">// Warrior stops moving.</span>invoker.<span class="title function_">undoCommand</span>(); <span class="comment">// Warrior stops defending.</span>invoker.<span class="title function_">undoCommand</span>(); <span class="comment">// Warrior stops attacking.</span></code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 커맨드 패턴의 개념과 사용 예제에 대해 알아보았습니다. 커맨드 패턴은 요청을 객체로 캡슐화하여 명령의 실행과 취소를 유연하게 처리할 수 있게 해주는 패턴입니다. RPG 게임 예제를 통해 커맨드 패턴을 실제로 어떻게 활용할 수 있는지 살펴보았습니다. 커맨드 패턴을 사용하면 명령의 분리와 확장성을 높여 코드를 더 깔끔하고 유연하게 만들 수 있습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> 디자인패턴 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>전략 패턴 (Strategy Pattern)</title>
      <link href="/design-pattern/7/"/>
      <url>/design-pattern/7/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-전략-패턴-Strategy-Pattern"><a href="#JavaScript-전략-패턴-Strategy-Pattern" class="headerlink" title="JavaScript 전략 패턴 (Strategy Pattern)"></a>JavaScript 전략 패턴 (Strategy Pattern)</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 자바스크립트 디자인 패턴 중 하나인 전략 패턴(Strategy Pattern)에 대해 알아보겠습니다. 전략 패턴은 행위를 클래스로 캡슐화하여 동적으로 행위를 변경할 수 있게 해주는 디자인 패턴입니다. 이 패턴은 객체의 행위를 바꾸고 싶을 때, 상속 대신 행위 클래스를 교체함으로써 유연하게 변경할 수 있습니다.</p><h2 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h2><h3 id="전략-패턴이란"><a href="#전략-패턴이란" class="headerlink" title="전략 패턴이란?"></a>전략 패턴이란?</h3><p>전략 패턴은 알고리즘을 캡슐화하여 특정 클래스의 행동을 동적으로 바꿀 수 있게 해주는 디자인 패턴입니다. 주로 다음과 같은 장점을 제공합니다:</p><ul><li><strong>유연성</strong>: 행위를 상속이 아닌 객체 구성(composition)으로 변경할 수 있습니다.</li><li><strong>재사용성</strong>: 다양한 알고리즘을 쉽게 추가하고 교체할 수 있습니다.</li><li><strong>유지보수성</strong>: 알고리즘을 개별 클래스로 분리하여 코드의 가독성과 유지보수성을 높일 수 있습니다.</li></ul><h2 id="예시-코드"><a href="#예시-코드" class="headerlink" title="예시 코드"></a>예시 코드</h2><p>이번 예제에서는 RPG 게임에서 다양한 캐릭터의 공격 방식을 전략 패턴을 사용하여 동적으로 변경하는 방법을 구현해보겠습니다.</p><h3 id="1-전략-패턴-구현"><a href="#1-전략-패턴-구현" class="headerlink" title="1. 전략 패턴 구현"></a>1. 전략 패턴 구현</h3><p>공격 전략 인터페이스와 다양한 공격 전략 클래스를 정의합니다.</p><pre><code class="highlight javascript"><span class="comment">// 공격 전략 인터페이스</span><span class="keyword">class</span> <span class="title class_">AttackStrategy</span> &#123;  <span class="title function_">attack</span>(<span class="params"></span>) &#123;    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;This method should be overridden!&quot;</span>);  &#125;&#125;<span class="comment">// 구체적인 공격 전략 클래스</span><span class="keyword">class</span> <span class="title class_">SwordAttack</span> <span class="keyword">extends</span> <span class="title class_ inherited__">AttackStrategy</span> &#123;  <span class="title function_">attack</span>(<span class="params"></span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Swings a sword!&quot;</span>);  &#125;&#125;<span class="keyword">class</span> <span class="title class_">BowAttack</span> <span class="keyword">extends</span> <span class="title class_ inherited__">AttackStrategy</span> &#123;  <span class="title function_">attack</span>(<span class="params"></span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Shoots an arrow!&quot;</span>);  &#125;&#125;<span class="keyword">class</span> <span class="title class_">MagicAttack</span> <span class="keyword">extends</span> <span class="title class_ inherited__">AttackStrategy</span> &#123;  <span class="title function_">attack</span>(<span class="params"></span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Casts a spell!&quot;</span>);  &#125;&#125;<span class="comment">// 캐릭터 클래스</span><span class="keyword">class</span> <span class="title class_">Character</span> &#123;  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;    <span class="variable language_">this</span>.<span class="property">name</span> = name;    <span class="variable language_">this</span>.<span class="property">attackStrategy</span> = <span class="literal">null</span>;  &#125;  <span class="title function_">setAttackStrategy</span>(<span class="params">attackStrategy</span>) &#123;    <span class="variable language_">this</span>.<span class="property">attackStrategy</span> = attackStrategy;  &#125;  <span class="title function_">attack</span>(<span class="params"></span>) &#123;    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">attackStrategy</span>) &#123;      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> doesn&#x27;t know how to attack!`</span>);    &#125; <span class="keyword">else</span> &#123;      <span class="variable language_">this</span>.<span class="property">attackStrategy</span>.<span class="title function_">attack</span>();    &#125;  &#125;&#125;</code></pre><h3 id="2-RPG-게임에서의-활용-예제"><a href="#2-RPG-게임에서의-활용-예제" class="headerlink" title="2. RPG 게임에서의 활용 예제"></a>2. RPG 게임에서의 활용 예제</h3><p>전략 패턴을 사용하여 캐릭터의 공격 방식을 동적으로 변경하고, 각 캐릭터의 공격 방식을 호출해보겠습니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> warrior = <span class="keyword">new</span> <span class="title class_">Character</span>(<span class="string">&quot;Warrior&quot;</span>);<span class="keyword">const</span> archer = <span class="keyword">new</span> <span class="title class_">Character</span>(<span class="string">&quot;Archer&quot;</span>);<span class="keyword">const</span> mage = <span class="keyword">new</span> <span class="title class_">Character</span>(<span class="string">&quot;Mage&quot;</span>);<span class="keyword">const</span> swordAttack = <span class="keyword">new</span> <span class="title class_">SwordAttack</span>();<span class="keyword">const</span> bowAttack = <span class="keyword">new</span> <span class="title class_">BowAttack</span>();<span class="keyword">const</span> magicAttack = <span class="keyword">new</span> <span class="title class_">MagicAttack</span>();<span class="comment">// 캐릭터의 공격 전략 설정</span>warrior.<span class="title function_">setAttackStrategy</span>(swordAttack);archer.<span class="title function_">setAttackStrategy</span>(bowAttack);mage.<span class="title function_">setAttackStrategy</span>(magicAttack);warrior.<span class="title function_">attack</span>(); <span class="comment">// Swings a sword!</span>archer.<span class="title function_">attack</span>(); <span class="comment">// Shoots an arrow!</span>mage.<span class="title function_">attack</span>(); <span class="comment">// Casts a spell!</span><span class="comment">// 전사 캐릭터의 공격 전략 변경</span>warrior.<span class="title function_">setAttackStrategy</span>(magicAttack);warrior.<span class="title function_">attack</span>(); <span class="comment">// Casts a spell!</span></code></pre><h3 id="3-전략-패턴의-장점"><a href="#3-전략-패턴의-장점" class="headerlink" title="3. 전략 패턴의 장점"></a>3. 전략 패턴의 장점</h3><ul><li><strong>유연성</strong>: 행위를 객체 구성으로 변경할 수 있습니다.</li><li><strong>재사용성</strong>: 다양한 알고리즘을 쉽게 추가하고 교체할 수 있습니다.</li><li><strong>유지보수성</strong>: 알고리즘을 개별 클래스로 분리하여 코드의 가독성과 유지보수성을 높일 수 있습니다.</li></ul><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 전략 패턴의 개념과 사용 예제에 대해 알아보았습니다. 전략 패턴은 알고리즘을 캡슐화하여 객체의 행위를 동적으로 바꿀 수 있게 해주는 유연한 패턴입니다.<br>RPG 게임 예제를 통해 전략 패턴을 실제로 어떻게 활용할 수 있는지 살펴보았습니다. 전략 패턴을 사용하면 다양한 알고리즘을 쉽게 추가하고 교체할 수 있습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> 디자인패턴 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>데코레이터 패턴 (Decorator Pattern)</title>
      <link href="/design-pattern/6/"/>
      <url>/design-pattern/6/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-데코레이터-패턴-Decorator-Pattern"><a href="#JavaScript-데코레이터-패턴-Decorator-Pattern" class="headerlink" title="JavaScript 데코레이터 패턴 (Decorator Pattern)"></a>JavaScript 데코레이터 패턴 (Decorator Pattern)</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 자바스크립트 디자인 패턴 중 하나인 데코레이터 패턴(Decorator Pattern)에 대해 알아보겠습니다. 데코레이터 패턴은 객체에 동적으로 새로운 행동(메서드)이나 속성(프로퍼티)을 추가할 수 있는 패턴입니다. 이 패턴은 상속을 사용하지 않고도 객체의 기능을 확장할 수 있는 유연한 방법을 제공합니다.</p><h2 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h2><h3 id="데코레이터-패턴이란"><a href="#데코레이터-패턴이란" class="headerlink" title="데코레이터 패턴이란?"></a>데코레이터 패턴이란?</h3><p>데코레이터 패턴은 기존 객체를 감싸는(wrapper) 형태로, 그 객체에 새로운 기능을 추가하는 디자인 패턴입니다. 주로 다음과 같은 장점을 제공합니다:</p><ul><li><strong>유연성</strong>: 상속 대신 객체 합성을 통해 기능을 추가하므로, 객체 간 결합도를 낮출 수 있습니다.</li><li><strong>확장성</strong>: 객체의 기능을 동적으로 확장할 수 있습니다.</li><li><strong>단일 책임 원칙 준수</strong>: 각 데코레이터는 독립적인 기능을 추가하므로, 객체의 책임을 분리할 수 있습니다.</li></ul><h2 id="예시-코드"><a href="#예시-코드" class="headerlink" title="예시 코드"></a>예시 코드</h2><p>이번 예제에서는 RPG 게임에서 다양한 캐릭터의 능력을 데코레이터 패턴을 사용하여 동적으로 추가하는 방법을 구현해보겠습니다.</p><h3 id="1-데코레이터-패턴-구현"><a href="#1-데코레이터-패턴-구현" class="headerlink" title="1. 데코레이터 패턴 구현"></a>1. 데코레이터 패턴 구현</h3><p>기본 캐릭터 클래스와 데코레이터 클래스를 정의합니다.</p><pre><code class="highlight javascript"><span class="keyword">class</span> <span class="title class_">Character</span> &#123;  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;    <span class="variable language_">this</span>.<span class="property">name</span> = name;  &#125;  <span class="title function_">attack</span>(<span class="params"></span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> attacks!`</span>);  &#125;&#125;<span class="keyword">class</span> <span class="title class_">CharacterDecorator</span> &#123;  <span class="title function_">constructor</span>(<span class="params">character</span>) &#123;    <span class="variable language_">this</span>.<span class="property">character</span> = character;  &#125;  <span class="title function_">attack</span>(<span class="params"></span>) &#123;    <span class="variable language_">this</span>.<span class="property">character</span>.<span class="title function_">attack</span>();  &#125;&#125;<span class="keyword">class</span> <span class="title class_">FireDecorator</span> <span class="keyword">extends</span> <span class="title class_ inherited__">CharacterDecorator</span> &#123;  <span class="title function_">attack</span>(<span class="params"></span>) &#123;    <span class="variable language_">this</span>.<span class="property">character</span>.<span class="title function_">attack</span>();    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.character.name&#125;</span> uses Fire Attack!`</span>);  &#125;&#125;<span class="keyword">class</span> <span class="title class_">IceDecorator</span> <span class="keyword">extends</span> <span class="title class_ inherited__">CharacterDecorator</span> &#123;  <span class="title function_">attack</span>(<span class="params"></span>) &#123;    <span class="variable language_">this</span>.<span class="property">character</span>.<span class="title function_">attack</span>();    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.character.name&#125;</span> uses Ice Attack!`</span>);  &#125;&#125;<span class="keyword">class</span> <span class="title class_">LightningDecorator</span> <span class="keyword">extends</span> <span class="title class_ inherited__">CharacterDecorator</span> &#123;  <span class="title function_">attack</span>(<span class="params"></span>) &#123;    <span class="variable language_">this</span>.<span class="property">character</span>.<span class="title function_">attack</span>();    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.character.name&#125;</span> uses Lightning Attack!`</span>);  &#125;&#125;</code></pre><h3 id="2-RPG-게임에서의-활용-예제"><a href="#2-RPG-게임에서의-활용-예제" class="headerlink" title="2. RPG 게임에서의 활용 예제"></a>2. RPG 게임에서의 활용 예제</h3><p>데코레이터 패턴을 사용하여 캐릭터에 다양한 능력을 동적으로 추가하고, 각 캐릭터의 공격 방식을 호출해보겠습니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> warrior = <span class="keyword">new</span> <span class="title class_">Character</span>(<span class="string">&quot;Warrior&quot;</span>);<span class="keyword">const</span> fireWarrior = <span class="keyword">new</span> <span class="title class_">FireDecorator</span>(warrior);<span class="keyword">const</span> iceFireWarrior = <span class="keyword">new</span> <span class="title class_">IceDecorator</span>(fireWarrior);<span class="keyword">const</span> ultimateWarrior = <span class="keyword">new</span> <span class="title class_">LightningDecorator</span>(iceFireWarrior);ultimateWarrior.<span class="title function_">attack</span>();<span class="comment">// Warrior attacks!</span><span class="comment">// Warrior uses Fire Attack!</span><span class="comment">// Warrior uses Ice Attack!</span><span class="comment">// Warrior uses Lightning Attack!</span></code></pre><h3 id="3-데코레이터-패턴의-장점"><a href="#3-데코레이터-패턴의-장점" class="headerlink" title="3. 데코레이터 패턴의 장점"></a>3. 데코레이터 패턴의 장점</h3><ul><li><strong>유연성</strong>: 상속을 사용하지 않고도 객체의 기능을 확장할 수 있습니다.</li><li><strong>확장성</strong>: 객체의 기능을 동적으로 추가할 수 있습니다.</li><li><strong>단일 책임 원칙 준수</strong>: 각 데코레이터는 독립적인 기능을 추가하므로, 객체의 책임을 분리할 수 있습니다.</li></ul><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 데코레이터 패턴의 개념과 사용 예제에 대해 알아보았습니다. 데코레이터 패턴은 객체에 동적으로 새로운 행동이나 속성을 추가하는 데 유용한 패턴으로, 상속 대신 객체 합성을 통해 기능을 추가할 수 있습니다. RPG 게임 예제를 통해 데코레이터 패턴을 실제로 어떻게 활용할 수 있는지 살펴보았습니다. 데코레이터 패턴을 사용하면 객체의 기능을 더욱 유연하게 확장할 수 있습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> 디자인패턴 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>프로토타입 패턴 (Prototype Pattern)</title>
      <link href="/design-pattern/5/"/>
      <url>/design-pattern/5/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-프로토타입-패턴-Prototype-Pattern"><a href="#JavaScript-프로토타입-패턴-Prototype-Pattern" class="headerlink" title="JavaScript 프로토타입 패턴 (Prototype Pattern)"></a>JavaScript 프로토타입 패턴 (Prototype Pattern)</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 자바스크립트 디자인 패턴 중 하나인 프로토타입 패턴(Prototype Pattern)에 대해 알아보겠습니다. 프로토타입 패턴은 객체를 복사하여 새로운 객체를 생성하는 패턴입니다. 이 패턴은 특히 객체 생성 비용이 높거나, 복잡한 초기 설정이 필요한 경우 유용합니다.</p><h2 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h2><h3 id="프로토타입-패턴이란"><a href="#프로토타입-패턴이란" class="headerlink" title="프로토타입 패턴이란?"></a>프로토타입 패턴이란?</h3><p>프로토타입 패턴은 기존 객체를 복제하여 새로운 객체를 생성하는 디자인 패턴입니다. 주로 다음과 같은 장점을 제공합니다:</p><ul><li><strong>성능 향상</strong>: 새로운 객체를 생성할 때 기존 객체를 복제하므로, 객체 생성 비용을 절감할 수 있습니다.</li><li><strong>유연성</strong>: 객체의 복제본을 수정하여 새로운 객체를 쉽게 생성할 수 있습니다.</li><li><strong>캡슐화</strong>: 객체 생성 로직을 캡슐화하여 코드의 가독성과 유지보수성을 높일 수 있습니다.</li></ul><h2 id="예시-코드"><a href="#예시-코드" class="headerlink" title="예시 코드"></a>예시 코드</h2><p>이번 예제에서는 RPG 게임에서 다양한 캐릭터를 프로토타입 패턴을 사용하여 생성하는 방법을 구현해보겠습니다.</p><h3 id="1-프로토타입-패턴-구현"><a href="#1-프로토타입-패턴-구현" class="headerlink" title="1. 프로토타입 패턴 구현"></a>1. 프로토타입 패턴 구현</h3><pre><code class="highlight javascript"><span class="keyword">class</span> <span class="title class_">Character</span> &#123;  <span class="title function_">constructor</span>(<span class="params">name, type, attackMessage</span>) &#123;    <span class="variable language_">this</span>.<span class="property">name</span> = name;    <span class="variable language_">this</span>.<span class="property">type</span> = type;    <span class="variable language_">this</span>.<span class="property">attackMessage</span> = attackMessage;  &#125;  <span class="title function_">attack</span>(<span class="params"></span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> <span class="subst">$&#123;<span class="variable language_">this</span>.attackMessage&#125;</span>`</span>);  &#125;  <span class="title function_">clone</span>(<span class="params"></span>) &#123;    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="variable language_">this</span>);  &#125;&#125;<span class="keyword">const</span> warriorPrototype = <span class="keyword">new</span> <span class="title class_">Character</span>(<span class="string">&quot;Warrior&quot;</span>, <span class="string">&quot;Warrior&quot;</span>, <span class="string">&quot;swings a sword!&quot;</span>);<span class="keyword">const</span> magePrototype = <span class="keyword">new</span> <span class="title class_">Character</span>(<span class="string">&quot;Mage&quot;</span>, <span class="string">&quot;Mage&quot;</span>, <span class="string">&quot;casts a fireball!&quot;</span>);<span class="keyword">const</span> roguePrototype = <span class="keyword">new</span> <span class="title class_">Character</span>(  <span class="string">&quot;Rogue&quot;</span>,  <span class="string">&quot;Rogue&quot;</span>,  <span class="string">&quot;strikes from the shadows!&quot;</span>);</code></pre><h3 id="2-RPG-게임에서의-활용-예제"><a href="#2-RPG-게임에서의-활용-예제" class="headerlink" title="2. RPG 게임에서의 활용 예제"></a>2. RPG 게임에서의 활용 예제</h3><p>프로토타입 패턴을 사용하여 다양한 캐릭터를 생성하고, 각 캐릭터의 고유한 공격 방식을 호출해보겠습니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> thorin = warriorPrototype.<span class="title function_">clone</span>();thorin.<span class="property">name</span> = <span class="string">&quot;Thorin&quot;</span>;<span class="keyword">const</span> gandalf = magePrototype.<span class="title function_">clone</span>();gandalf.<span class="property">name</span> = <span class="string">&quot;Gandalf&quot;</span>;<span class="keyword">const</span> loki = roguePrototype.<span class="title function_">clone</span>();loki.<span class="property">name</span> = <span class="string">&quot;Loki&quot;</span>;thorin.<span class="title function_">attack</span>(); <span class="comment">// Thorin swings a sword!</span>gandalf.<span class="title function_">attack</span>(); <span class="comment">// Gandalf casts a fireball!</span>loki.<span class="title function_">attack</span>(); <span class="comment">// Loki strikes from the shadows!</span></code></pre><h3 id="3-프로토타입-패턴의-장점"><a href="#3-프로토타입-패턴의-장점" class="headerlink" title="3. 프로토타입 패턴의 장점"></a>3. 프로토타입 패턴의 장점</h3><ul><li><strong>성능 향상</strong>: 객체를 복제하여 생성하므로, 객체 생성 비용이 절감됩니다.</li><li><strong>유연성</strong>: 기존 객체의 속성을 유지하면서, 새로운 객체를 쉽게 생성할 수 있습니다.</li><li><strong>코드 재사용성</strong>: 프로토타입 객체를 기반으로 새로운 객체를 생성하므로, 코드의 재사용성이 높아집니다.</li></ul><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 프로토타입 패턴의 개념과 사용 예제에 대해 알아보았습니다. 프로토타입 패턴은 객체를 복제하여 새로운 객체를 생성하는 데 유용한 패턴으로, 특히 객체 생성 비용이 높거나 복잡한 초기 설정이 필요한 경우에 효과적입니다. RPG 게임 예제를 통해 프로토타입 패턴을 실제로 어떻게 활용할 수 있는지 살펴보았습니다. 프로토타입 패턴을 사용하면 객체 생성을 더욱 효율적으로 관리할 수 있습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> 디자인패턴 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>팩토리 패턴 (Factory Pattern)</title>
      <link href="/design-pattern/4/"/>
      <url>/design-pattern/4/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-팩토리-패턴-Factory-Pattern"><a href="#JavaScript-팩토리-패턴-Factory-Pattern" class="headerlink" title="JavaScript 팩토리 패턴 (Factory Pattern)"></a>JavaScript 팩토리 패턴 (Factory Pattern)</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 자바스크립트 디자인 패턴 중 하나인 팩토리 패턴(Factory Pattern)에 대해 알아보겠습니다. 팩토리 패턴은 객체 생성의 공통적인 인터페이스를 정의하여, 객체 생성의 책임을 팩토리 클래스에 위임하는 패턴입니다. 이는 객체 생성 로직을 캡슐화하여 코드의 유연성과 재사용성을 높여줍니다.</p><h2 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h2><h3 id="팩토리-패턴이란"><a href="#팩토리-패턴이란" class="headerlink" title="팩토리 패턴이란?"></a>팩토리 패턴이란?</h3><p>팩토리 패턴은 객체 생성을 위한 인터페이스를 정의하고, 실제 객체 생성 작업은 서브클래스에서 수행하는 디자인 패턴입니다. 주로 다음과 같은 장점을 제공합니다:</p><ul><li><strong>코드 재사용성</strong>: 객체 생성 로직을 캡슐화하여, 중복 코드를 줄일 수 있습니다.</li><li><strong>유연성</strong>: 객체 생성 방식을 변경해도 기존 코드를 수정할 필요가 없습니다.</li><li><strong>확장성</strong>: 새로운 클래스가 추가되더라도 팩토리 메서드만 수정하면 되므로 확장이 용이합니다.</li></ul><h2 id="예시-코드"><a href="#예시-코드" class="headerlink" title="예시 코드"></a>예시 코드</h2><p>이번 예제에서는 RPG 게임에서 다양한 캐릭터를 생성하는 팩토리 패턴을 구현해보겠습니다.</p><h3 id="1-팩토리-패턴-구현"><a href="#1-팩토리-패턴-구현" class="headerlink" title="1. 팩토리 패턴 구현"></a>1. 팩토리 패턴 구현</h3><pre><code class="highlight javascript"><span class="keyword">class</span> <span class="title class_">Character</span> &#123;  <span class="title function_">constructor</span>(<span class="params">name, type</span>) &#123;    <span class="variable language_">this</span>.<span class="property">name</span> = name;    <span class="variable language_">this</span>.<span class="property">type</span> = type;  &#125;  <span class="title function_">attack</span>(<span class="params"></span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> attacks with basic attack!`</span>);  &#125;&#125;<span class="keyword">class</span> <span class="title class_">Warrior</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Character</span> &#123;  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;    <span class="variable language_">super</span>(name, <span class="string">&quot;Warrior&quot;</span>);  &#125;  <span class="title function_">attack</span>(<span class="params"></span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> swings a sword!`</span>);  &#125;&#125;<span class="keyword">class</span> <span class="title class_">Mage</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Character</span> &#123;  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;    <span class="variable language_">super</span>(name, <span class="string">&quot;Mage&quot;</span>);  &#125;  <span class="title function_">attack</span>(<span class="params"></span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> casts a fireball!`</span>);  &#125;&#125;<span class="keyword">class</span> <span class="title class_">Rogue</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Character</span> &#123;  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;    <span class="variable language_">super</span>(name, <span class="string">&quot;Rogue&quot;</span>);  &#125;  <span class="title function_">attack</span>(<span class="params"></span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> strikes from the shadows!`</span>);  &#125;&#125;<span class="keyword">class</span> <span class="title class_">CharacterFactory</span> &#123;  <span class="keyword">static</span> <span class="title function_">createCharacter</span>(<span class="params">name, type</span>) &#123;    <span class="keyword">switch</span> (type) &#123;      <span class="keyword">case</span> <span class="string">&quot;Warrior&quot;</span>:        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Warrior</span>(name);      <span class="keyword">case</span> <span class="string">&quot;Mage&quot;</span>:        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Mage</span>(name);      <span class="keyword">case</span> <span class="string">&quot;Rogue&quot;</span>:        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Rogue</span>(name);      <span class="attr">default</span>:        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Character</span>(name, <span class="string">&quot;Unknown&quot;</span>);    &#125;  &#125;&#125;</code></pre><h3 id="2-RPG-게임에서의-활용-예제"><a href="#2-RPG-게임에서의-활용-예제" class="headerlink" title="2. RPG 게임에서의 활용 예제"></a>2. RPG 게임에서의 활용 예제</h3><p>팩토리 패턴을 사용하여 다양한 캐릭터를 생성하고, 각 캐릭터의 고유한 공격 방식을 호출해보겠습니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> warrior = <span class="title class_">CharacterFactory</span>.<span class="title function_">createCharacter</span>(<span class="string">&quot;Thorin&quot;</span>, <span class="string">&quot;Warrior&quot;</span>);<span class="keyword">const</span> mage = <span class="title class_">CharacterFactory</span>.<span class="title function_">createCharacter</span>(<span class="string">&quot;Gandalf&quot;</span>, <span class="string">&quot;Mage&quot;</span>);<span class="keyword">const</span> rogue = <span class="title class_">CharacterFactory</span>.<span class="title function_">createCharacter</span>(<span class="string">&quot;Loki&quot;</span>, <span class="string">&quot;Rogue&quot;</span>);warrior.<span class="title function_">attack</span>(); <span class="comment">// Thorin swings a sword!</span>mage.<span class="title function_">attack</span>(); <span class="comment">// Gandalf casts a fireball!</span>rogue.<span class="title function_">attack</span>(); <span class="comment">// Loki strikes from the shadows!</span></code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 팩토리 패턴의 개념과 사용 예제에 대해 알아보았습니다. 팩토리 패턴은 객체 생성의 책임을 팩토리 클래스에 위임하여, 코드의 유연성과 재사용성을 높이는 데 유용한 패턴입니다. RPG 게임 예제를 통해 팩토리 패턴을 실제로 어떻게 활용할 수 있는지 살펴보았습니다. 팩토리 패턴을 사용하면 다양한 객체 생성을 더욱 효율적으로 관리할 수 있습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> 디자인패턴 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>옵저버 패턴 (Observer Pattern)</title>
      <link href="/design-pattern/3/"/>
      <url>/design-pattern/3/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-옵저버-패턴-Observer-Pattern"><a href="#JavaScript-옵저버-패턴-Observer-Pattern" class="headerlink" title="JavaScript 옵저버 패턴 (Observer Pattern)"></a>JavaScript 옵저버 패턴 (Observer Pattern)</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 자바스크립트 디자인 패턴 중 하나인 옵저버 패턴(Observer Pattern)에 대해 알아보겠습니다. 옵저버 패턴은 객체의 상태 변화를 관찰하고, 그 변화를 다른 객체에 알리는 데 유용한 패턴입니다. 특히, RPG 게임과 같은 이벤트 중심의 애플리케이션에서 옵저버 패턴을 사용하면 이벤트 관리와 통지가 더욱 효율적으로 이루어질 수 있습니다.</p><h2 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h2><h3 id="옵저버-패턴이란"><a href="#옵저버-패턴이란" class="headerlink" title="옵저버 패턴이란?"></a>옵저버 패턴이란?</h3><p>옵저버 패턴은 객체의 상태 변화를 관찰하는 옵저버들을 등록하고, 상태 변화가 발생할 때마다 옵저버들에게 알리는 디자인 패턴입니다. 주로 이벤트 핸들링 시스템에서 사용되며, 다음과 같은 장점을 제공합니다:</p><ul><li><strong>이벤트 중심의 프로그래밍</strong>: 객체의 상태 변화에 따라 다양한 이벤트를 처리할 수 있습니다.</li><li><strong>느슨한 결합</strong>: 주체(Subject)와 옵저버(Observer) 간의 결합도를 낮춰, 코드의 유연성과 재사용성을 높입니다.</li><li><strong>확장성</strong>: 새로운 옵저버를 쉽게 추가할 수 있어, 시스템 확장이 용이합니다.</li></ul><h2 id="예시-코드"><a href="#예시-코드" class="headerlink" title="예시 코드"></a>예시 코드</h2><p>이번 예제에서는 RPG 게임에서 캐릭터의 상태 변화를 관찰하는 옵저버 패턴을 구현해보겠습니다. 캐릭터의 상태가 변할 때마다 이를 관찰하는 옵저버에게 알리는 방식으로 구현합니다.</p><h3 id="1-옵저버-패턴-구현"><a href="#1-옵저버-패턴-구현" class="headerlink" title="1. 옵저버 패턴 구현"></a>1. 옵저버 패턴 구현</h3><pre><code class="highlight javascript"><span class="keyword">class</span> <span class="title class_">Subject</span> &#123;  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;    <span class="variable language_">this</span>.<span class="property">observers</span> = [];  &#125;  <span class="title function_">addObserver</span>(<span class="params">observer</span>) &#123;    <span class="variable language_">this</span>.<span class="property">observers</span>.<span class="title function_">push</span>(observer);  &#125;  <span class="title function_">removeObserver</span>(<span class="params">observer</span>) &#123;    <span class="variable language_">this</span>.<span class="property">observers</span> = <span class="variable language_">this</span>.<span class="property">observers</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">obs</span>) =&gt;</span> obs !== observer);  &#125;  <span class="title function_">notifyObservers</span>(<span class="params">data</span>) &#123;    <span class="variable language_">this</span>.<span class="property">observers</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">observer</span>) =&gt;</span> observer.<span class="title function_">update</span>(data));  &#125;&#125;<span class="keyword">class</span> <span class="title class_">Observer</span> &#123;  <span class="title function_">update</span>(<span class="params">data</span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Observer received data:&quot;</span>, data);  &#125;&#125;</code></pre><h3 id="2-RPG-게임에서의-활용-예제"><a href="#2-RPG-게임에서의-활용-예제" class="headerlink" title="2. RPG 게임에서의 활용 예제"></a>2. RPG 게임에서의 활용 예제</h3><p>캐릭터의 체력 변화를 관찰하는 옵저버 패턴을 RPG 게임에서 구현해보겠습니다.</p><pre><code class="highlight javascript"><span class="keyword">class</span> <span class="title class_">RPGCharacter</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Subject</span> &#123;  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;    <span class="variable language_">super</span>();    <span class="variable language_">this</span>.<span class="property">name</span> = name;    <span class="variable language_">this</span>.<span class="property">health</span> = <span class="number">100</span>;  &#125;  <span class="title function_">takeDamage</span>(<span class="params">amount</span>) &#123;    <span class="variable language_">this</span>.<span class="property">health</span> -= amount;    <span class="variable language_">console</span>.<span class="title function_">log</span>(      <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> took <span class="subst">$&#123;amount&#125;</span> damage, health is now <span class="subst">$&#123;<span class="variable language_">this</span>.health&#125;</span>`</span>    );    <span class="variable language_">this</span>.<span class="title function_">notifyObservers</span>(&#123; <span class="attr">name</span>: <span class="variable language_">this</span>.<span class="property">name</span>, <span class="attr">health</span>: <span class="variable language_">this</span>.<span class="property">health</span> &#125;);  &#125;  <span class="title function_">heal</span>(<span class="params">amount</span>) &#123;    <span class="variable language_">this</span>.<span class="property">health</span> += amount;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> healed <span class="subst">$&#123;amount&#125;</span>, health is now <span class="subst">$&#123;<span class="variable language_">this</span>.health&#125;</span>`</span>);    <span class="variable language_">this</span>.<span class="title function_">notifyObservers</span>(&#123; <span class="attr">name</span>: <span class="variable language_">this</span>.<span class="property">name</span>, <span class="attr">health</span>: <span class="variable language_">this</span>.<span class="property">health</span> &#125;);  &#125;&#125;<span class="keyword">class</span> <span class="title class_">HealthObserver</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Observer</span> &#123;  <span class="title function_">update</span>(<span class="params">data</span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`HealthObserver: <span class="subst">$&#123;data.name&#125;</span>&#x27;s health is now <span class="subst">$&#123;data.health&#125;</span>`</span>);  &#125;&#125;<span class="comment">// 캐릭터와 옵저버 생성</span><span class="keyword">const</span> hero = <span class="keyword">new</span> <span class="title class_">RPGCharacter</span>(<span class="string">&quot;Hero&quot;</span>);<span class="keyword">const</span> healthObserver = <span class="keyword">new</span> <span class="title class_">HealthObserver</span>();<span class="comment">// 옵저버 등록</span>hero.<span class="title function_">addObserver</span>(healthObserver);<span class="comment">// 캐릭터의 상태 변화</span>hero.<span class="title function_">takeDamage</span>(<span class="number">20</span>); <span class="comment">// Hero took 20 damage, health is now 80</span><span class="comment">// HealthObserver: Hero&#x27;s health is now 80</span>hero.<span class="title function_">heal</span>(<span class="number">10</span>); <span class="comment">// Hero healed 10, health is now 90</span><span class="comment">// HealthObserver: Hero&#x27;s health is now 90</span></code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 옵저버 패턴의 개념과 사용 예제에 대해 알아보았습니다. 옵저버 패턴은 객체의 상태 변화를 관찰하고, 그 변화를 다른 객체에 알리는 데 유용한 패턴입니다. RPG 게임 예제를 통해 옵저버 패턴을 실제로 어떻게 활용할 수 있는지 살펴보았습니다. 옵저버 패턴을 사용하면 이벤트 중심의 애플리케이션을 더욱 효율적으로 관리할 수 있습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> 디자인패턴 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Node.js Yarn</title>
      <link href="/cli/3/"/>
      <url>/cli/3/</url>
      
        <content type="html"><![CDATA[<h1 id="Yarn-빠르고-안정적인-패키지-매니저"><a href="#Yarn-빠르고-안정적인-패키지-매니저" class="headerlink" title="Yarn: 빠르고 안정적인 패키지 매니저"></a>Yarn: 빠르고 안정적인 패키지 매니저</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 빠르고 안정적인 패키지 매니저인 Yarn에 대해 알아보겠습니다. Yarn의 역할과 필요성, 설치 방법, 기본 사용법과 고급 사용법, 그리고 실제 프로젝트에서 Yarn을 활용하는 방법을 알아보겠습니다.</p><h2 id="1-Yarn-소개"><a href="#1-Yarn-소개" class="headerlink" title="1. Yarn 소개"></a>1. Yarn 소개</h2><h3 id="Yarn이란-무엇인가"><a href="#Yarn이란-무엇인가" class="headerlink" title="Yarn이란 무엇인가?"></a>Yarn이란 무엇인가?</h3><p>Yarn은 페이스북, 구글, Exponent, Tilde에서 공동 개발한 패키지 매니저로, 빠르고 신뢰성 있는 패키지 관리 기능을 제공합니다.</p><h3 id="Yarn의-역할과-중요성"><a href="#Yarn의-역할과-중요성" class="headerlink" title="Yarn의 역할과 중요성"></a>Yarn의 역할과 중요성</h3><ul><li><strong>빠른 속도</strong>: Yarn은 병렬 설치를 통해 빠른 속도로 패키지를 설치할 수 있습니다.</li><li><strong>일관성</strong>: Yarn.lock 파일을 통해 설치된 패키지의 버전을 고정하여 일관된 개발 환경을 유지할 수 있습니다.</li><li><strong>보안성</strong>: 패키지 설치 시 체크섬을 통해 데이터의 무결성을 확인합니다.</li></ul><h2 id="2-설치-방법"><a href="#2-설치-방법" class="headerlink" title="2. 설치 방법"></a>2. 설치 방법</h2><h3 id="Yarn-설치-방법"><a href="#Yarn-설치-방법" class="headerlink" title="Yarn 설치 방법"></a>Yarn 설치 방법</h3><p>Yarn은 다양한 방법으로 설치할 수 있습니다.</p><h4 id="npm을-통한-설치"><a href="#npm을-통한-설치" class="headerlink" title="npm을 통한 설치"></a>npm을 통한 설치</h4><pre><code class="highlight bash">npm install -g yarn</code></pre><h4 id="Homebrew를-통한-설치-macOS"><a href="#Homebrew를-통한-설치-macOS" class="headerlink" title="Homebrew를 통한 설치 (macOS)"></a>Homebrew를 통한 설치 (macOS)</h4><pre><code class="highlight bash">brew install yarn</code></pre><p>설치가 완료되면 터미널에서 <code>yarn -v</code> 명령어를 실행하여 설치가 제대로 되었는지 확인할 수 있습니다.</p><pre><code class="highlight bash">yarn -v</code></pre><h2 id="3-기본-사용법"><a href="#3-기본-사용법" class="headerlink" title="3. 기본 사용법"></a>3. 기본 사용법</h2><h3 id="프로젝트-초기화"><a href="#프로젝트-초기화" class="headerlink" title="프로젝트 초기화"></a>프로젝트 초기화</h3><ul><li><strong><code>yarn init</code></strong>: 새로운 Yarn 프로젝트를 초기화하고 <code>package.json</code> 파일을 생성합니다.</li></ul><pre><code class="highlight bash">yarn init</code></pre><h3 id="패키지-설치"><a href="#패키지-설치" class="headerlink" title="패키지 설치"></a>패키지 설치</h3><ul><li><strong>패키지 설치</strong>: <code>yarn add &lt;package-name&gt;</code></li></ul><pre><code class="highlight bash">yarn add express</code></pre><ul><li><strong>패키지 제거</strong>: <code>yarn remove &lt;package-name&gt;</code></li></ul><pre><code class="highlight bash">yarn remove express</code></pre><ul><li><strong>패키지 업데이트</strong>: <code>yarn upgrade &lt;package-name&gt;</code></li></ul><pre><code class="highlight bash">yarn upgrade express</code></pre><ul><li><strong>설치된 패키지 목록</strong>: <code>yarn list</code></li></ul><pre><code class="highlight bash">yarn list</code></pre><h2 id="4-고급-사용법"><a href="#4-고급-사용법" class="headerlink" title="4. 고급 사용법"></a>4. 고급 사용법</h2><h3 id="전역-패키지-설치"><a href="#전역-패키지-설치" class="headerlink" title="전역 패키지 설치"></a>전역 패키지 설치</h3><ul><li><strong>전역 패키지 설치</strong>: <code>yarn global add &lt;package-name&gt;</code></li></ul><pre><code class="highlight bash">yarn global add nodemon</code></pre><h3 id="스크립트-실행"><a href="#스크립트-실행" class="headerlink" title="스크립트 실행"></a>스크립트 실행</h3><ul><li><strong>스크립트 실행</strong>: <code>yarn run &lt;script-name&gt;</code></li></ul><pre><code class="highlight json"><span class="comment">// package.json</span><span class="punctuation">&#123;</span>  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node app.js&quot;</span><span class="punctuation">,</span>    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span>  <span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></code></pre><pre><code class="highlight bash">yarn run start</code></pre><h3 id="보안-감사"><a href="#보안-감사" class="headerlink" title="보안 감사"></a>보안 감사</h3><ul><li><strong>보안 감사</strong>: <code>yarn audit</code></li></ul><pre><code class="highlight bash">yarn audit</code></pre><h3 id="패키지-상태-확인"><a href="#패키지-상태-확인" class="headerlink" title="패키지 상태 확인"></a>패키지 상태 확인</h3><ul><li><strong>패키지 상태 확인</strong>: <code>yarn outdated</code></li></ul><pre><code class="highlight bash">yarn outdated</code></pre><h2 id="5-실습-예제"><a href="#5-실습-예제" class="headerlink" title="5. 실습 예제"></a>5. 실습 예제</h2><h3 id="프로젝트-생성-및-Yarn-사용"><a href="#프로젝트-생성-및-Yarn-사용" class="headerlink" title="프로젝트 생성 및 Yarn 사용"></a>프로젝트 생성 및 Yarn 사용</h3><ol><li><strong>새 프로젝트 생성</strong>: 새로운 디렉토리를 만들고 이동합니다.</li></ol><pre><code class="highlight bash"><span class="built_in">mkdir</span> my-yarn-project<span class="built_in">cd</span> my-yarn-project</code></pre><ol start="2"><li><strong>프로젝트 초기화</strong>: <code>yarn init</code> 명령어를 사용하여 프로젝트를 초기화합니다.</li></ol><pre><code class="highlight bash">yarn init -y</code></pre><ol start="3"><li><strong>패키지 설치</strong>: 필요한 패키지를 설치합니다.</li></ol><pre><code class="highlight bash">yarn add express</code></pre><ol start="4"><li><strong>스크립트 설정</strong>: <code>package.json</code> 파일에 스크립트를 추가합니다.</li></ol><pre><code class="highlight json"><span class="comment">// package.json</span><span class="punctuation">&#123;</span>  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;my-yarn-project&quot;</span><span class="punctuation">,</span>  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span>  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span>  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span><span class="punctuation">,</span>  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node app.js&quot;</span><span class="punctuation">,</span>    <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;nodemon app.js&quot;</span>  <span class="punctuation">&#125;</span><span class="punctuation">,</span>  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>    <span class="attr">&quot;express&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.17.1&quot;</span>  <span class="punctuation">&#125;</span><span class="punctuation">,</span>  <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>    <span class="attr">&quot;nodemon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.0.7&quot;</span>  <span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></code></pre><ol start="5"><li><strong>애플리케이션 실행</strong>: <code>yarn run start</code> 또는 <code>yarn run dev</code> 명령어를 사용하여 애플리케이션을 실행합니다.</li></ol><pre><code class="highlight bash">yarn run startyarn run dev</code></pre><h2 id="6-Yarn-명령어-사전"><a href="#6-Yarn-명령어-사전" class="headerlink" title="6. Yarn 명령어 사전"></a>6. Yarn 명령어 사전</h2><ul><li><strong><code>yarn init</code></strong>: 프로젝트를 초기화하고 <code>package.json</code> 파일을 생성합니다.</li></ul><pre><code class="highlight bash">yarn init</code></pre><ul><li><strong><code>yarn add &lt;package-name&gt;</code></strong>: 특정 패키지를 설치합니다.</li></ul><pre><code class="highlight bash">yarn add express</code></pre><ul><li><strong><code>yarn remove &lt;package-name&gt;</code></strong>: 특정 패키지를 제거합니다.</li></ul><pre><code class="highlight bash">yarn remove express</code></pre><ul><li><strong><code>yarn upgrade &lt;package-name&gt;</code></strong>: 특정 패키지를 업데이트합니다.</li></ul><pre><code class="highlight bash">yarn upgrade express</code></pre><ul><li><strong><code>yarn list</code></strong>: 설치된 패키지 목록을 표시합니다.</li></ul><pre><code class="highlight bash">yarn list</code></pre><ul><li><strong><code>yarn global add &lt;package-name&gt;</code></strong>: 전역 패키지를 설치합니다.</li></ul><pre><code class="highlight bash">yarn global add nodemon</code></pre><ul><li><strong><code>yarn run &lt;script-name&gt;</code></strong>: 스크립트를 실행합니다.</li></ul><pre><code class="highlight bash">yarn run start</code></pre><ul><li><strong><code>yarn audit</code></strong>: 패키지의 보안 상태를 감사합니다.</li></ul><pre><code class="highlight bash">yarn audit</code></pre><ul><li><strong><code>yarn outdated</code></strong>: 업데이트가 필요한 패키지를 확인합니다.</li></ul><pre><code class="highlight bash">yarn outdated</code></pre><ul><li><strong><code>yarn cache clean</code></strong>: Yarn 캐시를 정리합니다.</li></ul><pre><code class="highlight bash">yarn cache clean</code></pre><ul><li><strong><code>yarn config</code></strong>: Yarn 설정을 관리합니다.</li></ul><pre><code class="highlight bash">yarn config <span class="built_in">set</span> registry &lt;url&gt;</code></pre><ul><li><strong><code>yarn bin</code></strong>: 현재 프로젝트의 bin 디렉토리를 출력합니다.</li></ul><pre><code class="highlight bash">yarn bin</code></pre><ul><li><strong><code>yarn add &lt;package-name&gt;@&lt;version&gt;</code></strong>: 특정 버전의 패키지를 설치합니다.</li></ul><pre><code class="highlight bash">yarn add express@4.17.1</code></pre><h3 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h3><p>이번 시간에는 Yarn의 기본 개념부터 설치 방법, 기본 및 고급 사용법, 추가 명령어까지 다루었습니다. Yarn을 통해 Node.js 프로젝트를 효율적으로 관리하고 개발할 수 있습니다. 다음 시간에는 또 다른 유용한 CLI 도구를 소개하겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> CLI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CSS Color 모음</title>
      <link href="/css/colors/"/>
      <url>/css/colors/</url>
      
        <content type="html"><![CDATA[<details><summary>키워드</summary>웹 색상 코드Web color codes색상 이름과 코드Color names and codesCSS 색상 코드CSS color codes색상 팔레트Color paletteRGB 색상 코드RGB color codes색상 코드 복사Copy color codes색상 코드 사용법How to use color codes색상 코드 모음Collection of color codes인기 색상 코드Popular color codes색상 코드 검색Search color codes색상 코드 추천Recommended color codes</details><h1 id="CSS-Color-모음"><a href="#CSS-Color-모음" class="headerlink" title="CSS Color 모음"></a>CSS Color 모음</h1><script>  function changeBackgroundColor(color) {    document.getElementById('post').style.backgroundColor = color;    // setTimeout(function() {    //     document.getElementById('post').style.backgroundColor = '#F4F5F5';    // }, 2000);  }</script><blockquote><p>색상을 누르시면 배경에 적용됩니다! (Press the color to apply to the background!)</p></blockquote><h2 id="Reds"><a href="#Reds" class="headerlink" title="Reds"></a>Reds</h2><table><thead><tr><th>Color</th><th>Name</th><th>Color</th><th>Name</th><th>Color</th><th>Name</th></tr></thead><tbody><tr><td><div style="background-color: indianred; width: 100%; height: 40px;" onclick="changeBackgroundColor('indianred')"></div></td><td>IndianRed <code>#CD5C5C</code></td><td><div style="background-color: lightcoral; width: 100%; height: 40px;" onclick="changeBackgroundColor('lightcoral')"></div></td><td>LightCoral <code>#F08080</code></td><td><div style="background-color: salmon; width: 100%; height: 40px;" onclick="changeBackgroundColor('salmon')"></div></td><td>Salmon <code>#FA8072</code></td></tr><tr><td><div style="background-color: darksalmon; width: 100%; height: 40px;" onclick="changeBackgroundColor('darksalmon')"></div></td><td>DarkSalmon <code>#E9967A</code></td><td><div style="background-color: lightpink; width: 100%; height: 40px;" onclick="changeBackgroundColor('lightpink')"></div></td><td>LightPink <code>#FFB6C1</code></td><td><div style="background-color: pink; width: 100%; height: 40px;" onclick="changeBackgroundColor('pink')"></div></td><td>Pink <code>#FFC0CB</code></td></tr><tr><td><div style="background-color: crimson; width: 100%; height: 40px;" onclick="changeBackgroundColor('crimson')"></div></td><td>Crimson <code>#DC143C</code></td><td><div style="background-color: red; width: 100%; height: 40px;" onclick="changeBackgroundColor('red')"></div></td><td>Red <code>#FF0000</code></td><td><div style="background-color: firebrick; width: 100%; height: 40px;" onclick="changeBackgroundColor('firebrick')"></div></td><td>FireBrick <code>#B22222</code></td></tr><tr><td><div style="background-color: darkred; width: 100%; height: 40px;" onclick="changeBackgroundColor('darkred')"></div></td><td>DarkRed <code>#8B0000</code></td><td></td><td></td><td></td><td></td></tr></tbody></table><h2 id="Oranges"><a href="#Oranges" class="headerlink" title="Oranges"></a>Oranges</h2><table><thead><tr><th>Color</th><th>Name</th><th>Color</th><th>Name</th><th>Color</th><th>Name</th></tr></thead><tbody><tr><td><div style="background-color: coral; width: 100%; height:40px;" onclick="changeBackgroundColor('coral')"></div></td><td>Coral <code>#FF7F50</code></td><td><div style="background-color: tomato; width: 100%; height: 40px;" onclick="changeBackgroundColor('tomato')"></div></td><td>Tomato <code>#FF6347</code></td><td><div style="background-color: orangered; width: 100%; height: 40px;" onclick="changeBackgroundColor('orangered')"></div></td><td>OrangeRed <code>#FF4500</code></td></tr><tr><td><div style="background-color: gold; width: 100%; height: 40px;" onclick="changeBackgroundColor('gold')"></div></td><td>Gold <code>#FFD700</code></td><td><div style="background-color: orange; width: 100%; height: 40px;" onclick="changeBackgroundColor('orange')"></div></td><td>Orange <code>#FFA500</code></td><td><div style="background-color: darkorange; width: 100%; height: 40px;" onclick="changeBackgroundColor('darkorange')"></div></td><td>DarkOrange <code>#FF8C00</code></td></tr></tbody></table><h2 id="Yellows"><a href="#Yellows" class="headerlink" title="Yellows"></a>Yellows</h2><table><thead><tr><th>Color</th><th>Name</th><th>Color</th><th>Name</th><th>Color</th><th>Name</th></tr></thead><tbody><tr><td><div style="background-color: lightyellow; width: 100%; height: 40px;" onclick="changeBackgroundColor('lightyellow')"></div></td><td>LightYellow <code>#FFFFE0</code></td><td><div style="background-color: lemonchiffon; width: 100%; height: 40px;" onclick="changeBackgroundColor('lemonchiffon')"></div></td><td>LemonChiffon <code>#FFFACD</code></td><td><div style="background-color: lightgoldenrodyellow; width: 100%; height: 40px;" onclick="changeBackgroundColor('lightgoldenrodyellow')"></div></td><td>LightGoldenRodYellow <code>#FAFAD2</code></td></tr><tr><td><div style="background-color: papayawhip; width: 100%; height: 40px;" onclick="changeBackgroundColor('papayawhip')"></div></td><td>PapayaWhip <code>#FFEFD5</code></td><td><div style="background-color: moccasin; width: 100%; height: 40px;" onclick="changeBackgroundColor('moccasin')"></div></td><td>Moccasin <code>#FFE4B5</code></td><td><div style="background-color: peachpuff; width: 100%; height: 40px;" onclick="changeBackgroundColor('peachpuff')"></div></td><td>PeachPuff <code>#FFDAB9</code></td></tr><tr><td><div style="background-color: palegoldenrod; width: 100%; height: 40px;" onclick="changeBackgroundColor('palegoldenrod')"></div></td><td>PaleGoldenRod <code>#EEE8AA</code></td><td><div style="background-color: khaki; width: 100%; height: 40px;" onclick="changeBackgroundColor('khaki')"></div></td><td>Khaki <code>#F0E68C</code></td><td><div style="background-color: darkkhaki; width: 100%; height: 40px;" onclick="changeBackgroundColor('darkkhaki')"></div></td><td>DarkKhaki <code>#BDB76B</code></td></tr><tr><td><div style="background-color: yellow; width: 100%; height: 40px;" onclick="changeBackgroundColor('yellow')"></div></td><td>Yellow <code>#FFFF00</code></td><td></td><td></td><td></td><td></td></tr></tbody></table><h2 id="Greens"><a href="#Greens" class="headerlink" title="Greens"></a>Greens</h2><table><thead><tr><th>Color</th><th>Name</th><th>Color</th><th>Name</th><th>Color</th><th>Name</th></tr></thead><tbody><tr><td><div style="background-color: lawngreen; width: 100%; height: 40px;" onclick="changeBackgroundColor('lawngreen')"></div></td><td>LawnGreen <code>#7CFC00</code></td><td><div style="background-color: chartreuse; width: 100%; height: 40px;" onclick="changeBackgroundColor('chartreuse')"></div></td><td>Chartreuse <code>#7FFF00</code></td><td><div style="background-color: limegreen; width: 100%; height: 40px;" onclick="changeBackgroundColor('limegreen')"></div></td><td>LimeGreen <code>#32CD32</code></td></tr><tr><td><div style="background-color: lime; width: 100%; height: 40px;" onclick="changeBackgroundColor('lime')"></div></td><td>Lime <code>#00FF00</code></td><td><div style="background-color: forestgreen; width: 100%; height: 40px;" onclick="changeBackgroundColor('forestgreen')"></div></td><td>ForestGreen <code>#228B22</code></td><td><div style="background-color: green; width: 100%; height: 40px;" onclick="changeBackgroundColor('green')"></div></td><td>Green <code>#008000</code></td></tr><tr><td><div style="background-color: darkgreen; width: 100%; height: 40px;" onclick="changeBackgroundColor('darkgreen')"></div></td><td>DarkGreen <code>#006400</code></td><td><div style="background-color: greenyellow; width: 100%; height: 40px;" onclick="changeBackgroundColor('greenyellow')"></div></td><td>GreenYellow <code>#ADFF2F</code></td><td><div style="background-color: yellowgreen; width: 100%; height: 40px;" onclick="changeBackgroundColor('yellowgreen')"></div></td><td>YellowGreen <code>#9ACD32</code></td></tr><tr><td><div style="background-color: springgreen; width: 100%; height: 40px;" onclick="changeBackgroundColor('springgreen')"></div></td><td>SpringGreen <code>#00FF7F</code></td><td><div style="background-color: mediumspringgreen; width: 100%; height: 40px;" onclick="changeBackgroundColor('mediumspringgreen')"></div></td><td>MediumSpringGreen <code>#00FA9A</code></td><td><div style="background-color: lightgreen; width: 100%; height: 40px;" onclick="changeBackgroundColor('lightgreen')"></div></td><td>LightGreen <code>#90EE90</code></td></tr><tr><td><div style="background-color: palegreen; width: 100%; height: 40px;" onclick="changeBackgroundColor('palegreen')"></div></td><td>PaleGreen <code>#98FB98</code></td><td><div style="background-color: darkseagreen; width: 100%; height: 40px;" onclick="changeBackgroundColor('darkseagreen')"></div></td><td>DarkSeaGreen <code>#8FBC8F</code></td><td><div style="background-color: mediumseagreen; width: 100%; height: 40px;" onclick="changeBackgroundColor('mediumseagreen')"></div></td><td>MediumSeaGreen <code>#3CB371</code></td></tr><tr><td><div style="background-color: seagreen; width: 100%; height: 40px;" onclick="changeBackgroundColor('seagreen')"></div></td><td>SeaGreen <code>#2E8B57</code></td><td><div style="background-color: olive; width: 100%; height: 40px;" onclick="changeBackgroundColor('olive')"></div></td><td>Olive <code>#808000</code></td><td><div style="background-color: darkolivegreen; width: 100%; height: 40px;" onclick="changeBackgroundColor('darkolivegreen')"></div></td><td>DarkOliveGreen <code>#556B2F</code></td></tr><tr><td><div style="background-color: olivedrab; width: 100%; height: 40px;" onclick="changeBackgroundColor('olivedrab')"></div></td><td>OliveDrab <code>#6B8E23</code></td><td></td><td></td><td></td><td></td></tr></tbody></table><h2 id="Blues"><a href="#Blues" class="headerlink" title="Blues"></a>Blues</h2><table><thead><tr><th>Color</th><th>Name</th><th>Color</th><th>Name</th><th>Color</th><th>Name</th></tr></thead><tbody><tr><td><div style="background-color: lightcyan; width: 100%; height: 40px;" onclick="changeBackgroundColor('lightcyan')"></div></td><td>LightCyan <code>#E0FFFF</code></td><td><div style="background-color: cyan; width: 100%; height: 40px;" onclick="changeBackgroundColor('cyan')"></div></td><td>Cyan <code>#00FFFF</code></td><td><div style="background-color: aqua; width: 100%; height: 40px;" onclick="changeBackgroundColor('aqua')"></div></td><td>Aqua <code>#00FFFF</code></td></tr><tr><td><div style="background-color: aquamarine; width: 100%; height: 40px;" onclick="changeBackgroundColor('aquamarine')"></div></td><td>Aquamarine <code>#7FFFD4</code></td><td><div style="background-color: mediumaquamarine; width: 100%; height: 40px;" onclick="changeBackgroundColor('mediumaquamarine')"></div></td><td>MediumAquaMarine <code>#66CDAA</code></td><td><div style="background-color: paleturquoise; width: 100%; height: 40px;" onclick="changeBackgroundColor('paleturquoise')"></div></td><td>PaleTurquoise <code>#AFEEEE</code></td></tr><tr><td><div style="background-color: turquoise; width: 100%; height: 40px;" onclick="changeBackgroundColor('turquoise')"></div></td><td>Turquoise <code>#40E0D0</code></td><td><div style="background-color: mediumturquoise; width: 100%; height: 40px;" onclick="changeBackgroundColor('mediumturquoise')"></div></td><td>MediumTurquoise <code>#48D1CC</code></td><td><div style="background-color: darkturquoise; width: 100%; height: 40px;" onclick="changeBackgroundColor('darkturquoise')"></div></td><td>DarkTurquoise <code>#00CED1</code></td></tr><tr><td><div style="background-color: lightseagreen; width: 100%; height: 40px;" onclick="changeBackgroundColor('lightseagreen')"></div></td><td>LightSeaGreen <code>#20B2AA</code></td><td><div style="background-color: cadetblue; width: 100%; height: 40px;" onclick="changeBackgroundColor('cadetblue')"></div></td><td>CadetBlue <code>#5F9EA0</code></td><td><div style="background-color: darkcyan; width: 100%; height: 40px;" onclick="changeBackgroundColor('darkcyan')"></div></td><td>DarkCyan <code>#008B8B</code></td></tr><tr><td><div style="background-color: teal; width: 100%; height: 40px;" onclick="changeBackgroundColor('teal')"></div></td><td>Teal <code>#008080</code></td><td><div style="background-color: lightsteelblue; width: 100%; height: 40px;" onclick="changeBackgroundColor('lightsteelblue')"></div></td><td>LightSteelBlue <code>#B0C4DE</code></td><td><div style="background-color: powderblue; width: 100%; height: 40px;" onclick="changeBackgroundColor('powderblue')"></div></td><td>PowderBlue <code>#B0E0E6</code></td></tr><tr><td><div style="background-color: lightblue; width: 100%; height: 40px;" onclick="changeBackgroundColor('lightblue')"></div></td><td>LightBlue <code>#ADD8E6</code></td><td><div style="background-color: skyblue; width: 100%; height: 40px;" onclick="changeBackgroundColor('skyblue')"></div></td><td>SkyBlue <code>#87CEEB</code></td><td><div style="background-color: lightskyblue; width: 100%; height: 40px;" onclick="changeBackgroundColor('lightskyblue')"></div></td><td>LightSkyBlue <code>#87CEFA</code></td></tr><tr><td><div style="background-color: deepskyblue; width: 100%; height: 40px;" onclick="changeBackgroundColor('deepskyblue')"></div></td><td>DeepSkyBlue <code>#00BFFF</code></td><td><div style="background-color: dodgerblue; width: 100%; height: 40px;" onclick="changeBackgroundColor('dodgerblue')"></div></td><td>DodgerBlue <code>#1E90FF</code></td><td><div style="background-color: cornflowerblue; width: 100%; height: 40px;" onclick="changeBackgroundColor('cornflowerblue')"></div></td><td>CornflowerBlue <code>#6495ED</code></td></tr><tr><td><div style="background-color: steelblue; width: 100%; height: 40px;" onclick="changeBackgroundColor('steelblue')"></div></td><td>SteelBlue <code>#4682B4</code></td><td><div style="background-color: royalblue; width: 100%; height: 40px;" onclick="changeBackgroundColor('royalblue')"></div></td><td>RoyalBlue <code>#4169E1</code></td><td><div style="background-color: blue; width: 100%; height: 40px;" onclick="changeBackgroundColor('blue')"></div></td><td>Blue <code>#0000FF</code></td></tr><tr><td><div style="background-color: mediumblue; width: 100%; height: 40px;" onclick="changeBackgroundColor('mediumblue')"></div></td><td>MediumBlue <code>#0000CD</code></td><td><div style="background-color: darkblue; width: 100%; height: 40px;" onclick="changeBackgroundColor('darkblue')"></div></td><td>DarkBlue <code>#00008B</code></td><td><div style="background-color: navy; width: 100%; height: 40px;" onclick="changeBackgroundColor('navy')"></div></td><td>Navy <code>#000080</code></td></tr><tr><td><div style="background-color: midnightblue; width: 100%; height: 40px;" onclick="changeBackgroundColor('midnightblue')"></div></td><td>MidnightBlue <code>#191970</code></td><td></td><td></td><td></td><td></td></tr></tbody></table><h2 id="Purples"><a href="#Purples" class="headerlink" title="Purples"></a>Purples</h2><table><thead><tr><th>Color</th><th>Name</th><th>Color</th><th>Name</th><th>Color</th><th>Name</th></tr></thead><tbody><tr><td><div style="background-color: lavender; width: 100%; height: 40px;" onclick="changeBackgroundColor('lavender')"></div></td><td>Lavender <code>#E6E6FA</code></td><td><div style="background-color: thistle; width: 100%; height: 40px;" onclick="changeBackgroundColor('thistle')"></div></td><td>Thistle <code>#D8BFD8</code></td><td><div style="background-color: plum; width: 100%; height: 40px;" onclick="changeBackgroundColor('plum')"></div></td><td>Plum <code>#DDA0DD</code></td></tr><tr><td><div style="background-color: violet; width: 100%; height: 40px;" onclick="changeBackgroundColor('violet')"></div></td><td>Violet <code>#EE82EE</code></td><td><div style="background-color: orchid; width: 100%; height: 40px;" onclick="changeBackgroundColor('orchid')"></div></td><td>Orchid <code>#DA70D6</code></td><td><div style="background-color: fuchsia; width: 100%; height: 40px;" onclick="changeBackgroundColor('fuchsia')"></div></td><td>Fuchsia <code>#FF00FF</code></td></tr><tr><td><div style="background-color: magenta; width: 100%; height: 40px;" onclick="changeBackgroundColor('magenta')"></div></td><td>Magenta <code>#FF00FF</code></td><td><div style="background-color: mediumorchid; width: 100%; height: 40px;" onclick="changeBackgroundColor('mediumorchid')"></div></td><td>MediumOrchid <code>#BA55D3</code></td><td><div style="background-color: mediumpurple; width: 100%; height: 40px;" onclick="changeBackgroundColor('mediumpurple')"></div></td><td>MediumPurple <code>#9370DB</code></td></tr><tr><td><div style="background-color: blueviolet; width: 100%; height: 40px;" onclick="changeBackgroundColor('blueviolet')"></div></td><td>BlueViolet <code>#8A2BE2</code></td><td><div style="background-color: darkviolet; width: 100%; height: 40px;" onclick="changeBackgroundColor('darkviolet')"></div></td><td>DarkViolet <code>#9400D3</code></td><td><div style="background-color: darkorchid; width: 100%; height: 40px;" onclick="changeBackgroundColor('darkorchid')"></div></td><td>DarkOrchid <code>#9932CC</code></td></tr><tr><td><div style="background-color: darkmagenta; width: 100%; height: 40px;" onclick="changeBackgroundColor('darkmagenta')"></div></td><td>DarkMagenta <code>#8B008B</code></td><td><div style="background-color: purple; width: 100%; height: 40px;" onclick="changeBackgroundColor('purple')"></div></td><td>Purple <code>#800080</code></td><td><div style="background-color: indigo; width: 100%; height: 40px;" onclick="changeBackgroundColor('indigo')"></div></td><td>Indigo <code>#4B0082</code></td></tr><tr><td><div style="background-color: slateblue; width: 100%; height: 40px;" onclick="changeBackgroundColor('slateblue')"></div></td><td>SlateBlue <code>#6A5ACD</code></td><td><div style="background-color: darkslateblue; width: 100%; height: 40px;" onclick="changeBackgroundColor('darkslateblue')"></div></td><td>DarkSlateBlue <code>#483D8B</code></td><td></td><td></td></tr></tbody></table><h2 id="Whites"><a href="#Whites" class="headerlink" title="Whites"></a>Whites</h2><table><thead><tr><th>Color</th><th>Name</th><th>Color</th><th>Name</th><th>Color</th><th>Name</th></tr></thead><tbody><tr><td><div style="background-color: white; width: 100%; height: 40px;" onclick="changeBackgroundColor('white')"></div></td><td>White <code>#FFFFFF</code></td><td><div style="background-color: snow; width: 100%; height: 40px;" onclick="changeBackgroundColor('snow')"></div></td><td>Snow <code>#FFFAFA</code></td><td><div style="background-color: honeydew; width: 100%; height: 40px;" onclick="changeBackgroundColor('honeydew')"></div></td><td>HoneyDew <code>#F0FFF0</code></td></tr><tr><td><div style="background-color: mintcream; width: 100%; height: 40px;" onclick="changeBackgroundColor('mintcream')"></div></td><td>MintCream <code>#F5FFFA</code></td><td><div style="background-color: azure; width: 100%; height: 40px;" onclick="changeBackgroundColor('azure')"></div></td><td>Azure <code>#F0FFFF</code></td><td><div style="background-color: aliceblue; width: 100%; height: 40px;" onclick="changeBackgroundColor('aliceblue')"></div></td><td>AliceBlue <code>#F0F8FF</code></td></tr><tr><td><div style="background-color: ghostwhite; width: 100%; height: 40px;" onclick="changeBackgroundColor('ghostwhite')"></div></td><td>GhostWhite <code>#F8F8FF</code></td><td><div style="background-color: whitesmoke; width: 100%; height: 40px;" onclick="changeBackgroundColor('whitesmoke')"></div></td><td>WhiteSmoke <code>#F5F5F5</code></td><td><div style="background-color: seashell; width: 100%; height: 40px;" onclick="changeBackgroundColor('seashell')"></div></td><td>SeaShell <code>#FFF5EE</code></td></tr><tr><td><div style="background-color: beige; width: 100%; height: 40px;" onclick="changeBackgroundColor('beige')"></div></td><td>Beige <code>#F5F5DC</code></td><td><div style="background-color: oldlace; width: 100%; height: 40px;" onclick="changeBackgroundColor('oldlace')"></div></td><td>OldLace <code>#FDF5E6</code></td><td><div style="background-color: floralwhite; width: 100%; height: 40px;" onclick="changeBackgroundColor('floralwhite')"></div></td><td>FloralWhite <code>#FFFAF0</code></td></tr><tr><td><div style="background-color: ivory; width: 100%; height: 40px;" onclick="changeBackgroundColor('ivory')"></div></td><td>Ivory <code>#FFFFF0</code></td><td><div style="background-color: antiquewhite; width: 100%; height: 40px;" onclick="changeBackgroundColor('antiquewhite')"></div></td><td>AntiqueWhite <code>#FAEBD7</code></td><td><div style="background-color: linen; width: 100%; height: 40px;" onclick="changeBackgroundColor('linen')"></div></td><td>Linen <code>#FAF0E6</code></td></tr><tr><td><div style="background-color: lavenderblush; width: 100%; height: 40px;" onclick="changeBackgroundColor('lavenderblush')"></div></td><td>LavenderBlush <code>#FFF0F5</code></td><td><div style="background-color: mistyrose; width: 100%; height: 40px;" onclick="changeBackgroundColor('mistyrose')"></div></td><td>MistyRose <code>#FFE4E1</code></td><td></td><td></td></tr></tbody></table><h2 id="Grays"><a href="#Grays" class="headerlink" title="Grays"></a>Grays</h2><table><thead><tr><th>Color</th><th>Name</th><th>Color</th><th>Name</th><th>Color</th><th>Name</th></tr></thead><tbody><tr><td><div style="background-color: gainsboro; width: 100%; height: 40px;" onclick="changeBackgroundColor('gainsboro')"></div></td><td>Gainsboro <code>#DCDCDC</code></td><td><div style="background-color: lightgray; width: 100%; height: 40px;" onclick="changeBackgroundColor('lightgray')"></div></td><td>LightGray <code>#D3D3D3</code></td><td><div style="background-color: silver; width: 100%; height: 40px;" onclick="changeBackgroundColor('silver')"></div></td><td>Silver <code>#C0C0C0</code></td></tr><tr><td><div style="background-color: darkgray; width: 100%; height: 40px;" onclick="changeBackgroundColor('darkgray')"></div></td><td>DarkGray <code>#A9A9A9</code></td><td><div style="background-color: gray; width: 100%; height: 40px;" onclick="changeBackgroundColor('gray')"></div></td><td>Gray <code>#808080</code></td><td><div style="background-color: dimgray; width: 100%; height: 40px;" onclick="changeBackgroundColor('dimgray')"></div></td><td>DimGray <code>#696969</code></td></tr><tr><td><div style="background-color: lightslategray; width: 100%; height: 40px;" onclick="changeBackgroundColor('lightslategray')"></div></td><td>LightSlateGray <code>#778899</code></td><td><div style="background-color: slategray; width: 100%; height: 40px;" onclick="changeBackgroundColor('slategray')"></div></td><td>SlateGray <code>#708090</code></td><td><div style="background-color: darkslategray; width: 100%; height: 40px;" onclick="changeBackgroundColor('darkslategray')"></div></td><td>DarkSlateGray <code>#2F4F4F</code></td></tr><tr><td><div style="background-color: black; width: 100%; height: 40px;" onclick="changeBackgroundColor('black')"></div></td><td>Black <code>#000000</code></td><td></td><td></td><td></td><td></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> etc </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>HTML 기초</title>
      <link href="/web/newb/3/"/>
      <url>/web/newb/3/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML-기초"><a href="#HTML-기초" class="headerlink" title="HTML 기초"></a>HTML 기초</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 웹 개발의 기초인 HTML에 대해 알아보겠습니다.<br>HTML은 웹 페이지의 구조를 정의하는 마크업 언어로, 웹 개발의 출발점이 되는 중요한 요소입니다.</p><h2 id="HTML의-기본-구조"><a href="#HTML의-기본-구조" class="headerlink" title="HTML의 기본 구조"></a>HTML의 기본 구조</h2><h3 id="HTML이란-무엇인가"><a href="#HTML이란-무엇인가" class="headerlink" title="HTML이란 무엇인가?"></a>HTML이란 무엇인가?</h3><p>HTML(HyperText Markup Language)은 웹 페이지를 작성하는 데 사용되는 마크업 언어입니다. HTML은 텍스트를 구조화하고, 이미지, 링크, 비디오 등의 요소를 포함시켜 웹 페이지를 구성합니다.</p><h3 id="HTML-문서의-기본-구조"><a href="#HTML-문서의-기본-구조" class="headerlink" title="HTML 문서의 기본 구조"></a>HTML 문서의 기본 구조</h3><p>HTML 문서는 기본적으로 다음과 같은 구조를 가집니다:</p><pre><code class="highlight html"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">head</span>&gt;</span>    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span>    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span>    <span class="tag">&lt;<span class="name">title</span>&gt;</span>My First HTML Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span>  <span class="tag">&lt;/<span class="name">head</span>&gt;</span>  <span class="tag">&lt;<span class="name">body</span>&gt;</span>    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, World!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>    <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is my first HTML page.<span class="tag">&lt;/<span class="name">p</span>&gt;</span>  <span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></code></pre><h3 id="설명"><a href="#설명" class="headerlink" title="설명"></a>설명</h3><ul><li><code>&lt;!DOCTYPE html&gt;</code>: HTML5 문서임을 선언합니다.</li><li><code>&lt;html&gt;</code>: HTML 문서의 루트 요소입니다.</li><li><code>&lt;head&gt;</code>: 메타데이터(문서 제목, 문자 인코딩 등)를 포함합니다.</li><li><code>&lt;meta charset=&quot;UTF-8&quot;&gt;</code>: 문서의 문자 인코딩을 설정합니다.</li><li><code>&lt;title&gt;</code>: 문서의 제목을 설정합니다.</li><li><code>&lt;body&gt;</code>: 실제 콘텐츠(텍스트, 이미지, 링크 등)를 포함합니다.</li></ul><h2 id="주요-HTML-태그"><a href="#주요-HTML-태그" class="headerlink" title="주요 HTML 태그"></a>주요 HTML 태그</h2><h3 id="head-태그"><a href="#head-태그" class="headerlink" title="head 태그"></a><code>head</code> 태그</h3><p><code>&lt;head&gt;</code> 태그는 메타데이터를 포함하며, 브라우저에 의해 렌더링되지 않는 정보를 담습니다.</p><pre><code class="highlight html"><span class="tag">&lt;<span class="name">head</span>&gt;</span>  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span>  <span class="tag">&lt;<span class="name">title</span>&gt;</span>My First HTML Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></code></pre><h3 id="body-태그"><a href="#body-태그" class="headerlink" title="body 태그"></a><code>body</code> 태그</h3><p><code>&lt;body&gt;</code> 태그는 웹 페이지의 실제 콘텐츠를 포함합니다.</p><pre><code class="highlight html"><span class="tag">&lt;<span class="name">body</span>&gt;</span>  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, World!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>  <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is my first HTML page.<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></code></pre><h3 id="제목-태그-h1-h6"><a href="#제목-태그-h1-h6" class="headerlink" title="제목 태그 (h1 ~ h6)"></a>제목 태그 (<code>h1</code> ~ <code>h6</code>)</h3><p>제목 태그는 문서의 제목을 정의합니다. <code>h1</code>은 가장 중요한 제목, <code>h6</code>은 가장 덜 중요한 제목입니다.</p><pre><code class="highlight html"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>제목<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span>소제목<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;<span class="name">h3</span>&gt;</span>이건 h3 태그임<span class="tag">&lt;/<span class="name">h3</span>&gt;</span><span class="tag">&lt;<span class="name">h4</span>&gt;</span>이건 h3 태그임<span class="tag">&lt;/<span class="name">h4</span>&gt;</span><span class="tag">&lt;<span class="name">h5</span>&gt;</span>이건 h3 태그임<span class="tag">&lt;/<span class="name">h5</span>&gt;</span><span class="tag">&lt;<span class="name">h6</span>&gt;</span>이건 h3 태그임<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></code></pre><h3 id="단락-태그-p"><a href="#단락-태그-p" class="headerlink" title="단락 태그 (p)"></a>단락 태그 (<code>p</code>)</h3><p>단락 태그는 텍스트 단락을 정의합니다.</p><pre><code class="highlight html"><span class="tag">&lt;<span class="name">p</span>&gt;</span>This is a paragraph.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></code></pre><h3 id="링크-태그-a"><a href="#링크-태그-a" class="headerlink" title="링크 태그 (a)"></a>링크 태그 (<code>a</code>)</h3><p>링크 태그는 다른 문서나 웹 페이지로 연결되는 하이퍼링크를 만듭니다.</p><pre><code class="highlight html"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&lt;https://www.example.com&gt;&quot;</span>&gt;</span>이것을 누르면 다른 웹으로 이동합니다.<span class="tag">&lt;/<span class="name">a</span>&gt;</span></code></pre><h3 id="이미지-태그-img"><a href="#이미지-태그-img" class="headerlink" title="이미지 태그 (img)"></a>이미지 태그 (<code>img</code>)</h3><p>이미지 태그는 웹 페이지에 이미지를 삽입합니다.</p><pre><code class="highlight html"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;image.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Description of image&quot;</span> /&gt;</span></code></pre><h3 id="기타-유용한-태그"><a href="#기타-유용한-태그" class="headerlink" title="기타 유용한 태그"></a>기타 유용한 태그</h3><ul><li><strong>리스트 태그</strong>: 순서가 있는 리스트(<code>&lt;ol&gt;</code>), 순서가 없는 리스트(<code>&lt;ul&gt;</code>), 리스트 아이템(<code>&lt;li&gt;</code>)</li></ul><pre><code class="highlight html"><span class="tag">&lt;<span class="name">ul</span>&gt;</span>  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Item 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span>  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Item 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span>  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Item 3<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></code></pre><ul><li><strong>테이블 태그</strong>: 테이블(<code>&lt;table&gt;</code>), 테이블 행(<code>&lt;tr&gt;</code>), 테이블 헤더(<code>&lt;th&gt;</code>), 테이블 데이터(<code>&lt;td&gt;</code>)</li></ul><pre><code class="highlight html"><span class="tag">&lt;<span class="name">table</span>&gt;</span>  <span class="tag">&lt;<span class="name">tr</span>&gt;</span>    <span class="tag">&lt;<span class="name">th</span>&gt;</span>이름<span class="tag">&lt;/<span class="name">th</span>&gt;</span>    <span class="tag">&lt;<span class="name">th</span>&gt;</span>나이<span class="tag">&lt;/<span class="name">th</span>&gt;</span>  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span>  <span class="tag">&lt;<span class="name">tr</span>&gt;</span>    <span class="tag">&lt;<span class="name">td</span>&gt;</span>존존스<span class="tag">&lt;/<span class="name">td</span>&gt;</span>    <span class="tag">&lt;<span class="name">td</span>&gt;</span>30<span class="tag">&lt;/<span class="name">td</span>&gt;</span>  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span>  <span class="tag">&lt;<span class="name">tr</span>&gt;</span>    <span class="tag">&lt;<span class="name">td</span>&gt;</span>맥그리거<span class="tag">&lt;/<span class="name">td</span>&gt;</span>    <span class="tag">&lt;<span class="name">td</span>&gt;</span>35<span class="tag">&lt;/<span class="name">td</span>&gt;</span>  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></code></pre><h2 id="HTML-문서-작성-및-브라우저에서-열어보기"><a href="#HTML-문서-작성-및-브라우저에서-열어보기" class="headerlink" title="HTML 문서 작성 및 브라우저에서 열어보기"></a>HTML 문서 작성 및 브라우저에서 열어보기</h2><h3 id="HTML-문서-작성"><a href="#HTML-문서-작성" class="headerlink" title="HTML 문서 작성"></a>HTML 문서 작성</h3><p>다음과 같은 간단한 HTML 문서를 작성해봅시다:</p><pre><code class="highlight html"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">head</span>&gt;</span>    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span>    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span>    <span class="tag">&lt;<span class="name">title</span>&gt;</span>처음 개발해보는 html페이지<span class="tag">&lt;/<span class="name">title</span>&gt;</span>  <span class="tag">&lt;/<span class="name">head</span>&gt;</span>  <span class="tag">&lt;<span class="name">body</span>&gt;</span>    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, World!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>    <span class="tag">&lt;<span class="name">p</span>&gt;</span>안녕하세요 헬로월드 페이지 처음 만들어봤어요.<span class="tag">&lt;/<span class="name">p</span>&gt;</span>    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&lt;https://www.github.com&gt;&quot;</span>&gt;</span>github로 이동<span class="tag">&lt;/<span class="name">a</span>&gt;</span>    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;image.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Sample Image&quot;</span> /&gt;</span>  <span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></code></pre><h3 id="브라우저에서-열어보기"><a href="#브라우저에서-열어보기" class="headerlink" title="브라우저에서 열어보기"></a>브라우저에서 열어보기</h3><ol><li>작성한 HTML 파일을 저장합니다. 예를 들어, 파일 이름을 <code>index.html</code>로 저장합니다.</li><li>같은 경로에는 원하는 이미지를 다운로드 받고 image.jpg로 이름을 변경합니다.</li><li>웹 브라우저를 열고, <code>index.html</code> 파일을 드래그하여 브라우저 창에 놓거나, 브라우저의 파일 메뉴에서 <code>열기</code>를 선택하여 파일을 엽니다.</li><li>브라우저에서 HTML 문서가 어떻게 렌더링되는지 확인합니다.</li></ol><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 HTML의 기본 구조와 주요 태그들에 대해 알아보았습니다.<br>이러한 기초 개념을 이해하면, 웹 페이지를 작성하고 수정하는 데 필요한 기본적인 능력을 갖추게 됩니다.<br>다음 시간에는 CSS를 사용하여 HTML 문서를 스타일링하는 방법에 대해 알아보겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> web_입문 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Node.js NVM (Node Version Manager)</title>
      <link href="/cli/2/"/>
      <url>/cli/2/</url>
      
        <content type="html"><![CDATA[<h1 id="NVM-Node-Version-Manager"><a href="#NVM-Node-Version-Manager" class="headerlink" title="NVM: Node Version Manager"></a>NVM: Node Version Manager</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 Node.js의 버전 관리 도구인 NVM(Node Version Manager)에 대해 알아보겠습니다. NVM의 역할과 필요성, 설치 방법, 기본 사용법과 고급 사용법, 그리고 실제 프로젝트에서 NVM을 활용하는 방법을 알아보겠습니다.</p><h2 id="1-NVM-소개"><a href="#1-NVM-소개" class="headerlink" title="1. NVM 소개"></a>1. NVM 소개</h2><h3 id="NVM이란-무엇인가"><a href="#NVM이란-무엇인가" class="headerlink" title="NVM이란 무엇인가?"></a>NVM이란 무엇인가?</h3><p>NVM은 Node.js의 다양한 버전을 쉽게 설치하고 관리할 수 있는 도구입니다. 프로젝트별로 다른 Node.js 버전을 사용해야 할 때 매우 유용합니다.</p><h3 id="NVM의-역할과-중요성"><a href="#NVM의-역할과-중요성" class="headerlink" title="NVM의 역할과 중요성"></a>NVM의 역할과 중요성</h3><ul><li><strong>버전 관리</strong>: 프로젝트별로 필요한 Node.js 버전을 쉽게 관리할 수 있습니다.</li><li><strong>다양한 환경 지원</strong>: 서로 다른 프로젝트 환경에서도 적절한 Node.js 버전을 사용할 수 있게 해줍니다.</li></ul><h2 id="2-설치-방법"><a href="#2-설치-방법" class="headerlink" title="2. 설치 방법"></a>2. 설치 방법</h2><h3 id="NVM-설치-방법"><a href="#NVM-설치-방법" class="headerlink" title="NVM 설치 방법"></a>NVM 설치 방법</h3><p>NVM은 다음 명령어를 사용하여 설치할 수 있습니다.</p><pre><code class="highlight bash">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash</code></pre><p>설치가 완료되면 터미널을 재시작하거나 다음 명령어를 실행하여 NVM을 활성화합니다.</p><pre><code class="highlight bash"><span class="built_in">source</span> ~/.nvm/nvm.sh</code></pre><p>NVM이 제대로 설치되었는지 확인하려면 다음 명령어를 실행합니다.</p><pre><code class="highlight bash">nvm --version</code></pre><h2 id="3-기본-사용법"><a href="#3-기본-사용법" class="headerlink" title="3. 기본 사용법"></a>3. 기본 사용법</h2><h3 id="Node-js-버전-설치"><a href="#Node-js-버전-설치" class="headerlink" title="Node.js 버전 설치"></a>Node.js 버전 설치</h3><ul><li><strong>Node.js 버전 설치</strong>: <code>nvm install &lt;version&gt;</code></li></ul><pre><code class="highlight bash">nvm install 14.17.0</code></pre><h3 id="특정-버전-사용"><a href="#특정-버전-사용" class="headerlink" title="특정 버전 사용"></a>특정 버전 사용</h3><ul><li><strong>버전 사용</strong>: <code>nvm use &lt;version&gt;</code></li></ul><pre><code class="highlight bash">nvm use 14.17.0</code></pre><h3 id="설치된-버전-목록-보기"><a href="#설치된-버전-목록-보기" class="headerlink" title="설치된 버전 목록 보기"></a>설치된 버전 목록 보기</h3><ul><li><strong>버전 목록</strong>: <code>nvm ls</code></li></ul><pre><code class="highlight bash">nvm <span class="built_in">ls</span></code></pre><h2 id="4-고급-사용법"><a href="#4-고급-사용법" class="headerlink" title="4. 고급 사용법"></a>4. 고급 사용법</h2><h3 id="버전-별칭-설정"><a href="#버전-별칭-설정" class="headerlink" title="버전 별칭 설정"></a>버전 별칭 설정</h3><ul><li><strong>버전 별칭 설정</strong>: <code>nvm alias &lt;name&gt; &lt;version&gt;</code></li></ul><pre><code class="highlight bash">nvm <span class="built_in">alias</span> default 14.17.0</code></pre><h3 id="버전-제거"><a href="#버전-제거" class="headerlink" title="버전 제거"></a>버전 제거</h3><ul><li><strong>버전 제거</strong>: <code>nvm uninstall &lt;version&gt;</code></li></ul><pre><code class="highlight bash">nvm uninstall 14.17.0</code></pre><h3 id="현재-사용-중인-버전-확인"><a href="#현재-사용-중인-버전-확인" class="headerlink" title="현재 사용 중인 버전 확인"></a>현재 사용 중인 버전 확인</h3><ul><li><strong>현재 버전 확인</strong>: <code>nvm current</code></li></ul><pre><code class="highlight bash">nvm current</code></pre><h2 id="5-실습-예제"><a href="#5-실습-예제" class="headerlink" title="5. 실습 예제"></a>5. 실습 예제</h2><h3 id="프로젝트에서-NVM-사용"><a href="#프로젝트에서-NVM-사용" class="headerlink" title="프로젝트에서 NVM 사용"></a>프로젝트에서 NVM 사용</h3><ol><li><strong>프로젝트 디렉토리 생성</strong>: 새로운 디렉토리를 만들고 이동합니다.</li></ol><pre><code class="highlight bash"><span class="built_in">mkdir</span> my-nvm-project<span class="built_in">cd</span> my-nvm-project</code></pre><ol start="2"><li><strong><code>.nvmrc</code> 파일 생성</strong>: 프로젝트 루트에 <code>.nvmrc</code> 파일을 생성하고 사용할 Node.js 버전을 지정합니다.</li></ol><pre><code class="highlight bash"><span class="built_in">echo</span> <span class="string">&quot;14.17.0&quot;</span> &gt; .nvmrc</code></pre><ol start="3"><li><strong>NVM을 사용하여 버전 설정</strong>: 다음 명령어를 실행하여 <code>.nvmrc</code>에 지정된 버전을 사용합니다.</li></ol><pre><code class="highlight bash">nvm use</code></pre><ol start="4"><li><strong>패키지 설치 및 실행</strong>: Node.js 버전을 설정한 후 프로젝트를 초기화하고 패키지를 설치합니다.</li></ol><pre><code class="highlight bash">npm init -ynpm install expressnode -e <span class="string">&quot;console.log(&#x27;Node.js version:&#x27;, process.version)&quot;</span></code></pre><h2 id="6-NVM-명령어-사전"><a href="#6-NVM-명령어-사전" class="headerlink" title="6. NVM 명령어 사전"></a>6. NVM 명령어 사전</h2><ul><li><strong><code>nvm install &lt;version&gt;</code></strong>: 특정 버전의 Node.js를 설치합니다.</li></ul><pre><code class="highlight bash">nvm install 14.17.0</code></pre><ul><li><strong><code>nvm use &lt;version&gt;</code></strong>: 특정 버전의 Node.js를 사용합니다.</li></ul><pre><code class="highlight bash">nvm use 14.17.0</code></pre><ul><li><strong><code>nvm ls</code></strong>: 설치된 Node.js 버전 목록을 표시합니다.</li></ul><pre><code class="highlight bash">nvm <span class="built_in">ls</span></code></pre><ul><li><strong><code>nvm alias &lt;name&gt; &lt;version&gt;</code></strong>: 특정 버전에 별칭을 설정합니다.</li></ul><pre><code class="highlight bash">nvm <span class="built_in">alias</span> default 14.17.0</code></pre><ul><li><strong><code>nvm unalias &lt;name&gt;</code></strong>: 설정된 별칭을 제거합니다.</li></ul><pre><code class="highlight bash">nvm <span class="built_in">unalias</span> default</code></pre><ul><li><strong><code>nvm uninstall &lt;version&gt;</code></strong>: 특정 버전의 Node.js를 제거합니다.</li></ul><pre><code class="highlight bash">nvm uninstall 14.17.0</code></pre><ul><li><strong><code>nvm current</code></strong>: 현재 사용 중인 Node.js 버전을 확인합니다.</li></ul><pre><code class="highlight bash">nvm current</code></pre><ul><li><strong><code>nvm ls-remote</code></strong>: 원격 저장소에서 사용 가능한 모든 Node.js 버전 목록을 표시합니다.</li></ul><pre><code class="highlight bash">nvm ls-remote</code></pre><ul><li><strong><code>nvm deactivate</code></strong>: 현재 Node.js 버전을 비활성화하고 기본 시스템 Node.js 버전을 사용합니다.</li></ul><pre><code class="highlight bash">nvm deactivate</code></pre><ul><li><strong><code>nvm which &lt;version&gt;</code></strong>: 특정 Node.js 버전의 설치 경로를 표시합니다.</li></ul><pre><code class="highlight bash">nvm <span class="built_in">which</span> 14.17.0</code></pre><h3 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h3><p>이번 시간에는 NVM을 사용하여 Node.js의 다양한 버전을 관리하는 방법을 알아보았습니다. NVM을 통해 프로젝트별로 필요한 Node.js 버전을 쉽게 설치하고 관리할 수 있습니다. 다음 시간에는 또 다른 유용한 CLI 도구를 소개하겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> CLI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>웹 브라우저와 서버</title>
      <link href="/web/newb/2/"/>
      <url>/web/newb/2/</url>
      
        <content type="html"><![CDATA[<h1 id="웹-브라우저와-서버"><a href="#웹-브라우저와-서버" class="headerlink" title="웹 브라우저와 서버"></a>웹 브라우저와 서버</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 웹 브라우저와 서버의 역할, 도메인 이름과 IP 주소에 대해 다룰 예정입니다.<br>웹의 기본 동작 원리를 이해하는 데 중요한 개념들이므로, 이를 통해 웹이 어떻게 동작하는지 알아보겠습니다.</p><h2 id="웹-브라우저의-역할"><a href="#웹-브라우저의-역할" class="headerlink" title="웹 브라우저의 역할"></a>웹 브라우저의 역할</h2><h3 id="웹-브라우저란"><a href="#웹-브라우저란" class="headerlink" title="웹 브라우저란?"></a>웹 브라우저란?</h3><p>웹 브라우저(Web Browser)는 사용자가 웹 페이지를 탐색하고 볼 수 있도록 도와주는 애플리케이션입니다. 대표적인 웹 브라우저로는 Google Chrome, Mozilla Firefox, Microsoft Edge, Safari 등이 있습니다.</p><h3 id="웹-브라우저의-주요-기능"><a href="#웹-브라우저의-주요-기능" class="headerlink" title="웹 브라우저의 주요 기능"></a>웹 브라우저의 주요 기능</h3><ol><li><strong>URL 요청</strong>: 사용자가 URL을 입력하면, 웹 브라우저는 해당 주소에 HTTP 요청을 보냅니다.</li><li><strong>HTML 파싱 및 렌더링</strong>: 웹 브라우저는 서버로부터 받은 HTML, CSS, JavaScript를 파싱하여 웹 페이지를 렌더링합니다.</li><li><strong>자바스크립트 실행</strong>: 웹 브라우저는 웹 페이지의 동적 동작을 위해 JavaScript 코드를 실행합니다.</li><li><strong>리소스 로드</strong>: 웹 브라우저는 이미지, 비디오, 오디오 등 추가 리소스를 서버에서 로드합니다.</li></ol><h3 id="한-줄-정리"><a href="#한-줄-정리" class="headerlink" title="한 줄 정리"></a>한 줄 정리</h3><p>웹 브라우저는 우리가 웹 페이지를 볼 수 있게 해주는 프로그램입니다.<br>마치 책을 읽기 위해 책장을 넘기고 내용을 보여주는 것처럼, 웹 브라우저는 우리가 입력한 주소로부터 웹 페이지를 받아와서 화면에 보여줍니다.</p><h2 id="웹-서버란-무엇인가"><a href="#웹-서버란-무엇인가" class="headerlink" title="웹 서버란 무엇인가?"></a>웹 서버란 무엇인가?</h2><h3 id="웹-서버의-역할"><a href="#웹-서버의-역할" class="headerlink" title="웹 서버의 역할"></a>웹 서버의 역할</h3><p>웹 서버(Web Server)는 클라이언트(웹 브라우저)의 요청을 처리하고, 요청한 리소스(HTML, CSS, JavaScript, 이미지 등)를 제공하는 컴퓨터 프로그램입니다.</p><h3 id="웹-서버의-주요-기능"><a href="#웹-서버의-주요-기능" class="headerlink" title="웹 서버의 주요 기능"></a>웹 서버의 주요 기능</h3><ol><li><strong>요청 처리</strong>: 클라이언트의 HTTP 요청을 받아들이고 처리합니다.</li><li><strong>응답 제공</strong>: 요청한 리소스를 찾아 클라이언트에게 응답으로 반환합니다.</li><li><strong>상태 관리</strong>: 세션 및 쿠키를 통해 사용자의 상태를 관리합니다.</li></ol><h3 id="한-줄-정리-1"><a href="#한-줄-정리-1" class="headerlink" title="한 줄 정리"></a>한 줄 정리</h3><p>웹 서버는 사용자가 원하는 웹 페이지를 제공하는 도서관과 같습니다.<br>사용자가 웹 페이지를 요청하면, 웹 서버는 해당 페이지를 찾아서 사용자에게 제공합니다.</p><h3 id="웹-서버의-예시"><a href="#웹-서버의-예시" class="headerlink" title="웹 서버의 예시"></a>웹 서버의 예시</h3><ul><li><strong>Apache HTTP Server</strong>: 가장 널리 사용되는 웹 서버 중 하나입니다.</li><li><strong>Nginx</strong>: 높은 성능과 확장성을 제공하는 웹 서버입니다.</li><li><strong>Microsoft IIS</strong>: Windows Server에서 사용되는 웹 서버입니다.</li></ul><h2 id="도메인-이름과-IP-주소"><a href="#도메인-이름과-IP-주소" class="headerlink" title="도메인 이름과 IP 주소"></a>도메인 이름과 IP 주소</h2><h3 id="도메인-이름이란"><a href="#도메인-이름이란" class="headerlink" title="도메인 이름이란?"></a>도메인 이름이란?</h3><p>도메인 이름(Domain Name)은 인터넷 상의 웹 사이트를 식별하는 데 사용되는 주소입니다. 예를 들어, <code>www.google.com</code>은 Google의 도메인 이름입니다. 도메인 이름은 사람이 기억하기 쉽도록 만들어졌습니다.</p><h3 id="IP-주소란"><a href="#IP-주소란" class="headerlink" title="IP 주소란?"></a>IP 주소란?</h3><p>IP 주소(Internet Protocol Address)는 인터넷에 연결된 장치를 식별하는 고유한 숫자 주소입니다. 예를 들어, <code>192.168.0.1</code>과 같은 형식으로 되어 있습니다. IP 주소는 컴퓨터가 서로를 식별하고 통신할 수 있게 합니다.</p><h3 id="도메인-이름과-IP-주소의-관계"><a href="#도메인-이름과-IP-주소의-관계" class="headerlink" title="도메인 이름과 IP 주소의 관계"></a>도메인 이름과 IP 주소의 관계</h3><p>도메인 이름은 IP 주소에 대응됩니다. 웹 브라우저는 도메인 이름을 IP 주소로 변환하기 위해 DNS(Domain Name System) 서버를 사용합니다. DNS 서버는 도메인 이름과 IP 주소를 매핑하여, 사용자가 입력한 도메인 이름을 해당하는 IP 주소로 변환합니다.</p><h3 id="한-줄-정리-2"><a href="#한-줄-정리-2" class="headerlink" title="한 줄 정리"></a>한 줄 정리</h3><p>도메인 이름은 우리가 쉽게 기억할 수 있는 웹사이트의 주소입니다. 마치 집 주소와 같은 역할을 합니다. IP 주소는 컴퓨터가 서로를 찾을 수 있게 해주는 숫자 주소입니다. 도메인 이름을 통해 우리는 쉽게 웹사이트에 접근할 수 있고, IP 주소는 그 뒤에서 실제 위치를 알려줍니다.</p><h2 id="예시-RPG-게임-웹사이트"><a href="#예시-RPG-게임-웹사이트" class="headerlink" title="예시: RPG 게임 웹사이트"></a>예시: RPG 게임 웹사이트</h2><p>RPG 게임 웹사이트 <code>https://www.newcoding.com</code>을 예로 들어보겠습니다.</p><ol><li>사용자가 브라우저에 <code>https://www.newcoding.com</code>을 입력합니다.</li><li>브라우저는 DNS 서버에 <code>newcoding.com</code>의 IP 주소를 요청합니다.</li><li>DNS 서버는 <code>newcoding.com</code>의 IP 주소를 반환합니다.</li><li>브라우저는 해당 IP 주소로 HTTP 요청을 보내어 웹 페이지를 요청합니다.</li><li>웹 서버는 요청을 받아 웹 페이지를 응답으로 반환합니다.</li><li>브라우저는 응답을 받아 웹 페이지를 렌더링합니다.</li></ol><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 웹 브라우저와 서버의 역할, 도메인 이름과 IP 주소에 대해 알아보았습니다.<br>이러한 기본 개념을 이해하면 웹이 어떻게 동작하는지 더 잘 이해할 수 있습니다.<br>다음 시간에는 웹 개발의 다른 기본 요소들에 대해 알아보겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> web_입문 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>인터넷과 웹의 기본 개념</title>
      <link href="/web/newb/1/"/>
      <url>/web/newb/1/</url>
      
        <content type="html"><![CDATA[<h1 id="인터넷과-웹의-기본-개념"><a href="#인터넷과-웹의-기본-개념" class="headerlink" title="인터넷과 웹의 기본 개념"></a>인터넷과 웹의 기본 개념</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 웹 개발의 가장 기초 개념인 인터넷과 웹에 대해 알아보겠습니다.<br>인터넷과 웹은 모든 사람이 일상에 자연스럽게 사용하고 있는 기술입니다.<br>다만 웹을 개발하려고 지금 이걸 읽고 계시는 여러분들은 그 차이와 동작 방식을 정확히 이해하고 가는 것이 중요합니다.</p><h2 id="인터넷이란-무엇인가"><a href="#인터넷이란-무엇인가" class="headerlink" title="인터넷이란 무엇인가?"></a>인터넷이란 무엇인가?</h2><p>인터넷은 전 세계의 수많은 컴퓨터와 네트워크가 서로 연결된 거대한 네트워크입니다.<br>인터넷을 통해 우리는 정보를 교환하고, 웹사이트를 방문하며, 이메일을 주고받는 등의 다양한 활동을 할 수 있습니다.</p><h3 id="인터넷의-구성-요소"><a href="#인터넷의-구성-요소" class="headerlink" title="인터넷의 구성 요소"></a>인터넷의 구성 요소</h3><ul><li><strong>네트워크</strong>: 인터넷은 다양한 네트워크가 상호 연결되어 구성됩니다. 이 네트워크들은 라우터와 스위치를 통해 데이터를 주고받습니다.</li><li><strong>프로토콜</strong>: 인터넷 통신은 TCP&#x2F;IP(Transmission Control Protocol&#x2F;Internet Protocol)라는 표준 프로토콜을 사용합니다. TCP&#x2F;IP는 데이터 전송의 규칙과 방법을 정의합니다.</li><li><strong>IP 주소</strong>: 인터넷에 연결된 각 장치는 고유한 IP 주소를 갖고 있으며, 이를 통해 서로를 식별하고 통신할 수 있습니다.</li></ul><h3 id="한-줄-정리"><a href="#한-줄-정리" class="headerlink" title="한 줄 정리"></a>한 줄 정리</h3><p>인터넷은 전 세계 컴퓨터들이 서로 연결되어 있는 거대한 통신망입니다. 우리가 집에서 스마트폰이나 컴퓨터를 통해 웹사이트를 보거나, 이메일을 보내고, 동영상을 보는 모든 활동은 인터넷을 통해 이루어집니다.</p><h2 id="웹과-인터넷의-차이"><a href="#웹과-인터넷의-차이" class="headerlink" title="웹과 인터넷의 차이"></a>웹과 인터넷의 차이</h2><h3 id="웹이란-무엇인가"><a href="#웹이란-무엇인가" class="headerlink" title="웹이란 무엇인가?"></a>웹이란 무엇인가?</h3><p>웹(World Wide Web, WWW)은 인터넷을 기반으로 동작하는 정보 공유 시스템입니다. 웹은 브라우저를 통해 접근할 수 있는 하이퍼텍스트 문서(웹 페이지)로 구성됩니다. 웹은 HTTP(Hypertext Transfer Protocol)를 사용하여 데이터를 주고받습니다.</p><h3 id="인터넷과-웹의-차이"><a href="#인터넷과-웹의-차이" class="headerlink" title="인터넷과 웹의 차이"></a>인터넷과 웹의 차이</h3><ul><li><strong>인터넷</strong>: 네트워크의 집합으로, 다양한 통신을 가능하게 하는 기반 구조입니다.</li><li><strong>웹</strong>: 인터넷 위에서 동작하는 서비스로, 하이퍼텍스트 문서를 통해 정보를 제공하고 교환합니다.</li></ul><h3 id="한-줄-정리-1"><a href="#한-줄-정리-1" class="headerlink" title="한 줄 정리"></a>한 줄 정리</h3><p>인터넷은 우리가 웹사이트를 방문하거나 이메일을 보내는 등의 모든 활동을 가능하게 하는 기반 기술입니다. 반면에, 웹은 인터넷을 통해 우리가 볼 수 있는 웹사이트나 웹 페이지를 의미합니다. 쉽게 말해, 인터넷은 도로이고, 웹은 그 도로 위를 달리는 자동차와 같습니다.</p><h2 id="웹의-동작-방식-클라이언트-서버-모델"><a href="#웹의-동작-방식-클라이언트-서버-모델" class="headerlink" title="웹의 동작 방식 (클라이언트-서버 모델)"></a>웹의 동작 방식 (클라이언트-서버 모델)</h2><h3 id="클라이언트-서버-모델"><a href="#클라이언트-서버-모델" class="headerlink" title="클라이언트-서버 모델"></a>클라이언트-서버 모델</h3><p>웹의 동작 방식은 클라이언트-서버 모델을 기반으로 합니다. 이 모델에서는 클라이언트와 서버가 서로 역할을 나누어 데이터를 주고받습니다.</p><ul><li><strong>클라이언트</strong>: 웹 브라우저와 같이 사용자가 직접 사용하는 프로그램으로, 서버에 요청을 보내고 응답을 받아서 화면에 표시합니다.</li><li><strong>서버</strong>: 웹 서버와 같이 클라이언트의 요청을 처리하고 필요한 데이터를 제공하는 프로그램으로, 요청에 따라 HTML, CSS, 이미지 등의 리소스를 반환합니다.</li></ul><h3 id="클라이언트-서버-통신-과정"><a href="#클라이언트-서버-통신-과정" class="headerlink" title="클라이언트-서버 통신 과정"></a>클라이언트-서버 통신 과정</h3><ol><li><strong>클라이언트 요청</strong>: 사용자가 웹 브라우저에 URL을 입력하면, 클라이언트는 해당 URL에 대한 HTTP 요청을 서버로 보냅니다.</li><li><strong>서버 처리</strong>: 서버는 요청을 받아서 필요한 데이터를 처리하고, HTML, CSS, JavaScript 등의 리소스를 포함한 응답을 생성합니다.</li><li><strong>클라이언트 응답</strong>: 서버가 응답을 클라이언트로 보내면, 브라우저는 이를 해석하여 웹 페이지를 화면에 렌더링합니다.</li></ol><h3 id="예시-뉴코딩-블로그"><a href="#예시-뉴코딩-블로그" class="headerlink" title="예시: 뉴코딩 블로그"></a>예시: 뉴코딩 블로그</h3><p>RPG 게임 웹사이트를 예로 들어보겠습니다. 사용자가 브라우저에 <code>https://www.newcoding.com</code>을 입력하면, 다음과 같은 과정이 이루어집니다:</p><ol><li><strong>클라이언트 요청</strong>: 브라우저가 <code>https://www.newcoding.com</code>에 대한 HTTP GET 요청을 보냅니다.</li><li><strong>서버 처리</strong>: 블로그 웹 서버는 요청을 받아서 홈페이지에 필요한 HTML 파일을 준비합니다.</li><li><strong>클라이언트 응답</strong>: 서버는 HTML, CSS, JavaScript 파일을 포함한 응답을 클라이언트로 보냅니다.</li><li><strong>페이지 렌더링</strong>: 브라우저는 응답을 받아서 블로그를 렌더링하고, 사용자는 평소 보는 웹 화면을 볼 수 있습니다.</li></ol><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 인터넷과 웹의 기본 개념, 인터넷과 웹의 차이, 그리고 웹의 동작 방식을 알아보았습니다.<br>이러한 기초 개념을 이해하면 웹 개발의 기본 원리를 파악하는 데 큰 도움이 됩니다.<br>다음 시간에는 웹 개발의 다른 기본 요소들에 대해 알아보겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> web_입문 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Node.js NPM(Node Package Manager)</title>
      <link href="/cli/1/"/>
      <url>/cli/1/</url>
      
        <content type="html"><![CDATA[<h1 id="NPM-Node-js-패키지-관리자"><a href="#NPM-Node-js-패키지-관리자" class="headerlink" title="NPM: Node.js 패키지 관리자"></a>NPM: Node.js 패키지 관리자</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 Node.js의 대표적인 패키지 관리자 도구인 NPM(Node Package Manager)에 대해 알아보겠습니다. NPM의 역할과 필요성, 설치 방법, 기본 사용법과 고급 사용법, 그리고 실제 프로젝트에서 NPM을 활용하는 방법을 알아보겠습니다.</p><h2 id="1-NPM-소개"><a href="#1-NPM-소개" class="headerlink" title="1. NPM 소개"></a>1. NPM 소개</h2><h3 id="NPM이란-무엇인가"><a href="#NPM이란-무엇인가" class="headerlink" title="NPM이란 무엇인가?"></a>NPM이란 무엇인가?</h3><p>NPM은 Node.js의 패키지 관리자입니다. NPM은 JavaScript 패키지를 설치, 관리 및 공유할 수 있는 도구로, Node.js 개발자들에게 매우 중요한 역할을 합니다.</p><h3 id="NPM의-역할과-중요성"><a href="#NPM의-역할과-중요성" class="headerlink" title="NPM의 역할과 중요성"></a>NPM의 역할과 중요성</h3><ul><li><strong>패키지 관리</strong>: NPM을 사용하면 다양한 오픈 소스 라이브러리와 패키지를 쉽게 설치하고 관리할 수 있습니다.</li><li><strong>의존성 관리</strong>: 프로젝트의 의존성을 명확하게 관리하여 코드의 일관성을 유지할 수 있습니다.</li><li><strong>스크립트 실행</strong>: NPM을 통해 프로젝트 관련 스크립트를 효율적으로 실행할 수 있습니다.</li></ul><h2 id="2-설치-방법"><a href="#2-설치-방법" class="headerlink" title="2. 설치 방법"></a>2. 설치 방법</h2><h3 id="NPM-설치-방법"><a href="#NPM-설치-방법" class="headerlink" title="NPM 설치 방법"></a>NPM 설치 방법</h3><p>NPM은 Node.js 설치 시 기본적으로 포함됩니다. 따라서 Node.js를 설치하면 NPM도 함께 설치됩니다.</p><ul><li><strong>Node.js 설치</strong>:<ul><li><a href="https://nodejs.org/">Node.js 공식 사이트</a>에서 설치 파일을 다운로드하고 설치합니다.</li><li>설치가 완료되면 터미널에서 <code>node -v</code>와 <code>npm -v</code> 명령어를 실행하여 설치가 제대로 되었는지 확인할 수 있습니다.</li></ul></li></ul><pre><code class="highlight bash">node -vnpm -v</code></pre><h2 id="3-기본-사용법"><a href="#3-기본-사용법" class="headerlink" title="3. 기본 사용법"></a>3. 기본 사용법</h2><h3 id="프로젝트-초기화"><a href="#프로젝트-초기화" class="headerlink" title="프로젝트 초기화"></a>프로젝트 초기화</h3><ul><li><strong><code>npm init</code></strong>: 새로운 Node.js 프로젝트를 초기화하고 <code>package.json</code> 파일을 생성합니다.</li></ul><pre><code class="highlight bash">npm init</code></pre><h3 id="package-json-파일-설명"><a href="#package-json-파일-설명" class="headerlink" title="package.json 파일 설명"></a><code>package.json</code> 파일 설명</h3><ul><li>프로젝트의 메타데이터와 의존성을 관리하는 파일입니다.</li><li>주요 필드: <code>name</code>, <code>version</code>, <code>scripts</code>, <code>dependencies</code>, <code>devDependencies</code> 등.</li></ul><h3 id="패키지-설치"><a href="#패키지-설치" class="headerlink" title="패키지 설치"></a>패키지 설치</h3><ul><li><strong>패키지 설치</strong>: <code>npm install &lt;package-name&gt;</code></li></ul><pre><code class="highlight bash">npm install express</code></pre><ul><li><strong>패키지 제거</strong>: <code>npm uninstall &lt;package-name&gt;</code></li></ul><pre><code class="highlight bash">npm uninstall express</code></pre><ul><li><strong>패키지 업데이트</strong>: <code>npm update</code></li></ul><pre><code class="highlight bash">npm update express</code></pre><h2 id="4-고급-사용법"><a href="#4-고급-사용법" class="headerlink" title="4. 고급 사용법"></a>4. 고급 사용법</h2><h3 id="전역-패키지-설치"><a href="#전역-패키지-설치" class="headerlink" title="전역 패키지 설치"></a>전역 패키지 설치</h3><ul><li><strong>전역 패키지 설치</strong>: <code>npm install -g &lt;package-name&gt;</code></li></ul><pre><code class="highlight bash">npm install -g nodemon</code></pre><h3 id="스크립트-실행"><a href="#스크립트-실행" class="headerlink" title="스크립트 실행"></a>스크립트 실행</h3><ul><li><strong>스크립트 실행</strong>: <code>npm run &lt;script-name&gt;</code></li></ul><pre><code class="highlight json"><span class="comment">// package.json</span><span class="punctuation">&#123;</span>  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node app.js&quot;</span><span class="punctuation">,</span>    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span>  <span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></code></pre><pre><code class="highlight bash">npm run start</code></pre><h3 id="보안-감사"><a href="#보안-감사" class="headerlink" title="보안 감사"></a>보안 감사</h3><ul><li><strong>보안 감사</strong>: <code>npm audit</code></li></ul><pre><code class="highlight bash">npm audit</code></pre><h3 id="특정-버전-설치"><a href="#특정-버전-설치" class="headerlink" title="특정 버전 설치"></a>특정 버전 설치</h3><ul><li><strong>특정 버전 설치</strong>: <code>npm install &lt;package-name&gt;@&lt;version&gt;</code></li></ul><pre><code class="highlight bash">npm install express@4.17.1</code></pre><h2 id="5-실습-예제"><a href="#5-실습-예제" class="headerlink" title="5. 실습 예제"></a>5. 실습 예제</h2><h3 id="프로젝트-생성-및-NPM-사용"><a href="#프로젝트-생성-및-NPM-사용" class="headerlink" title="프로젝트 생성 및 NPM 사용"></a>프로젝트 생성 및 NPM 사용</h3><ol><li><strong>새 프로젝트 생성</strong>: 새로운 디렉토리를 만들고 이동합니다.</li></ol><pre><code class="highlight bash"><span class="built_in">mkdir</span> my-npm-project<span class="built_in">cd</span> my-npm-project</code></pre><ol start="2"><li><strong>프로젝트 초기화</strong>: <code>npm init</code> 명령어를 사용하여 프로젝트를 초기화합니다.</li></ol><pre><code class="highlight bash">npm init -y</code></pre><ol start="3"><li><strong>패키지 설치</strong>: 필요한 패키지를 설치합니다.</li></ol><pre><code class="highlight bash">npm install express</code></pre><ol start="4"><li><strong>스크립트 설정</strong>: <code>package.json</code> 파일에 스크립트를 추가합니다.</li></ol><pre><code class="highlight json"><span class="comment">// package.json</span><span class="punctuation">&#123;</span>  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;my-npm-project&quot;</span><span class="punctuation">,</span>  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span>  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span>  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span><span class="punctuation">,</span>  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node app.js&quot;</span><span class="punctuation">,</span>    <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;nodemon app.js&quot;</span>  <span class="punctuation">&#125;</span><span class="punctuation">,</span>  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>    <span class="attr">&quot;express&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.17.1&quot;</span>  <span class="punctuation">&#125;</span><span class="punctuation">,</span>  <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>    <span class="attr">&quot;nodemon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.0.7&quot;</span>  <span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></code></pre><ol start="5"><li><strong>애플리케이션 실행</strong>: <code>npm run start</code> 또는 <code>npm run dev</code> 명령어를 사용하여 애플리케이션을 실행합니다.</li></ol><pre><code class="highlight bash">npm run startnpm run dev</code></pre><h2 id="6-NPM-명령어-사전"><a href="#6-NPM-명령어-사전" class="headerlink" title="6. NPM 명령어 사전"></a>6. NPM 명령어 사전</h2><ul><li><strong><code>npm list</code></strong>: 현재 프로젝트에 설치된 패키지들을 계층 구조로 출력합니다.</li></ul><pre><code class="highlight bash">npm list</code></pre><ul><li><strong><code>npm outdated</code></strong>: 설치된 패키지 중 업데이트가 필요한 패키지를 확인합니다.</li></ul><pre><code class="highlight bash">npm outdated</code></pre><ul><li><strong><code>npm prune</code></strong>: <code>package.json</code>에 나열되지 않은 패키지들을 삭제합니다.</li></ul><pre><code class="highlight bash">npm prune</code></pre><ul><li><strong><code>npm cache clean --force</code></strong>: NPM 캐시를 정리합니다.</li></ul><pre><code class="highlight bash">npm cache clean --force</code></pre><ul><li><strong><code>npm link</code></strong>: 로컬 패키지를 심볼릭 링크로 연결하여 개발 중인 패키지를 테스트할 수 있습니다.</li></ul><pre><code class="highlight bash">npm <span class="built_in">link</span></code></pre><ul><li><strong><code>npm ci</code></strong>: <code>package-lock.json</code>을 기반으로 의존성을 설치하여 빠르고 일관된 빌드를 제공합니다.</li></ul><pre><code class="highlight bash">npm ci</code></pre><ul><li><strong><code>npm pack</code></strong>: 현재 패키지를 tarball 파일로 패키징합니다.</li></ul><pre><code class="highlight bash">npm pack</code></pre><ul><li><strong><code>npm whoami</code></strong>: 현재 로그인된 NPM 계정을 출력합니다.</li></ul><pre><code class="highlight bash">npm <span class="built_in">whoami</span></code></pre><ul><li><strong><code>npm config</code></strong>: NPM 설정을 관리합니다. 예를 들어, 레지스트리 URL을 변경할 수 있습니다.</li></ul><pre><code class="highlight bash">npm config <span class="built_in">set</span> registry &lt;url&gt;</code></pre><ul><li><strong><code>npm audit fix</code></strong>: 보안 취약점을 자동으로 수정합니다.</li></ul><pre><code class="highlight bash">npm audit fix</code></pre><ul><li><strong><code>npm view &lt;package-name&gt;</code></strong>: 특정 패키지의 메타데이터를 조회합니다.</li></ul><pre><code class="highlight bash">npm view express</code></pre><h3 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h3><p>이번 시간에는 NPM의 기본 개념부터 설치 방법, 기본 및 고급 사용법, 추가 명령어까지 다루었습니다. NPM을 통해 Node.js 프로젝트를 효율적으로 관리하고 개발할 수 있습니다. 다음 시간에는 또 다른 유용한 CLI 도구를 소개하겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> CLI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>이미지 업로드 및 처리 방법과 Express와 Multer로 실습하기</title>
      <link href="/web/essential/11/"/>
      <url>/web/essential/11/</url>
      
        <content type="html"><![CDATA[<h1 id="이미지-업로드-및-처리-방법과-Express와-Multer로-실습하기"><a href="#이미지-업로드-및-처리-방법과-Express와-Multer로-실습하기" class="headerlink" title="이미지 업로드 및 처리 방법과 Express와 Multer로 실습하기"></a>이미지 업로드 및 처리 방법과 Express와 Multer로 실습하기</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 이미지 업로드와 처리 방법에 대해 알아보고, Express와 Multer를 사용하여 이미지 업로드를 실습해보겠습니다. 이미지 업로드는 웹 애플리케이션에서 흔히 사용되는 기능 중 하나입니다.</p><h2 id="이미지-업로드-및-처리의-개념"><a href="#이미지-업로드-및-처리의-개념" class="headerlink" title="이미지 업로드 및 처리의 개념"></a>이미지 업로드 및 처리의 개념</h2><h3 id="이미지-업로드란"><a href="#이미지-업로드란" class="headerlink" title="이미지 업로드란?"></a>이미지 업로드란?</h3><p>이미지 업로드(Image Upload)는 사용자가 자신의 기기에서 이미지를 선택하여 서버에 업로드하는 과정입니다. 업로드된 이미지는 서버에 저장되고, 필요에 따라 이미지 처리 과정을 거쳐 최종적으로 사용자에게 제공됩니다.</p><h3 id="이미지-업로드의-필요성"><a href="#이미지-업로드의-필요성" class="headerlink" title="이미지 업로드의 필요성"></a>이미지 업로드의 필요성</h3><ol><li><strong>사용자 생성 콘텐츠</strong>: 사용자 프로필 사진, 게시물 이미지 등 사용자 생성 콘텐츠를 웹 애플리케이션에 포함할 수 있습니다.</li><li><strong>개인화</strong>: 사용자가 이미지를 업로드하여 개인화된 경험을 제공할 수 있습니다.</li><li><strong>미디어 관리</strong>: 블로그, 뉴스 사이트 등에서 다양한 미디어 파일을 관리할 수 있습니다.</li></ol><h3 id="이미지-처리의-주요-기능"><a href="#이미지-처리의-주요-기능" class="headerlink" title="이미지 처리의 주요 기능"></a>이미지 처리의 주요 기능</h3><ol><li><strong>크기 조정</strong>: 이미지를 원하는 크기로 조정합니다.</li><li><strong>포맷 변환</strong>: 이미지를 다른 파일 형식으로 변환합니다.</li><li><strong>압축</strong>: 이미지 파일 크기를 줄입니다.</li><li><strong>워터마킹</strong>: 이미지에 워터마크를 추가합니다.</li></ol><h2 id="준비하기"><a href="#준비하기" class="headerlink" title="준비하기"></a>준비하기</h2><p>먼저 필요한 패키지를 설치합니다:</p><pre><code class="highlight bash">npm init -ynpm install express multer</code></pre><h2 id="서버-설정"><a href="#서버-설정" class="headerlink" title="서버 설정"></a>서버 설정</h2><p>다음은 필요한 모듈을 가져오고 서버를 설정하는 코드입니다. 자세한 부분은 뒤에서 알아보겠습니다.</p><pre><code class="highlight javascript"><span class="comment">// server.js</span><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);<span class="keyword">const</span> multer = <span class="built_in">require</span>(<span class="string">&quot;multer&quot;</span>);<span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);<span class="keyword">const</span> app = <span class="title function_">express</span>();<span class="keyword">const</span> port = <span class="number">3000</span>;<span class="comment">// Multer 설정</span><span class="keyword">const</span> storage = multer.<span class="title function_">diskStorage</span>(&#123;  <span class="attr">destination</span>: <span class="function">(<span class="params">req, file, cb</span>) =&gt;</span> &#123;    <span class="title function_">cb</span>(<span class="literal">null</span>, <span class="string">&quot;uploads/&quot;</span>);  &#125;,  <span class="attr">filename</span>: <span class="function">(<span class="params">req, file, cb</span>) =&gt;</span> &#123;    <span class="title function_">cb</span>(<span class="literal">null</span>, <span class="string">`<span class="subst">$&#123;<span class="built_in">Date</span>.now()&#125;</span>-<span class="subst">$&#123;file.originalname&#125;</span>`</span>);  &#125;,&#125;);<span class="keyword">const</span> upload = <span class="title function_">multer</span>(&#123; <span class="attr">storage</span>: storage &#125;);<span class="comment">// 정적 파일 제공</span>app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&quot;public&quot;</span>));<span class="comment">// 이미지 업로드 엔드포인트</span>app.<span class="title function_">post</span>(<span class="string">&quot;/upload&quot;</span>, upload.<span class="title function_">single</span>(<span class="string">&quot;image&quot;</span>), <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  <span class="keyword">if</span> (!req.<span class="property">file</span>) &#123;    <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">send</span>(<span class="string">&quot;No file uploaded.&quot;</span>);  &#125;  res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">send</span>(<span class="string">`File uploaded successfully: <span class="subst">$&#123;req.file.filename&#125;</span>`</span>);&#125;);<span class="comment">// 서버 시작</span>app.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Server is running on http://localhost:<span class="subst">$&#123;port&#125;</span>`</span>);&#125;);</code></pre><h2 id="클라이언트-설정"><a href="#클라이언트-설정" class="headerlink" title="클라이언트 설정"></a>클라이언트 설정</h2><p>클라이언트 측 코드를 작성하여 이미지를 업로드합니다. <code>public/index.html</code> 파일을 생성합니다.</p><pre><code class="highlight html"><span class="comment">&lt;!-- public/index.html --&gt;</span><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">head</span>&gt;</span>    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span>    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span>    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Image Upload<span class="tag">&lt;/<span class="name">title</span>&gt;</span>  <span class="tag">&lt;/<span class="name">head</span>&gt;</span>  <span class="tag">&lt;<span class="name">body</span>&gt;</span>    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Image Upload<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>    <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;uploadForm&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span>      <span class="tag">&lt;<span class="name">input</span></span><span class="tag">        <span class="attr">type</span>=<span class="string">&quot;file&quot;</span></span><span class="tag">        <span class="attr">name</span>=<span class="string">&quot;image&quot;</span></span><span class="tag">        <span class="attr">id</span>=<span class="string">&quot;imageInput&quot;</span></span><span class="tag">        <span class="attr">accept</span>=<span class="string">&quot;image/*&quot;</span></span><span class="tag">        <span class="attr">required</span></span><span class="tag">      /&gt;</span>      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>Upload<span class="tag">&lt;/<span class="name">button</span>&gt;</span>    <span class="tag">&lt;/<span class="name">form</span>&gt;</span>    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">      <span class="variable language_">document</span></span><span class="language-javascript">        .<span class="title function_">getElementById</span>(<span class="string">&quot;uploadForm&quot;</span>)</span><span class="language-javascript">        .<span class="title function_">addEventListener</span>(<span class="string">&quot;submit&quot;</span>, <span class="title function_">async</span> (e) =&gt; &#123;</span><span class="language-javascript">          e.<span class="title function_">preventDefault</span>();</span><span class="language-javascript"></span><span class="language-javascript">          <span class="keyword">const</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span><span class="language-javascript">          <span class="keyword">const</span> imageInput = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;imageInput&quot;</span>);</span><span class="language-javascript">          formData.<span class="title function_">append</span>(<span class="string">&quot;image&quot;</span>, imageInput.<span class="property">files</span>[<span class="number">0</span>]);</span><span class="language-javascript"></span><span class="language-javascript">          <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&quot;/upload&quot;</span>, &#123;</span><span class="language-javascript">            <span class="attr">method</span>: <span class="string">&quot;POST&quot;</span>,</span><span class="language-javascript">            <span class="attr">body</span>: formData,</span><span class="language-javascript">          &#125;);</span><span class="language-javascript"></span><span class="language-javascript">          <span class="keyword">const</span> message = <span class="keyword">await</span> response.<span class="title function_">text</span>();</span><span class="language-javascript">          <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;message&quot;</span>).<span class="property">innerText</span> = message;</span><span class="language-javascript">        &#125;);</span><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  <span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></code></pre><h2 id="설정-설명"><a href="#설정-설명" class="headerlink" title="설정 설명"></a>설정 설명</h2><p>Express와 Multer를 사용하여 이미지 업로드를 설정하는 방법을 설명합니다.</p><ol><li><p><strong>Multer 설정</strong>:</p><pre><code class="highlight javascript"><span class="keyword">const</span> multer = <span class="built_in">require</span>(<span class="string">&quot;multer&quot;</span>);<span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);<span class="keyword">const</span> storage = multer.<span class="title function_">diskStorage</span>(&#123;  <span class="attr">destination</span>: <span class="function">(<span class="params">req, file, cb</span>) =&gt;</span> &#123;    <span class="title function_">cb</span>(<span class="literal">null</span>, <span class="string">&quot;uploads/&quot;</span>);  &#125;,  <span class="attr">filename</span>: <span class="function">(<span class="params">req, file, cb</span>) =&gt;</span> &#123;    <span class="title function_">cb</span>(<span class="literal">null</span>, <span class="string">`<span class="subst">$&#123;<span class="built_in">Date</span>.now()&#125;</span>-<span class="subst">$&#123;file.originalname&#125;</span>`</span>);  &#125;,&#125;);<span class="keyword">const</span> upload = <span class="title function_">multer</span>(&#123; <span class="attr">storage</span>: storage &#125;);</code></pre><p>Multer를 사용하여 업로드된 파일을 서버의 <code>uploads</code> 디렉토리에 저장하도록 설정합니다. 파일명은 업로드 시간을 기준으로 설정하여 고유하게 만듭니다.</p></li><li><p><strong>이미지 업로드 엔드포인트</strong>:</p><pre><code class="highlight javascript">app.<span class="title function_">post</span>(<span class="string">&quot;/upload&quot;</span>, upload.<span class="title function_">single</span>(<span class="string">&quot;image&quot;</span>), <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  <span class="keyword">if</span> (!req.<span class="property">file</span>) &#123;    <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">send</span>(<span class="string">&quot;No file uploaded.&quot;</span>);  &#125;  res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">send</span>(<span class="string">`File uploaded successfully: <span class="subst">$&#123;req.file.filename&#125;</span>`</span>);&#125;);</code></pre><p>POST 요청을 통해 이미지를 업로드하는 엔드포인트를 정의합니다. 업로드된 파일이 없을 경우 에러 메시지를 반환하고, 업로드가 성공하면 파일명을 반환합니다.</p></li><li><p><strong>클라이언트 설정</strong>:</p><pre><code class="highlight html"><span class="comment">&lt;!-- public/index.html --&gt;</span><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;uploadForm&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">input</span></span><span class="tag">    <span class="attr">type</span>=<span class="string">&quot;file&quot;</span></span><span class="tag">    <span class="attr">name</span>=<span class="string">&quot;image&quot;</span></span><span class="tag">    <span class="attr">id</span>=<span class="string">&quot;imageInput&quot;</span></span><span class="tag">    <span class="attr">accept</span>=<span class="string">&quot;image/*&quot;</span></span><span class="tag">    <span class="attr">required</span></span><span class="tag">  /&gt;</span>  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>Upload<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="variable language_">document</span></span><span class="language-javascript">    .<span class="title function_">getElementById</span>(<span class="string">&quot;uploadForm&quot;</span>)</span><span class="language-javascript">    .<span class="title function_">addEventListener</span>(<span class="string">&quot;submit&quot;</span>, <span class="title function_">async</span> (e) =&gt; &#123;</span><span class="language-javascript">      e.<span class="title function_">preventDefault</span>();</span><span class="language-javascript"></span><span class="language-javascript">      <span class="keyword">const</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span><span class="language-javascript">      <span class="keyword">const</span> imageInput = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;imageInput&quot;</span>);</span><span class="language-javascript">      formData.<span class="title function_">append</span>(<span class="string">&quot;image&quot;</span>, imageInput.<span class="property">files</span>[<span class="number">0</span>]);</span><span class="language-javascript"></span><span class="language-javascript">      <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&quot;/upload&quot;</span>, &#123;</span><span class="language-javascript">        <span class="attr">method</span>: <span class="string">&quot;POST&quot;</span>,</span><span class="language-javascript">        <span class="attr">body</span>: formData,</span><span class="language-javascript">      &#125;);</span><span class="language-javascript"></span><span class="language-javascript">      <span class="keyword">const</span> message = <span class="keyword">await</span> response.<span class="title function_">text</span>();</span><span class="language-javascript">      <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;message&quot;</span>).<span class="property">innerText</span> = message;</span><span class="language-javascript">    &#125;);</span><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></code></pre><p>클라이언트 측에서는 이미지를 선택하고, 폼 데이터를 사용하여 서버에 업로드합니다. 업로드 결과 메시지를 화면에 표시합니다.</p></li></ol><h2 id="테스트"><a href="#테스트" class="headerlink" title="테스트"></a>테스트</h2><p>이렇게 하면 Express와 Multer를 사용하여 이미지를 업로드할 수 있습니다. 이 코드를 실행하기 전에 <code>server.js</code> 파일을 실행하여 서버를 시작하세요.</p><pre><code class="highlight bash">node server.js</code></pre><p>서버가 성공적으로 실행되면, 브라우저에서 <code>http://localhost:3000</code>을 열어 이미지 업로드 애플리케이션을 테스트할 수 있습니다.</p><h3 id="테스트-방법"><a href="#테스트-방법" class="headerlink" title="테스트 방법"></a>테스트 방법</h3><ol><li><strong>서버 실행</strong>: <code>node server.js</code> 명령어를 사용하여 서버를 실행합니다.</li><li><strong>브라우저에서 열기</strong>: 브라우저에서 <code>http://localhost:3000</code>을 열어 클라이언트 페이지에 접근합니다.</li><li><strong>이미지 업로드</strong>: 이미지를 선택하고 “Upload” 버튼을 클릭하여 이미지를 업로드합니다. 업로드 결과 메시지가 화면에 표시됩니다.</li></ol><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 이미지 업로드와 처리의 개념을 이해하고, Express와 Multer를 사용하여 이미지를 업로드하는 방법을 알아보았습니다. 이를 바탕으로 사용자 생성 콘텐츠를 효율적으로 관리할 수 있는 웹 애플리케이션을 개발해보세요!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> web_필수 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>에러 핸들링과 로깅의 중요성 및 Express에서의 설정 방법</title>
      <link href="/web/essential/10/"/>
      <url>/web/essential/10/</url>
      
        <content type="html"><![CDATA[<h1 id="에러-핸들링과-로깅의-중요성-및-Express에서의-설정-방법"><a href="#에러-핸들링과-로깅의-중요성-및-Express에서의-설정-방법" class="headerlink" title="에러 핸들링과 로깅의 중요성 및 Express에서의 설정 방법"></a>에러 핸들링과 로깅의 중요성 및 Express에서의 설정 방법</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 에러 핸들링과 로깅의 중요성에 대해 알아보고, Express에서 에러 핸들링과 로깅을 설정하는 방법을 실습해보겠습니다. 에러 핸들링과 로깅은 안정적이고 유지보수 가능한 웹 애플리케이션을 개발하는 데 중요한 기능입니다.</p><h2 id="에러-핸들링의-중요성"><a href="#에러-핸들링의-중요성" class="headerlink" title="에러 핸들링의 중요성"></a>에러 핸들링의 중요성</h2><h3 id="에러-핸들링이란"><a href="#에러-핸들링이란" class="headerlink" title="에러 핸들링이란?"></a>에러 핸들링이란?</h3><p>에러 핸들링(Error Handling)은 프로그램 실행 중 발생하는 예외 상황을 처리하여 프로그램의 비정상적인 종료를 방지하고, 사용자에게 유용한 에러 메시지를 제공하는 과정입니다.</p><h3 id="에러-핸들링의-필요성"><a href="#에러-핸들링의-필요성" class="headerlink" title="에러 핸들링의 필요성"></a>에러 핸들링의 필요성</h3><ol><li><strong>안정성</strong>: 애플리케이션이 예기치 않은 상황에서도 정상적으로 작동하도록 합니다.</li><li><strong>사용자 경험 개선</strong>: 사용자가 에러 상황을 이해하고 적절히 대응할 수 있도록 도와줍니다.</li><li><strong>디버깅 용이성</strong>: 개발자가 문제를 신속하게 파악하고 해결할 수 있도록 합니다.</li><li><strong>보안 강화</strong>: 민감한 정보가 노출되지 않도록 보호합니다.</li></ol><h2 id="로깅의-중요성"><a href="#로깅의-중요성" class="headerlink" title="로깅의 중요성"></a>로깅의 중요성</h2><h3 id="로깅이란"><a href="#로깅이란" class="headerlink" title="로깅이란?"></a>로깅이란?</h3><p>로깅(Logging)은 애플리케이션의 실행 상태, 에러, 경고, 정보 등을 기록하여 나중에 분석하고 디버깅할 수 있도록 하는 과정입니다.</p><h3 id="로깅의-필요성"><a href="#로깅의-필요성" class="headerlink" title="로깅의 필요성"></a>로깅의 필요성</h3><ol><li><strong>문제 해결</strong>: 문제 발생 시 로그를 통해 원인을 파악하고 신속하게 해결할 수 있습니다.</li><li><strong>성능 모니터링</strong>: 애플리케이션의 성능을 모니터링하고 개선할 수 있습니다.</li><li><strong>보안 감사</strong>: 보안 관련 이벤트를 기록하여 추적할 수 있습니다.</li><li><strong>운영 지원</strong>: 운영 중 발생하는 이슈를 분석하고 대응할 수 있습니다.</li></ol><h2 id="준비하기"><a href="#준비하기" class="headerlink" title="준비하기"></a>준비하기</h2><p>먼저 필요한 패키지를 설치합니다:</p><pre><code class="highlight bash">npm init -ynpm install express morgan winston</code></pre><h2 id="서버-설정"><a href="#서버-설정" class="headerlink" title="서버 설정"></a>서버 설정</h2><p>다음은 필요한 모듈을 가져오고 서버를 설정하는 코드입니다. 자세한 부분은 뒤에서 알아보겠습니다.</p><pre><code class="highlight javascript"><span class="comment">// server.js</span><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);<span class="keyword">const</span> morgan = <span class="built_in">require</span>(<span class="string">&quot;morgan&quot;</span>);<span class="keyword">const</span> winston = <span class="built_in">require</span>(<span class="string">&quot;winston&quot;</span>);<span class="keyword">const</span> app = <span class="title function_">express</span>();<span class="keyword">const</span> port = <span class="number">3000</span>;<span class="comment">// 로깅 설정</span><span class="keyword">const</span> logger = winston.<span class="title function_">createLogger</span>(&#123;  <span class="attr">level</span>: <span class="string">&quot;info&quot;</span>,  <span class="attr">format</span>: winston.<span class="property">format</span>.<span class="title function_">combine</span>(    winston.<span class="property">format</span>.<span class="title function_">timestamp</span>(),    winston.<span class="property">format</span>.<span class="title function_">json</span>()  ),  <span class="attr">transports</span>: [    <span class="keyword">new</span> winston.<span class="property">transports</span>.<span class="title class_">File</span>(&#123; <span class="attr">filename</span>: <span class="string">&quot;error.log&quot;</span>, <span class="attr">level</span>: <span class="string">&quot;error&quot;</span> &#125;),    <span class="keyword">new</span> winston.<span class="property">transports</span>.<span class="title class_">File</span>(&#123; <span class="attr">filename</span>: <span class="string">&quot;combined.log&quot;</span> &#125;),  ],&#125;);<span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&quot;production&quot;</span>) &#123;  logger.<span class="title function_">add</span>(    <span class="keyword">new</span> winston.<span class="property">transports</span>.<span class="title class_">Console</span>(&#123;      <span class="attr">format</span>: winston.<span class="property">format</span>.<span class="title function_">simple</span>(),    &#125;)  );&#125;app.<span class="title function_">use</span>(  <span class="title function_">morgan</span>(<span class="string">&quot;combined&quot;</span>, &#123;    <span class="attr">stream</span>: &#123; <span class="attr">write</span>: <span class="function">(<span class="params">message</span>) =&gt;</span> logger.<span class="title function_">info</span>(message.<span class="title function_">trim</span>()) &#125;,  &#125;));<span class="comment">// 기본 라우트 설정</span>app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  res.<span class="title function_">send</span>(<span class="string">&quot;Hello, World!&quot;</span>);&#125;);<span class="comment">// 에러를 유발하는 라우트</span>app.<span class="title function_">get</span>(<span class="string">&quot;/error&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;This is a deliberate error.&quot;</span>);&#125;);<span class="comment">// 에러 핸들링 미들웨어</span>app.<span class="title function_">use</span>(<span class="function">(<span class="params">err, req, res, next</span>) =&gt;</span> &#123;  logger.<span class="title function_">error</span>(err.<span class="property">stack</span>);  res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&quot;Something broke!&quot;</span>);&#125;);app.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Server is running on &lt;http://localhost&gt;:<span class="subst">$&#123;port&#125;</span>`</span>);&#125;);</code></pre><h2 id="설정-설명"><a href="#설정-설명" class="headerlink" title="설정 설명"></a>설정 설명</h2><p>Express에서 에러 핸들링과 로깅을 설정하는 방법을 설명합니다.</p><ol><li><p><strong>로깅 설정</strong>:</p><pre><code class="highlight javascript"><span class="keyword">const</span> morgan = <span class="built_in">require</span>(<span class="string">&quot;morgan&quot;</span>);<span class="keyword">const</span> winston = <span class="built_in">require</span>(<span class="string">&quot;winston&quot;</span>);<span class="keyword">const</span> logger = winston.<span class="title function_">createLogger</span>(&#123;  <span class="attr">level</span>: <span class="string">&quot;info&quot;</span>,  <span class="attr">format</span>: winston.<span class="property">format</span>.<span class="title function_">combine</span>(    winston.<span class="property">format</span>.<span class="title function_">timestamp</span>(),    winston.<span class="property">format</span>.<span class="title function_">json</span>()  ),  <span class="attr">transports</span>: [    <span class="keyword">new</span> winston.<span class="property">transports</span>.<span class="title class_">File</span>(&#123; <span class="attr">filename</span>: <span class="string">&quot;error.log&quot;</span>, <span class="attr">level</span>: <span class="string">&quot;error&quot;</span> &#125;),    <span class="keyword">new</span> winston.<span class="property">transports</span>.<span class="title class_">File</span>(&#123; <span class="attr">filename</span>: <span class="string">&quot;combined.log&quot;</span> &#125;),  ],&#125;);<span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&quot;production&quot;</span>) &#123;  logger.<span class="title function_">add</span>(    <span class="keyword">new</span> winston.<span class="property">transports</span>.<span class="title class_">Console</span>(&#123;      <span class="attr">format</span>: winston.<span class="property">format</span>.<span class="title function_">simple</span>(),    &#125;)  );&#125;app.<span class="title function_">use</span>(  <span class="title function_">morgan</span>(<span class="string">&quot;combined&quot;</span>, &#123;    <span class="attr">stream</span>: &#123; <span class="attr">write</span>: <span class="function">(<span class="params">message</span>) =&gt;</span> logger.<span class="title function_">info</span>(message.<span class="title function_">trim</span>()) &#125;,  &#125;));</code></pre><p><code>winston</code>을 사용하여 로깅을 설정합니다. 파일로 로그를 저장하고, 개발 환경에서는 콘솔에도 로그를 출력합니다. <code>morgan</code>을 사용하여 HTTP 요청 로그를 기록하고, 이를 <code>winston</code>을 통해 관리합니다.</p></li><li><p><strong>기본 라우트 설정</strong>:</p><pre><code class="highlight javascript">app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  res.<span class="title function_">send</span>(<span class="string">&quot;Hello, World!&quot;</span>);&#125;);</code></pre><p>기본 라우트를 설정하여 요청을 처리합니다.</p></li><li><p><strong>에러를 유발하는 라우트</strong>:</p><pre><code class="highlight javascript">app.<span class="title function_">get</span>(<span class="string">&quot;/error&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;This is a deliberate error.&quot;</span>);&#125;);</code></pre><p>의도적으로 에러를 발생시키는 라우트를 설정하여 에러 핸들링과 로깅을 테스트합니다.</p></li><li><p><strong>에러 핸들링 미들웨어</strong>:</p><pre><code class="highlight javascript">app.<span class="title function_">use</span>(<span class="function">(<span class="params">err, req, res, next</span>) =&gt;</span> &#123;  logger.<span class="title function_">error</span>(err.<span class="property">stack</span>);  res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&quot;Something broke!&quot;</span>);&#125;);</code></pre><p>에러 핸들링 미들웨어를 설정하여 애플리케이션에서 발생하는 모든 에러를 처리합니다. 에러 스택을 로그로 기록하고, 사용자에게 에러 메시지를 반환합니다.</p></li></ol><h2 id="테스트"><a href="#테스트" class="headerlink" title="테스트"></a>테스트</h2><p>이렇게 하면 Node.js에서 에러 핸들링과 로깅을 설정할 수 있습니다. 이 코드를 실행하기 전에 <code>server.js</code> 파일을 실행하여 서버를 시작하세요.</p><pre><code class="highlight bash">node server.js</code></pre><p>서버가 성공적으로 실행되면, <code>http://localhost:3000</code>에서 기본 라우트를 테스트하고, <code>http://localhost:3000/error</code>에서 에러를 유발하여 에러 핸들링과 로깅이 제대로 작동하는지 확인해보세요!</p><h3 id="에러-로그-예시"><a href="#에러-로그-예시" class="headerlink" title="에러 로그 예시"></a>에러 로그 예시</h3><p><code>/error</code> 라우트에 접근하면 다음과 같은 로그가 <code>error.log</code> 파일에 기록됩니다:</p><pre><code class="highlight json"><span class="punctuation">&#123;</span>  <span class="attr">&quot;level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;error&quot;</span><span class="punctuation">,</span>  <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Error: This is a deliberate error.\\n    at /path/to/project/server.js:24:9\\n    at Layer.handle [as handle_request] (/path/to/project/node_modules/express/lib/router/layer.js:95:5)\\n    at next (/path/to/project/node_modules/express/lib/router/route.js:137:13)\\n    at Route.dispatch (/path/to/project/node_modules/express/lib/router/route.js:112:3)\\n    at Layer.handle [as handle_request] (/path/to/project/node_modules/express/lib/router/layer.js:95:5)\\n    at /path/to/project/node_modules/express/lib/router/index.js:281:22\\n    at Function.process_params (/path/to/project/node_modules/express/lib/router/index.js:335:12)\\n    at next (/path/to/project/node_modules/express/lib/router/index.js:275:10)\\n    at /path/to/project/server.js:28:3\\n    at Layer.handle_error (/path/to/project/node_modules/express/lib/router/layer.js:71:5)\\n    at trim_prefix (/path/to/project/node_modules/express/lib/router/index.js:315:13)\\n    at /path/to/project/node_modules/express/lib/router/index.js:284:7\\n    at Function.process_params (/path/to/project/node_modules/express/lib/router/index.js:335:12)\\n    at next (/path/to/project/node_modules/express/lib/router/index.js:275:10)\\n    at /path/to/project/node_modules/express/lib/router/index.js:635:15\\n    at next (/path/to/project/node_modules/express/lib/router/index.js:260:14)&quot;</span><span class="punctuation">,</span>  <span class="attr">&quot;timestamp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2024-01-26T10:00:00.000Z&quot;</span><span class="punctuation">&#125;</span></code></pre><h3 id="테스트-방법"><a href="#테스트-방법" class="headerlink" title="테스트 방법"></a>테스트 방법</h3><ol><li><strong>기본 라우트 테스트</strong>: 브라우저에서 <code>http://localhost:3000</code>을 열어 “Hello, World!” 메시지가 표시되는지 확인합니다.</li><li><strong>에러 유발 테스트</strong>: 브라우저에서 <code>http://localhost:3000/error</code>을 열어 에러가 발생하고, “Something broke!” 메시지가 표시되는지 확인합니다.</li><li><strong>로그 파일 확인</strong>: 프로젝트 디렉토리에서 <code>error.log</code> 파일을 열어 에러 로그가 기록되었는지 확인합니다.</li></ol><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 에러 핸들링과 로깅의 중요성을 이해하고, Express에서 에러 핸들링과 로깅을 설정하는 방법을 알아보았습니다. 이를 바탕으로 더 안정적이고 유지보수 가능한 웹 애플리케이션을 개발해보세요!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> web_필수 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>단위 테스트의 중요성과 Express와 Jest를 사용한 테스트 작성법</title>
      <link href="/web/essential/9/"/>
      <url>/web/essential/9/</url>
      
        <content type="html"><![CDATA[<h1 id="단위-테스트의-중요성과-Express와-Jest를-사용한-테스트-작성법"><a href="#단위-테스트의-중요성과-Express와-Jest를-사용한-테스트-작성법" class="headerlink" title="단위 테스트의 중요성과 Express와 Jest를 사용한 테스트 작성법"></a>단위 테스트의 중요성과 Express와 Jest를 사용한 테스트 작성법</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 단위 테스트의 중요성에 대해 알아보고, Express와 Jest를 사용하여 단위 테스트를 작성하는 방법을 실습해보겠습니다. 단위 테스트는 소프트웨어의 품질을 보장하고 유지보수성을 높이는 데 중요한 역할을 합니다.</p><h2 id="단위-테스트의-개념"><a href="#단위-테스트의-개념" class="headerlink" title="단위 테스트의 개념"></a>단위 테스트의 개념</h2><h3 id="단위-테스트란"><a href="#단위-테스트란" class="headerlink" title="단위 테스트란?"></a>단위 테스트란?</h3><p>단위 테스트(Unit Testing)는 소프트웨어의 개별 모듈(함수, 메서드 등)을 독립적으로 테스트하여, 해당 모듈이 예상대로 동작하는지 검증하는 과정입니다. 단위 테스트는 일반적으로 개발자가 작성하며, 코드 변경 시 버그를 빠르게 발견할 수 있도록 도와줍니다.</p><h3 id="단위-테스트의-필요성"><a href="#단위-테스트의-필요성" class="headerlink" title="단위 테스트의 필요성"></a>단위 테스트의 필요성</h3><ol><li><strong>버그 조기 발견</strong>: 코드 변경 시 발생할 수 있는 버그를 조기에 발견하고 수정할 수 있습니다.</li><li><strong>코드 품질 향상</strong>: 코드를 작은 단위로 테스트하여 코드 품질을 높이고, 리팩토링 시 안정성을 보장할 수 있습니다.</li><li><strong>문서화 역할</strong>: 테스트 코드는 함수나 메서드의 사용 방법과 기대 결과를 문서화하는 역할을 합니다.</li><li><strong>개발 속도 향상</strong>: 테스트 자동화를 통해 반복적인 수동 테스트 작업을 줄이고, 개발 속도를 향상시킬 수 있습니다.</li></ol><h3 id="단위-테스트의-주요-원칙"><a href="#단위-테스트의-주요-원칙" class="headerlink" title="단위 테스트의 주요 원칙"></a>단위 테스트의 주요 원칙</h3><ol><li><strong>독립성</strong>: 각 테스트는 다른 테스트와 독립적으로 실행되어야 합니다.</li><li><strong>재현 가능성</strong>: 테스트는 언제나 동일한 결과를 반환해야 합니다.</li><li><strong>단순성</strong>: 테스트 코드는 단순하고 명확해야 합니다.</li></ol><h2 id="준비하기"><a href="#준비하기" class="headerlink" title="준비하기"></a>준비하기</h2><p>먼저 필요한 패키지를 설치합니다:</p><pre><code class="highlight bash">npm init -ynpm install express jest supertest</code></pre><h2 id="서버-설정"><a href="#서버-설정" class="headerlink" title="서버 설정"></a>서버 설정</h2><p>다음은 필요한 모듈을 가져오고 서버를 설정하는 코드입니다. 자세한 부분은 뒤에서 알아보겠습니다.</p><pre><code class="highlight javascript"><span class="comment">// server.js</span><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);<span class="keyword">const</span> app = <span class="title function_">express</span>();<span class="keyword">const</span> port = <span class="number">3000</span>;<span class="comment">// JSON 파싱 미들웨어 설정</span>app.<span class="title function_">use</span>(express.<span class="title function_">json</span>());<span class="comment">// 간단한 엔드포인트 설정</span>app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">json</span>(&#123; <span class="attr">message</span>: <span class="string">&quot;Hello, World!&quot;</span> &#125;);&#125;);<span class="comment">// 사용자 생성 엔드포인트</span>app.<span class="title function_">post</span>(<span class="string">&quot;/users&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  <span class="keyword">const</span> &#123; name, email &#125; = req.<span class="property">body</span>;  <span class="keyword">if</span> (!name || !email) &#123;    <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">json</span>(&#123; <span class="attr">error</span>: <span class="string">&quot;Name and email are required&quot;</span> &#125;);  &#125;  res.<span class="title function_">status</span>(<span class="number">201</span>).<span class="title function_">json</span>(&#123; <span class="attr">id</span>: <span class="number">1</span>, name, email &#125;);&#125;);<span class="comment">// 서버 시작</span><span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&quot;test&quot;</span>) &#123;  app.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Server is running on http://localhost:<span class="subst">$&#123;port&#125;</span>`</span>);  &#125;);&#125;<span class="variable language_">module</span>.<span class="property">exports</span> = app;</code></pre><h2 id="단위-테스트-작성"><a href="#단위-테스트-작성" class="headerlink" title="단위 테스트 작성"></a>단위 테스트 작성</h2><p>Jest와 Supertest를 사용하여 단위 테스트를 작성합니다. <code>tests/app.test.js</code> 파일을 생성합니다.</p><pre><code class="highlight javascript"><span class="comment">// tests/app.test.js</span><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">&quot;supertest&quot;</span>);<span class="keyword">const</span> app = <span class="built_in">require</span>(<span class="string">&quot;../server&quot;</span>);<span class="title function_">describe</span>(<span class="string">&quot;GET /&quot;</span>, <span class="function">() =&gt;</span> &#123;  <span class="title function_">it</span>(<span class="string">&#x27;should return 200 and &quot;Hello, World!&quot; message&#x27;</span>, <span class="title function_">async</span> () =&gt; &#123;    <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">request</span>(app).<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>);    <span class="title function_">expect</span>(res.<span class="property">statusCode</span>).<span class="title function_">toEqual</span>(<span class="number">200</span>);    <span class="title function_">expect</span>(res.<span class="property">body</span>).<span class="title function_">toHaveProperty</span>(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;Hello, World!&quot;</span>);  &#125;);&#125;);<span class="title function_">describe</span>(<span class="string">&quot;POST /users&quot;</span>, <span class="function">() =&gt;</span> &#123;  <span class="title function_">it</span>(<span class="string">&quot;should return 201 and user data when valid data is sent&quot;</span>, <span class="title function_">async</span> () =&gt; &#123;    <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">request</span>(app)      .<span class="title function_">post</span>(<span class="string">&quot;/users&quot;</span>)      .<span class="title function_">send</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;John Doe&quot;</span>, <span class="attr">email</span>: <span class="string">&quot;john@example.com&quot;</span> &#125;);    <span class="title function_">expect</span>(res.<span class="property">statusCode</span>).<span class="title function_">toEqual</span>(<span class="number">201</span>);    <span class="title function_">expect</span>(res.<span class="property">body</span>).<span class="title function_">toHaveProperty</span>(<span class="string">&quot;id&quot;</span>);    <span class="title function_">expect</span>(res.<span class="property">body</span>).<span class="title function_">toHaveProperty</span>(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;John Doe&quot;</span>);    <span class="title function_">expect</span>(res.<span class="property">body</span>).<span class="title function_">toHaveProperty</span>(<span class="string">&quot;email&quot;</span>, <span class="string">&quot;john@example.com&quot;</span>);  &#125;);  <span class="title function_">it</span>(<span class="string">&quot;should return 400 when name or email is missing&quot;</span>, <span class="title function_">async</span> () =&gt; &#123;    <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">request</span>(app).<span class="title function_">post</span>(<span class="string">&quot;/users&quot;</span>).<span class="title function_">send</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;John Doe&quot;</span> &#125;);    <span class="title function_">expect</span>(res.<span class="property">statusCode</span>).<span class="title function_">toEqual</span>(<span class="number">400</span>);    <span class="title function_">expect</span>(res.<span class="property">body</span>).<span class="title function_">toHaveProperty</span>(<span class="string">&quot;error&quot;</span>, <span class="string">&quot;Name and email are required&quot;</span>);  &#125;);&#125;);</code></pre><h2 id="설정-설명"><a href="#설정-설명" class="headerlink" title="설정 설명"></a>설정 설명</h2><p>Express와 Jest를 사용하여 단위 테스트를 설정하는 방법을 설명합니다.</p><ol><li><p><strong>서버 설정</strong>:</p><pre><code class="highlight javascript"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);<span class="keyword">const</span> app = <span class="title function_">express</span>();<span class="keyword">const</span> port = <span class="number">3000</span>;<span class="comment">// JSON 파싱 미들웨어 설정</span>app.<span class="title function_">use</span>(express.<span class="title function_">json</span>());<span class="comment">// 간단한 엔드포인트 설정</span>app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">json</span>(&#123; <span class="attr">message</span>: <span class="string">&quot;Hello, World!&quot;</span> &#125;);&#125;);<span class="comment">// 사용자 생성 엔드포인트</span>app.<span class="title function_">post</span>(<span class="string">&quot;/users&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  <span class="keyword">const</span> &#123; name, email &#125; = req.<span class="property">body</span>;  <span class="keyword">if</span> (!name || !email) &#123;    <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">json</span>(&#123; <span class="attr">error</span>: <span class="string">&quot;Name and email are required&quot;</span> &#125;);  &#125;  res.<span class="title function_">status</span>(<span class="number">201</span>).<span class="title function_">json</span>(&#123; <span class="attr">id</span>: <span class="number">1</span>, name, email &#125;);&#125;);<span class="comment">// 서버 시작</span><span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&quot;test&quot;</span>) &#123;  app.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Server is running on http://localhost:<span class="subst">$&#123;port&#125;</span>`</span>);  &#125;);&#125;<span class="variable language_">module</span>.<span class="property">exports</span> = app;</code></pre><p>Express 애플리케이션을 설정하고, 간단한 엔드포인트를 정의합니다. 서버는 <code>NODE_ENV</code> 환경 변수가 <code>test</code>가 아닐 때만 시작됩니다.</p></li><li><p><strong>단위 테스트 작성</strong>:</p><pre><code class="highlight javascript"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">&quot;supertest&quot;</span>);<span class="keyword">const</span> app = <span class="built_in">require</span>(<span class="string">&quot;../server&quot;</span>);<span class="title function_">describe</span>(<span class="string">&quot;GET /&quot;</span>, <span class="function">() =&gt;</span> &#123;  <span class="title function_">it</span>(<span class="string">&#x27;should return 200 and &quot;Hello, World!&quot; message&#x27;</span>, <span class="title function_">async</span> () =&gt; &#123;    <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">request</span>(app).<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>);    <span class="title function_">expect</span>(res.<span class="property">statusCode</span>).<span class="title function_">toEqual</span>(<span class="number">200</span>);    <span class="title function_">expect</span>(res.<span class="property">body</span>).<span class="title function_">toHaveProperty</span>(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;Hello, World!&quot;</span>);  &#125;);&#125;);<span class="title function_">describe</span>(<span class="string">&quot;POST /users&quot;</span>, <span class="function">() =&gt;</span> &#123;  <span class="title function_">it</span>(<span class="string">&quot;should return 201 and user data when valid data is sent&quot;</span>, <span class="title function_">async</span> () =&gt; &#123;    <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">request</span>(app)      .<span class="title function_">post</span>(<span class="string">&quot;/users&quot;</span>)      .<span class="title function_">send</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;John Doe&quot;</span>, <span class="attr">email</span>: <span class="string">&quot;john@example.com&quot;</span> &#125;);    <span class="title function_">expect</span>(res.<span class="property">statusCode</span>).<span class="title function_">toEqual</span>(<span class="number">201</span>);    <span class="title function_">expect</span>(res.<span class="property">body</span>).<span class="title function_">toHaveProperty</span>(<span class="string">&quot;id&quot;</span>);    <span class="title function_">expect</span>(res.<span class="property">body</span>).<span class="title function_">toHaveProperty</span>(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;John Doe&quot;</span>);    <span class="title function_">expect</span>(res.<span class="property">body</span>).<span class="title function_">toHaveProperty</span>(<span class="string">&quot;email&quot;</span>, <span class="string">&quot;john@example.com&quot;</span>);  &#125;);  <span class="title function_">it</span>(<span class="string">&quot;should return 400 when name or email is missing&quot;</span>, <span class="title function_">async</span> () =&gt; &#123;    <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">request</span>(app).<span class="title function_">post</span>(<span class="string">&quot;/users&quot;</span>).<span class="title function_">send</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;John Doe&quot;</span> &#125;);    <span class="title function_">expect</span>(res.<span class="property">statusCode</span>).<span class="title function_">toEqual</span>(<span class="number">400</span>);    <span class="title function_">expect</span>(res.<span class="property">body</span>).<span class="title function_">toHaveProperty</span>(<span class="string">&quot;error&quot;</span>, <span class="string">&quot;Name and email are required&quot;</span>);  &#125;);&#125;);</code></pre><p>Jest와 Supertest를 사용하여 테스트를 작성합니다. 각 테스트는 독립적으로 실행되며, 예상 결과를 검증합니다.</p></li></ol><h2 id="테스트-실행"><a href="#테스트-실행" class="headerlink" title="테스트 실행"></a>테스트 실행</h2><p>단위 테스트를 실행하여 Express 애플리케이션의 동작을 검증합니다. <code>package.json</code> 파일에 테스트 스크립트를 추가합니다.</p><pre><code class="highlight json"><span class="comment">// package.json</span><span class="punctuation">&#123;</span>  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;jest&quot;</span>  <span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></code></pre><p>다음 명령어를 사용하여 테스트를 실행합니다:</p><pre><code class="highlight bash">npm <span class="built_in">test</span></code></pre><p>테스트 결과가 출력되며, 모든 테스트가 성공했는지 확인할 수 있습니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 단위 테스트의 개념과 필요성을 이해하고, Express와 Jest를 사용하여 단위 테스트를 작성하는 방법을 알아보았습니다. 이를 바탕으로 소프트웨어의 품질을 높이고 유지보수성을 향상시킬 수 있는 웹 애플리케이션을 개발해보세요!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> web_필수 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 모듈 시스템 이해하기 - CommonJS, AMD, 그리고 ES6 모듈</title>
      <link href="/javascript/special/5/"/>
      <url>/javascript/special/5/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-모듈-시스템-이해하기-CommonJS-AMD-그리고-ES6-모듈"><a href="#JavaScript-모듈-시스템-이해하기-CommonJS-AMD-그리고-ES6-모듈" class="headerlink" title="JavaScript 모듈 시스템 이해하기 - CommonJS, AMD, 그리고 ES6 모듈"></a>JavaScript 모듈 시스템 이해하기 - CommonJS, AMD, 그리고 ES6 모듈</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!</p><p>JavaScript는 원래 작은 스크립트 언어로 설계되었지만, 시간이 지나면서 대규모 애플리케이션 개발을 위해 모듈화가 필요하게 되었습니다. 이에 따라 다양한 모듈 시스템이 등장했습니다.<br>이번 글에서는 JavaScript 모듈 시스템의 역사와 발전, 각 모듈 시스템의 차이점, 그리고 ES6 모듈을 사용하는 방법을 설명합니다.</p><h2 id="JavaScript-모듈-시스템의-역사와-발전"><a href="#JavaScript-모듈-시스템의-역사와-발전" class="headerlink" title="JavaScript 모듈 시스템의 역사와 발전"></a>JavaScript 모듈 시스템의 역사와 발전</h2><h3 id="초기의-모듈화-문제"><a href="#초기의-모듈화-문제" class="headerlink" title="초기의 모듈화 문제"></a>초기의 모듈화 문제</h3><p>초기 JavaScript에서는 모듈 시스템이 없었기 때문에 모든 코드가 전역 네임스페이스를 공유했습니다. 이로 인해 네임스페이스 충돌과 코드 관리의 어려움이 발생했습니다.</p><h3 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h3><p>CommonJS는 서버 측 JavaScript를 위해 만들어진 모듈 시스템으로, Node.js에서 주로 사용됩니다. CommonJS 모듈 시스템은 동기적으로 모듈을 로드합니다.</p><pre><code class="highlight javascript"><span class="comment">// CommonJS 예제 - moduleA.js</span><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello from moduleA&quot;</span>);&#125;;<span class="comment">// CommonJS 예제 - main.js</span><span class="keyword">const</span> moduleA = <span class="built_in">require</span>(<span class="string">&quot;./moduleA&quot;</span>);<span class="title function_">moduleA</span>();</code></pre><h3 id="AMD-Asynchronous-Module-Definition"><a href="#AMD-Asynchronous-Module-Definition" class="headerlink" title="AMD (Asynchronous Module Definition)"></a>AMD (Asynchronous Module Definition)</h3><p>AMD는 비동기적으로 모듈을 로드할 수 있는 모듈 시스템으로, 주로 브라우저 환경에서 사용됩니다. RequireJS가 대표적인 AMD 구현체입니다.</p><pre><code class="highlight javascript"><span class="comment">// AMD 예제 - moduleA.js</span><span class="title function_">define</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello from moduleA&quot;</span>);  &#125;;&#125;);<span class="comment">// AMD 예제 - main.js</span><span class="built_in">require</span>([<span class="string">&quot;moduleA&quot;</span>], <span class="keyword">function</span> (<span class="params">moduleA</span>) &#123;  <span class="title function_">moduleA</span>();&#125;);</code></pre><h3 id="ES6-모듈"><a href="#ES6-모듈" class="headerlink" title="ES6 모듈"></a>ES6 모듈</h3><p>ES6(ECMAScript 2015)에서는 표준 모듈 시스템이 도입되었습니다. ES6 모듈은 정적 구조를 가지며, 컴파일 타임에 모듈 의존성을 분석할 수 있습니다.</p><pre><code class="highlight javascript"><span class="comment">// ES6 모듈 예제 - moduleA.js</span><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params"></span>) &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello from moduleA&quot;</span>);&#125;<span class="comment">// ES6 모듈 예제 - main.js</span><span class="keyword">import</span> &#123; greet &#125; <span class="keyword">from</span> <span class="string">&quot;./moduleA.js&quot;</span>;<span class="title function_">greet</span>();</code></pre><h2 id="각-모듈-시스템의-차이점"><a href="#각-모듈-시스템의-차이점" class="headerlink" title="각 모듈 시스템의 차이점"></a>각 모듈 시스템의 차이점</h2><h3 id="CommonJS-1"><a href="#CommonJS-1" class="headerlink" title="CommonJS"></a>CommonJS</h3><ul><li><strong>로드 방식:</strong> 동기적</li><li><strong>주 사용 환경:</strong> Node.js</li><li><strong>문법:</strong> <code>require</code>와 <code>module.exports</code> 사용</li><li><strong>특징:</strong> 동기적 로드로 인해 서버 측에서는 적합하지만, 브라우저 환경에서는 부적합</li></ul><h3 id="AMD"><a href="#AMD" class="headerlink" title="AMD"></a>AMD</h3><ul><li><strong>로드 방식:</strong> 비동기적</li><li><strong>주 사용 환경:</strong> 브라우저</li><li><strong>문법:</strong> <code>define</code>과 <code>require</code> 사용</li><li><strong>특징:</strong> 비동기적 로드로 인해 브라우저 환경에서 적합하지만, 문법이 다소 복잡</li></ul><h3 id="ES6-모듈-1"><a href="#ES6-모듈-1" class="headerlink" title="ES6 모듈"></a>ES6 모듈</h3><ul><li><strong>로드 방식:</strong> 정적</li><li><strong>주 사용 환경:</strong> 브라우저와 Node.js</li><li><strong>문법:</strong> <code>import</code>와 <code>export</code> 사용</li><li><strong>특징:</strong> 표준 문법으로, 정적 구조를 가지며 트리 쉐이킹(tree shaking)과 같은 최적화 가능</li></ul><h2 id="ES6-모듈-사용-방법"><a href="#ES6-모듈-사용-방법" class="headerlink" title="ES6 모듈 사용 방법"></a>ES6 모듈 사용 방법</h2><h3 id="기본-내보내기-Default-Export"><a href="#기본-내보내기-Default-Export" class="headerlink" title="기본 내보내기 (Default Export)"></a>기본 내보내기 (Default Export)</h3><p>하나의 모듈에서 하나의 기본 내보내기를 할 수 있습니다.</p><pre><code class="highlight javascript"><span class="comment">// moduleA.js</span><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello from default export&quot;</span>);&#125;<span class="comment">// main.js</span><span class="keyword">import</span> greet <span class="keyword">from</span> <span class="string">&quot;./moduleA.js&quot;</span>;<span class="title function_">greet</span>();</code></pre><h3 id="이름-내보내기-Named-Export"><a href="#이름-내보내기-Named-Export" class="headerlink" title="이름 내보내기 (Named Export)"></a>이름 내보내기 (Named Export)</h3><p>하나의 모듈에서 여러 개의 이름 내보내기를 할 수 있습니다.</p><pre><code class="highlight javascript"><span class="comment">// moduleA.js</span><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params"></span>) &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello from named export&quot;</span>);&#125;<span class="keyword">export</span> <span class="keyword">const</span> name = <span class="string">&quot;moduleA&quot;</span>;<span class="comment">// main.js</span><span class="keyword">import</span> &#123; greet, name &#125; <span class="keyword">from</span> <span class="string">&quot;./moduleA.js&quot;</span>;<span class="title function_">greet</span>();<span class="variable language_">console</span>.<span class="title function_">log</span>(name);</code></pre><h3 id="모든-내보내기-가져오기-Import-All"><a href="#모든-내보내기-가져오기-Import-All" class="headerlink" title="모든 내보내기 가져오기 (Import All)"></a>모든 내보내기 가져오기 (Import All)</h3><p>모든 이름 내보내기를 한 번에 가져올 수 있습니다.</p><pre><code class="highlight javascript"><span class="comment">// moduleA.js</span><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params"></span>) &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello from named export&quot;</span>);&#125;<span class="keyword">export</span> <span class="keyword">const</span> name = <span class="string">&quot;moduleA&quot;</span>;<span class="comment">// main.js</span><span class="keyword">import</span> * <span class="keyword">as</span> moduleA <span class="keyword">from</span> <span class="string">&quot;./moduleA.js&quot;</span>;moduleA.<span class="title function_">greet</span>();<span class="variable language_">console</span>.<span class="title function_">log</span>(moduleA.<span class="property">name</span>);</code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>JavaScript 모듈 시스템은 코드 모듈화를 통해 네임스페이스 충돌을 방지하고, 코드 재사용성을 높이며, 유지보수성을 향상시킵니다. CommonJS와 AMD는 각각 서버 측과 브라우저 측에서 널리 사용되었으며, ES6 모듈은 표준화된 모듈 시스템으로 브라우저와 Node.js 모두에서 사용됩니다. ES6 모듈을 사용하여 더 모던하고 효율적인 JavaScript 코드를 작성해 보세요!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> JS_필살기 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 프로미스 체이닝과 에러 핸들링</title>
      <link href="/javascript/special/4/"/>
      <url>/javascript/special/4/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-프로미스-체이닝과-에러-핸들링"><a href="#JavaScript-프로미스-체이닝과-에러-핸들링" class="headerlink" title="JavaScript 프로미스 체이닝과 에러 핸들링"></a>JavaScript 프로미스 체이닝과 에러 핸들링</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!</p><p>JavaScript에서 비동기 작업을 처리할 때, 프로미스를 사용하면 코드의 가독성과 유지보수성을 높일 수 있습니다.<br>프로미스 체이닝은 여러 비동기 작업을 순차적으로 처리할 수 있게 해주며, 에러 핸들링을 통해 비동기 작업의 오류를 효율적으로 처리할 수 있습니다.<br>이번 글에서는 프로미스 체이닝을 사용하는 방법, 에러 핸들링 기법, 그리고 중첩된 비동기 작업을 처리하는 방법을 설명합니다.</p><h2 id="프로미스-체이닝"><a href="#프로미스-체이닝" class="headerlink" title="프로미스 체이닝"></a>프로미스 체이닝</h2><p>프로미스 체이닝은 여러 프로미스를 순차적으로 연결하여 비동기 작업을 순차적으로 처리할 수 있게 해줍니다. 각 프로미스는 이전 프로미스의 결과를 받아서 처리할 수 있습니다.</p><h3 id="기본-예제"><a href="#기본-예제" class="headerlink" title="기본 예제"></a>기본 예제</h3><p>다음은 간단한 프로미스 체이닝의 예제입니다:</p><pre><code class="highlight javascript"><span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params"></span>) &#123;  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;      <span class="title function_">resolve</span>(<span class="string">&quot;Data received&quot;</span>);    &#125;, <span class="number">1000</span>);  &#125;);&#125;<span class="title function_">fetchData</span>()  .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(data); <span class="comment">// 출력: Data received</span>    <span class="keyword">return</span> <span class="string">&quot;Processing data&quot;</span>;  &#125;)  .<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 출력: Processing data</span>    <span class="keyword">return</span> <span class="string">&quot;Data processed&quot;</span>;  &#125;)  .<span class="title function_">then</span>(<span class="function">(<span class="params">finalResult</span>) =&gt;</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(finalResult); <span class="comment">// 출력: Data processed</span>  &#125;);</code></pre><p>위 예제에서 <code>fetchData</code> 함수는 1초 후에 데이터를 반환하는 프로미스를 생성합니다. 첫 번째 <code>then</code> 블록은 데이터를 출력하고, 새로운 문자열을 반환합니다. 이 문자열은 두 번째 <code>then</code> 블록에서 사용됩니다.</p><h2 id="에러-핸들링-기법"><a href="#에러-핸들링-기법" class="headerlink" title="에러 핸들링 기법"></a>에러 핸들링 기법</h2><p>비동기 작업을 처리할 때 발생할 수 있는 오류를 효율적으로 처리하기 위해 에러 핸들링이 필요합니다. 프로미스 체이닝에서 에러를 처리하는 방법은 다음과 같습니다.</p><h3 id="catch-메서드-사용"><a href="#catch-메서드-사용" class="headerlink" title="catch 메서드 사용"></a><code>catch</code> 메서드 사용</h3><p><code>catch</code> 메서드는 체이닝된 프로미스 중에서 발생한 오류를 처리합니다. 모든 <code>then</code> 블록을 지나 최종적으로 호출됩니다.</p><pre><code class="highlight javascript"><span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params"></span>) &#123;  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;      <span class="title function_">reject</span>(<span class="string">&quot;Error occurred&quot;</span>);    &#125;, <span class="number">1000</span>);  &#125;);&#125;<span class="title function_">fetchData</span>()  .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);    <span class="keyword">return</span> <span class="string">&quot;Processing data&quot;</span>;  &#125;)  .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">error</span>(error); <span class="comment">// 출력: Error occurred</span>  &#125;);</code></pre><p>위 예제에서 <code>fetchData</code> 함수는 1초 후에 오류를 반환합니다. <code>catch</code> 블록은 이 오류를 받아서 처리합니다.</p><h3 id="then-메서드의-두-번째-인수-사용"><a href="#then-메서드의-두-번째-인수-사용" class="headerlink" title="then 메서드의 두 번째 인수 사용"></a><code>then</code> 메서드의 두 번째 인수 사용</h3><p><code>then</code> 메서드는 두 번째 인수로 에러 핸들러를 받을 수 있습니다. 이는 <code>catch</code> 메서드와 유사하게 동작합니다.</p><pre><code class="highlight javascript"><span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params"></span>) &#123;  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;      <span class="title function_">reject</span>(<span class="string">&quot;Error occurred&quot;</span>);    &#125;, <span class="number">1000</span>);  &#125;);&#125;<span class="title function_">fetchData</span>().<span class="title function_">then</span>(  <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);  &#125;,  <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">error</span>(error); <span class="comment">// 출력: Error occurred</span>  &#125;);</code></pre><h3 id="finally-메서드-사용"><a href="#finally-메서드-사용" class="headerlink" title="finally 메서드 사용"></a><code>finally</code> 메서드 사용</h3><p><code>finally</code> 메서드는 프로미스가 이행되든 거부되든 상관없이 항상 실행됩니다. 자원 정리 등의 작업을 수행할 때 유용합니다.</p><pre><code class="highlight javascript"><span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params"></span>) &#123;  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;      <span class="title function_">reject</span>(<span class="string">&quot;Error occurred&quot;</span>);    &#125;, <span class="number">1000</span>);  &#125;);&#125;<span class="title function_">fetchData</span>()  .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);  &#125;)  .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">error</span>(error);  &#125;)  .<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Cleanup&quot;</span>); <span class="comment">// 항상 출력</span>  &#125;);</code></pre><h2 id="중첩된-비동기-작업-처리"><a href="#중첩된-비동기-작업-처리" class="headerlink" title="중첩된 비동기 작업 처리"></a>중첩된 비동기 작업 처리</h2><p>중첩된 비동기 작업을 처리할 때는 프로미스 체이닝을 사용하여 코드를 깔끔하게 유지할 수 있습니다. 예를 들어, 여러 API 호출을 순차적으로 처리하는 경우를 살펴보겠습니다.</p><h3 id="예제"><a href="#예제" class="headerlink" title="예제"></a>예제</h3><pre><code class="highlight javascript"><span class="keyword">function</span> <span class="title function_">fetchData1</span>(<span class="params"></span>) &#123;  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;      <span class="title function_">resolve</span>(<span class="string">&quot;Data from API 1&quot;</span>);    &#125;, <span class="number">1000</span>);  &#125;);&#125;<span class="keyword">function</span> <span class="title function_">fetchData2</span>(<span class="params"></span>) &#123;  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;      <span class="title function_">resolve</span>(<span class="string">&quot;Data from API 2&quot;</span>);    &#125;, <span class="number">1000</span>);  &#125;);&#125;<span class="keyword">function</span> <span class="title function_">fetchData3</span>(<span class="params"></span>) &#123;  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;      <span class="title function_">resolve</span>(<span class="string">&quot;Data from API 3&quot;</span>);    &#125;, <span class="number">1000</span>);  &#125;);&#125;<span class="title function_">fetchData1</span>()  .<span class="title function_">then</span>(<span class="function">(<span class="params">data1</span>) =&gt;</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(data1); <span class="comment">// 출력: Data from API 1</span>    <span class="keyword">return</span> <span class="title function_">fetchData2</span>();  &#125;)  .<span class="title function_">then</span>(<span class="function">(<span class="params">data2</span>) =&gt;</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(data2); <span class="comment">// 출력: Data from API 2</span>    <span class="keyword">return</span> <span class="title function_">fetchData3</span>();  &#125;)  .<span class="title function_">then</span>(<span class="function">(<span class="params">data3</span>) =&gt;</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(data3); <span class="comment">// 출력: Data from API 3</span>  &#125;)  .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">error</span>(error);  &#125;);</code></pre><p>위 예제에서는 세 개의 비동기 API 호출을 순차적으로 처리합니다. 각 단계에서 이전 단계의 결과를 사용하고, 다음 비동기 작업을 시작합니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>JavaScript에서 프로미스 체이닝은 여러 비동기 작업을 순차적으로 처리하고, 에러 핸들링을 통해 발생할 수 있는 오류를 효율적으로 처리하는 강력한 방법입니다. <code>catch</code>와 <code>finally</code> 메서드를 사용하여 에러와 자원 정리를 처리할 수 있으며, 중첩된 비동기 작업도 깔끔하게 관리할 수 있습니다. 프로미스 체이닝과 에러 핸들링을 잘 활용하여 비동기 코드를 더 효율적이고 읽기 쉽게 작성해 보세요!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> JS_필살기 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 클로저(Closures) 완벽 가이드</title>
      <link href="/javascript/special/3/"/>
      <url>/javascript/special/3/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-클로저-Closures-완벽-가이드"><a href="#JavaScript-클로저-Closures-완벽-가이드" class="headerlink" title="JavaScript 클로저(Closures) 완벽 가이드"></a>JavaScript 클로저(Closures) 완벽 가이드</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!</p><p>JavaScript 클로저(Closures)는 강력하면서도 유용한 기능입니다.<br>클로저는 자바스크립트의 중요한 개념 중 하나로, 함수와 해당 함수가 선언된 어휘적 환경(Lexical Environment)의 조합을 의미합니다.<br>이 글에서는 클로저의 개념, 활용 예제, 그리고 클로저를 이해하는 것이 왜 중요한지 알아보겠습니다.</p><h2 id="클로저의-개념"><a href="#클로저의-개념" class="headerlink" title="클로저의 개념"></a>클로저의 개념</h2><p>클로저는 함수와 그 함수가 선언된 어휘적 환경의 조합입니다. 쉽게 말해, 클로저는 함수가 선언될 당시의 스코프를 기억하는 함수입니다. 클로저는 다음과 같은 특징을 가집니다:</p><ul><li>함수가 자신이 선언된 환경(스코프)을 기억합니다.</li><li>외부 함수의 변수에 접근할 수 있습니다.</li><li>외부 함수가 종료된 후에도 변수를 참조할 수 있습니다.</li></ul><h3 id="예제"><a href="#예제" class="headerlink" title="예제"></a>예제</h3><p>다음은 클로저의 간단한 예제입니다:</p><pre><code class="highlight javascript"><span class="keyword">function</span> <span class="title function_">outerFunction</span>(<span class="params"></span>) &#123;  <span class="keyword">let</span> outerVariable = <span class="string">&quot;I am from outer function&quot;</span>;  <span class="keyword">function</span> <span class="title function_">innerFunction</span>(<span class="params"></span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(outerVariable);  &#125;  <span class="keyword">return</span> innerFunction;&#125;<span class="keyword">const</span> myClosure = <span class="title function_">outerFunction</span>();<span class="title function_">myClosure</span>(); <span class="comment">// 출력: I am from outer function</span></code></pre><p>위 예제에서 <code>innerFunction</code>은 <code>outerFunction</code>의 변수 <code>outerVariable</code>에 접근할 수 있습니다. <code>outerFunction</code>이 호출되고 종료된 후에도 <code>innerFunction</code>은 <code>outerVariable</code>을 기억하고 있습니다. 이것이 클로저의 기본 개념입니다.</p><h2 id="클로저의-활용-예제"><a href="#클로저의-활용-예제" class="headerlink" title="클로저의 활용 예제"></a>클로저의 활용 예제</h2><p>클로저는 다양한 상황에서 유용하게 사용될 수 있습니다. 몇 가지 일반적인 활용 예제를 살펴보겠습니다.</p><h3 id="1-데이터-은닉-Data-Encapsulation"><a href="#1-데이터-은닉-Data-Encapsulation" class="headerlink" title="1. 데이터 은닉 (Data Encapsulation)"></a>1. 데이터 은닉 (Data Encapsulation)</h3><p>클로저를 사용하여 변수의 범위를 제한하고 데이터 은닉을 구현할 수 있습니다.</p><pre><code class="highlight javascript"><span class="keyword">function</span> <span class="title function_">createCounter</span>(<span class="params"></span>) &#123;  <span class="keyword">let</span> count = <span class="number">0</span>;  <span class="keyword">return</span> &#123;    <span class="attr">increment</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;      count++;      <span class="keyword">return</span> count;    &#125;,    <span class="attr">decrement</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;      count--;      <span class="keyword">return</span> count;    &#125;,    <span class="attr">getCount</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;      <span class="keyword">return</span> count;    &#125;,  &#125;;&#125;<span class="keyword">const</span> counter = <span class="title function_">createCounter</span>();<span class="variable language_">console</span>.<span class="title function_">log</span>(counter.<span class="title function_">increment</span>()); <span class="comment">// 출력: 1</span><span class="variable language_">console</span>.<span class="title function_">log</span>(counter.<span class="title function_">increment</span>()); <span class="comment">// 출력: 2</span><span class="variable language_">console</span>.<span class="title function_">log</span>(counter.<span class="title function_">getCount</span>()); <span class="comment">// 출력: 2</span><span class="variable language_">console</span>.<span class="title function_">log</span>(counter.<span class="title function_">decrement</span>()); <span class="comment">// 출력: 1</span></code></pre><h3 id="2-함수-팩토리-Function-Factory"><a href="#2-함수-팩토리-Function-Factory" class="headerlink" title="2. 함수 팩토리 (Function Factory)"></a>2. 함수 팩토리 (Function Factory)</h3><p>클로저를 사용하여 특정 동작을 하는 함수를 동적으로 생성할 수 있습니다.</p><pre><code class="highlight javascript"><span class="keyword">function</span> <span class="title function_">createGreeting</span>(<span class="params">message</span>) &#123;  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">name</span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(message + <span class="string">&quot;, &quot;</span> + name);  &#125;;&#125;<span class="keyword">const</span> sayHello = <span class="title function_">createGreeting</span>(<span class="string">&quot;Hello&quot;</span>);<span class="keyword">const</span> sayHi = <span class="title function_">createGreeting</span>(<span class="string">&quot;Hi&quot;</span>);<span class="title function_">sayHello</span>(<span class="string">&quot;Alice&quot;</span>); <span class="comment">// 출력: Hello, Alice</span><span class="title function_">sayHi</span>(<span class="string">&quot;Bob&quot;</span>); <span class="comment">// 출력: Hi, Bob</span></code></pre><h3 id="3-부분-적용-함수-Partial-Application"><a href="#3-부분-적용-함수-Partial-Application" class="headerlink" title="3. 부분 적용 함수 (Partial Application)"></a>3. 부분 적용 함수 (Partial Application)</h3><p>클로저를 사용하여 함수의 일부 인수를 미리 설정하고, 나머지 인수를 나중에 제공할 수 있습니다.</p><pre><code class="highlight javascript"><span class="keyword">function</span> <span class="title function_">multiply</span>(<span class="params">a</span>) &#123;  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">b</span>) &#123;    <span class="keyword">return</span> a * b;  &#125;;&#125;<span class="keyword">const</span> double = <span class="title function_">multiply</span>(<span class="number">2</span>);<span class="keyword">const</span> triple = <span class="title function_">multiply</span>(<span class="number">3</span>);<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">double</span>(<span class="number">5</span>)); <span class="comment">// 출력: 10</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">triple</span>(<span class="number">5</span>)); <span class="comment">// 출력: 15</span></code></pre><h2 id="클로저를-이해하는-것이-중요한-이유"><a href="#클로저를-이해하는-것이-중요한-이유" class="headerlink" title="클로저를 이해하는 것이 중요한 이유"></a>클로저를 이해하는 것이 중요한 이유</h2><p>클로저를 이해하면 다음과 같은 장점이 있습니다:</p><ol><li><strong>코드의 유연성 증가:</strong> 클로저를 사용하여 함수를 더 유연하게 작성할 수 있습니다.</li><li><strong>데이터 은닉:</strong> 클로저를 사용하여 변수의 범위를 제한하고, 외부에서 접근할 수 없도록 보호할 수 있습니다.</li><li><strong>상태 유지:</strong> 클로저를 사용하여 함수 호출 간에 상태를 유지할 수 있습니다.</li></ol><p>클로저는 JavaScript의 강력한 기능 중 하나로, 이를 잘 활용하면 더 깨끗하고 유지보수하기 쉬운 코드를 작성할 수 있습니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>JavaScript 클로저는 함수와 그 함수가 선언된 어휘적 환경의 조합으로, 함수가 선언될 당시의 스코프를 기억하는 기능입니다. 클로저는 데이터 은닉, 함수 팩토리, 부분 적용 함수 등 다양한 상황에서 유용하게 사용될 수 있습니다. 클로저를 이해하고 활용하면 JavaScript로 더 강력하고 유연한 코드를 작성할 수 있습니다. 클로저의 개념과 활용 방법을 잘 익혀두세요.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> JS_필살기 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript로 JavaScript 코드 안전하게 작성하기</title>
      <link href="/javascript/special/2/"/>
      <url>/javascript/special/2/</url>
      
        <content type="html"><![CDATA[<h1 id="TypeScript로-JavaScript-코드-안전하게-작성하기"><a href="#TypeScript로-JavaScript-코드-안전하게-작성하기" class="headerlink" title="TypeScript로 JavaScript 코드 안전하게 작성하기"></a>TypeScript로 JavaScript 코드 안전하게 작성하기</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!</p><p>JavaScript는 웹 개발에서 가장 널리 사용되는 언어 중 하나입니다. 그러나 동적 타입 언어라는 특성 때문에 타입 관련 오류가 발생할 수 있습니다.<br>이러한 문제를 해결하기 위해 Microsoft에서 개발한 TypeScript는 정적 타입을 지원하여 코드의 안정성과 유지보수성을 높여줍니다.<br>이번 글에서는 TypeScript의 기본 개념과 이를 활용해 JavaScript 코드를 더 안전하고 유지보수 가능하게 작성하는 방법을 설명합니다.</p><h2 id="TypeScript란"><a href="#TypeScript란" class="headerlink" title="TypeScript란?"></a>TypeScript란?</h2><p>TypeScript는 JavaScript의 상위 집합(Superset)으로, 정적 타입 검사와 최신 ECMAScript 기능을 지원합니다. TypeScript 코드는 컴파일되어 표준 JavaScript로 변환되며, 브라우저나 Node.js 환경에서 실행할 수 있습니다.</p><h2 id="TypeScript의-주요-기능"><a href="#TypeScript의-주요-기능" class="headerlink" title="TypeScript의 주요 기능"></a>TypeScript의 주요 기능</h2><h3 id="정적-타입-검사"><a href="#정적-타입-검사" class="headerlink" title="정적 타입 검사"></a>정적 타입 검사</h3><p>TypeScript는 컴파일 시점에 타입을 검사하여 오류를 사전에 방지할 수 있습니다. 이를 통해 런타임 오류를 줄이고 코드의 신뢰성을 높일 수 있습니다.</p><pre><code class="highlight typescript"><span class="keyword">let</span> <span class="attr">message</span>: <span class="built_in">string</span> = <span class="string">&quot;Hello, TypeScript!&quot;</span>;message = <span class="number">42</span>; <span class="comment">// 오류: &#x27;number&#x27; 타입을 &#x27;string&#x27; 타입에 할당할 수 없음</span></code></pre><h3 id="인터페이스"><a href="#인터페이스" class="headerlink" title="인터페이스"></a>인터페이스</h3><p>인터페이스는 객체의 구조를 정의하며, 코드의 일관성을 유지하는 데 도움을 줍니다. 예를 들어, 사용자 객체의 구조를 정의하고 이를 여러 곳에서 재사용할 수 있습니다.</p><pre><code class="highlight tsx"><span class="keyword">interface</span> <span class="title class_">User</span> &#123;  <span class="attr">name</span>: <span class="built_in">string</span>;  <span class="attr">age</span>: <span class="built_in">number</span>;  email?: <span class="built_in">string</span>; <span class="comment">// 선택적 프로퍼티</span>&#125;<span class="keyword">const</span> <span class="attr">user</span>: <span class="title class_">User</span> = &#123;  <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,  <span class="attr">age</span>: <span class="number">30</span>,&#125;;</code></pre><h3 id="클래스"><a href="#클래스" class="headerlink" title="클래스"></a>클래스</h3><p>TypeScript는 클래스 기반 객체지향 프로그래밍을 지원합니다. 접근 제한자(public, private, protected)를 사용하여 클래스 멤버의 접근 범위를 제어할 수 있습니다.</p><pre><code class="highlight tsx"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;  <span class="keyword">private</span> <span class="attr">name</span>: <span class="built_in">string</span>;  <span class="title function_">constructor</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span></span>) &#123;    <span class="variable language_">this</span>.<span class="property">name</span> = name;  &#125;  <span class="title function_">greet</span>(<span class="params"></span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello, my name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>);  &#125;&#125;<span class="keyword">const</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Alice&quot;</span>);person.<span class="title function_">greet</span>(); <span class="comment">// 출력: Hello, my name is Alice</span></code></pre><h3 id="제네릭"><a href="#제네릭" class="headerlink" title="제네릭"></a>제네릭</h3><p>제네릭을 사용하면 함수와 클래스를 다양한 타입으로 재사용할 수 있습니다. 예를 들어, 배열의 요소를 반환하는 함수를 제네릭으로 정의하면 다양한 타입의 배열을 처리할 수 있습니다.</p><pre><code class="highlight tsx"><span class="keyword">function</span> identity&lt;T&gt;(<span class="attr">arg</span>: T): T &#123;  <span class="keyword">return</span> arg;&#125;<span class="keyword">const</span> result = identity&lt;<span class="built_in">number</span>&gt;(<span class="number">42</span>); <span class="comment">// result는 number 타입</span><span class="keyword">const</span> result2 = identity&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;Hello&quot;</span>); <span class="comment">// result2는 string 타입</span></code></pre><h2 id="TypeScript-설치-및-설정"><a href="#TypeScript-설치-및-설정" class="headerlink" title="TypeScript 설치 및 설정"></a>TypeScript 설치 및 설정</h2><p>TypeScript를 사용하려면 Node.js와 npm이 필요합니다. 다음 단계를 따라 설치합니다.</p><ol><li><strong>TypeScript 설치</strong></li></ol><pre><code class="highlight bash">npm install -g typescript</code></pre><ol start="2"><li><strong>TypeScript 설정 파일(tsconfig.json) 생성</strong></li></ol><pre><code class="highlight bash">tsc --init</code></pre><p>생성된 <code>tsconfig.json</code> 파일에서 컴파일러 옵션을 설정할 수 있습니다. 예를 들어, <code>strict</code> 옵션을 <code>true</code>로 설정하면 더 엄격한 타입 검사를 할 수 있습니다.</p><pre><code class="highlight json"><span class="punctuation">&#123;</span>  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ES6&quot;</span><span class="punctuation">,</span>    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;commonjs&quot;</span><span class="punctuation">,</span>    <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span>    <span class="attr">&quot;esModuleInterop&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span>    <span class="attr">&quot;skipLibCheck&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span>  <span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></code></pre><h2 id="TypeScript로-JavaScript-코드-변환"><a href="#TypeScript로-JavaScript-코드-변환" class="headerlink" title="TypeScript로 JavaScript 코드 변환"></a>TypeScript로 JavaScript 코드 변환</h2><p>JavaScript 파일을 TypeScript로 변환하려면 파일 확장자를 <code>.js</code>에서 <code>.ts</code>로 변경하고, 타입을 추가해 나가면 됩니다.</p><h3 id="예제-JavaScript에서-TypeScript로-변환"><a href="#예제-JavaScript에서-TypeScript로-변환" class="headerlink" title="예제: JavaScript에서 TypeScript로 변환"></a>예제: JavaScript에서 TypeScript로 변환</h3><p><strong>JavaScript 코드 (index.js)</strong></p><pre><code class="highlight javascript"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params">name</span>) &#123;  <span class="keyword">return</span> <span class="string">&quot;Hello, &quot;</span> + name;&#125;<span class="keyword">const</span> message = <span class="title function_">greet</span>(<span class="string">&quot;World&quot;</span>);<span class="variable language_">console</span>.<span class="title function_">log</span>(message);</code></pre><p><strong>TypeScript 코드 (index.ts)</strong></p><pre><code class="highlight tsx"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span></span>): <span class="built_in">string</span> &#123;  <span class="keyword">return</span> <span class="string">&quot;Hello, &quot;</span> + name;&#125;<span class="keyword">const</span> <span class="attr">message</span>: <span class="built_in">string</span> = <span class="title function_">greet</span>(<span class="string">&quot;World&quot;</span>);<span class="variable language_">console</span>.<span class="title function_">log</span>(message);</code></pre><p>위의 JavaScript 코드를 TypeScript로 변환하여 타입을 추가했습니다. <code>greet</code> 함수의 인수 <code>name</code>은 문자열 타입이고, 반환 타입도 문자열로 정의되었습니다. 또한 <code>message</code> 변수도 문자열 타입으로 선언되었습니다.</p><h3 id="예제-인터페이스-사용"><a href="#예제-인터페이스-사용" class="headerlink" title="예제: 인터페이스 사용"></a>예제: 인터페이스 사용</h3><p>인터페이스를 사용하여 객체의 구조를 정의하고 이를 활용하는 예제입니다.</p><p><strong>JavaScript 코드 (index.js)</strong></p><pre><code class="highlight javascript"><span class="keyword">function</span> <span class="title function_">printUser</span>(<span class="params">user</span>) &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Name: &quot;</span> + user.<span class="property">name</span> + <span class="string">&quot;, Age: &quot;</span> + user.<span class="property">age</span>);&#125;<span class="keyword">const</span> user = &#123;  <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,  <span class="attr">age</span>: <span class="number">30</span>,&#125;;<span class="title function_">printUser</span>(user);</code></pre><p><strong>TypeScript 코드 (index.ts)</strong></p><pre><code class="highlight tsx"><span class="keyword">interface</span> <span class="title class_">User</span> &#123;  <span class="attr">name</span>: <span class="built_in">string</span>;  <span class="attr">age</span>: <span class="built_in">number</span>;&#125;<span class="keyword">function</span> <span class="title function_">printUser</span>(<span class="params"><span class="attr">user</span>: <span class="title class_">User</span></span>): <span class="built_in">void</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Name: <span class="subst">$&#123;user.name&#125;</span>, Age: <span class="subst">$&#123;user.age&#125;</span>`</span>);&#125;<span class="keyword">const</span> <span class="attr">user</span>: <span class="title class_">User</span> = &#123;  <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,  <span class="attr">age</span>: <span class="number">30</span>,&#125;;<span class="title function_">printUser</span>(user);</code></pre><p>이 예제에서는 <code>User</code> 인터페이스를 정의하고, <code>printUser</code> 함수의 인수를 <code>User</code> 타입으로 지정했습니다. 이를 통해 객체 구조를 명확히 하고 타입 안전성을 확보했습니다.</p><h2 id="TypeScript의-장점"><a href="#TypeScript의-장점" class="headerlink" title="TypeScript의 장점"></a>TypeScript의 장점</h2><h3 id="코드-안정성-향상"><a href="#코드-안정성-향상" class="headerlink" title="코드 안정성 향상"></a>코드 안정성 향상</h3><p>정적 타입 검사 덕분에 런타임 오류를 사전에 방지할 수 있어 코드의 안정성이 높아집니다. 예를 들어, 타입이 일치하지 않는 값을 할당하려고 하면 컴파일 시점에 오류가 발생합니다.</p><h3 id="유지보수성-향상"><a href="#유지보수성-향상" class="headerlink" title="유지보수성 향상"></a>유지보수성 향상</h3><p>타입 정보를 통해 코드의 의도를 명확히 할 수 있으며, 코드 리팩토링 시 실수를 줄일 수 있습니다. 인터페이스를 사용하면 객체의 구조를 명확히 정의하고, 이를 여러 곳에서 재사용할 수 있습니다.</p><h3 id="협업-효율성-향상"><a href="#협업-효율성-향상" class="headerlink" title="협업 효율성 향상"></a>협업 효율성 향상</h3><p>명확한 타입 정의는 협업 시 코드 이해도를 높여주며, IDE의 자동 완성 기능을 통해 생산성을 향상시킵니다. 타입 정보를 기반으로 한 코드 자동 완성 기능은 함수 사용법을 쉽게 이해하고, 실수를 줄이는 데 도움을 줍니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>TypeScript는 JavaScript의 단점을 보완하여 더 안전하고 유지보수 가능한 코드를 작성할 수 있도록 도와줍니다. 정적 타입 검사, 인터페이스, 클래스, 제네릭 등 TypeScript의 주요 기능을 활용하면 코드의 안정성과 가독성을 크게 향상시킬 수 있습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> JS_필살기 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>모듈 패턴 (Module Pattern)</title>
      <link href="/design-pattern/2/"/>
      <url>/design-pattern/2/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-모듈-패턴-Module-Pattern"><a href="#JavaScript-모듈-패턴-Module-Pattern" class="headerlink" title="JavaScript 모듈 패턴 (Module Pattern)"></a>JavaScript 모듈 패턴 (Module Pattern)</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 자바스크립트 디자인 패턴 중 하나인 모듈 패턴(Module Pattern)에 대해 알아보겠습니다.<br>모듈 패턴은 코드를 모듈화하여 가독성을 높이고, 전역 네임스페이스 오염을 방지하는 데 유용한 패턴입니다.<br>특히, RPG 게임과 같은 대규모 애플리케이션에서 모듈 패턴을 사용하면 코드 구조를 효율적으로 관리할 수 있습니다.</p><h2 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h2><h3 id="모듈-패턴이란"><a href="#모듈-패턴이란" class="headerlink" title="모듈 패턴이란?"></a>모듈 패턴이란?</h3><p>모듈 패턴은 자바스크립트의 함수 스코프와 클로저를 이용하여 공개적으로 접근 가능한 부분(공개 멤버)과 비공개 멤버를 정의하는 디자인 패턴입니다. 모듈 패턴을 사용하면 다음과 같은 장점을 얻을 수 있습니다:</p><ul><li><strong>캡슐화</strong>: 내부 상태와 메서드를 외부에서 접근할 수 없도록 하여 코드의 안전성을 높입니다.</li><li><strong>재사용성</strong>: 모듈 단위로 코드를 작성하여 재사용성을 높일 수 있습니다.</li><li><strong>네임스페이스 오염 방지</strong>: 전역 네임스페이스 오염을 방지하여 다른 코드와 충돌을 줄일 수 있습니다.</li></ul><h2 id="예시-코드"><a href="#예시-코드" class="headerlink" title="예시 코드"></a>예시 코드</h2><p>이번 예제에서는 RPG 게임의 캐릭터 모듈을 만들어 보겠습니다. 각 캐릭터는 이름과 직업을 가지며, 이를 설정하고 조회할 수 있는 메서드를 제공합니다.</p><h3 id="1-모듈-패턴-구현"><a href="#1-모듈-패턴-구현" class="headerlink" title="1. 모듈 패턴 구현"></a>1. 모듈 패턴 구현</h3><pre><code class="highlight javascript"><span class="keyword">const</span> <span class="title class_">CharacterModule</span> = (<span class="keyword">function</span> (<span class="params"></span>) &#123;  <span class="keyword">let</span> name = <span class="string">&quot;Unknown&quot;</span>;  <span class="keyword">let</span> job = <span class="string">&quot;Novice&quot;</span>;  <span class="keyword">return</span> &#123;    <span class="title function_">setName</span>(<span class="params">newName</span>) &#123;      name = newName;    &#125;,    <span class="title function_">getName</span>(<span class="params"></span>) &#123;      <span class="keyword">return</span> name;    &#125;,    <span class="title function_">setJob</span>(<span class="params">newJob</span>) &#123;      job = newJob;    &#125;,    <span class="title function_">getJob</span>(<span class="params"></span>) &#123;      <span class="keyword">return</span> job;    &#125;,  &#125;;&#125;)();</code></pre><h3 id="2-모듈-사용"><a href="#2-모듈-사용" class="headerlink" title="2. 모듈 사용"></a>2. 모듈 사용</h3><pre><code class="highlight javascript"><span class="comment">// 캐릭터 이름과 직업 설정</span><span class="title class_">CharacterModule</span>.<span class="title function_">setName</span>(<span class="string">&quot;Archer&quot;</span>);<span class="title class_">CharacterModule</span>.<span class="title function_">setJob</span>(<span class="string">&quot;Ranger&quot;</span>);<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">CharacterModule</span>.<span class="title function_">getName</span>()); <span class="comment">// Archer</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">CharacterModule</span>.<span class="title function_">getJob</span>()); <span class="comment">// Ranger</span></code></pre><h3 id="3-RPG-게임에서의-활용-예제"><a href="#3-RPG-게임에서의-활용-예제" class="headerlink" title="3. RPG 게임에서의 활용 예제"></a>3. RPG 게임에서의 활용 예제</h3><p>RPG 게임에서 여러 캐릭터를 관리하기 위해 캐릭터 모듈을 확장해보겠습니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> <span class="title class_">RPGCharacterModule</span> = (<span class="keyword">function</span> (<span class="params"></span>) &#123;  <span class="keyword">let</span> characters = [];  <span class="keyword">return</span> &#123;    <span class="title function_">addCharacter</span>(<span class="params">name, job</span>) &#123;      characters.<span class="title function_">push</span>(&#123; name, job &#125;);    &#125;,    <span class="title function_">getCharacters</span>(<span class="params"></span>) &#123;      <span class="keyword">return</span> characters;    &#125;,    <span class="title function_">getCharacterByName</span>(<span class="params">name</span>) &#123;      <span class="keyword">return</span> characters.<span class="title function_">find</span>(<span class="function">(<span class="params">char</span>) =&gt;</span> char.<span class="property">name</span> === name);    &#125;,  &#125;;&#125;)();<span class="comment">// 캐릭터 추가</span><span class="title class_">RPGCharacterModule</span>.<span class="title function_">addCharacter</span>(<span class="string">&quot;Archer&quot;</span>, <span class="string">&quot;Ranger&quot;</span>);<span class="title class_">RPGCharacterModule</span>.<span class="title function_">addCharacter</span>(<span class="string">&quot;Mage&quot;</span>, <span class="string">&quot;Sorcerer&quot;</span>);<span class="comment">// 모든 캐릭터 조회</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">RPGCharacterModule</span>.<span class="title function_">getCharacters</span>());<span class="comment">// [&#123; name: &#x27;Archer&#x27;, job: &#x27;Ranger&#x27; &#125;, &#123; name: &#x27;Mage&#x27;, job: &#x27;Sorcerer&#x27; &#125;]</span><span class="comment">// 특정 캐릭터 조회</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">RPGCharacterModule</span>.<span class="title function_">getCharacterByName</span>(<span class="string">&quot;Mage&quot;</span>));<span class="comment">// &#123; name: &#x27;Mage&#x27;, job: &#x27;Sorcerer&#x27; &#125;</span></code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 모듈 패턴의 개념과 사용 예제에 대해 알아보았습니다. 모듈 패턴은 코드의 캡슐화와 재사용성을 높이고, 전역 네임스페이스 오염을 방지하는 데 유용한 패턴입니다. RPG 게임 예제를 통해 모듈 패턴을 실제로 어떻게 활용할 수 있는지 살펴보았습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> 디자인패턴 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>싱글톤 패턴 (Singleton Pattern)</title>
      <link href="/design-pattern/1/"/>
      <url>/design-pattern/1/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-싱글톤-패턴-Singleton-Pattern"><a href="#JavaScript-싱글톤-패턴-Singleton-Pattern" class="headerlink" title="JavaScript 싱글톤 패턴 (Singleton Pattern)"></a>JavaScript 싱글톤 패턴 (Singleton Pattern)</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 디자인 패턴 중에서 싱글톤 패턴에 대해 알아보겠습니다. 싱글톤 패턴은 클래스의 인스턴스를 하나만 생성하여, 모든 곳에서 동일한 인스턴스를 사용하도록 보장하는 패턴입니다. 주로 전역 상태를 관리하는 데 사용됩니다.</p><h2 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h2><h3 id="싱글톤-패턴이란"><a href="#싱글톤-패턴이란" class="headerlink" title="싱글톤 패턴이란?"></a>싱글톤 패턴이란?</h3><p>싱글톤 패턴(Singleton Pattern)은 클래스의 인스턴스가 오직 하나만 생성되고, 어디서든지 그 인스턴스에 접근할 수 있도록 하는 패턴입니다. 주로 다음과 같은 경우에 사용됩니다:</p><ul><li><strong>전역 상태 관리</strong>: 애플리케이션 전체에서 공유되는 설정이나 상태를 관리할 때.</li><li><strong>리소스 관리</strong>: 데이터베이스 연결이나 파일 시스템 접근과 같이 비용이 많이 드는 리소스를 관리할 때.</li><li><strong>로그 관리</strong>: 애플리케이션의 로그를 중앙에서 관리할 때.</li></ul><h3 id="싱글톤-패턴의-특징"><a href="#싱글톤-패턴의-특징" class="headerlink" title="싱글톤 패턴의 특징"></a>싱글톤 패턴의 특징</h3><ul><li><strong>인스턴스의 유일성 보장</strong>: 하나의 인스턴스만 생성되고, 모든 클라이언트는 동일한 인스턴스를 공유합니다.</li><li><strong>전역 접근</strong>: 애플리케이션 어디에서든 인스턴스에 접근할 수 있습니다.</li><li><strong>지연 초기화</strong>: 필요할 때까지 인스턴스를 생성하지 않는 방법을 사용할 수 있습니다.</li></ul><h2 id="예시-코드"><a href="#예시-코드" class="headerlink" title="예시 코드"></a>예시 코드</h2><p>이번 예제에서는 RPG 게임에서 설정 데이터를 관리하는 싱글톤 클래스를 구현해보겠습니다. 이 클래스는 게임의 설정 데이터를 전역에서 접근할 수 있도록 합니다.</p><h3 id="1-싱글톤-클래스-구현"><a href="#1-싱글톤-클래스-구현" class="headerlink" title="1. 싱글톤 클래스 구현"></a>1. 싱글톤 클래스 구현</h3><pre><code class="highlight javascript"><span class="keyword">class</span> <span class="title class_">GameSettings</span> &#123;  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;    <span class="keyword">if</span> (<span class="title class_">GameSettings</span>.<span class="property">instance</span>) &#123;      <span class="keyword">return</span> <span class="title class_">GameSettings</span>.<span class="property">instance</span>;    &#125;    <span class="variable language_">this</span>.<span class="property">settings</span> = &#123;      <span class="attr">difficulty</span>: <span class="string">&quot;normal&quot;</span>,      <span class="attr">volume</span>: <span class="number">50</span>,    &#125;;    <span class="title class_">GameSettings</span>.<span class="property">instance</span> = <span class="variable language_">this</span>;    <span class="keyword">return</span> <span class="variable language_">this</span>;  &#125;  <span class="title function_">getSetting</span>(<span class="params">key</span>) &#123;    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">settings</span>[key];  &#125;  <span class="title function_">setSetting</span>(<span class="params">key, value</span>) &#123;    <span class="variable language_">this</span>.<span class="property">settings</span>[key] = value;  &#125;&#125;<span class="comment">// 싱글톤 인스턴스 생성</span><span class="keyword">const</span> settings1 = <span class="keyword">new</span> <span class="title class_">GameSettings</span>();<span class="keyword">const</span> settings2 = <span class="keyword">new</span> <span class="title class_">GameSettings</span>();<span class="variable language_">console</span>.<span class="title function_">log</span>(settings1 === settings2); <span class="comment">// true</span></code></pre><h3 id="2-싱글톤-인스턴스-사용"><a href="#2-싱글톤-인스턴스-사용" class="headerlink" title="2. 싱글톤 인스턴스 사용"></a>2. 싱글톤 인스턴스 사용</h3><pre><code class="highlight javascript"><span class="comment">// 초기 설정</span><span class="keyword">const</span> gameSettings = <span class="keyword">new</span> <span class="title class_">GameSettings</span>();gameSettings.<span class="title function_">setSetting</span>(<span class="string">&quot;difficulty&quot;</span>, <span class="string">&quot;hard&quot;</span>);gameSettings.<span class="title function_">setSetting</span>(<span class="string">&quot;volume&quot;</span>, <span class="number">75</span>);<span class="comment">// 다른 곳에서 동일한 인스턴스를 사용</span><span class="keyword">const</span> newGameSettings = <span class="keyword">new</span> <span class="title class_">GameSettings</span>();<span class="variable language_">console</span>.<span class="title function_">log</span>(newGameSettings.<span class="title function_">getSetting</span>(<span class="string">&quot;difficulty&quot;</span>)); <span class="comment">// &#x27;hard&#x27;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(newGameSettings.<span class="title function_">getSetting</span>(<span class="string">&quot;volume&quot;</span>)); <span class="comment">// 75</span></code></pre><h3 id="3-RPG-게임에서의-활용-예제"><a href="#3-RPG-게임에서의-활용-예제" class="headerlink" title="3. RPG 게임에서의 활용 예제"></a>3. RPG 게임에서의 활용 예제</h3><p>이번에는 RPG 게임에서 싱글톤 패턴을 사용하여 게임 설정을 관리하는 예제를 만들어보겠습니다.</p><pre><code class="highlight javascript"><span class="keyword">class</span> <span class="title class_">RPGGameSettings</span> &#123;  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;    <span class="keyword">if</span> (<span class="title class_">RPGGameSettings</span>.<span class="property">instance</span>) &#123;      <span class="keyword">return</span> <span class="title class_">RPGGameSettings</span>.<span class="property">instance</span>;    &#125;    <span class="variable language_">this</span>.<span class="property">settings</span> = &#123;      <span class="attr">maxHealth</span>: <span class="number">100</span>,      <span class="attr">maxMana</span>: <span class="number">50</span>,      <span class="attr">difficulty</span>: <span class="string">&quot;normal&quot;</span>,    &#125;;    <span class="title class_">RPGGameSettings</span>.<span class="property">instance</span> = <span class="variable language_">this</span>;    <span class="keyword">return</span> <span class="variable language_">this</span>;  &#125;  <span class="title function_">getSetting</span>(<span class="params">key</span>) &#123;    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">settings</span>[key];  &#125;  <span class="title function_">setSetting</span>(<span class="params">key, value</span>) &#123;    <span class="variable language_">this</span>.<span class="property">settings</span>[key] = value;  &#125;&#125;<span class="comment">// 인스턴스 생성</span><span class="keyword">const</span> rpgSettings1 = <span class="keyword">new</span> <span class="title class_">RPGGameSettings</span>();rpgSettings1.<span class="title function_">setSetting</span>(<span class="string">&quot;maxHealth&quot;</span>, <span class="number">200</span>);rpgSettings1.<span class="title function_">setSetting</span>(<span class="string">&quot;difficulty&quot;</span>, <span class="string">&quot;hard&quot;</span>);<span class="comment">// 다른 곳에서 동일한 인스턴스를 사용</span><span class="keyword">const</span> rpgSettings2 = <span class="keyword">new</span> <span class="title class_">RPGGameSettings</span>();<span class="variable language_">console</span>.<span class="title function_">log</span>(rpgSettings2.<span class="title function_">getSetting</span>(<span class="string">&quot;maxHealth&quot;</span>)); <span class="comment">// 200</span><span class="variable language_">console</span>.<span class="title function_">log</span>(rpgSettings2.<span class="title function_">getSetting</span>(<span class="string">&quot;difficulty&quot;</span>)); <span class="comment">// &#x27;hard&#x27;</span></code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 싱글톤 패턴의 개념과 사용 예제에 대해 알아보았습니다. 싱글톤 패턴은 전역 상태 관리나 리소스 관리와 같은 상황에서 유용하게 사용될 수 있습니다. RPG 게임 예제를 통해 싱글톤 패턴을 실제로 어떻게 활용할 수 있는지 살펴보았습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> 디자인패턴 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>이메일 전송 원리와 Node.js Nodemailer로 실제 기능 구현하기</title>
      <link href="/web/essential/8/"/>
      <url>/web/essential/8/</url>
      
        <content type="html"><![CDATA[<h1 id="이메일-전송-원리와-Node-js-Nodemailer로-실제-기능-구현하기"><a href="#이메일-전송-원리와-Node-js-Nodemailer로-실제-기능-구현하기" class="headerlink" title="이메일 전송 원리와 Node.js Nodemailer로 실제 기능 구현하기"></a>이메일 전송 원리와 Node.js Nodemailer로 실제 기능 구현하기</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 이메일 전송의 원리와, 이를 Node.js에서 구현하는 방법을 알아보겠습니다.<br>Nodemailer라는 모듈을 사용할 것이고, 다양한 상황에서 이메일 전송 기능을 구현해보겠습니다.</p><h2 id="이메일-전송의-기본-개념"><a href="#이메일-전송의-기본-개념" class="headerlink" title="이메일 전송의 기본 개념"></a>이메일 전송의 기본 개념</h2><h3 id="이메일-전송이란"><a href="#이메일-전송이란" class="headerlink" title="이메일 전송이란?"></a>이메일 전송이란?</h3><p>이메일 전송은 이메일 클라이언트(예: Gmail, Outlook)를 통해 메시지와 첨부 파일을 주고받는 과정입니다.<br>이 과정에서 사용되는 대표적인 프로토콜은 <strong>SMTP</strong>(Simple Mail Transfer Protocol)로, 이메일을 발신 서버에서 수신 서버로 전달하는 데 사용됩니다.<br>이메일 전송 과정은 크게 세 단계로 이루어집니다:</p><ol><li><strong>SMTP 서버</strong>: 발신 서버가 이메일을 수신 서버로 전송합니다.</li><li><strong>MIME</strong>: 이메일 메시지를 텍스트, HTML, 첨부 파일 등 다양한 형식으로 구성하는 표준입니다.</li><li><strong>POP3&#x2F;IMAP</strong>: 수신된 이메일을 클라이언트가 받아오는 프로토콜입니다. POP3는 이메일을 로컬에 다운로드하고, IMAP은 서버에 저장된 상태로 이메일을 관리합니다.</li></ol><h2 id="Nodemailer-개요와-작동-원리"><a href="#Nodemailer-개요와-작동-원리" class="headerlink" title="Nodemailer 개요와 작동 원리"></a>Nodemailer 개요와 작동 원리</h2><h3 id="Nodemailer란"><a href="#Nodemailer란" class="headerlink" title="Nodemailer란?"></a>Nodemailer란?</h3><p><strong>Nodemailer</strong>는 Node.js 환경에서 이메일 전송 기능을 쉽게 구현할 수 있게 해주는 모듈입니다.<br>SMTP 서버와의 통신을 간편하게 설정할 수 있으며, 다양한 이메일 형식을 지원합니다.<br>또한 Gmail, Outlook과 같은 주요 이메일 서비스와의 연동이 간편하며, TLS&#x2F;SSL 보안을 통해 안전한 이메일 전송이 가능합니다.</p><h3 id="Nodemailer의-주요-기능"><a href="#Nodemailer의-주요-기능" class="headerlink" title="Nodemailer의 주요 기능"></a>Nodemailer의 주요 기능</h3><ul><li><strong>SMTP 서버 설정</strong>: Gmail, Outlook, 커스텀 SMTP 서버 등 다양한 SMTP 서버를 설정할 수 있습니다.</li><li><strong>이메일 형식 지원</strong>: 텍스트, HTML, 첨부 파일, 이미지 삽입 등 다양한 이메일 형식을 지원합니다.</li><li><strong>보안</strong>: TLS&#x2F;SSL을 사용하여 안전한 이메일 전송을 보장합니다.</li><li><strong>유연성</strong>: 다양한 이메일 서비스와 쉽게 연동할 수 있으며, 커스텀 설정도 가능합니다.</li></ul><h2 id="Nodemailer-설치-및-기본-설정"><a href="#Nodemailer-설치-및-기본-설정" class="headerlink" title="Nodemailer 설치 및 기본 설정"></a>Nodemailer 설치 및 기본 설정</h2><p>먼저 Nodemailer를 프로젝트에 설치합니다.</p><pre><code class="highlight bash">npm init -ynpm install nodemailer dotenv</code></pre><h3 id="env-파일-설정"><a href="#env-파일-설정" class="headerlink" title=".env 파일 설정"></a>.env 파일 설정</h3><p>이메일 계정 정보를 <code>.env</code> 파일에 환경 변수로 저장하여 보안을 강화합니다.</p><pre><code class="highlight bash">// .<span class="built_in">env</span>EMAIL_USER=your-email@gmail.comEMAIL_PASS=your-email-password</code></pre><h3 id="기본-이메일-전송-코드-작성"><a href="#기본-이메일-전송-코드-작성" class="headerlink" title="기본 이메일 전송 코드 작성"></a>기본 이메일 전송 코드 작성</h3><p>다음은 Nodemailer를 사용하여 간단한 이메일을 전송하는 기본 예제입니다.</p><pre><code class="highlight javascript"><span class="comment">// email.js</span><span class="keyword">const</span> nodemailer = <span class="built_in">require</span>(<span class="string">&quot;nodemailer&quot;</span>);<span class="built_in">require</span>(<span class="string">&quot;dotenv&quot;</span>).<span class="title function_">config</span>();<span class="comment">// SMTP 서버 설정</span><span class="keyword">const</span> transporter = nodemailer.<span class="title function_">createTransport</span>(&#123;  <span class="attr">service</span>: <span class="string">&quot;gmail&quot;</span>,  <span class="attr">auth</span>: &#123;    <span class="attr">user</span>: process.<span class="property">env</span>.<span class="property">EMAIL_USER</span>,    <span class="attr">pass</span>: process.<span class="property">env</span>.<span class="property">EMAIL_PASS</span>,  &#125;,&#125;);<span class="comment">// 이메일 옵션 설정</span><span class="keyword">const</span> mailOptions = &#123;  <span class="attr">from</span>: process.<span class="property">env</span>.<span class="property">EMAIL_USER</span>,  <span class="attr">to</span>: <span class="string">&quot;recipient@example.com&quot;</span>,  <span class="attr">subject</span>: <span class="string">&quot;Nodemailer Test&quot;</span>,  <span class="attr">text</span>: <span class="string">&quot;Hello, this is a test email sent using Nodemailer!&quot;</span>,&#125;;<span class="comment">// 이메일 전송</span>transporter.<span class="title function_">sendMail</span>(mailOptions, <span class="function">(<span class="params">error, info</span>) =&gt;</span> &#123;  <span class="keyword">if</span> (error) &#123;    <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(error);  &#125;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Email sent: &quot;</span> + info.<span class="property">response</span>);&#125;);</code></pre><h2 id="다양한-이메일-전송-예제"><a href="#다양한-이메일-전송-예제" class="headerlink" title="다양한 이메일 전송 예제"></a>다양한 이메일 전송 예제</h2><h3 id="HTML-형식의-이메일-전송"><a href="#HTML-형식의-이메일-전송" class="headerlink" title="HTML 형식의 이메일 전송"></a>HTML 형식의 이메일 전송</h3><p>HTML 형식을 사용하여 더욱 풍부한 이메일 콘텐츠를 전송할 수 있습니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> htmlMailOptions = &#123;  <span class="attr">from</span>: process.<span class="property">env</span>.<span class="property">EMAIL_USER</span>,  <span class="attr">to</span>: <span class="string">&quot;recipient@example.com&quot;</span>,  <span class="attr">subject</span>: <span class="string">&quot;Nodemailer HTML Test&quot;</span>,  <span class="attr">html</span>: <span class="string">`</span><span class="string">    &lt;h1&gt;Hello!&lt;/h1&gt;</span><span class="string">    &lt;p&gt;This is a &lt;b&gt;test email&lt;/b&gt; sent using Nodemailer with HTML content.&lt;/p&gt;</span><span class="string">  `</span>,&#125;;transporter.<span class="title function_">sendMail</span>(htmlMailOptions, <span class="function">(<span class="params">error, info</span>) =&gt;</span> &#123;  <span class="keyword">if</span> (error) &#123;    <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(error);  &#125;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;HTML Email sent: &quot;</span> + info.<span class="property">response</span>);&#125;);</code></pre><h3 id="첨부-파일이-포함된-이메일-전송"><a href="#첨부-파일이-포함된-이메일-전송" class="headerlink" title="첨부 파일이 포함된 이메일 전송"></a>첨부 파일이 포함된 이메일 전송</h3><p>파일을 첨부하여 이메일을 전송할 수도 있습니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> mailWithAttachment = &#123;  <span class="attr">from</span>: process.<span class="property">env</span>.<span class="property">EMAIL_USER</span>,  <span class="attr">to</span>: <span class="string">&quot;recipient@example.com&quot;</span>,  <span class="attr">subject</span>: <span class="string">&quot;Nodemailer Attachment Test&quot;</span>,  <span class="attr">text</span>: <span class="string">&quot;Hello, please find the attached file.&quot;</span>,  <span class="attr">attachments</span>: [    &#123;      <span class="attr">filename</span>: <span class="string">&quot;example.txt&quot;</span>,      <span class="attr">path</span>: <span class="string">&quot;./files/example.txt&quot;</span>, <span class="comment">// 파일 경로</span>    &#125;,  ],&#125;;transporter.<span class="title function_">sendMail</span>(mailWithAttachment, <span class="function">(<span class="params">error, info</span>) =&gt;</span> &#123;  <span class="keyword">if</span> (error) &#123;    <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(error);  &#125;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Email with attachment sent: &quot;</span> + info.<span class="property">response</span>);&#125;);</code></pre><h3 id="여러-수신자에게-이메일-전송"><a href="#여러-수신자에게-이메일-전송" class="headerlink" title="여러 수신자에게 이메일 전송"></a>여러 수신자에게 이메일 전송</h3><p>한 번에 여러 명에게 이메일을 전송하려면 <code>to</code>, <code>cc</code>, <code>bcc</code> 필드를 배열 형식으로 지정합니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> mailToMultipleRecipients = &#123;  <span class="attr">from</span>: process.<span class="property">env</span>.<span class="property">EMAIL_USER</span>,  <span class="attr">to</span>: [<span class="string">&quot;recipient1@example.com&quot;</span>, <span class="string">&quot;recipient2@example.com&quot;</span>],  <span class="attr">subject</span>: <span class="string">&quot;Nodemailer Multiple Recipients Test&quot;</span>,  <span class="attr">text</span>: <span class="string">&quot;Hello, this email is sent to multiple recipients.&quot;</span>,&#125;;transporter.<span class="title function_">sendMail</span>(mailToMultipleRecipients, <span class="function">(<span class="params">error, info</span>) =&gt;</span> &#123;  <span class="keyword">if</span> (error) &#123;    <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(error);  &#125;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Email to multiple recipients sent: &quot;</span> + info.<span class="property">response</span>);&#125;);</code></pre><h2 id="Nodemailer의-보안-설정"><a href="#Nodemailer의-보안-설정" class="headerlink" title="Nodemailer의 보안 설정"></a>Nodemailer의 보안 설정</h2><p>이메일 전송 시 보안을 강화하기 위해 TLS&#x2F;SSL 설정을 추가할 수 있습니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> secureTransporter = nodemailer.<span class="title function_">createTransport</span>(&#123;  <span class="attr">service</span>: <span class="string">&quot;gmail&quot;</span>,  <span class="attr">auth</span>: &#123;    <span class="attr">user</span>: process.<span class="property">env</span>.<span class="property">EMAIL_USER</span>,    <span class="attr">pass</span>: process.<span class="property">env</span>.<span class="property">EMAIL_PASS</span>,  &#125;,  <span class="attr">secure</span>: <span class="literal">true</span>, <span class="comment">// TLS 사용</span>&#125;);secureTransporter.<span class="title function_">sendMail</span>(mailOptions, <span class="function">(<span class="params">error, info</span>) =&gt;</span> &#123;  <span class="keyword">if</span> (error) &#123;    <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(error);  &#125;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Secure Email sent: &quot;</span> + info.<span class="property">response</span>);&#125;);</code></pre><h2 id="Gmail-이외의-SMTP-서버-사용"><a href="#Gmail-이외의-SMTP-서버-사용" class="headerlink" title="Gmail 이외의 SMTP 서버 사용"></a>Gmail 이외의 SMTP 서버 사용</h2><p>Gmail 이외의 SMTP 서버를 사용하려면 <code>service</code> 대신 <code>host</code>, <code>port</code>를 직접 설정합니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> customTransporter = nodemailer.<span class="title function_">createTransport</span>(&#123;  <span class="attr">host</span>: <span class="string">&quot;smtp.example.com&quot;</span>,  <span class="attr">port</span>: <span class="number">587</span>,  <span class="attr">secure</span>: <span class="literal">false</span>, <span class="comment">// TLS 사용 시 true로 설정</span>  <span class="attr">auth</span>: &#123;    <span class="attr">user</span>: <span class="string">&quot;your-email@example.com&quot;</span>,    <span class="attr">pass</span>: <span class="string">&quot;your-password&quot;</span>,  &#125;,&#125;);customTransporter.<span class="title function_">sendMail</span>(mailOptions, <span class="function">(<span class="params">error, info</span>) =&gt;</span> &#123;  <span class="keyword">if</span> (error) &#123;    <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(error);  &#125;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Email sent via custom SMTP: &quot;</span> + info.<span class="property">response</span>);&#125;);</code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 Nodemailer를 사용하여 다양한 형태의 이메일을 전송하는 방법에 대해 알아보았습니다.<br>기본적인 텍스트 이메일부터 HTML, 첨부 파일, 다중 수신자 전송까지 다양한 예제를 실습해보았습니다.<br>이를 활용하여 웹 애플리케이션에서 사용자에게 이메일을 보내는 기능을 쉽게 구현해보세요!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> web_필수 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>OAuth 로그인 이해 및 Express와 Passport.js로 실습하기</title>
      <link href="/web/essential/7/"/>
      <url>/web/essential/7/</url>
      
        <content type="html"><![CDATA[<h1 id="OAuth-로그인-이해-및-Express와-Passport-js로-실습하기"><a href="#OAuth-로그인-이해-및-Express와-Passport-js로-실습하기" class="headerlink" title="OAuth 로그인 이해 및 Express와 Passport.js로 실습하기"></a>OAuth 로그인 이해 및 Express와 Passport.js로 실습하기</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 OAuth 로그인의 개념과 원리에 대해 알아보고, Express와 Passport.js를 사용하여 OAuth 로그인을 구현하는 방법을 실습해보겠습니다. OAuth 로그인은 현대 웹 애플리케이션에서 사용자 인증을 간편하게 구현할 수 있는 중요한 기능 중 하나입니다.</p><h2 id="OAuth-로그인-개념"><a href="#OAuth-로그인-개념" class="headerlink" title="OAuth 로그인 개념"></a>OAuth 로그인 개념</h2><h3 id="OAuth란"><a href="#OAuth란" class="headerlink" title="OAuth란?"></a>OAuth란?</h3><p>OAuth(Open Authorization)는 사용자가 애플리케이션에 비밀번호를 제공하지 않고도 다른 애플리케이션에서 자신의 계정 정보를 안전하게 공유할 수 있게 하는 인증 프로토콜입니다. OAuth는 주로 소셜 로그인(Google, Facebook, GitHub 등)에서 사용됩니다.</p><h3 id="OAuth의-주요-용어"><a href="#OAuth의-주요-용어" class="headerlink" title="OAuth의 주요 용어"></a>OAuth의 주요 용어</h3><ol><li><strong>리소스 소유자(Resource Owner)</strong>: 사용자로, 애플리케이션에 접근하려는 사람입니다.</li><li><strong>클라이언트(Client)</strong>: 리소스 소유자의 정보를 요청하는 애플리케이션입니다.</li><li><strong>리소스 서버(Resource Server)</strong>: 사용자 정보를 저장하고 있는 서버입니다.</li><li><strong>인증 서버(Authorization Server)</strong>: 사용자를 인증하고, 엑세스 토큰을 발급하는 서버입니다.</li><li><strong>엑세스 토큰(Access Token)</strong>: 인증 서버에서 발급하는 토큰으로, 리소스 서버에 요청할 때 사용됩니다.</li></ol><h3 id="OAuth-로그인-흐름"><a href="#OAuth-로그인-흐름" class="headerlink" title="OAuth 로그인 흐름"></a>OAuth 로그인 흐름</h3><ol><li><strong>사용자 요청</strong>: 사용자가 클라이언트 애플리케이션에 로그인 요청을 합니다.</li><li><strong>권한 부여 요청</strong>: 클라이언트 애플리케이션이 인증 서버에 권한 부여를 요청합니다.</li><li><strong>사용자 인증</strong>: 인증 서버가 사용자를 인증하고, 권한 요청을 승인합니다.</li><li><strong>엑세스 토큰 발급</strong>: 인증 서버가 클라이언트 애플리케이션에 엑세스 토큰을 발급합니다.</li><li><strong>API 요청</strong>: 클라이언트 애플리케이션이 엑세스 토큰을 사용하여 리소스 서버에 사용자 정보를 요청합니다.</li><li><strong>응답</strong>: 리소스 서버가 사용자 정보를 반환합니다.</li></ol><h2 id="준비하기"><a href="#준비하기" class="headerlink" title="준비하기"></a>준비하기</h2><p>먼저 필요한 패키지를 설치합니다:</p><pre><code class="highlight bash">npm init -ynpm install express passport passport-google-oauth20 express-session</code></pre><h2 id="서버-설정"><a href="#서버-설정" class="headerlink" title="서버 설정"></a>서버 설정</h2><p>다음은 필요한 모듈을 가져오고 서버를 설정하는 코드입니다. 자세한 부분은 뒤에서 알아보겠습니다.</p><pre><code class="highlight javascript"><span class="comment">// server.js</span><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);<span class="keyword">const</span> passport = <span class="built_in">require</span>(<span class="string">&quot;passport&quot;</span>);<span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">&quot;express-session&quot;</span>);<span class="keyword">const</span> &#123; <span class="title class_">Strategy</span>: <span class="title class_">GoogleStrategy</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;passport-google-oauth20&quot;</span>);<span class="keyword">const</span> app = <span class="title function_">express</span>();<span class="keyword">const</span> port = <span class="number">3000</span>;<span class="comment">// 세션 설정</span>app.<span class="title function_">use</span>(<span class="title function_">session</span>(&#123; <span class="attr">secret</span>: <span class="string">&quot;secret&quot;</span>, <span class="attr">resave</span>: <span class="literal">false</span>, <span class="attr">saveUninitialized</span>: <span class="literal">true</span> &#125;));<span class="comment">// Passport 초기화</span>app.<span class="title function_">use</span>(passport.<span class="title function_">initialize</span>());app.<span class="title function_">use</span>(passport.<span class="title function_">session</span>());<span class="comment">// 사용자 직렬화 및 역직렬화</span>passport.<span class="title function_">serializeUser</span>(<span class="function">(<span class="params">user, done</span>) =&gt;</span> &#123;  <span class="title function_">done</span>(<span class="literal">null</span>, user);&#125;);passport.<span class="title function_">deserializeUser</span>(<span class="function">(<span class="params">obj, done</span>) =&gt;</span> &#123;  <span class="title function_">done</span>(<span class="literal">null</span>, obj);&#125;);<span class="comment">// Google OAuth2.0 전략 설정</span>passport.<span class="title function_">use</span>(  <span class="keyword">new</span> <span class="title class_">GoogleStrategy</span>(    &#123;      <span class="attr">clientID</span>: process.<span class="property">env</span>.<span class="property">GOOGLE_CLIENT_ID</span>,      <span class="attr">clientSecret</span>: process.<span class="property">env</span>.<span class="property">GOOGLE_CLIENT_SECRET</span>,      <span class="attr">callbackURL</span>: <span class="string">&quot;&lt;http://localhost:3000/auth/google/callback&gt;&quot;</span>,    &#125;,    <span class="function">(<span class="params">token, tokenSecret, profile, done</span>) =&gt;</span> &#123;      <span class="keyword">return</span> <span class="title function_">done</span>(<span class="literal">null</span>, profile);    &#125;  ));<span class="comment">// 라우트 설정</span><span class="comment">// 홈 라우트</span>app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  res.<span class="title function_">send</span>(<span class="string">&#x27;&lt;h1&gt;Home&lt;/h1&gt;&lt;a href=&quot;/auth/google&quot;&gt;Login with Google&lt;/a&gt;&#x27;</span>);&#125;);<span class="comment">// 로그인 라우트</span>app.<span class="title function_">get</span>(  <span class="string">&quot;/auth/google&quot;</span>,  passport.<span class="title function_">authenticate</span>(<span class="string">&quot;google&quot;</span>, &#123;    <span class="attr">scope</span>: [<span class="string">&quot;&lt;https://www.googleapis.com/auth/plus.login&gt;&quot;</span>],  &#125;));<span class="comment">// 콜백 라우트</span>app.<span class="title function_">get</span>(  <span class="string">&quot;/auth/google/callback&quot;</span>,  passport.<span class="title function_">authenticate</span>(<span class="string">&quot;google&quot;</span>, &#123; <span class="attr">failureRedirect</span>: <span class="string">&quot;/&quot;</span> &#125;),  <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;    res.<span class="title function_">redirect</span>(<span class="string">&quot;/profile&quot;</span>);  &#125;);<span class="comment">// 프로필 라우트</span>app.<span class="title function_">get</span>(<span class="string">&quot;/profile&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  <span class="keyword">if</span> (!req.<span class="title function_">isAuthenticated</span>()) &#123;    <span class="keyword">return</span> res.<span class="title function_">redirect</span>(<span class="string">&quot;/&quot;</span>);  &#125;  res.<span class="title function_">send</span>(    <span class="string">`&lt;h1&gt;Profile&lt;/h1&gt;&lt;p&gt;<span class="subst">$&#123;req.user.displayName&#125;</span>&lt;/p&gt;&lt;a href=&quot;/logout&quot;&gt;Logout&lt;/a&gt;`</span>  );&#125;);<span class="comment">// 로그아웃 라우트</span>app.<span class="title function_">get</span>(<span class="string">&quot;/logout&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  req.<span class="title function_">logout</span>();  res.<span class="title function_">redirect</span>(<span class="string">&quot;/&quot;</span>);&#125;);app.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Server is running on &lt;http://localhost&gt;:<span class="subst">$&#123;port&#125;</span>`</span>);&#125;);</code></pre><h2 id="env-파일-설정"><a href="#env-파일-설정" class="headerlink" title=".env 파일 설정"></a>.env 파일 설정</h2><p>Google OAuth2.0 클라이언트 ID와 클라이언트 시크릿을 환경 변수로 설정합니다.</p><pre><code class="highlight bash">// .<span class="built_in">env</span>GOOGLE_CLIENT_ID=your-google-client-idGOOGLE_CLIENT_SECRET=your-google-client-secret</code></pre><h2 id="설정-설명"><a href="#설정-설명" class="headerlink" title="설정 설명"></a>설정 설명</h2><p>Express와 Passport.js를 사용하여 OAuth 로그인을 구현하는 방법을 설명합니다.</p><ol><li><p><strong>세션 설정</strong>:</p><pre><code class="highlight javascript">app.<span class="title function_">use</span>(  <span class="title function_">session</span>(&#123; <span class="attr">secret</span>: <span class="string">&quot;secret&quot;</span>, <span class="attr">resave</span>: <span class="literal">false</span>, <span class="attr">saveUninitialized</span>: <span class="literal">true</span> &#125;));</code></pre><p>사용자 세션을 관리하기 위해 express-session 미들웨어를 설정합니다. 세션은 OAuth 로그인 상태를 유지하는 데 사용됩니다.</p></li><li><p><strong>Passport 초기화</strong>:</p><pre><code class="highlight javascript">app.<span class="title function_">use</span>(passport.<span class="title function_">initialize</span>());app.<span class="title function_">use</span>(passport.<span class="title function_">session</span>());</code></pre><p>Passport를 초기화하고 세션을 사용하도록 설정합니다.</p></li><li><p><strong>사용자 직렬화 및 역직렬화</strong>:</p><pre><code class="highlight javascript">passport.<span class="title function_">serializeUser</span>(<span class="function">(<span class="params">user, done</span>) =&gt;</span> &#123;  <span class="title function_">done</span>(<span class="literal">null</span>, user);&#125;);passport.<span class="title function_">deserializeUser</span>(<span class="function">(<span class="params">obj, done</span>) =&gt;</span> &#123;  <span class="title function_">done</span>(<span class="literal">null</span>, obj);&#125;);</code></pre><p>사용자의 직렬화 및 역직렬화를 설정합니다. 세션에 사용자 정보를 저장하고, 세션에서 사용자 정보를 가져옵니다.</p></li><li><p><strong>Google OAuth2.0 전략 설정</strong>:</p><pre><code class="highlight javascript">passport.<span class="title function_">use</span>(  <span class="keyword">new</span> <span class="title class_">GoogleStrategy</span>(    &#123;      <span class="attr">clientID</span>: process.<span class="property">env</span>.<span class="property">GOOGLE_CLIENT_ID</span>,      <span class="attr">clientSecret</span>: process.<span class="property">env</span>.<span class="property">GOOGLE_CLIENT_SECRET</span>,      <span class="attr">callbackURL</span>: <span class="string">&quot;&lt;http://localhost:3000/auth/google/callback&gt;&quot;</span>,    &#125;,    <span class="function">(<span class="params">token, tokenSecret, profile, done</span>) =&gt;</span> &#123;      <span class="keyword">return</span> <span class="title function_">done</span>(<span class="literal">null</span>, profile);    &#125;  ));</code></pre><p>Google OAuth2.0 전략을 설정합니다. 클라이언트 ID, 클라이언트 시크릿, 콜백 URL을 사용하여 Google 인증 서버와 통신합니다.</p></li><li><p><strong>라우트 설정</strong>:</p><ul><li><p><strong>홈 라우트</strong>:<br>홈 페이지를 설정하고, Google 로그인 링크를 추가합니다.</p><pre><code class="highlight javascript">app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  res.<span class="title function_">send</span>(<span class="string">&#x27;&lt;h1&gt;Home&lt;/h1&gt;&lt;a href=&quot;/auth/google&quot;&gt;Login with Google&lt;/a&gt;&#x27;</span>);&#125;);</code></pre></li><li><p><strong>로그인 라우트</strong>:<br>Google 인증을 시작하는 라우트를 설정합니다.</p><pre><code class="highlight javascript">app.<span class="title function_">get</span>(  <span class="string">&quot;/auth/google&quot;</span>,  passport.<span class="title function_">authenticate</span>(<span class="string">&quot;google&quot;</span>, &#123;    <span class="attr">scope</span>: [<span class="string">&quot;&lt;https://www.googleapis.com/auth/plus.login&gt;&quot;</span>],  &#125;));</code></pre></li><li><p><strong>콜백 라우트</strong>:<br>Google 인증이 완료된 후 호출되는 콜백 라우트를 설정합니다. 인증 실패 시 홈 페이지로 리디렉션합니다.</p><pre><code class="highlight javascript">app.<span class="title function_">get</span>(  <span class="string">&quot;/auth/google/callback&quot;</span>,  passport.<span class="title function_">authenticate</span>(<span class="string">&quot;google&quot;</span>, &#123; <span class="attr">failureRedirect</span>: <span class="string">&quot;/&quot;</span> &#125;),  <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;    res.<span class="title function_">redirect</span>(<span class="string">&quot;/profile&quot;</span>);  &#125;);</code></pre></li><li><p><strong>프로필 라우트</strong>:<br>인증된 사용자만 접근할 수 있는 프로필 페이지를 설정합니다.</p><pre><code class="highlight javascript">app.<span class="title function_">get</span>(<span class="string">&quot;/profile&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  <span class="keyword">if</span> (!req.<span class="title function_">isAuthenticated</span>()) &#123;    <span class="keyword">return</span> res.<span class="title function_">redirect</span>(<span class="string">&quot;/&quot;</span>);  &#125;  res.<span class="title function_">send</span>(    <span class="string">`&lt;h1&gt;Profile&lt;/h1&gt;&lt;p&gt;<span class="subst">$&#123;req.user.displayName&#125;</span>&lt;/p&gt;&lt;a href=&quot;/logout&quot;&gt;Logout&lt;/a&gt;`</span>  );&#125;);</code></pre></li><li><p><strong>로그아웃 라우트</strong>:<br>사용자를 로그아웃시키고 홈 페이지로 리디렉션합니다.</p><pre><code class="highlight javascript">app.<span class="title function_">get</span>(<span class="string">&quot;/logout&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  req.<span class="title function_">logout</span>();  res.<span class="title function_">redirect</span>(<span class="string">&quot;/&quot;</span>);&#125;);</code></pre></li></ul></li></ol><h2 id="테스트"><a href="#테스트" class="headerlink" title="테스트"></a>테스트</h2><p>이렇게 하면 Express와 Passport.js를 사용하여 Google OAuth 로그인을 구현할 수 있습니다. 이 코드를 실행하기 전에 <code>.env</code> 파일이 있는지 확인하고, <code>server.js</code> 파일을 실행하여 서버를 시작하세요.</p><pre><code class="highlight bash">node server.js</code></pre><p>서버가 성공적으로 실행되면, <code>http://localhost:3000</code>에서 OAuth 로그인을 테스트할 수 있습니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 OAuth 로그인 개념과 원리를 이해하고, Express와 Passport.js를 사용하여 OAuth 로그인을 구현하는 방법을 알아보았습니다. 이를 바탕으로 더 안전하고 효율적인 사용자 인증 시스템을 개발해보세요!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> web_필수 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>실시간 데이터 전송의 원리와 Node.js에서 WebSocket 사용법 실습</title>
      <link href="/web/essential/6/"/>
      <url>/web/essential/6/</url>
      
        <content type="html"><![CDATA[<h1 id="실시간-데이터-전송의-원리와-Node-js에서-WebSocket-사용법-실습"><a href="#실시간-데이터-전송의-원리와-Node-js에서-WebSocket-사용법-실습" class="headerlink" title="실시간 데이터 전송의 원리와 Node.js에서 WebSocket 사용법 실습"></a>실시간 데이터 전송의 원리와 Node.js에서 WebSocket 사용법 실습</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 실시간 데이터 전송의 원리에 대해 알아보고, Node.js에서 WebSocket을 사용하여 실시간 데이터를 전송하는 방법을 실습해보겠습니다. 실시간 데이터 전송은 현대 웹 애플리케이션에서 중요한 기술입니다.</p><h2 id="실시간-데이터-전송의-원리"><a href="#실시간-데이터-전송의-원리" class="headerlink" title="실시간 데이터 전송의 원리"></a>실시간 데이터 전송의 원리</h2><h3 id="실시간-데이터-전송이란"><a href="#실시간-데이터-전송이란" class="headerlink" title="실시간 데이터 전송이란?"></a>실시간 데이터 전송이란?</h3><p>실시간 데이터 전송은 서버와 클라이언트 간에 데이터를 즉시 교환하여, 사용자가 실시간으로 변화를 감지하고 반응할 수 있게 하는 기술입니다. 이는 채팅 애플리케이션, 주식 거래 시스템, 온라인 게임 등 다양한 분야에서 활용됩니다.</p><h3 id="실시간-데이터-전송의-주요-기술"><a href="#실시간-데이터-전송의-주요-기술" class="headerlink" title="실시간 데이터 전송의 주요 기술"></a>실시간 데이터 전송의 주요 기술</h3><ol><li><strong>WebSocket</strong>: 서버와 클라이언트 간에 지속적인 연결을 유지하여, 양방향 데이터 전송을 가능하게 합니다.</li><li><strong>Server-Sent Events (SSE)</strong>: 서버가 클라이언트로 지속적으로 데이터를 푸시하는 방식입니다. 주로 알림, 실시간 피드 등에 사용됩니다.</li><li><strong>Long Polling</strong>: 클라이언트가 서버에 요청을 보내고, 서버는 새로운 데이터가 있을 때까지 요청을 보류합니다. 새로운 데이터가 생기면 응답을 보내고, 클라이언트는 즉시 다음 요청을 보냅니다.</li></ol><h3 id="WebSocket의-주요-특징"><a href="#WebSocket의-주요-특징" class="headerlink" title="WebSocket의 주요 특징"></a>WebSocket의 주요 특징</h3><ol><li><strong>양방향 통신</strong>: 서버와 클라이언트가 양방향으로 데이터를 주고받을 수 있습니다.</li><li><strong>지속적인 연결</strong>: 한 번 연결이 성립되면, 서버와 클라이언트 간에 지속적인 연결이 유지됩니다.</li><li><strong>낮은 오버헤드</strong>: HTTP 요청&#x2F;응답에 비해 데이터 전송 오버헤드가 적습니다.</li><li><strong>실시간 데이터 전송</strong>: 실시간으로 데이터를 주고받을 수 있어, 지연 시간이 적습니다.</li></ol><h2 id="준비하기"><a href="#준비하기" class="headerlink" title="준비하기"></a>준비하기</h2><p>먼저 필요한 패키지를 설치합니다:</p><pre><code class="highlight bash">npm init -ynpm install express ws</code></pre><h2 id="서버-설정"><a href="#서버-설정" class="headerlink" title="서버 설정"></a>서버 설정</h2><p>다음은 필요한 모듈을 가져오고 서버를 설정하는 코드입니다. 자세한 부분은 뒤에서 알아보겠습니다.</p><pre><code class="highlight javascript"><span class="comment">// server.js</span><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);<span class="keyword">const</span> &#123; <span class="title class_">Server</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;ws&quot;</span>);<span class="keyword">const</span> app = <span class="title function_">express</span>();<span class="keyword">const</span> port = <span class="number">3000</span>;<span class="comment">// HTTP 서버 생성</span><span class="keyword">const</span> server = app.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Server is running on http://localhost:<span class="subst">$&#123;port&#125;</span>`</span>);&#125;);<span class="comment">// WebSocket 서버 생성</span><span class="keyword">const</span> wss = <span class="keyword">new</span> <span class="title class_">Server</span>(&#123; server &#125;);wss.<span class="title function_">on</span>(<span class="string">&quot;connection&quot;</span>, <span class="function">(<span class="params">ws</span>) =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;New client connected&quot;</span>);  ws.<span class="title function_">on</span>(<span class="string">&quot;message&quot;</span>, <span class="function">(<span class="params">message</span>) =&gt;</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Received: <span class="subst">$&#123;message&#125;</span>`</span>);    <span class="comment">// 모든 클라이언트에게 메시지 전송</span>    wss.<span class="property">clients</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">client</span>) =&gt;</span> &#123;      <span class="keyword">if</span> (client.<span class="property">readyState</span> === ws.<span class="property">OPEN</span>) &#123;        client.<span class="title function_">send</span>(<span class="string">`Server: <span class="subst">$&#123;message&#125;</span>`</span>);      &#125;    &#125;);  &#125;);  ws.<span class="title function_">on</span>(<span class="string">&quot;close&quot;</span>, <span class="function">() =&gt;</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Client disconnected&quot;</span>);  &#125;);&#125;);<span class="comment">// 정적 파일 제공</span>app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&quot;public&quot;</span>));</code></pre><h2 id="클라이언트-설정"><a href="#클라이언트-설정" class="headerlink" title="클라이언트 설정"></a>클라이언트 설정</h2><p>클라이언트 측 코드를 작성하여 WebSocket을 통해 서버와 통신합니다. <code>public/index.html</code> 파일을 생성합니다.</p><pre><code class="highlight html"><span class="comment">&lt;!-- public/index.html --&gt;</span><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">head</span>&gt;</span>    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span>    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span>    <span class="tag">&lt;<span class="name">title</span>&gt;</span>WebSocket Chat<span class="tag">&lt;/<span class="name">title</span>&gt;</span>  <span class="tag">&lt;/<span class="name">head</span>&gt;</span>  <span class="tag">&lt;<span class="name">body</span>&gt;</span>    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>WebSocket Chat<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;messageInput&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Type a message...&quot;</span> /&gt;</span>    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;sendButton&quot;</span>&gt;</span>Send<span class="tag">&lt;/<span class="name">button</span>&gt;</span>    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;messages&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span>    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">      <span class="keyword">const</span> ws = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">&quot;ws://localhost:3000&quot;</span>);</span><span class="language-javascript"></span><span class="language-javascript">      ws.<span class="property">onopen</span> = <span class="function">() =&gt;</span> &#123;</span><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Connected to the server&quot;</span>);</span><span class="language-javascript">      &#125;;</span><span class="language-javascript"></span><span class="language-javascript">      ws.<span class="property">onmessage</span> = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><span class="language-javascript">        <span class="keyword">const</span> messages = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;messages&quot;</span>);</span><span class="language-javascript">        <span class="keyword">const</span> message = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;li&quot;</span>);</span><span class="language-javascript">        message.<span class="property">textContent</span> = event.<span class="property">data</span>;</span><span class="language-javascript">        messages.<span class="title function_">appendChild</span>(message);</span><span class="language-javascript">      &#125;;</span><span class="language-javascript"></span><span class="language-javascript">      ws.<span class="property">onclose</span> = <span class="function">() =&gt;</span> &#123;</span><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Disconnected from the server&quot;</span>);</span><span class="language-javascript">      &#125;;</span><span class="language-javascript"></span><span class="language-javascript">      <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;sendButton&quot;</span>).<span class="property">onclick</span> = <span class="function">() =&gt;</span> &#123;</span><span class="language-javascript">        <span class="keyword">const</span> input = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;messageInput&quot;</span>);</span><span class="language-javascript">        ws.<span class="title function_">send</span>(input.<span class="property">value</span>);</span><span class="language-javascript">        input.<span class="property">value</span> = <span class="string">&quot;&quot;</span>;</span><span class="language-javascript">      &#125;;</span><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  <span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></code></pre><h2 id="설정-설명"><a href="#설정-설명" class="headerlink" title="설정 설명"></a>설정 설명</h2><p>Node.js에서 WebSocket을 사용하여 실시간 데이터를 전송하는 방법을 설명합니다.</p><ol><li><p><strong>WebSocket 서버 생성</strong>:</p><pre><code class="highlight javascript"><span class="keyword">const</span> &#123; <span class="title class_">Server</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;ws&quot;</span>);<span class="keyword">const</span> wss = <span class="keyword">new</span> <span class="title class_">Server</span>(&#123; server &#125;);wss.<span class="title function_">on</span>(<span class="string">&quot;connection&quot;</span>, <span class="function">(<span class="params">ws</span>) =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;New client connected&quot;</span>);  ws.<span class="title function_">on</span>(<span class="string">&quot;message&quot;</span>, <span class="function">(<span class="params">message</span>) =&gt;</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Received: <span class="subst">$&#123;message&#125;</span>`</span>);    <span class="comment">// 모든 클라이언트에게 메시지 전송</span>    wss.<span class="property">clients</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">client</span>) =&gt;</span> &#123;      <span class="keyword">if</span> (client.<span class="property">readyState</span> === ws.<span class="property">OPEN</span>) &#123;        client.<span class="title function_">send</span>(<span class="string">`Server: <span class="subst">$&#123;message&#125;</span>`</span>);      &#125;    &#125;);  &#125;);  ws.<span class="title function_">on</span>(<span class="string">&quot;close&quot;</span>, <span class="function">() =&gt;</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Client disconnected&quot;</span>);  &#125;);&#125;);</code></pre><p><code>ws</code> 모듈을 사용하여 WebSocket 서버를 생성하고, 클라이언트와의 연결을 처리합니다. 클라이언트가 메시지를 보내면 모든 연결된 클라이언트에게 메시지를 전송합니다.</p></li><li><p><strong>클라이언트 설정</strong>:</p><pre><code class="highlight html"><span class="comment">&lt;!-- public/index.html --&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;messageInput&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Type a message...&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;sendButton&quot;</span>&gt;</span>Send<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;messages&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="keyword">const</span> ws = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">&quot;ws://localhost:3000&quot;</span>);</span><span class="language-javascript"></span><span class="language-javascript">  ws.<span class="property">onopen</span> = <span class="function">() =&gt;</span> &#123;</span><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Connected to the server&quot;</span>);</span><span class="language-javascript">  &#125;;</span><span class="language-javascript"></span><span class="language-javascript">  ws.<span class="property">onmessage</span> = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><span class="language-javascript">    <span class="keyword">const</span> messages = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;messages&quot;</span>);</span><span class="language-javascript">    <span class="keyword">const</span> message = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;li&quot;</span>);</span><span class="language-javascript">    message.<span class="property">textContent</span> = event.<span class="property">data</span>;</span><span class="language-javascript">    messages.<span class="title function_">appendChild</span>(message);</span><span class="language-javascript">  &#125;;</span><span class="language-javascript"></span><span class="language-javascript">  ws.<span class="property">onclose</span> = <span class="function">() =&gt;</span> &#123;</span><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Disconnected from the server&quot;</span>);</span><span class="language-javascript">  &#125;;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;sendButton&quot;</span>).<span class="property">onclick</span> = <span class="function">() =&gt;</span> &#123;</span><span class="language-javascript">    <span class="keyword">const</span> input = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;messageInput&quot;</span>);</span><span class="language-javascript">    ws.<span class="title function_">send</span>(input.<span class="property">value</span>);</span><span class="language-javascript">    input.<span class="property">value</span> = <span class="string">&quot;&quot;</span>;</span><span class="language-javascript">  &#125;;</span><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></code></pre><p>클라이언트 측에서는 WebSocket 객체를 생성하여 서버와 연결하고, 메시지를 주고받는 로직을 구현합니다. 메시지를 전송하고 수신하여 화면에 표시합니다.</p></li></ol><h2 id="테스트"><a href="#테스트" class="headerlink" title="테스트"></a>테스트</h2><p>이렇게 하면 Node.js에서 WebSocket을 사용하여 실시간 데이터를 전송할 수 있습니다. 이 코드를 실행하기 전에 <code>server.js</code> 파일을 실행하여 서버를 시작하세요.</p><pre><code class="highlight bash">node server.js</code></pre><p>서버가 성공적으로 실행되면, 브라우저에서 <code>http://localhost:3000</code>을 열어 실시간 채팅 애플리케이션을 테스트할 수 있습니다.</p><h3 id="테스트-방법"><a href="#테스트-방법" class="headerlink" title="테스트 방법"></a>테스트 방법</h3><ol><li><strong>서버 실행</strong>: <code>node server.js</code> 명령어를 사용하여 서버를 실행합니다.</li><li><strong>브라우저에서 열기</strong>: 브라우저에서 <code>http://localhost:3000</code>을 열어 클라이언트 페이지에 접근합니다.</li><li><strong>메시지 전송 및 수신</strong>: 메시지를 입력하고 “Send” 버튼을 클릭하여 메시지를 전송합니다. 다른 클라이언트에서도 동일한 페이지를 열어 메시지 전송과 수신을 테스트합니다.</li></ol><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 실시간 데이터 전송의 원리를 이해하고, Node.js에서 WebSocket을 사용하여 실시간 데이터를 전송하는 방법을 알아보았습니다. 이를 바탕으로 실시간으로 반응하는 웹 애플리케이션을 개발해보세요!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> web_필수 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>미들웨어의 개념과 작동 원리 및 Express에서의 사용법</title>
      <link href="/web/essential/5/"/>
      <url>/web/essential/5/</url>
      
        <content type="html"><![CDATA[<h1 id="미들웨어의-개념과-작동-원리-및-Express에서의-사용법"><a href="#미들웨어의-개념과-작동-원리-및-Express에서의-사용법" class="headerlink" title="미들웨어의 개념과 작동 원리 및 Express에서의 사용법"></a>미들웨어의 개념과 작동 원리 및 Express에서의 사용법</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 미들웨어의 개념과 작동 원리에 대해 알아보고, Express에서 미들웨어를 사용하는 방법을 실습해보겠습니다. 미들웨어는 Express 애플리케이션에서 매우 중요한 역할을 합니다.</p><h2 id="미들웨어의-개념과-작동-원리"><a href="#미들웨어의-개념과-작동-원리" class="headerlink" title="미들웨어의 개념과 작동 원리"></a>미들웨어의 개념과 작동 원리</h2><h3 id="미들웨어란"><a href="#미들웨어란" class="headerlink" title="미들웨어란?"></a>미들웨어란?</h3><p>미들웨어는 요청과 응답 사이에서 특정 기능을 수행하는 함수입니다. Express에서는 미들웨어를 사용하여 요청을 처리하거나 응답을 변형할 수 있습니다. 미들웨어는 체인처럼 연결되어 있으며, 각 미들웨어는 다음 미들웨어로 제어를 넘길 수 있습니다.</p><h3 id="미들웨어의-주요-기능"><a href="#미들웨어의-주요-기능" class="headerlink" title="미들웨어의 주요 기능"></a>미들웨어의 주요 기능</h3><ol><li><strong>로그</strong>: 요청 정보를 로깅합니다.</li><li><strong>인증 및 권한 부여</strong>: 사용자의 인증 상태를 확인하고 권한을 검사합니다.</li><li><strong>요청 데이터 파싱</strong>: JSON, URL-encoded 데이터 등을 파싱합니다.</li><li><strong>응답 변형</strong>: 응답 데이터를 압축하거나 변형합니다.</li><li><strong>에러 처리</strong>: 요청 처리 중 발생한 에러를 처리합니다.</li></ol><h3 id="미들웨어의-작동-원리"><a href="#미들웨어의-작동-원리" class="headerlink" title="미들웨어의 작동 원리"></a>미들웨어의 작동 원리</h3><p>미들웨어 함수는 <code>req</code>, <code>res</code>, <code>next</code> 세 개의 매개변수를 가집니다. <code>next</code> 함수는 다음 미들웨어로 제어를 넘깁니다. 미들웨어는 순차적으로 실행되며, 각 미들웨어는 <code>next</code>를 호출하여 다음 미들웨어로 넘어갑니다. 마지막 미들웨어는 클라이언트에게 응답을 보냅니다.</p><h2 id="준비하기"><a href="#준비하기" class="headerlink" title="준비하기"></a>준비하기</h2><p>먼저 필요한 패키지를 설치합니다:</p><pre><code class="highlight bash">npm init -ynpm install express</code></pre><pre><code class="highlight markdown"></code></pre><h2 id="서버-설정"><a href="#서버-설정" class="headerlink" title="서버 설정"></a>서버 설정</h2><p>다음은 필요한 모듈을 가져오고 서버를 설정하는 코드입니다. 자세한 부분은 뒤에서 알아보겠습니다.</p><pre><code class="highlight javascript"><span class="comment">// server.js</span><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);<span class="keyword">const</span> app = <span class="title function_">express</span>();<span class="keyword">const</span> port = <span class="number">3000</span>;<span class="comment">// 미들웨어 정의</span><span class="comment">// 요청 로깅 미들웨어</span><span class="keyword">const</span> <span class="title function_">requestLogger</span> = (<span class="params">req, res, next</span>) =&gt; &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;req.method&#125;</span> <span class="subst">$&#123;req.url&#125;</span>`</span>);  <span class="title function_">next</span>();&#125;;<span class="comment">// 인증 미들웨어</span><span class="keyword">const</span> <span class="title function_">authenticate</span> = (<span class="params">req, res, next</span>) =&gt; &#123;  <span class="keyword">const</span> token = req.<span class="title function_">header</span>(<span class="string">&quot;Authorization&quot;</span>);  <span class="keyword">if</span> (token === <span class="string">&quot;mysecrettoken&quot;</span>) &#123;    <span class="title function_">next</span>();  &#125; <span class="keyword">else</span> &#123;    res.<span class="title function_">status</span>(<span class="number">401</span>).<span class="title function_">send</span>(<span class="string">&quot;Unauthorized&quot;</span>);  &#125;&#125;;<span class="comment">// 요청 데이터 파싱 미들웨어</span>app.<span class="title function_">use</span>(express.<span class="title function_">json</span>());<span class="comment">// 미들웨어 사용</span>app.<span class="title function_">use</span>(requestLogger);<span class="comment">// 엔드포인트 정의</span>app.<span class="title function_">get</span>(<span class="string">&quot;/public&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  res.<span class="title function_">send</span>(<span class="string">&quot;This is a public endpoint.&quot;</span>);&#125;);app.<span class="title function_">get</span>(<span class="string">&quot;/private&quot;</span>, authenticate, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  res.<span class="title function_">send</span>(<span class="string">&quot;This is a private endpoint.&quot;</span>);&#125;);app.<span class="title function_">use</span>(<span class="function">(<span class="params">err, req, res, next</span>) =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">error</span>(err.<span class="property">stack</span>);  res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&quot;Something broke!&quot;</span>);&#125;);app.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Server is running on &lt;http://localhost&gt;:<span class="subst">$&#123;port&#125;</span>`</span>);&#125;);</code></pre><h2 id="미들웨어-설정-설명"><a href="#미들웨어-설정-설명" class="headerlink" title="미들웨어 설정 설명"></a>미들웨어 설정 설명</h2><p>Express에서 미들웨어를 설정하고 사용하는 방법을 설명합니다.</p><ol><li><p><strong>요청 로깅 미들웨어</strong>:</p><pre><code class="highlight javascript"><span class="keyword">const</span> <span class="title function_">requestLogger</span> = (<span class="params">req, res, next</span>) =&gt; &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;req.method&#125;</span> <span class="subst">$&#123;req.url&#125;</span>`</span>);  <span class="title function_">next</span>();&#125;;</code></pre><p>요청 정보를 로깅하는 미들웨어입니다. 모든 요청의 메서드와 URL을 콘솔에 출력합니다.</p></li><li><p><strong>인증 미들웨어</strong>:</p><pre><code class="highlight javascript"><span class="keyword">const</span> <span class="title function_">authenticate</span> = (<span class="params">req, res, next</span>) =&gt; &#123;  <span class="keyword">const</span> token = req.<span class="title function_">header</span>(<span class="string">&quot;Authorization&quot;</span>);  <span class="keyword">if</span> (token === <span class="string">&quot;mysecrettoken&quot;</span>) &#123;    <span class="title function_">next</span>();  &#125; <span class="keyword">else</span> &#123;    res.<span class="title function_">status</span>(<span class="number">401</span>).<span class="title function_">send</span>(<span class="string">&quot;Unauthorized&quot;</span>);  &#125;&#125;;</code></pre><p>사용자의 인증 상태를 확인하는 미들웨어입니다. <code>Authorization</code> 헤더에 특정 토큰이 있는 경우 다음 미들웨어로 넘기고, 그렇지 않으면 401 상태 코드를 반환합니다.</p></li><li><p><strong>요청 데이터 파싱 미들웨어</strong>:</p><pre><code class="highlight javascript">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>());</code></pre><p>요청 데이터를 JSON 형식으로 파싱하는 미들웨어입니다. 클라이언트에서 JSON 데이터를 보낼 때 이를 자동으로 파싱하여 <code>req.body</code>에 저장합니다.</p></li><li><p><strong>미들웨어 사용</strong>:</p><pre><code class="highlight javascript">app.<span class="title function_">use</span>(requestLogger);</code></pre><p><code>requestLogger</code> 미들웨어를 사용하여 모든 요청을 로깅합니다.</p></li><li><p><strong>엔드포인트 정의</strong>:</p><pre><code class="highlight javascript">app.<span class="title function_">get</span>(<span class="string">&quot;/public&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  res.<span class="title function_">send</span>(<span class="string">&quot;This is a public endpoint.&quot;</span>);&#125;);app.<span class="title function_">get</span>(<span class="string">&quot;/private&quot;</span>, authenticate, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  res.<span class="title function_">send</span>(<span class="string">&quot;This is a private endpoint.&quot;</span>);&#125;);</code></pre><p><code>/public</code> 엔드포인트는 누구나 접근할 수 있으며, <code>/private</code> 엔드포인트는 <code>authenticate</code> 미들웨어를 통과한 사용자만 접근할 수 있습니다.</p></li><li><p><strong>에러 처리 미들웨어</strong>:</p><pre><code class="highlight javascript">app.<span class="title function_">use</span>(<span class="function">(<span class="params">err, req, res, next</span>) =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">error</span>(err.<span class="property">stack</span>);  res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&quot;Something broke!&quot;</span>);&#125;);</code></pre><p>에러를 처리하는 미들웨어입니다. 애플리케이션에서 발생한 모든 에러를 처리하고 500 상태 코드를 반환합니다.</p></li></ol><h2 id="테스트"><a href="#테스트" class="headerlink" title="테스트"></a>테스트</h2><p>이렇게 하면 미들웨어를 사용한 간단한 Express 애플리케이션을 구현할 수 있습니다. 이 코드를 실행하기 전에 <code>server.js</code> 파일을 실행하여 서버를 시작하세요.</p><pre><code class="highlight bash">node server.js</code></pre><p>서버가 성공적으로 실행되면, <code>http://localhost:3000</code>에서 미들웨어가 적용된 엔드포인트를 테스트할 수 있습니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 미들웨어의 개념과 작동 원리를 이해하고, Express에서 미들웨어를 사용하는 방법을 알아보았습니다. 이를 바탕으로 더 복잡한 미들웨어 체인을 구성하여 Express 애플리케이션을 개발해보세요!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> web_필수 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 이벤트 루프 이해하기</title>
      <link href="/javascript/special/1/"/>
      <url>/javascript/special/1/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-이벤트-루프-이해하기"><a href="#JavaScript-이벤트-루프-이해하기" class="headerlink" title="JavaScript 이벤트 루프 이해하기"></a>JavaScript 이벤트 루프 이해하기</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!</p><p>JavaScript는 싱글 스레드 언어로, 한 번에 하나의 작업만 처리할 수 있습니다. 그럼에도 불구하고, JavaScript는 비동기 작업을 효율적으로 처리할 수 있습니다. 그 비결은 바로 이벤트 루프(Event Loop)에 있습니다.<br>이번 글에서는 JavaScript의 이벤트 루프가 어떻게 작동하는지, 그리고 콜백, 프로미스, async&#x2F;await가 이벤트 루프와 어떻게 상호작용하는지 설명합니다.</p><h2 id="이벤트-루프란"><a href="#이벤트-루프란" class="headerlink" title="이벤트 루프란?"></a>이벤트 루프란?</h2><p>이벤트 루프는 JavaScript의 비동기 작업을 처리하는 메커니즘입니다. 이벤트 루프는 콜 스택(Call Stack)과 태스크 큐(Task Queue)를 모니터링하며, 콜 스택이 비어 있을 때 태스크 큐에서 대기 중인 콜백을 가져와 실행합니다.</p><h2 id="콜-스택과-태스크-큐"><a href="#콜-스택과-태스크-큐" class="headerlink" title="콜 스택과 태스크 큐"></a>콜 스택과 태스크 큐</h2><h3 id="콜-스택"><a href="#콜-스택" class="headerlink" title="콜 스택"></a>콜 스택</h3><p>콜 스택은 실행 중인 함수들이 쌓이는 스택 구조의 메모리 공간입니다. 함수가 호출되면 콜 스택에 추가되고, 함수 실행이 완료되면 콜 스택에서 제거됩니다.</p><h3 id="태스크-큐"><a href="#태스크-큐" class="headerlink" title="태스크 큐"></a>태스크 큐</h3><p>태스크 큐는 비동기 작업이 완료되었을 때 실행될 콜백 함수들이 대기하는 큐입니다. 이벤트 루프는 콜 스택이 비어 있을 때 태스크 큐에서 콜백을 가져와 실행합니다.</p><h2 id="콜백-함수와-이벤트-루프"><a href="#콜백-함수와-이벤트-루프" class="headerlink" title="콜백 함수와 이벤트 루프"></a>콜백 함수와 이벤트 루프</h2><p>콜백 함수는 비동기 작업이 완료되었을 때 실행되는 함수입니다. 예를 들어, <code>setTimeout</code> 함수는 지정된 시간이 지난 후에 콜백 함수를 태스크 큐에 추가합니다. 이벤트 루프는 콜 스택이 비어 있을 때 이 콜백 함수를 실행합니다.</p><pre><code class="highlight javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Start&quot;</span>);<span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Timeout callback&quot;</span>);&#125;, <span class="number">1000</span>);<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;End&quot;</span>);</code></pre><p>위 코드에서 setTimeout 함수는 1초 후에 콜백 함수를 태스크 큐에 추가합니다. 이벤트 루프는 콜 스택이 비어 있는지 확인하고, 비어 있을 경우 태스크 큐에서 콜백 함수를 가져와 실행합니다.</p><h2 id="프로미스와-이벤트-루프"><a href="#프로미스와-이벤트-루프" class="headerlink" title="프로미스와 이벤트 루프"></a>프로미스와 이벤트 루프</h2><p>프로미스는 비동기 작업의 완료 또는 실패를 나타내는 객체입니다. 프로미스가 이행되면 then 메서드의 콜백 함수가 태스크 큐가 아닌 마이크로태스크 큐(Microtask Queue)에 추가됩니다. 마이크로태스크 큐는 태스크 큐보다 높은 우선순위를 가집니다.</p><pre><code class="highlight javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Start&quot;</span>);<span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;  <span class="title function_">resolve</span>(<span class="string">&quot;Resolved&quot;</span>);&#125;);promise.<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(value);&#125;);<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;End&quot;</span>);</code></pre><p>위 코드에서 프로미스가 즉시 이행되면 then 메서드의 콜백 함수가 마이크로태스크 큐에 추가됩니다. 이벤트 루프는 콜 스택이 비어 있을 때 태스크 큐보다 마이크로태스크 큐를 우선하여 처리합니다.</p><h2 id="async-await와-이벤트-루프"><a href="#async-await와-이벤트-루프" class="headerlink" title="async&#x2F;await와 이벤트 루프"></a>async&#x2F;await와 이벤트 루프</h2><p>async&#x2F;await는 프로미스를 기반으로 비동기 작업을 처리하는 새로운 방법입니다. async 함수는 항상 프로미스를 반환하며, await 키워드는 프로미스가 해결될 때까지 함수를 일시 정지시킵니다. 이때 일시 정지된 함수는 마이크로태스크 큐에 추가됩니다.</p><pre><code class="highlight javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Start&quot;</span>);<span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params"></span>) &#123;  <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;      <span class="title function_">resolve</span>(<span class="string">&quot;Data received&quot;</span>);    &#125;, <span class="number">1000</span>);  &#125;);  <span class="variable language_">console</span>.<span class="title function_">log</span>(data);&#125;<span class="title function_">fetchData</span>();<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;End&quot;</span>);</code></pre><p>위 코드에서 fetchData 함수는 await 키워드로 인해 프로미스가 해결될 때까지 일시 정지됩니다. 이 함수는 마이크로태스크 큐에 추가되며, 이벤트 루프는 콜 스택이 비어 있을 때 이를 처리합니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>JavaScript의 이벤트 루프는 비동기 작업을 효율적으로 처리하는 중요한 메커니즘입니다. 콜백, 프로미스, async&#x2F;await 모두 이벤트 루프와 상호작용하여 비동기 작업을 처리합니다. 이벤트 루프의 동작 원리를 이해하면, JavaScript에서 비동기 코드를 더 효과적으로 작성할 수 있습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> JS_필살기 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 배열 메서드 reduce, map 심화</title>
      <link href="/javascript/basic/11/"/>
      <url>/javascript/basic/11/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-배열-메서드-reduce-map-심화"><a href="#JavaScript-배열-메서드-reduce-map-심화" class="headerlink" title="JavaScript 배열 메서드 reduce, map 심화"></a>JavaScript 배열 메서드 reduce, map 심화</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 JavaScript 배열 메서드 중 <code>map</code>과 <code>reduce</code>에 대해 조금 더 깊이 알아보겠습니다. 이 두 메서드는 배열을 변형하고 축약하는 데 매우 유용한 도구입니다.</p><h2 id="map-메서드"><a href="#map-메서드" class="headerlink" title="map 메서드"></a>map 메서드</h2><p><code>map</code> 메서드는 배열의 각 요소에 대해 함수를 실행하고, 그 결과를 새로운 배열로 반환합니다. 마치 기존의 상자 안의 물건을 다른 모양으로 바꾸어 새로운 상자에 담는 것과 같습니다.</p><h3 id="map-기본-사용법"><a href="#map-기본-사용법" class="headerlink" title="map 기본 사용법"></a>map 기본 사용법</h3><p><code>map</code> 메서드는 배열의 각 요소를 변환하여 새로운 배열을 만듭니다. 기존 배열은 변경되지 않습니다.</p><pre><code class="highlight javascript"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];<span class="keyword">let</span> doubled = numbers.<span class="title function_">map</span>(<span class="function">(<span class="params">number</span>) =&gt;</span> number * <span class="number">2</span>);<span class="variable language_">console</span>.<span class="title function_">log</span>(doubled); <span class="comment">// 출력: [2, 4, 6, 8, 10]</span></code></pre><p>위 예제에서 <code>numbers</code> 배열의 각 요소를 2배로 변환하여 새로운 배열 <code>doubled</code>를 생성합니다.</p><h3 id="예제-배열의-문자열-길이-구하기"><a href="#예제-배열의-문자열-길이-구하기" class="headerlink" title="예제: 배열의 문자열 길이 구하기"></a>예제: 배열의 문자열 길이 구하기</h3><p><code>map</code> 메서드는 문자열 배열의 각 요소의 길이를 구하는 데도 사용할 수 있습니다.</p><pre><code class="highlight javascript"><span class="keyword">let</span> fruits = [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>];<span class="keyword">let</span> lengths = fruits.<span class="title function_">map</span>(<span class="function">(<span class="params">fruit</span>) =&gt;</span> fruit.<span class="property">length</span>);<span class="variable language_">console</span>.<span class="title function_">log</span>(lengths); <span class="comment">// 출력: [5, 6, 6]</span></code></pre><p>위 예제에서 <code>fruits</code> 배열의 각 요소의 길이를 구하여 새로운 배열 <code>lengths</code>를 생성합니다.</p><h3 id="예제-숫자를-문자열로-변환하기"><a href="#예제-숫자를-문자열로-변환하기" class="headerlink" title="예제: 숫자를 문자열로 변환하기"></a>예제: 숫자를 문자열로 변환하기</h3><p>또 다른 예로, 숫자를 문자열로 변환할 수 있습니다.</p><pre><code class="highlight javascript"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];<span class="keyword">let</span> strings = numbers.<span class="title function_">map</span>(<span class="function">(<span class="params">number</span>) =&gt;</span> number.<span class="title function_">toString</span>());<span class="variable language_">console</span>.<span class="title function_">log</span>(strings); <span class="comment">// 출력: [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;]</span></code></pre><p>위 예제에서 <code>numbers</code> 배열의 각 숫자를 문자열로 변환하여 새로운 배열 <code>strings</code>를 생성합니다.</p><h2 id="reduce-메서드"><a href="#reduce-메서드" class="headerlink" title="reduce 메서드"></a>reduce 메서드</h2><p><code>reduce</code> 메서드는 배열의 각 요소에 대해 함수를 실행하고, 그 결과를 누적하여 하나의 값으로 반환합니다. 이는 상자 안의 모든 물건을 합쳐서 하나의 결과를 만드는 것과 같습니다.</p><h3 id="reduce-기본-사용법"><a href="#reduce-기본-사용법" class="headerlink" title="reduce 기본 사용법"></a>reduce 기본 사용법</h3><p><code>reduce</code> 메서드는 두 가지 매개변수를 받는 콜백 함수와 초기값을 사용하여 배열을 축약합니다.</p><pre><code class="highlight javascript"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];<span class="keyword">let</span> sum = numbers.<span class="title function_">reduce</span>(<span class="function">(<span class="params">total, number</span>) =&gt;</span> total + number, <span class="number">0</span>);<span class="variable language_">console</span>.<span class="title function_">log</span>(sum); <span class="comment">// 출력: 15</span></code></pre><p>위 예제에서 <code>numbers</code> 배열의 각 요소를 더하여 총합을 계산합니다. 초기값은 0이며, <code>total</code>은 누적된 값, <code>number</code>는 현재 요소입니다.</p><h3 id="예제-배열의-최대값-구하기"><a href="#예제-배열의-최대값-구하기" class="headerlink" title="예제: 배열의 최대값 구하기"></a>예제: 배열의 최대값 구하기</h3><p><code>reduce</code> 메서드를 사용하여 배열의 최대값을 구할 수 있습니다.</p><pre><code class="highlight javascript"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];<span class="keyword">let</span> max = numbers.<span class="title function_">reduce</span>(  <span class="function">(<span class="params">max, number</span>) =&gt;</span> (number &gt; max ? number : max),  numbers[<span class="number">0</span>]);<span class="variable language_">console</span>.<span class="title function_">log</span>(max); <span class="comment">// 출력: 5</span></code></pre><p>위 예제에서 <code>numbers</code> 배열의 각 요소를 비교하여 최대값을 찾습니다.</p><h3 id="예제-배열의-객체-속성-합계-구하기"><a href="#예제-배열의-객체-속성-합계-구하기" class="headerlink" title="예제: 배열의 객체 속성 합계 구하기"></a>예제: 배열의 객체 속성 합계 구하기</h3><p><code>reduce</code> 메서드는 배열의 객체 속성 값을 합산하는 데도 사용할 수 있습니다.</p><pre><code class="highlight javascript"><span class="keyword">let</span> products = [  &#123; <span class="attr">name</span>: <span class="string">&quot;Laptop&quot;</span>, <span class="attr">price</span>: <span class="number">1000</span> &#125;,  &#123; <span class="attr">name</span>: <span class="string">&quot;Phone&quot;</span>, <span class="attr">price</span>: <span class="number">500</span> &#125;,  &#123; <span class="attr">name</span>: <span class="string">&quot;Tablet&quot;</span>, <span class="attr">price</span>: <span class="number">700</span> &#125;,];<span class="keyword">let</span> totalCost = products.<span class="title function_">reduce</span>(<span class="function">(<span class="params">total, product</span>) =&gt;</span> total + product.<span class="property">price</span>, <span class="number">0</span>);<span class="variable language_">console</span>.<span class="title function_">log</span>(totalCost); <span class="comment">// 출력: 2200</span></code></pre><p>위 예제에서 <code>products</code> 배열의 각 객체의 <code>price</code> 속성을 더하여 총 가격을 계산합니다.</p><h2 id="요약"><a href="#요약" class="headerlink" title="요약"></a>요약</h2><ul><li><code>map</code> 메서드: 배열의 각 요소를 변환하여 새로운 배열을 만듭니다.<ul><li>예제: 각 요소를 2배로 변환, 문자열 길이 구하기, 숫자를 문자열로 변환</li></ul></li><li><code>reduce</code> 메서드: 배열의 각 요소를 축약하여 하나의 값으로 만듭니다.<ul><li>예제: 배열의 합계 구하기, 최대값 구하기, 객체 속성 합계 구하기</li></ul></li></ul><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 JavaScript의 <code>map</code>과 <code>reduce</code> 메서드에 대해 알아보았습니다. 이 메서드들을 이해하고 적절하게 사용하는 것은 배열을 효율적으로 조작하는 데 매우 중요합니다. 다음 시간에는 더 흥미로운 주제로 찾아오겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> JS_기본기 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 비동기 프로그래밍 (콜백, 프로미스)</title>
      <link href="/javascript/basic/10/"/>
      <url>/javascript/basic/10/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-비동기-프로그래밍-콜백-프로미스"><a href="#JavaScript-비동기-프로그래밍-콜백-프로미스" class="headerlink" title="JavaScript 비동기 프로그래밍 (콜백, 프로미스)"></a>JavaScript 비동기 프로그래밍 (콜백, 프로미스)</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 JavaScript 비동기 프로그래밍에 대해 알아보겠습니다. 비동기 프로그래밍은 시간이 오래 걸리는 작업을 블로킹 없이 처리할 수 있게 해줍니다. 이는 웹 애플리케이션이 빠르고 반응성 있게 작동하도록 하는 데 중요합니다.</p><h2 id="비동기-프로그래밍-개요"><a href="#비동기-프로그래밍-개요" class="headerlink" title="비동기 프로그래밍 개요"></a>비동기 프로그래밍 개요</h2><p>비동기 프로그래밍은 주어진 작업이 완료될 때까지 기다리지 않고 다음 작업을 수행할 수 있도록 합니다. 이는 마치 요리사가 오븐에 음식을 넣고 다른 요리를 준비하는 것과 비슷합니다. JavaScript에서는 주로 콜백과 프로미스를 사용하여 비동기 작업을 처리합니다.</p><h2 id="콜백"><a href="#콜백" class="headerlink" title="콜백"></a>콜백</h2><p>콜백 함수는 다른 함수에 인수로 전달되어, 특정 작업이 완료된 후 호출됩니다. 이는 마치 약속된 시간이 되면 울리는 알람과 같습니다.</p><h3 id="콜백-예제"><a href="#콜백-예제" class="headerlink" title="콜백 예제"></a>콜백 예제</h3><pre><code class="highlight javascript"><span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params">callback</span>) &#123;  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;    <span class="keyword">let</span> data = <span class="string">&quot;Hello, World!&quot;</span>;    <span class="title function_">callback</span>(data);  &#125;, <span class="number">1000</span>);&#125;<span class="title function_">fetchData</span>(<span class="keyword">function</span> (<span class="params">data</span>) &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(data); <span class="comment">// 출력: Hello, World!</span>&#125;);</code></pre><p>위 예제에서 <code>fetchData</code> 함수는 데이터를 가져오는 데 1초가 걸리며, 작업이 완료되면 콜백 함수를 호출하여 결과를 전달합니다.</p><h3 id="콜백의-단점-콜백-헬"><a href="#콜백의-단점-콜백-헬" class="headerlink" title="콜백의 단점: 콜백 헬"></a>콜백의 단점: 콜백 헬</h3><p>콜백 함수는 간단한 비동기 작업에는 유용하지만, 여러 비동기 작업을 중첩해서 사용할 경우 코드가 복잡해지고 가독성이 떨어집니다. 이를 콜백 헬(callback hell)이라고 합니다.</p><pre><code class="highlight javascript"><span class="title function_">doSomething</span>(<span class="keyword">function</span> (<span class="params">result</span>) &#123;  <span class="title function_">doSomethingElse</span>(result, <span class="keyword">function</span> (<span class="params">newResult</span>) &#123;    <span class="title function_">doAnotherThing</span>(newResult, <span class="keyword">function</span> (<span class="params">finalResult</span>) &#123;      <span class="variable language_">console</span>.<span class="title function_">log</span>(finalResult);    &#125;);  &#125;);&#125;);</code></pre><p>위 코드는 콜백 헬의 예로, 함수가 중첩될수록 코드가 읽기 어렵고 유지보수가 힘들어집니다.</p><h2 id="프로미스"><a href="#프로미스" class="headerlink" title="프로미스"></a>프로미스</h2><p>프로미스(Promise)는 비동기 작업의 완료 또는 실패를 나타내는 객체입니다. 프로미스는 콜백 헬을 해결하기 위한 구조화된 방법을 제공합니다. 프로미스는 <code>then</code>과 <code>catch</code> 메서드를 사용하여 결과를 처리할 수 있습니다.</p><h3 id="프로미스-예제"><a href="#프로미스-예제" class="headerlink" title="프로미스 예제"></a>프로미스 예제</h3><pre><code class="highlight javascript"><span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params"></span>) &#123;  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;      <span class="keyword">let</span> data = <span class="string">&quot;Hello, World!&quot;</span>;      <span class="title function_">resolve</span>(data);    &#125;, <span class="number">1000</span>);  &#125;);&#125;<span class="title function_">fetchData</span>()  .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(data); <span class="comment">// 출력: Hello, World!</span>  &#125;)  .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">error</span>(error);  &#125;);</code></pre><p>위 예제에서 <code>fetchData</code> 함수는 프로미스를 반환하며, 1초 후에 데이터를 성공적으로 가져오면 <code>resolve</code>를 호출하여 프로미스를 이행(fulfilled)합니다. <code>then</code> 메서드는 프로미스가 이행되었을 때 실행될 콜백을 등록합니다.</p><h3 id="프로미스-체이닝"><a href="#프로미스-체이닝" class="headerlink" title="프로미스 체이닝"></a>프로미스 체이닝</h3><p>프로미스를 사용하면 여러 비동기 작업을 순차적으로 실행할 수 있습니다. 이를 프로미스 체이닝(promise chaining)이라고 합니다.</p><pre><code class="highlight javascript"><span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params"></span>) &#123;  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;      <span class="keyword">let</span> data = <span class="string">&quot;Hello, World!&quot;</span>;      <span class="title function_">resolve</span>(data);    &#125;, <span class="number">1000</span>);  &#125;);&#125;<span class="title function_">fetchData</span>()  .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(data); <span class="comment">// 출력: Hello, World!</span>    <span class="keyword">return</span> data + <span class="string">&quot; How are you?&quot;</span>;  &#125;)  .<span class="title function_">then</span>(<span class="function">(<span class="params">newData</span>) =&gt;</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(newData); <span class="comment">// 출력: Hello, World! How are you?</span>  &#125;)  .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">error</span>(error);  &#125;);</code></pre><p>위 예제에서 첫 번째 <code>then</code> 메서드는 데이터를 받아 처리하고, 새로운 데이터를 반환하여 두 번째 <code>then</code> 메서드에서 이를 처리합니다.</p><h2 id="요약"><a href="#요약" class="headerlink" title="요약"></a>요약</h2><ul><li>비동기 프로그래밍: 시간이 오래 걸리는 작업을 블로킹 없이 처리할 수 있게 해줍니다.</li><li>콜백: 다른 함수에 인수로 전달되어, 특정 작업이 완료된 후 호출됩니다.</li><li>콜백 헬: 여러 비동기 작업을 중첩해서 사용할 경우 코드가 복잡해지는 문제입니다.</li><li>프로미스: 비동기 작업의 완료 또는 실패를 나타내는 객체입니다.</li><li>프로미스 체이닝: 여러 비동기 작업을 순차적으로 실행할 수 있는 구조화된 방법입니다.</li></ul><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 JavaScript의 비동기 프로그래밍에 대해 알아보았습니다. 비동기 프로그래밍을 이해하고 적절하게 사용하는 것은 웹 애플리케이션의 성능과 반응성을 높이는 데 매우 중요합니다. 다음 시간에는 더 흥미로운 주제로 찾아오겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> JS_기본기 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript DOM 조작</title>
      <link href="/javascript/basic/9/"/>
      <url>/javascript/basic/9/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-DOM-조작"><a href="#JavaScript-DOM-조작" class="headerlink" title="JavaScript DOM 조작"></a>JavaScript DOM 조작</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 JavaScript DOM 조작에 대해 알아보겠습니다. DOM(Document Object Model)은 웹 페이지의 구조를 나타내며, JavaScript를 사용하여 HTML 요소를 조작할 수 있게 해줍니다. 이는 웹 페이지를 동적으로 변경하고 사용자와 상호작용할 수 있게 합니다.</p><h2 id="DOM-Document-Object-Model-개요"><a href="#DOM-Document-Object-Model-개요" class="headerlink" title="DOM(Document Object Model) 개요"></a>DOM(Document Object Model) 개요</h2><p>DOM은 HTML 문서의 구조화된 표현으로, 각 요소를 객체로 나타냅니다. 이를 통해 JavaScript를 사용하여 HTML 요소를 선택, 생성, 수정, 삭제할 수 있습니다. DOM은 웹 페이지의 ‘뼈대’와 같으며, JavaScript는 이 뼈대를 조작하는 도구입니다.</p><h2 id="요소-선택"><a href="#요소-선택" class="headerlink" title="요소 선택"></a>요소 선택</h2><p>JavaScript에서 DOM 요소를 선택하는 방법에는 여러 가지가 있습니다. 각 방법은 특정 조건에 맞는 요소를 선택할 수 있게 해줍니다.</p><h3 id="getElementById"><a href="#getElementById" class="headerlink" title="getElementById"></a>getElementById</h3><p><code>getElementById</code>는 ID를 사용하여 요소를 선택합니다. 이는 특정 이름표를 가진 하나의 물건을 찾는 것과 비슷합니다.</p><pre><code class="highlight javascript"><span class="keyword">let</span> element = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myElement&quot;</span>);</code></pre><h3 id="getElementsByClassName"><a href="#getElementsByClassName" class="headerlink" title="getElementsByClassName"></a>getElementsByClassName</h3><p><code>getElementsByClassName</code>은 클래스를 사용하여 요소를 선택합니다. 이는 같은 종류의 물건을 모두 찾는 것과 같습니다.</p><pre><code class="highlight javascript"><span class="keyword">let</span> elements = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;myClass&quot;</span>);</code></pre><h3 id="querySelector"><a href="#querySelector" class="headerlink" title="querySelector"></a>querySelector</h3><p><code>querySelector</code>는 CSS 선택자를 사용하여 요소를 선택합니다. 이는 특정 스타일을 가진 첫 번째 물건을 찾는 것과 비슷합니다.</p><pre><code class="highlight javascript"><span class="keyword">let</span> element = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.myClass&quot;</span>);</code></pre><h3 id="querySelectorAll"><a href="#querySelectorAll" class="headerlink" title="querySelectorAll"></a>querySelectorAll</h3><p><code>querySelectorAll</code>은 CSS 선택자를 사용하여 모든 일치하는 요소를 선택합니다. 이는 특정 스타일을 가진 모든 물건을 찾는 것과 같습니다.</p><pre><code class="highlight javascript"><span class="keyword">let</span> elements = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;.myClass&quot;</span>);</code></pre><h2 id="요소-생성-및-추가"><a href="#요소-생성-및-추가" class="headerlink" title="요소 생성 및 추가"></a>요소 생성 및 추가</h2><p>JavaScript를 사용하여 새로운 요소를 생성하고 DOM에 추가할 수 있습니다. 이는 새로운 물건을 만들어 방에 놓는 것과 비슷합니다.</p><pre><code class="highlight javascript"><span class="keyword">let</span> newElement = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);newElement.<span class="property">textContent</span> = <span class="string">&quot;Hello, World!&quot;</span>;<span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(newElement);</code></pre><p>위 코드에서는 새로운 <code>div</code> 요소를 생성하고, 그 안에 “Hello, World!”라는 텍스트를 추가한 후, <code>body</code> 요소의 자식으로 추가합니다.</p><h2 id="요소-삭제"><a href="#요소-삭제" class="headerlink" title="요소 삭제"></a>요소 삭제</h2><p>DOM에서 요소를 제거하려면 <code>removeChild</code> 메서드를 사용합니다. 이는 방에서 물건을 꺼내는 것과 같습니다.</p><pre><code class="highlight javascript"><span class="keyword">let</span> element = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myElement&quot;</span>);element.<span class="property">parentNode</span>.<span class="title function_">removeChild</span>(element);</code></pre><p>위 코드에서는 <code>myElement</code> ID를 가진 요소를 찾아서, 그 부모 요소로부터 제거합니다.</p><h2 id="요소-수정"><a href="#요소-수정" class="headerlink" title="요소 수정"></a>요소 수정</h2><p>기존 요소의 내용을 수정하거나 속성을 변경할 수 있습니다. 이는 방 안의 물건을 재배치하거나 이름표를 바꾸는 것과 비슷합니다.</p><h3 id="텍스트-내용-수정"><a href="#텍스트-내용-수정" class="headerlink" title="텍스트 내용 수정"></a>텍스트 내용 수정</h3><p>요소의 텍스트 내용을 변경하려면 <code>textContent</code> 또는 <code>innerHTML</code> 속성을 사용합니다.</p><pre><code class="highlight javascript">element.<span class="property">textContent</span> = <span class="string">&quot;New content&quot;</span>;</code></pre><h3 id="속성-수정"><a href="#속성-수정" class="headerlink" title="속성 수정"></a>속성 수정</h3><p>요소의 속성을 변경하려면 <code>setAttribute</code> 메서드를 사용합니다.</p><pre><code class="highlight javascript">element.<span class="title function_">setAttribute</span>(<span class="string">&quot;class&quot;</span>, <span class="string">&quot;newClass&quot;</span>);</code></pre><p>위 코드에서는 <code>myElement</code> 요소의 클래스를 <code>newClass</code>로 변경합니다.</p><h2 id="이벤트-처리"><a href="#이벤트-처리" class="headerlink" title="이벤트 처리"></a>이벤트 처리</h2><p>DOM 요소에 이벤트 리스너를 추가하여 사용자와 상호작용할 수 있습니다. 이는 사용자가 물건을 만졌을 때 어떤 일이 일어나게 하는 것과 같습니다.</p><pre><code class="highlight javascript">element.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;  <span class="title function_">alert</span>(<span class="string">&quot;Element clicked!&quot;</span>);&#125;);</code></pre><p>위 코드에서는 사용자가 요소를 클릭할 때 경고창이 표시됩니다.</p><h2 id="요약"><a href="#요약" class="headerlink" title="요약"></a>요약</h2><ul><li>DOM: HTML 문서의 구조화된 표현으로, 각 요소를 객체로 나타냅니다.</li><li>요소 선택: <code>getElementById</code>, <code>getElementsByClassName</code>, <code>querySelector</code>, <code>querySelectorAll</code>을 사용하여 요소를 선택합니다.</li><li>요소 생성 및 추가: <code>createElement</code>와 <code>appendChild</code>를 사용하여 새로운 요소를 생성하고 추가합니다.</li><li>요소 삭제: <code>removeChild</code>를 사용하여 요소를 제거합니다.</li><li>요소 수정: <code>textContent</code>와 <code>setAttribute</code>를 사용하여 요소의 내용을 수정하고 속성을 변경합니다.</li><li>이벤트 처리: <code>addEventListener</code>를 사용하여 요소에 이벤트 리스너를 추가합니다.</li></ul><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 JavaScript의 DOM 조작에 대해 알아보았습니다. DOM을 이해하고 적절하게 조작하는 것은 동적이고 상호작용하는 웹 페이지를 만드는 데 매우 중요합니다. 다음 시간에는 더 흥미로운 주제로 찾아오겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> JS_기본기 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 이벤트 처리</title>
      <link href="/javascript/basic/8/"/>
      <url>/javascript/basic/8/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-이벤트-처리"><a href="#JavaScript-이벤트-처리" class="headerlink" title="JavaScript 이벤트 처리"></a>JavaScript 이벤트 처리</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 JavaScript 이벤트 처리에 대해 알아보겠습니다. 이벤트 처리는 웹 페이지에서 사용자와의 상호작용을 가능하게 하는 중요한 요소입니다.</p><h2 id="이벤트-리스너-등록"><a href="#이벤트-리스너-등록" class="headerlink" title="이벤트 리스너 등록"></a>이벤트 리스너 등록</h2><p>JavaScript에서는 이벤트 리스너를 사용하여 사용자 입력에 반응할 수 있습니다. 이벤트 리스너는 마치 누군가가 벨을 누르면 문을 열어주는 경비원과 같습니다.</p><h3 id="addEventListener"><a href="#addEventListener" class="headerlink" title="addEventListener"></a>addEventListener</h3><p><code>addEventListener</code> 메서드를 사용하여 이벤트 리스너를 등록할 수 있습니다. 이는 특정 요소에서 특정 이벤트가 발생했을 때 실행될 코드를 지정하는 방법입니다.</p><pre><code class="highlight javascript"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myButton&quot;</span>).<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;  <span class="title function_">alert</span>(<span class="string">&quot;Button clicked!&quot;</span>);&#125;);</code></pre><p>위 코드에서는 <code>myButton</code>이라는 ID를 가진 버튼을 클릭할 때마다 “Button clicked!”라는 경고창이 표시됩니다.</p><h2 id="이벤트-객체"><a href="#이벤트-객체" class="headerlink" title="이벤트 객체"></a>이벤트 객체</h2><p>이벤트가 발생하면 이벤트 객체가 생성되어 이벤트 핸들러에 전달됩니다. 이벤트 객체는 이벤트에 대한 다양한 정보를 담고 있습니다. 이는 마치 경비원이 누가 벨을 눌렀는지, 언제 눌렀는지 등의 정보를 알려주는 것과 같습니다.</p><pre><code class="highlight javascript"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myButton&quot;</span>).<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Event type:&quot;</span>, event.<span class="property">type</span>); <span class="comment">// 출력: Event type: click</span>  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Button ID:&quot;</span>, event.<span class="property">target</span>.<span class="property">id</span>); <span class="comment">// 출력: Button ID: myButton</span>&#125;);</code></pre><p>위 코드에서는 클릭 이벤트가 발생할 때 이벤트 객체의 타입과 대상 요소의 ID를 출력합니다.</p><h2 id="이벤트-전파"><a href="#이벤트-전파" class="headerlink" title="이벤트 전파"></a>이벤트 전파</h2><p>이벤트는 발생한 요소에서 시작하여 상위 요소로 전파될 수 있습니다. 이는 마치 물결이 퍼져나가는 것과 비슷합니다. 이벤트 전파에는 두 가지 단계가 있습니다: 버블링과 캡처링.</p><h3 id="이벤트-버블링"><a href="#이벤트-버블링" class="headerlink" title="이벤트 버블링"></a>이벤트 버블링</h3><p>이벤트 버블링은 이벤트가 가장 구체적인 요소(이벤트가 발생한 요소)에서 시작하여 상위 요소로 전파되는 것입니다. 이는 마치 물결이 돌을 던진 곳에서 바깥으로 퍼져나가는 것과 같습니다.</p><h3 id="이벤트-캡처링"><a href="#이벤트-캡처링" class="headerlink" title="이벤트 캡처링"></a>이벤트 캡처링</h3><p>이벤트 캡처링은 이벤트가 상위 요소에서 시작하여 가장 구체적인 요소로 전파되는 것입니다. 이는 마치 바깥쪽에서 시작하여 돌을 던진 곳으로 물결이 몰려오는 것과 같습니다.</p><pre><code class="highlight javascript"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;parent&quot;</span>).<span class="title function_">addEventListener</span>(  <span class="string">&quot;click&quot;</span>,  <span class="keyword">function</span> (<span class="params"></span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Parent clicked&quot;</span>);  &#125;,  <span class="literal">true</span>); <span class="comment">// 캡처링 단계에서 이벤트 리스너 등록</span><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;child&quot;</span>).<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Child clicked&quot;</span>);&#125;);</code></pre><p>위 코드에서는 부모 요소와 자식 요소에 클릭 이벤트 리스너를 등록합니다. <code>true</code>를 사용하여 부모 요소의 이벤트 리스너가 캡처링 단계에서 실행되도록 합니다.</p><h3 id="이벤트-전파-방지"><a href="#이벤트-전파-방지" class="headerlink" title="이벤트 전파 방지"></a>이벤트 전파 방지</h3><p>이벤트 전파를 방지하려면 <code>stopPropagation</code> 메서드를 사용합니다. 이는 이벤트가 상위 요소로 전파되지 않도록 막는 방법입니다.</p><pre><code class="highlight javascript"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myButton&quot;</span>).<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;  event.<span class="title function_">stopPropagation</span>();  <span class="title function_">alert</span>(<span class="string">&quot;Button clicked, propagation stopped.&quot;</span>);&#125;);</code></pre><p>위 코드에서는 버튼을 클릭할 때 이벤트 전파를 중지하여 상위 요소로의 전파를 막습니다.</p><h2 id="요약"><a href="#요약" class="headerlink" title="요약"></a>요약</h2><ul><li><code>addEventListener</code>: 특정 요소에서 특정 이벤트가 발생했을 때 실행될 코드를 지정합니다.</li><li>이벤트 객체: 이벤트에 대한 다양한 정보를 담고 있습니다.</li><li>이벤트 버블링: 이벤트가 가장 구체적인 요소에서 시작하여 상위 요소로 전파됩니다.</li><li>이벤트 캡처링: 이벤트가 상위 요소에서 시작하여 가장 구체적인 요소로 전파됩니다.</li><li><code>stopPropagation</code>: 이벤트 전파를 중지하여 상위 요소로의 전파를 막습니다.</li></ul><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 JavaScript의 이벤트 처리에 대해 알아보았습니다. 이벤트 처리를 이해하고 적절하게 사용하는 것은 웹 페이지에서 사용자와 상호작용하는 데 매우 중요합니다. 다음 시간에는 더 흥미로운 주제로 찾아오겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> JS_기본기 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 객체와 객체 프로퍼티</title>
      <link href="/javascript/basic/7/"/>
      <url>/javascript/basic/7/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-객체와-객체-프로퍼티"><a href="#JavaScript-객체와-객체-프로퍼티" class="headerlink" title="JavaScript 객체와 객체 프로퍼티"></a>JavaScript 객체와 객체 프로퍼티</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 JavaScript 객체와 객체 프로퍼티에 대해 알아보겠습니다. 객체는 여러 데이터를 하나의 단위로 묶어 관리할 수 있는 강력한 자료 구조입니다.</p><h2 id="객체"><a href="#객체" class="headerlink" title="객체"></a>객체</h2><p>객체는 키-값 쌍으로 구성된 데이터를 저장할 수 있는 자료 구조입니다. 객체는 마치 다양한 정보를 담을 수 있는 가방과 같습니다. 각 키는 이름표처럼, 각 값은 이름표에 해당하는 물건처럼 생각할 수 있습니다.</p><pre><code class="highlight javascript"><span class="keyword">let</span> person = &#123;  <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,  <span class="attr">age</span>: <span class="number">30</span>,  <span class="attr">job</span>: <span class="string">&quot;developer&quot;</span>,&#125;;</code></pre><p>위 코드에서 <code>person</code> 객체는 이름, 나이, 직업 정보를 포함하고 있습니다. 키는 <code>name</code>, <code>age</code>, <code>job</code>이고, 값은 각각 “John”, 30, “developer”입니다.</p><h2 id="객체-프로퍼티-접근"><a href="#객체-프로퍼티-접근" class="headerlink" title="객체 프로퍼티 접근"></a>객체 프로퍼티 접근</h2><p>객체의 프로퍼티에 접근하는 방법에는 두 가지가 있습니다. 이를 통해 객체의 데이터를 읽거나 수정할 수 있습니다.</p><h3 id="점-표기법"><a href="#점-표기법" class="headerlink" title="점 표기법"></a>점 표기법</h3><p>점 표기법은 키의 이름을 점(.)으로 연결하여 접근하는 방법입니다. 이는 특정 물건을 이름표를 통해 찾는 것과 비슷합니다.</p><pre><code class="highlight javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>); <span class="comment">// 출력: John</span><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">age</span>); <span class="comment">// 출력: 30</span></code></pre><h3 id="대괄호-표기법"><a href="#대괄호-표기법" class="headerlink" title="대괄호 표기법"></a>대괄호 표기법</h3><p>대괄호 표기법은 키의 이름을 문자열로 대괄호([]) 안에 넣어 접근하는 방법입니다. 이는 물건의 이름표를 따옴표로 감싸서 찾는 것과 비슷합니다. 이 방법은 키의 이름에 공백이나 특수문자가 포함된 경우에도 사용할 수 있습니다.</p><pre><code class="highlight javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(person[<span class="string">&quot;name&quot;</span>]); <span class="comment">// 출력: John</span><span class="variable language_">console</span>.<span class="title function_">log</span>(person[<span class="string">&quot;age&quot;</span>]); <span class="comment">// 출력: 30</span></code></pre><h2 id="객체-프로퍼티-추가-및-삭제"><a href="#객체-프로퍼티-추가-및-삭제" class="headerlink" title="객체 프로퍼티 추가 및 삭제"></a>객체 프로퍼티 추가 및 삭제</h2><p>객체에 새로운 프로퍼티를 추가하거나 기존 프로퍼티를 삭제할 수 있습니다. 이는 가방에 새로운 물건을 넣거나, 기존 물건을 꺼내는 것과 비슷합니다.</p><h3 id="프로퍼티-추가"><a href="#프로퍼티-추가" class="headerlink" title="프로퍼티 추가"></a>프로퍼티 추가</h3><p>새로운 프로퍼티를 추가하려면 점 표기법이나 대괄호 표기법을 사용하여 객체에 값을 할당합니다.</p><pre><code class="highlight javascript">person.<span class="property">city</span> = <span class="string">&quot;New York&quot;</span>;<span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">city</span>); <span class="comment">// 출력: New York</span></code></pre><p>위 코드에서는 <code>person</code> 객체에 <code>city</code> 프로퍼티를 추가하고 값을 “New York”으로 설정합니다.</p><h3 id="프로퍼티-삭제"><a href="#프로퍼티-삭제" class="headerlink" title="프로퍼티 삭제"></a>프로퍼티 삭제</h3><p>기존 프로퍼티를 삭제하려면 <code>delete</code> 연산자를 사용합니다.</p><pre><code class="highlight javascript"><span class="keyword">delete</span> person.<span class="property">job</span>;<span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">job</span>); <span class="comment">// 출력: undefined</span></code></pre><p>위 코드에서는 <code>person</code> 객체에서 <code>job</code> 프로퍼티를 삭제합니다. 삭제된 프로퍼티에 접근하려고 하면 <code>undefined</code>가 반환됩니다.</p><h2 id="객체와-메서드"><a href="#객체와-메서드" class="headerlink" title="객체와 메서드"></a>객체와 메서드</h2><p>객체는 데이터뿐만 아니라 함수를 프로퍼티로 가질 수 있습니다. 이러한 함수를 객체의 메서드(method)라고 합니다. 이는 가방 안에 기능이 포함된 물건이 있는 것과 같습니다.</p><pre><code class="highlight javascript"><span class="keyword">let</span> person = &#123;  <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,  <span class="attr">age</span>: <span class="number">30</span>,  <span class="attr">job</span>: <span class="string">&quot;developer&quot;</span>,  <span class="attr">greet</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;    <span class="keyword">return</span> <span class="string">`Hello, my name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>.`</span>;  &#125;,&#125;;<span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="title function_">greet</span>()); <span class="comment">// 출력: Hello, my name is John.</span></code></pre><p>위 코드에서는 <code>greet</code>라는 메서드를 가진 <code>person</code> 객체를 정의합니다. <code>greet</code> 메서드는 객체의 다른 프로퍼티를 사용할 수 있습니다.</p><h2 id="요약"><a href="#요약" class="headerlink" title="요약"></a>요약</h2><ul><li>객체: 키-값 쌍으로 구성된 데이터를 저장할 수 있는 자료 구조입니다.</li><li>점 표기법: 점(.)으로 키를 연결하여 객체의 프로퍼티에 접근합니다.</li><li>대괄호 표기법: 키를 문자열로 대괄호([]) 안에 넣어 객체의 프로퍼티에 접근합니다.</li><li>프로퍼티 추가: 객체에 새로운 프로퍼티를 추가합니다.</li><li>프로퍼티 삭제: 객체에서 기존 프로퍼티를 삭제합니다.</li><li>메서드: 객체에 포함된 함수로, 객체의 프로퍼티를 사용할 수 있습니다.</li></ul><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 JavaScript 객체와 객체 프로퍼티에 대해 알아보았습니다. 객체를 이해하고 적절하게 사용하는 것은 복잡한 데이터를 관리하고 조작하는 데 매우 중요합니다. 다음 시간에는 더 흥미로운 주제로 찾아오겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> JS_기본기 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 배열과 배열 메서드</title>
      <link href="/javascript/basic/6/"/>
      <url>/javascript/basic/6/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-배열과-배열-메서드"><a href="#JavaScript-배열과-배열-메서드" class="headerlink" title="JavaScript 배열과 배열 메서드"></a>JavaScript 배열과 배열 메서드</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 JavaScript 배열과 배열 메서드에 대해 알아보겠습니다. 배열은 여러 값을 하나의 변수에 저장할 수 있는 자료 구조로, 데이터를 효율적으로 관리하고 조작할 수 있게 해줍니다.</p><h2 id="배열"><a href="#배열" class="headerlink" title="배열"></a>배열</h2><p>배열은 여러 값을 하나의 변수에 저장할 수 있는 자료 구조입니다. 배열은 마치 여러 개의 상자가 일렬로 나열된 것과 같으며, 각 상자에는 인덱스를 통해 접근할 수 있습니다.</p><pre><code class="highlight javascript"><span class="keyword">let</span> fruits = [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>];<span class="variable language_">console</span>.<span class="title function_">log</span>(fruits[<span class="number">0</span>]); <span class="comment">// 출력: apple</span></code></pre><p>위 코드에서는 <code>fruits</code> 배열이 세 개의 과일 이름을 포함하고 있으며, <code>fruits[0]</code>을 통해 첫 번째 요소인 “apple”에 접근할 수 있습니다.</p><h2 id="배열-메서드"><a href="#배열-메서드" class="headerlink" title="배열 메서드"></a>배열 메서드</h2><p>JavaScript는 배열을 조작할 수 있는 다양한 메서드를 제공합니다. 이러한 메서드를 사용하면 배열의 요소를 추가, 제거, 탐색 및 변환할 수 있습니다.</p><h3 id="push"><a href="#push" class="headerlink" title="push"></a>push</h3><p><code>push</code> 메서드는 배열의 끝에 요소를 추가합니다. 이는 새로운 물건을 상자 맨 뒤에 추가하는 것과 같습니다.</p><pre><code class="highlight javascript">fruits.<span class="title function_">push</span>(<span class="string">&quot;orange&quot;</span>);<span class="variable language_">console</span>.<span class="title function_">log</span>(fruits); <span class="comment">// 출력: [&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;, &quot;orange&quot;]</span></code></pre><p>위 코드에서는 “orange”를 배열의 끝에 추가합니다.</p><h3 id="pop"><a href="#pop" class="headerlink" title="pop"></a>pop</h3><p><code>pop</code> 메서드는 배열의 끝에서 요소를 제거하고 반환합니다. 이는 상자 맨 뒤에서 물건을 꺼내는 것과 같습니다.</p><pre><code class="highlight javascript"><span class="keyword">let</span> fruit = fruits.<span class="title function_">pop</span>();<span class="variable language_">console</span>.<span class="title function_">log</span>(fruit); <span class="comment">// 출력: orange</span><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits); <span class="comment">// 출력: [&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;]</span></code></pre><p>위 코드에서는 “orange”를 배열에서 제거하고, 제거된 요소를 반환합니다.</p><h3 id="shift"><a href="#shift" class="headerlink" title="shift"></a>shift</h3><p><code>shift</code> 메서드는 배열의 첫 번째 요소를 제거하고 반환합니다. 이는 상자 맨 앞에서 물건을 꺼내는 것과 같습니다.</p><pre><code class="highlight javascript">fruit = fruits.<span class="title function_">shift</span>();<span class="variable language_">console</span>.<span class="title function_">log</span>(fruit); <span class="comment">// 출력: apple</span><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits); <span class="comment">// 출력: [&quot;banana&quot;, &quot;cherry&quot;]</span></code></pre><p>위 코드에서는 “apple”을 배열에서 제거하고, 제거된 요소를 반환합니다.</p><h3 id="unshift"><a href="#unshift" class="headerlink" title="unshift"></a>unshift</h3><p><code>unshift</code> 메서드는 배열의 앞에 요소를 추가합니다. 이는 새로운 물건을 상자 맨 앞에 추가하는 것과 같습니다.</p><pre><code class="highlight javascript">fruits.<span class="title function_">unshift</span>(<span class="string">&quot;strawberry&quot;</span>);<span class="variable language_">console</span>.<span class="title function_">log</span>(fruits); <span class="comment">// 출력: [&quot;strawberry&quot;, &quot;banana&quot;, &quot;cherry&quot;]</span></code></pre><p>위 코드에서는 “strawberry”를 배열의 앞에 추가합니다.</p><h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h3><p><code>forEach</code> 메서드는 배열의 각 요소에 대해 함수를 실행합니다. 이는 상자 안의 모든 물건을 하나씩 꺼내어 처리하는 것과 같습니다.</p><pre><code class="highlight javascript">fruits.<span class="title function_">forEach</span>(<span class="function">(<span class="params">fruit</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(fruit));</code></pre><p>위 코드에서는 배열의 각 요소를 순회하면서 해당 요소를 출력합니다.</p><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p><code>map</code> 메서드는 배열의 각 요소에 대해 함수를 실행하고, 그 결과를 새로운 배열로 반환합니다. 이는 상자 안의 모든 물건을 변형하여 새로운 상자를 만드는 것과 같습니다.</p><pre><code class="highlight javascript"><span class="keyword">let</span> lengths = fruits.<span class="title function_">map</span>(<span class="function">(<span class="params">fruit</span>) =&gt;</span> fruit.<span class="property">length</span>);<span class="variable language_">console</span>.<span class="title function_">log</span>(lengths); <span class="comment">// 출력: [10, 6, 6]</span></code></pre><p>위 코드에서는 각 과일 이름의 길이를 구하여 새로운 배열을 생성합니다.</p><h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><p><code>filter</code> 메서드는 배열의 각 요소에 대해 함수를 실행하고, 그 결과가 참인 요소들만을 모아 새로운 배열로 반환합니다. 이는 상자 안의 물건 중 필요한 것들만 골라내는 것과 같습니다.</p><pre><code class="highlight javascript"><span class="keyword">let</span> longFruits = fruits.<span class="title function_">filter</span>(<span class="function">(<span class="params">fruit</span>) =&gt;</span> fruit.<span class="property">length</span> &gt; <span class="number">6</span>);<span class="variable language_">console</span>.<span class="title function_">log</span>(longFruits); <span class="comment">// 출력: [&quot;strawberry&quot;, &quot;cherry&quot;]</span></code></pre><p>위 코드에서는 이름이 6글자 이상인 과일만을 새로운 배열로 생성합니다.</p><h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h3><p><code>reduce</code> 메서드는 배열의 각 요소에 대해 함수를 실행하고, 그 결과를 누적하여 하나의 값으로 반환합니다. 이는 상자 안의 모든 물건을 합쳐서 하나의 결과를 만드는 것과 같습니다.</p><pre><code class="highlight javascript"><span class="keyword">let</span> totalLength = fruits.<span class="title function_">reduce</span>(<span class="function">(<span class="params">sum, fruit</span>) =&gt;</span> sum + fruit.<span class="property">length</span>, <span class="number">0</span>);<span class="variable language_">console</span>.<span class="title function_">log</span>(totalLength); <span class="comment">// 출력: 22</span></code></pre><p>위 코드에서는 각 과일 이름의 길이를 모두 더하여 총 길이를 구합니다.</p><h2 id="요약"><a href="#요약" class="headerlink" title="요약"></a>요약</h2><ul><li>배열: 여러 값을 하나의 변수에 저장할 수 있는 자료 구조입니다.</li><li><code>push</code>: 배열의 끝에 요소를 추가합니다.</li><li><code>pop</code>: 배열의 끝에서 요소를 제거하고 반환합니다.</li><li><code>shift</code>: 배열의 첫 번째 요소를 제거하고 반환합니다.</li><li><code>unshift</code>: 배열의 앞에 요소를 추가합니다.</li><li><code>forEach</code>: 배열의 각 요소에 대해 함수를 실행합니다.</li><li><code>map</code>: 배열의 각 요소를 변형하여 새로운 배열을 생성합니다.</li><li><code>filter</code>: 조건에 맞는 요소들만 모아 새로운 배열을 생성합니다.</li><li><code>reduce</code>: 배열의 모든 요소를 누적하여 하나의 값을 만듭니다.</li></ul><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 JavaScript 배열과 배열 메서드에 대해 알아보았습니다. 배열과 배열 메서드를 이해하고 적절하게 사용하는 것은 데이터를 효율적으로 관리하고 조작하는 데 매우 중요합니다. 다음 시간에는 더 흥미로운 주제로 찾아오겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> JS_기본기 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 함수 정의 및 호출</title>
      <link href="/javascript/basic/5/"/>
      <url>/javascript/basic/5/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-함수-정의-및-호출"><a href="#JavaScript-함수-정의-및-호출" class="headerlink" title="JavaScript 함수 정의 및 호출"></a>JavaScript 함수 정의 및 호출</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 JavaScript 함수 정의 및 호출에 대해 알아보겠습니다. 함수는 코드의 재사용성과 가독성을 높여주는 중요한 구성 요소입니다.</p><h2 id="함수-정의"><a href="#함수-정의" class="headerlink" title="함수 정의"></a>함수 정의</h2><p>JavaScript에서 함수를 정의하는 방법에는 여러 가지가 있습니다. 함수는 특정 작업을 수행하는 코드 블록이며, 입력을 받아 출력을 반환할 수 있습니다. 이를 요리법에 비유할 수 있습니다. 재료(입력)를 받아 요리(출력)를 만듭니다.</p><h3 id="함수-선언"><a href="#함수-선언" class="headerlink" title="함수 선언"></a>함수 선언</h3><p>함수 선언은 함수 이름을 지정하여 함수를 정의합니다. 이는 요리법에 이름을 붙이는 것과 같습니다.</p><pre><code class="highlight javascript"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params">name</span>) &#123;  <span class="keyword">return</span> <span class="string">`Hello, <span class="subst">$&#123;name&#125;</span>!`</span>;&#125;</code></pre><p>위 함수는 <code>name</code>이라는 매개변수를 받아 “Hello, [name]!”이라는 문자열을 반환합니다.</p><h3 id="함수-표현식"><a href="#함수-표현식" class="headerlink" title="함수 표현식"></a>함수 표현식</h3><p>함수 표현식은 변수에 함수를 할당하여 정의합니다. 이는 요리법을 책에 기록하는 것과 비슷합니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> greet = <span class="keyword">function</span> (<span class="params">name</span>) &#123;  <span class="keyword">return</span> <span class="string">`Hello, <span class="subst">$&#123;name&#125;</span>!`</span>;&#125;;</code></pre><p>함수 표현식은 변수에 할당되기 때문에 함수 이름이 없어도 됩니다.</p><h3 id="화살표-함수"><a href="#화살표-함수" class="headerlink" title="화살표 함수"></a>화살표 함수</h3><p>화살표 함수는 간결한 문법으로 함수를 정의할 수 있습니다. 이는 요리법을 간단하게 줄여 쓰는 것과 같습니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> <span class="title function_">greet</span> = (<span class="params">name</span>) =&gt; <span class="string">`Hello, <span class="subst">$&#123;name&#125;</span>!`</span>;</code></pre><p>화살표 함수는 코드가 더 짧아지고 가독성이 좋아집니다. 특히, 간단한 작업을 수행하는 함수에 유용합니다.</p><h2 id="함수-호출"><a href="#함수-호출" class="headerlink" title="함수 호출"></a>함수 호출</h2><p>정의된 함수를 호출하려면 함수 이름 뒤에 괄호를 붙입니다. 이는 요리법에 따라 실제로 요리를 만드는 것과 같습니다.</p><pre><code class="highlight javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">greet</span>(<span class="string">&quot;Alice&quot;</span>)); <span class="comment">// 출력: Hello, Alice!</span></code></pre><p>위 예제에서는 <code>greet</code> 함수를 호출하여 “Hello, Alice!”라는 결과를 출력합니다.</p><h3 id="매개변수와-인수"><a href="#매개변수와-인수" class="headerlink" title="매개변수와 인수"></a>매개변수와 인수</h3><p>함수는 매개변수(parameter)를 사용하여 입력을 받을 수 있습니다. 함수 호출 시 전달하는 값은 인수(argument)라고 합니다.</p><pre><code class="highlight javascript"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;  <span class="keyword">return</span> a + b;&#125;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">3</span>, <span class="number">4</span>)); <span class="comment">// 출력: 7</span></code></pre><p>위 예제에서 <code>a</code>와 <code>b</code>는 매개변수이고, <code>3</code>과 <code>4</code>는 인수입니다.</p><h3 id="기본-매개변수"><a href="#기본-매개변수" class="headerlink" title="기본 매개변수"></a>기본 매개변수</h3><p>기본 매개변수(default parameter)는 함수 호출 시 인수를 전달하지 않았을 경우 기본값을 설정할 수 있습니다.</p><pre><code class="highlight javascript"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params">name = <span class="string">&quot;Guest&quot;</span></span>) &#123;  <span class="keyword">return</span> <span class="string">`Hello, <span class="subst">$&#123;name&#125;</span>!`</span>;&#125;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">greet</span>()); <span class="comment">// 출력: Hello, Guest!</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">greet</span>(<span class="string">&quot;Bob&quot;</span>)); <span class="comment">// 출력: Hello, Bob!</span></code></pre><p>위 예제에서 <code>name</code> 매개변수가 전달되지 않으면 기본값인 “Guest”가 사용됩니다.</p><h3 id="나머지-매개변수"><a href="#나머지-매개변수" class="headerlink" title="나머지 매개변수"></a>나머지 매개변수</h3><p>나머지 매개변수(rest parameter)는 함수에 전달된 인수들을 배열로 수집합니다. 이는 가변 길이의 인수를 처리할 때 유용합니다.</p><pre><code class="highlight javascript"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">...numbers</span>) &#123;  <span class="keyword">return</span> numbers.<span class="title function_">reduce</span>(<span class="function">(<span class="params">total, num</span>) =&gt;</span> total + num, <span class="number">0</span>);&#125;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)); <span class="comment">// 출력: 10</span></code></pre><p>위 예제에서 <code>...numbers</code>는 모든 인수를 배열로 수집하여 <code>reduce</code> 메서드를 사용해 합계를 계산합니다.</p><h2 id="요약"><a href="#요약" class="headerlink" title="요약"></a>요약</h2><ul><li>함수 선언: 함수 이름을 지정하여 함수를 정의합니다.</li><li>함수 표현식: 변수에 함수를 할당하여 정의합니다.</li><li>화살표 함수: 간결한 문법으로 함수를 정의합니다.</li><li>함수 호출: 함수 이름 뒤에 괄호를 붙여 호출합니다.</li><li>매개변수와 인수: 함수는 매개변수를 사용하여 입력을 받고, 함수 호출 시 인수를 전달합니다.</li><li>기본 매개변수: 함수 호출 시 인수를 전달하지 않았을 경우 기본값을 설정합니다.</li><li>나머지 매개변수: 함수에 전달된 인수들을 배열로 수집합니다.</li></ul><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 JavaScript의 함수 정의와 호출에 대해 알아보았습니다. 함수를 이해하고 적절하게 사용하는 것은 프로그래밍의 기본입니다. 이를 통해 더 복잡한 로직을 구현할 수 있습니다. 다음 시간에는 더 흥미로운 주제로 찾아오겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> JS_기본기 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 반복문 (for, while, do...while)</title>
      <link href="/javascript/basic/4/"/>
      <url>/javascript/basic/4/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-반복문-for-while-do…while"><a href="#JavaScript-반복문-for-while-do…while" class="headerlink" title="JavaScript 반복문 (for, while, do…while)"></a>JavaScript 반복문 (for, while, do…while)</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 JavaScript 반복문 (for, while, do…while)에 대해 알아보겠습니다. 반복문은 코드 블록을 여러 번 실행할 수 있게 해주는 중요한 프로그래밍 구조입니다.</p><h2 id="for-문"><a href="#for-문" class="headerlink" title="for 문"></a>for 문</h2><p><code>for</code> 문은 지정된 횟수만큼 코드를 반복 실행합니다. 이는 반복 횟수가 정해져 있을 때 유용합니다. 마치 특정 횟수만큼 운동을 반복하는 것과 같습니다.</p><h3 id="기본-구조"><a href="#기본-구조" class="headerlink" title="기본 구조"></a>기본 구조</h3><p><code>for</code> 문은 세 가지 요소로 구성됩니다: 초기화, 조건, 증감. 초기화는 반복문이 시작되기 전에 한 번 실행되고, 조건이 참인 동안 코드 블록이 실행되며, 각 반복이 끝날 때마다 증감이 실행됩니다.</p><pre><code class="highlight javascript"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(i);&#125;</code></pre><p>위 코드에서는 <code>i</code>가 0부터 시작하여 5보다 작을 때까지 1씩 증가하며 반복됩니다. 따라서 0부터 4까지 출력됩니다.</p><h3 id="예제-배열-순회"><a href="#예제-배열-순회" class="headerlink" title="예제: 배열 순회"></a>예제: 배열 순회</h3><p><code>for</code> 문은 배열의 모든 요소를 순회할 때도 유용합니다.</p><pre><code class="highlight javascript"><span class="keyword">let</span> fruits = [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>];<span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; fruits.<span class="property">length</span>; i++) &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(fruits[i]);&#125;</code></pre><p>위 코드에서는 배열 <code>fruits</code>의 각 요소가 출력됩니다.</p><h2 id="while-문"><a href="#while-문" class="headerlink" title="while 문"></a>while 문</h2><p><code>while</code> 문은 조건이 참일 동안 코드를 반복 실행합니다. 이는 반복 횟수가 정해져 있지 않을 때 유용합니다. 마치 특정 조건이 만족될 때까지 기다리는 것과 같습니다.</p><h3 id="기본-구조-1"><a href="#기본-구조-1" class="headerlink" title="기본 구조"></a>기본 구조</h3><p><code>while</code> 문은 조건을 검사하고, 조건이 참인 동안 코드 블록을 실행합니다.</p><pre><code class="highlight javascript"><span class="keyword">let</span> i = <span class="number">0</span>;<span class="keyword">while</span> (i &lt; <span class="number">5</span>) &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(i);  i++;&#125;</code></pre><p>위 코드에서는 <code>i</code>가 5보다 작을 동안 반복되며, 0부터 4까지 출력됩니다.</p><h3 id="예제-사용자-입력"><a href="#예제-사용자-입력" class="headerlink" title="예제: 사용자 입력"></a>예제: 사용자 입력</h3><p><code>while</code> 문은 사용자 입력을 받을 때 유용할 수 있습니다. 예를 들어, 사용자가 특정 값을 입력할 때까지 반복합니다.</p><pre><code class="highlight javascript"><span class="keyword">let</span> input;<span class="keyword">while</span> (input !== <span class="string">&quot;exit&quot;</span>) &#123;  input = <span class="title function_">prompt</span>(<span class="string">&quot;명령을 입력하세요 (종료하려면 &#x27;exit&#x27; 입력):&quot;</span>);&#125;</code></pre><p>위 코드에서는 사용자가 <code>exit</code>를 입력할 때까지 계속해서 프롬프트를 표시합니다.</p><h2 id="do…while-문"><a href="#do…while-문" class="headerlink" title="do…while 문"></a>do…while 문</h2><p><code>do...while</code> 문은 코드를 먼저 실행하고, 조건이 참일 동안 반복합니다. 이는 최소한 한 번은 코드 블록을 실행해야 할 때 유용합니다. 마치 적어도 한 번은 시도해보는 것과 같습니다.</p><h3 id="기본-구조-2"><a href="#기본-구조-2" class="headerlink" title="기본 구조"></a>기본 구조</h3><p><code>do...while</code> 문은 먼저 코드를 실행하고, 그 다음에 조건을 검사합니다.</p><pre><code class="highlight javascript"><span class="keyword">let</span> i = <span class="number">0</span>;<span class="keyword">do</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(i);  i++;&#125; <span class="keyword">while</span> (i &lt; <span class="number">5</span>);</code></pre><p>위 코드에서는 <code>i</code>가 5보다 작을 동안 반복되며, 0부터 4까지 출력됩니다.</p><h3 id="예제-사용자-입력-검증"><a href="#예제-사용자-입력-검증" class="headerlink" title="예제: 사용자 입력 검증"></a>예제: 사용자 입력 검증</h3><p><code>do...while</code> 문은 사용자 입력을 검증할 때 유용할 수 있습니다. 예를 들어, 사용자가 유효한 값을 입력할 때까지 반복합니다.</p><pre><code class="highlight javascript"><span class="keyword">let</span> number;<span class="keyword">do</span> &#123;  number = <span class="built_in">parseInt</span>(<span class="title function_">prompt</span>(<span class="string">&quot;1에서 10 사이의 숫자를 입력하세요:&quot;</span>), <span class="number">10</span>);&#125; <span class="keyword">while</span> (number &lt; <span class="number">1</span> || number &gt; <span class="number">10</span>);<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;입력한 숫자:&quot;</span>, number);</code></pre><p>위 코드에서는 사용자가 1에서 10 사이의 숫자를 입력할 때까지 프롬프트를 표시합니다.</p><h2 id="요약"><a href="#요약" class="headerlink" title="요약"></a>요약</h2><ul><li><code>for</code> 문: 지정된 횟수만큼 코드를 반복 실행합니다.</li><li><code>while</code> 문: 조건이 참일 동안 코드를 반복 실행합니다.</li><li><code>do...while</code> 문: 코드를 먼저 실행하고, 조건이 참일 동안 반복합니다.</li></ul><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 JavaScript의 반복문에 대해 알아보았습니다. 반복문을 이해하고 적절하게 사용하는 것은 프로그래밍의 기본입니다. 이를 통해 더 복잡한 로직을 구현할 수 있습니다. 다음 시간에는 더 흥미로운 주제로 찾아오겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> JS_기본기 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 조건문 (if, else if, else, switch)</title>
      <link href="/javascript/basic/3/"/>
      <url>/javascript/basic/3/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-조건문-if-else-if-else-switch"><a href="#JavaScript-조건문-if-else-if-else-switch" class="headerlink" title="JavaScript 조건문 (if, else if, else, switch)"></a>JavaScript 조건문 (if, else if, else, switch)</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 JavaScript 조건문 (if, else if, else, switch)에 대해 알아보겠습니다. 조건문은 프로그램의 흐름을 제어하는 데 중요한 역할을 합니다. 조건문을 사용하면 특정 조건에 따라 다른 코드를 실행할 수 있습니다.</p><h2 id="if-문"><a href="#if-문" class="headerlink" title="if 문"></a>if 문</h2><p><code>if</code> 문은 조건이 참일 때 코드를 실행합니다. 조건문은 문을 열기 전에 조건을 확인하는 보안 요원과 같습니다. 조건이 참이면 문이 열리고, 조건이 거짓이면 문이 닫힙니다.</p><pre><code class="highlight javascript"><span class="keyword">let</span> x = <span class="number">10</span>;<span class="keyword">if</span> (x &gt; <span class="number">5</span>) &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;x는 5보다 큽니다.&quot;</span>);&#125;</code></pre><p>위 코드에서 <code>x</code>가 5보다 크기 때문에 조건이 참이고, 따라서 “x는 5보다 큽니다.”라는 메시지가 출력됩니다.</p><h2 id="if…else-문"><a href="#if…else-문" class="headerlink" title="if…else 문"></a>if…else 문</h2><p><code>if...else</code> 문은 조건이 참일 때와 거짓일 때 다른 코드를 실행합니다. 이는 두 개의 경로 중 하나를 선택할 수 있게 해줍니다.</p><pre><code class="highlight javascript"><span class="keyword">if</span> (x &gt; <span class="number">5</span>) &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;x는 5보다 큽니다.&quot;</span>);&#125; <span class="keyword">else</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;x는 5보다 작거나 같습니다.&quot;</span>);&#125;</code></pre><p>위 코드에서 <code>x</code>가 5보다 크지 않으면 “x는 5보다 작거나 같습니다.”라는 메시지가 출력됩니다.</p><h2 id="if…else-if…else-문"><a href="#if…else-if…else-문" class="headerlink" title="if…else if…else 문"></a>if…else if…else 문</h2><p><code>if...else if...else</code> 문은 여러 조건을 검사할 수 있습니다. 이는 여러 갈림길에서 길을 선택하는 것과 같습니다.</p><pre><code class="highlight javascript"><span class="keyword">if</span> (x &gt; <span class="number">10</span>) &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;x는 10보다 큽니다.&quot;</span>);&#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &gt; <span class="number">5</span>) &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;x는 5보다 큽니다.&quot;</span>);&#125; <span class="keyword">else</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;x는 5보다 작거나 같습니다.&quot;</span>);&#125;</code></pre><p>위 코드에서는 <code>x</code>가 10보다 크면 첫 번째 조건이 참이 되고, <code>x</code>가 10보다 크지 않고 5보다 크면 두 번째 조건이 참이 되며, 그 외의 경우에는 마지막 조건이 실행됩니다.</p><h2 id="switch-문"><a href="#switch-문" class="headerlink" title="switch 문"></a>switch 문</h2><p><code>switch</code> 문은 변수의 값에 따라 여러 경우(case) 중 하나를 선택합니다. 이는 여러 개의 열쇠 중 하나를 선택하여 맞는 자물쇠를 여는 것과 같습니다.</p><pre><code class="highlight javascript"><span class="keyword">let</span> fruit = <span class="string">&quot;apple&quot;</span>;<span class="keyword">switch</span> (fruit) &#123;  <span class="keyword">case</span> <span class="string">&quot;banana&quot;</span>:    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;바나나입니다.&quot;</span>);    <span class="keyword">break</span>;  <span class="keyword">case</span> <span class="string">&quot;apple&quot;</span>:    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;사과입니다.&quot;</span>);    <span class="keyword">break</span>;  <span class="keyword">case</span> <span class="string">&quot;grape&quot;</span>:    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;포도입니다.&quot;</span>);    <span class="keyword">break</span>;  <span class="attr">default</span>:    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;알 수 없는 과일입니다.&quot;</span>);&#125;</code></pre><p>위 코드에서 <code>fruit</code>의 값이 “apple”이므로 해당하는 <code>case</code> 문이 실행되어 “사과입니다.”라는 메시지가 출력됩니다. <code>default</code> 문은 어떤 <code>case</code>도 일치하지 않을 때 실행됩니다.</p><h3 id="switch-문을-사용하는-이유"><a href="#switch-문을-사용하는-이유" class="headerlink" title="switch 문을 사용하는 이유"></a>switch 문을 사용하는 이유</h3><p><code>switch</code> 문은 여러 조건을 검사해야 할 때 <code>if...else if...else</code> 문보다 가독성이 좋고, 유지보수가 쉽습니다. 예를 들어, 많은 경우의 수를 다루어야 할 때 <code>switch</code> 문이 더 적합합니다.</p><h2 id="요약"><a href="#요약" class="headerlink" title="요약"></a>요약</h2><ul><li><code>if</code> 문: 조건이 참일 때 코드를 실행합니다.</li><li><code>if...else</code> 문: 조건이 참일 때와 거짓일 때 다른 코드를 실행합니다.</li><li><code>if...else if...else</code> 문: 여러 조건을 검사합니다.</li><li><code>switch</code> 문: 변수의 값에 따라 여러 경우 중 하나를 선택합니다.</li></ul><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 JavaScript의 조건문에 대해 알아보았습니다. 조건문을 이해하고 적절하게 사용하는 것은 프로그래밍의 기본입니다. 이를 통해 더 복잡한 로직을 구현할 수 있습니다. 다음 시간에는 더 흥미로운 주제로 찾아오겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> JS_기본기 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 연산자와 표현식</title>
      <link href="/javascript/basic/2/"/>
      <url>/javascript/basic/2/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-연산자와-표현식"><a href="#JavaScript-연산자와-표현식" class="headerlink" title="JavaScript 연산자와 표현식"></a>JavaScript 연산자와 표현식</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 JavaScript 연산자와 표현식에 대해 알아보겠습니다. 연산자와 표현식은 프로그래밍의 기본 요소로, 이를 이해하는 것은 코드를 작성하는 데 필수적입니다.</p><h2 id="연산자"><a href="#연산자" class="headerlink" title="연산자"></a>연산자</h2><p>연산자는 값을 조작하거나 계산하는 데 사용됩니다. JavaScript에서 자주 사용되는 연산자에는 다음과 같은 것들이 있습니다:</p><h3 id="산술-연산자"><a href="#산술-연산자" class="headerlink" title="산술 연산자"></a>산술 연산자</h3><p>산술 연산자는 숫자 값을 가지고 기본적인 수학 연산을 수행합니다. 마치 계산기를 사용하는 것과 같습니다.</p><ul><li><code>+</code> (덧셈): 두 숫자를 더합니다.</li><li><code>-</code> (뺄셈): 첫 번째 숫자에서 두 번째 숫자를 뺍니다.</li><li><code>*</code> (곱셈): 두 숫자를 곱합니다.</li><li><code>/</code> (나눗셈): 첫 번째 숫자를 두 번째 숫자로 나눕니다.</li><li><code>%</code> (나머지): 첫 번째 숫자를 두 번째 숫자로 나눈 나머지를 구합니다.</li></ul><pre><code class="highlight javascript"><span class="keyword">let</span> a = <span class="number">10</span>;<span class="keyword">let</span> b = <span class="number">5</span>;<span class="variable language_">console</span>.<span class="title function_">log</span>(a + b); <span class="comment">// 15</span><span class="variable language_">console</span>.<span class="title function_">log</span>(a - b); <span class="comment">// 5</span><span class="variable language_">console</span>.<span class="title function_">log</span>(a * b); <span class="comment">// 50</span><span class="variable language_">console</span>.<span class="title function_">log</span>(a / b); <span class="comment">// 2</span><span class="variable language_">console</span>.<span class="title function_">log</span>(a % b); <span class="comment">// 0</span></code></pre><h3 id="비교-연산자"><a href="#비교-연산자" class="headerlink" title="비교 연산자"></a>비교 연산자</h3><p>비교 연산자는 두 값을 비교하고 참(true) 또는 거짓(false)을 반환합니다. 이 연산자는 조건을 검사할 때 유용합니다.</p><ul><li><code>==</code> (같음): 두 값이 같으면 참을 반환합니다.</li><li><code>!=</code> (다름): 두 값이 다르면 참을 반환합니다.</li><li><code>===</code> (엄격한 같음): 두 값이 같고, 타입도 같으면 참을 반환합니다.</li><li><code>!==</code> (엄격한 다름): 두 값이 다르거나, 타입이 다르면 참을 반환합니다.</li><li><code>&gt;</code> (크다): 첫 번째 값이 두 번째 값보다 크면 참을 반환합니다.</li><li><code>&lt;</code> (작다): 첫 번째 값이 두 번째 값보다 작으면 참을 반환합니다.</li><li><code>&gt;=</code> (크거나 같다): 첫 번째 값이 두 번째 값보다 크거나 같으면 참을 반환합니다.</li><li><code>&lt;=</code> (작거나 같다): 첫 번째 값이 두 번째 값보다 작거나 같으면 참을 반환합니다.</li></ul><pre><code class="highlight javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(a == b); <span class="comment">// false</span><span class="variable language_">console</span>.<span class="title function_">log</span>(a != b); <span class="comment">// true</span><span class="variable language_">console</span>.<span class="title function_">log</span>(a === <span class="number">10</span>); <span class="comment">// true</span><span class="variable language_">console</span>.<span class="title function_">log</span>(a !== <span class="number">10</span>); <span class="comment">// false</span><span class="variable language_">console</span>.<span class="title function_">log</span>(a &gt; b); <span class="comment">// true</span><span class="variable language_">console</span>.<span class="title function_">log</span>(a &lt; b); <span class="comment">// false</span></code></pre><h3 id="논리-연산자"><a href="#논리-연산자" class="headerlink" title="논리 연산자"></a>논리 연산자</h3><p>논리 연산자는 주로 불리언 값을 조작하는 데 사용됩니다. 논리 연산자는 조건을 결합하거나 반전할 때 유용합니다.</p><ul><li><code>&amp;&amp;</code> (AND): 두 조건이 모두 참이면 참을 반환합니다.</li><li><code>||</code> (OR): 두 조건 중 하나라도 참이면 참을 반환합니다.</li><li><code>!</code> (NOT): 조건을 반전시켜 참은 거짓으로, 거짓은 참으로 반환합니다.</li></ul><pre><code class="highlight javascript"><span class="keyword">let</span> x = <span class="literal">true</span>;<span class="keyword">let</span> y = <span class="literal">false</span>;<span class="variable language_">console</span>.<span class="title function_">log</span>(x &amp;&amp; y); <span class="comment">// false</span><span class="variable language_">console</span>.<span class="title function_">log</span>(x || y); <span class="comment">// true</span><span class="variable language_">console</span>.<span class="title function_">log</span>(!x); <span class="comment">// false</span></code></pre><h3 id="할당-연산자"><a href="#할당-연산자" class="headerlink" title="할당 연산자"></a>할당 연산자</h3><p>할당 연산자는 변수에 값을 할당하는 데 사용됩니다. 할당 연산자는 값을 변수에 저장하는 상자에 물건을 넣는 것과 같습니다.</p><ul><li><code>=</code> (할당): 오른쪽 값을 왼쪽 변수에 할당합니다.</li><li><code>+=</code> (더해서 할당): 왼쪽 변수에 오른쪽 값을 더해서 할당합니다.</li><li><code>=</code> (빼서 할당): 왼쪽 변수에서 오른쪽 값을 빼서 할당합니다.</li><li><code>=</code> (곱해서 할당): 왼쪽 변수에 오른쪽 값을 곱해서 할당합니다.</li><li><code>/=</code> (나눠서 할당): 왼쪽 변수를 오른쪽 값으로 나눠서 할당합니다.</li><li><code>%=</code> (나머지를 구해서 할당): 왼쪽 변수에 오른쪽 값으로 나눈 나머지를 할당합니다.</li></ul><pre><code class="highlight javascript"><span class="keyword">let</span> num = <span class="number">10</span>;num += <span class="number">5</span>;<span class="variable language_">console</span>.<span class="title function_">log</span>(num); <span class="comment">// 15</span>num -= <span class="number">3</span>;<span class="variable language_">console</span>.<span class="title function_">log</span>(num); <span class="comment">// 12</span>num *= <span class="number">2</span>;<span class="variable language_">console</span>.<span class="title function_">log</span>(num); <span class="comment">// 24</span>num /= <span class="number">4</span>;<span class="variable language_">console</span>.<span class="title function_">log</span>(num); <span class="comment">// 6</span>num %= <span class="number">3</span>;<span class="variable language_">console</span>.<span class="title function_">log</span>(num); <span class="comment">// 0</span></code></pre><h2 id="표현식"><a href="#표현식" class="headerlink" title="표현식"></a>표현식</h2><p>표현식은 값을 계산하고 반환하는 코드 조각입니다. 표현식은 수학의 공식처럼 하나의 값을 도출해냅니다.</p><h3 id="산술-표현식"><a href="#산술-표현식" class="headerlink" title="산술 표현식"></a>산술 표현식</h3><p>산술 표현식은 숫자와 산술 연산자를 사용하여 값을 계산합니다.</p><pre><code class="highlight javascript"><span class="keyword">let</span> sum = <span class="number">10</span> + <span class="number">5</span>;<span class="keyword">let</span> difference = <span class="number">10</span> - <span class="number">5</span>;<span class="keyword">let</span> product = <span class="number">10</span> * <span class="number">5</span>;<span class="keyword">let</span> quotient = <span class="number">10</span> / <span class="number">5</span>;<span class="keyword">let</span> remainder = <span class="number">10</span> % <span class="number">3</span>;<span class="variable language_">console</span>.<span class="title function_">log</span>(sum); <span class="comment">// 15</span><span class="variable language_">console</span>.<span class="title function_">log</span>(difference); <span class="comment">// 5</span><span class="variable language_">console</span>.<span class="title function_">log</span>(product); <span class="comment">// 50</span><span class="variable language_">console</span>.<span class="title function_">log</span>(quotient); <span class="comment">// 2</span><span class="variable language_">console</span>.<span class="title function_">log</span>(remainder); <span class="comment">// 1</span></code></pre><h3 id="비교-표현식"><a href="#비교-표현식" class="headerlink" title="비교 표현식"></a>비교 표현식</h3><p>비교 표현식은 두 값을 비교하여 불리언 값을 반환합니다.</p><pre><code class="highlight javascript"><span class="keyword">let</span> isEqual = <span class="number">10</span> == <span class="number">10</span>;<span class="keyword">let</span> isNotEqual = <span class="number">10</span> != <span class="number">5</span>;<span class="keyword">let</span> isGreater = <span class="number">10</span> &gt; <span class="number">5</span>;<span class="keyword">let</span> isLess = <span class="number">10</span> &lt; <span class="number">15</span>;<span class="variable language_">console</span>.<span class="title function_">log</span>(isEqual); <span class="comment">// true</span><span class="variable language_">console</span>.<span class="title function_">log</span>(isNotEqual); <span class="comment">// true</span><span class="variable language_">console</span>.<span class="title function_">log</span>(isGreater); <span class="comment">// true</span><span class="variable language_">console</span>.<span class="title function_">log</span>(isLess); <span class="comment">// true</span></code></pre><h3 id="논리-표현식"><a href="#논리-표현식" class="headerlink" title="논리 표현식"></a>논리 표현식</h3><p>논리 표현식은 논리 연산자를 사용하여 조건을 결합하거나 반전합니다.</p><pre><code class="highlight javascript"><span class="keyword">let</span> andExpression = <span class="literal">true</span> &amp;&amp; <span class="literal">false</span>;<span class="keyword">let</span> orExpression = <span class="literal">true</span> || <span class="literal">false</span>;<span class="keyword">let</span> notExpression = !<span class="literal">true</span>;<span class="variable language_">console</span>.<span class="title function_">log</span>(andExpression); <span class="comment">// false</span><span class="variable language_">console</span>.<span class="title function_">log</span>(orExpression); <span class="comment">// true</span><span class="variable language_">console</span>.<span class="title function_">log</span>(notExpression); <span class="comment">// false</span></code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 JavaScript의 다양한 연산자와 표현식에 대해 알아보았습니다. 연산자와 표현식을 이해하고 적절하게 사용하는 것은 프로그래밍의 기본입니다. 이를 바탕으로 더 복잡한 로직을 구현할 수 있습니다. 다음 시간에는 더 흥미로운 주제로 찾아오겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> JS_기본기 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 변수와 데이터 타입</title>
      <link href="/javascript/basic/1/"/>
      <url>/javascript/basic/1/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-변수와-데이터-타입"><a href="#JavaScript-변수와-데이터-타입" class="headerlink" title="JavaScript 변수와 데이터 타입"></a>JavaScript 변수와 데이터 타입</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 JavaScript 변수와 데이터 타입에 대해 알아보겠습니다.</p><h2 id="변수-선언"><a href="#변수-선언" class="headerlink" title="변수 선언"></a>변수 선언</h2><p>JavaScript에서 변수를 선언하는 방법은 <code>var</code>, <code>let</code>, <code>const</code> 키워드를 사용하는 것입니다. 변수를 선언하는 것은 데이터를 저장할 상자를 만드는 것과 비슷합니다. 이 상자에는 우리가 저장하고자 하는 값이 담깁니다.</p><h3 id="var"><a href="#var" class="headerlink" title="var"></a><code>var</code></h3><p><code>var</code>는 가장 오래된 변수 선언 방법입니다. <code>var</code>로 선언된 변수는 함수 스코프(function scope)를 가지며, 호이스팅(hoisting)의 영향을 받습니다.</p><pre><code class="highlight javascript"><span class="keyword">var</span> x = <span class="number">10</span>;<span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// 출력: 10</span></code></pre><h3 id="let"><a href="#let" class="headerlink" title="let"></a><code>let</code></h3><p><code>let</code>은 블록 스코프(block scope)를 가지며, 변수의 값을 변경할 수 있습니다. <code>let</code>은 <code>var</code>보다 더 안전한 변수 선언 방법입니다.</p><pre><code class="highlight javascript"><span class="keyword">let</span> y = <span class="number">20</span>;y = <span class="number">25</span>;<span class="variable language_">console</span>.<span class="title function_">log</span>(y); <span class="comment">// 출력: 25</span></code></pre><h3 id="const"><a href="#const" class="headerlink" title="const"></a><code>const</code></h3><p><code>const</code>는 상수(constant)로, 한 번 값을 할당하면 변경할 수 없습니다. <code>const</code>는 불변의 값을 저장할 때 사용됩니다.</p><pre><code class="highlight javascript"><span class="keyword">const</span> z = <span class="number">30</span>;<span class="comment">// z = 35; // 오류: Assignment to constant variable.</span><span class="variable language_">console</span>.<span class="title function_">log</span>(z); <span class="comment">// 출력: 30</span></code></pre><h2 id="데이터-타입"><a href="#데이터-타입" class="headerlink" title="데이터 타입"></a>데이터 타입</h2><p>JavaScript에서 사용되는 기본 데이터 타입은 다음과 같습니다:</p><ul><li>숫자 (Number)</li><li>문자열 (String)</li><li>불리언 (Boolean)</li><li>객체 (Object)</li><li>배열 (Array)</li><li>함수 (Function)</li><li>undefined</li><li>null</li></ul><p>각 데이터 타입을 설명하면서, 비유를 통해 이해를 돕겠습니다.</p><h3 id="숫자-Number"><a href="#숫자-Number" class="headerlink" title="숫자 (Number)"></a>숫자 (Number)</h3><p>숫자는 수학적 계산을 할 수 있는 데이터 타입입니다. 숫자는 정수와 실수를 포함합니다.</p><pre><code class="highlight javascript"><span class="keyword">let</span> number = <span class="number">5</span>; <span class="comment">// 숫자</span><span class="keyword">let</span> decimal = <span class="number">5.5</span>; <span class="comment">// 실수</span><span class="variable language_">console</span>.<span class="title function_">log</span>(number, decimal); <span class="comment">// 출력: 5 5.5</span></code></pre><h3 id="문자열-String"><a href="#문자열-String" class="headerlink" title="문자열 (String)"></a>문자열 (String)</h3><p>문자열은 텍스트 데이터를 저장하는 데이터 타입입니다. 문자열은 따옴표로 묶어서 사용합니다. 마치 문장을 인용할 때 따옴표를 사용하는 것과 같습니다.</p><pre><code class="highlight javascript"><span class="keyword">let</span> string = <span class="string">&quot;Hello, World!&quot;</span>;<span class="variable language_">console</span>.<span class="title function_">log</span>(string); <span class="comment">// 출력: Hello, World!</span></code></pre><h3 id="불리언-Boolean"><a href="#불리언-Boolean" class="headerlink" title="불리언 (Boolean)"></a>불리언 (Boolean)</h3><p>불리언은 참(true) 또는 거짓(false)을 나타내는 데이터 타입입니다. 불리언은 전구의 스위치처럼 두 가지 상태만 가질 수 있습니다.</p><pre><code class="highlight javascript"><span class="keyword">let</span> isTrue = <span class="literal">true</span>;<span class="keyword">let</span> isFalse = <span class="literal">false</span>;<span class="variable language_">console</span>.<span class="title function_">log</span>(isTrue, isFalse); <span class="comment">// 출력: true false</span></code></pre><h3 id="객체-Object"><a href="#객체-Object" class="headerlink" title="객체 (Object)"></a>객체 (Object)</h3><p>객체는 속성(properties)과 값(values)을 저장하는 데이터 타입입니다. 객체는 여러 속성을 가진 가방과 같습니다. 이 가방에는 이름표(속성)와 그에 해당하는 물건(값)이 들어 있습니다.</p><pre><code class="highlight javascript"><span class="keyword">let</span> obj = &#123; <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;;<span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>, obj.<span class="property">age</span>); <span class="comment">// 출력: John 30</span></code></pre><h3 id="배열-Array"><a href="#배열-Array" class="headerlink" title="배열 (Array)"></a>배열 (Array)</h3><p>배열은 여러 값을 하나의 변수에 저장할 수 있는 데이터 타입입니다. 배열은 여러 칸을 가진 상자와 같습니다. 각 칸에는 인덱스(index)를 통해 접근할 수 있습니다.</p><pre><code class="highlight javascript"><span class="keyword">let</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];<span class="variable language_">console</span>.<span class="title function_">log</span>(array[<span class="number">0</span>], array[<span class="number">4</span>]); <span class="comment">// 출력: 1 5</span></code></pre><h3 id="함수-Function"><a href="#함수-Function" class="headerlink" title="함수 (Function)"></a>함수 (Function)</h3><p>함수는 특정 작업을 수행하는 코드 블록입니다. 함수는 입력(매개변수)과 출력(반환값)을 가질 수 있습니다. 함수는 주방의 레시피와 같습니다. 레시피는 재료(입력)를 받아 요리(출력)를 만듭니다.</p><pre><code class="highlight javascript"><span class="keyword">let</span> func = <span class="keyword">function</span> (<span class="params">name</span>) &#123;  <span class="keyword">return</span> <span class="string">`Hello, <span class="subst">$&#123;name&#125;</span>`</span>;&#125;;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">func</span>(<span class="string">&quot;Alice&quot;</span>)); <span class="comment">// 출력: Hello, Alice</span></code></pre><h3 id="undefined"><a href="#undefined" class="headerlink" title="undefined"></a>undefined</h3><p><code>undefined</code>는 값이 할당되지 않은 변수를 나타냅니다. 변수를 선언했지만 값을 지정하지 않으면 <code>undefined</code>입니다. 마치 빈 상자와 같습니다.</p><pre><code class="highlight javascript"><span class="keyword">let</span> undef;<span class="variable language_">console</span>.<span class="title function_">log</span>(undef); <span class="comment">// 출력: undefined</span></code></pre><h3 id="null"><a href="#null" class="headerlink" title="null"></a>null</h3><p><code>null</code>은 값이 없음을 나타내는 데이터 타입입니다. <code>null</code>은 의도적으로 비어 있음을 나타낼 때 사용됩니다. 마치 비어 있는 의자를 가리키는 것과 같습니다.</p><pre><code class="highlight javascript"><span class="keyword">let</span> nul = <span class="literal">null</span>;<span class="variable language_">console</span>.<span class="title function_">log</span>(nul); <span class="comment">// 출력: null</span></code></pre><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 JavaScript의 변수 선언 방법과 다양한 데이터 타입에 대해 알아보았습니다. 각 데이터 타입을 이해하고 적절하게 사용하는 것은 JavaScript 프로그래밍의 기초를 다지는 데 매우 중요합니다. 다음 시간에는 더 흥미로운 주제로 찾아오겠습니다.</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> JS_기본기 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>실시간 통신과 Socket.io 이해 및 Express로 실시간 채팅 애플리케이션 구현</title>
      <link href="/web/essential/4/"/>
      <url>/web/essential/4/</url>
      
        <content type="html"><![CDATA[<h1 id="실시간-통신과-Socket-io-이해-및-Express로-실시간-채팅-애플리케이션-구현"><a href="#실시간-통신과-Socket-io-이해-및-Express로-실시간-채팅-애플리케이션-구현" class="headerlink" title="실시간 통신과 Socket.io 이해 및 Express로 실시간 채팅 애플리케이션 구현"></a>실시간 통신과 Socket.io 이해 및 Express로 실시간 채팅 애플리케이션 구현</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 실시간 통신과 Socket.io에 대해 알아보고, Express를 활용하여 실시간 채팅 애플리케이션을 구현해보겠습니다. 실시간 통신은 현대 웹 애플리케이션에서 매우 중요한 기능 중 하나입니다.</p><h2 id="실시간-통신의-개념"><a href="#실시간-통신의-개념" class="headerlink" title="실시간 통신의 개념"></a>실시간 통신의 개념</h2><h3 id="실시간-통신이란"><a href="#실시간-통신이란" class="headerlink" title="실시간 통신이란?"></a>실시간 통신이란?</h3><p>실시간 통신은 클라이언트와 서버 간의 데이터를 지연 없이 즉시 전송하는 방식입니다. 이를 통해 사용자 간의 즉각적인 상호작용을 가능하게 합니다. 실시간 통신은 주로 채팅 애플리케이션, 실시간 알림, 온라인 게임, 협업 도구 등에서 사용됩니다.</p><h3 id="실시간-통신의-주요-기술"><a href="#실시간-통신의-주요-기술" class="headerlink" title="실시간 통신의 주요 기술"></a>실시간 통신의 주요 기술</h3><ol><li><strong>웹소켓(WebSockets)</strong>: 클라이언트와 서버 간의 양방향 통신을 가능하게 하는 프로토콜입니다. HTTP와 달리 연결이 지속되며, 클라이언트와 서버는 데이터를 자유롭게 주고받을 수 있습니다.</li><li><strong>폴링(Polling)</strong>: 클라이언트가 주기적으로 서버에 요청을 보내 데이터를 업데이트하는 방식입니다. 실시간 성능은 떨어지지만, 간단하게 구현할 수 있습니다.</li><li><strong>롱 폴링(Long Polling)</strong>: 클라이언트가 서버에 요청을 보내고, 서버는 새로운 데이터가 있을 때까지 응답을 지연시킵니다. 새로운 데이터가 생기면 즉시 응답을 보내 실시간성을 어느 정도 보장합니다.</li></ol><h2 id="Socket-io의-개념과-작동-원리"><a href="#Socket-io의-개념과-작동-원리" class="headerlink" title="Socket.io의 개념과 작동 원리"></a>Socket.io의 개념과 작동 원리</h2><h3 id="Socket-io란"><a href="#Socket-io란" class="headerlink" title="Socket.io란?"></a>Socket.io란?</h3><p>Socket.io는 실시간 양방향 통신을 가능하게 하는 라이브러리입니다. 웹소켓을 기본으로 하며, 폴백 메커니즘을 통해 다양한 브라우저와 네트워크 환경에서도 안정적으로 동작합니다. Socket.io는 클라이언트와 서버 모두에서 사용할 수 있습니다.</p><h3 id="Socket-io의-주요-기능"><a href="#Socket-io의-주요-기능" class="headerlink" title="Socket.io의 주요 기능"></a>Socket.io의 주요 기능</h3><ol><li><strong>양방향 통신</strong>: 클라이언트와 서버 간의 실시간 양방향 통신을 지원합니다.</li><li><strong>자동 폴백</strong>: 웹소켓이 지원되지 않는 환경에서는 폴링 등 다른 방식으로 자동 전환됩니다.</li><li><strong>룸(Rooms)과 네임스페이스(Namespaces)</strong>: 여러 채널로 통신을 분리하여 효율적으로 관리할 수 있습니다.</li><li><strong>이벤트 기반 프로그래밍</strong>: 클라이언트와 서버 간의 통신을 이벤트 기반으로 처리할 수 있습니다.</li></ol><h2 id="준비하기"><a href="#준비하기" class="headerlink" title="준비하기"></a>준비하기</h2><p>먼저 필요한 패키지를 설치합니다:</p><pre><code class="highlight bash">npm init -ynpm install express socket.io</code></pre><h2 id="서버-설정"><a href="#서버-설정" class="headerlink" title="서버 설정"></a>서버 설정</h2><p>다음은 필요한 모듈을 가져오고 서버를 설정하는 코드입니다. 자세한 부분은 뒤에서 알아보겠습니다.</p><pre><code class="highlight javascript"><span class="comment">// server.js</span><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);<span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);<span class="keyword">const</span> &#123; <span class="title class_">Server</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;socket.io&quot;</span>);<span class="keyword">const</span> app = <span class="title function_">express</span>();<span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(app);<span class="keyword">const</span> io = <span class="keyword">new</span> <span class="title class_">Server</span>(server);<span class="keyword">const</span> port = <span class="number">3000</span>;app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&quot;public&quot;</span>));<span class="comment">// 클라이언트 연결 처리</span>io.<span class="title function_">on</span>(<span class="string">&quot;connection&quot;</span>, <span class="function">(<span class="params">socket</span>) =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;A user connected&quot;</span>);  socket.<span class="title function_">on</span>(<span class="string">&quot;disconnect&quot;</span>, <span class="function">() =&gt;</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;User disconnected&quot;</span>);  &#125;);  socket.<span class="title function_">on</span>(<span class="string">&quot;chat message&quot;</span>, <span class="function">(<span class="params">msg</span>) =&gt;</span> &#123;    io.<span class="title function_">emit</span>(<span class="string">&quot;chat message&quot;</span>, msg);  &#125;);&#125;);server.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Server is running on &lt;http://localhost&gt;:<span class="subst">$&#123;port&#125;</span>`</span>);&#125;);</code></pre><h2 id="클라이언트-설정"><a href="#클라이언트-설정" class="headerlink" title="클라이언트 설정"></a>클라이언트 설정</h2><p><code>public</code> 폴더에 <code>index.html</code> 파일을 생성하고, 클라이언트 측 코드를 작성합니다.</p><pre><code class="highlight html"><span class="comment">&lt;!-- public/index.html --&gt;</span><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">head</span>&gt;</span>    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span>    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span>    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Socket.io Chat<span class="tag">&lt;/<span class="name">title</span>&gt;</span>    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span><span class="language-css">      <span class="selector-tag">body</span> &#123;</span><span class="language-css">        <span class="attribute">font-family</span>: Arial, sans-serif;</span><span class="language-css">      &#125;</span><span class="language-css">      <span class="selector-id">#messages</span> &#123;</span><span class="language-css">        <span class="attribute">list-style-type</span>: none;</span><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span><span class="language-css">      &#125;</span><span class="language-css">      <span class="selector-id">#messages</span> <span class="selector-tag">li</span> &#123;</span><span class="language-css">        <span class="attribute">padding</span>: <span class="number">8px</span>;</span><span class="language-css">        <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><span class="language-css">      &#125;</span><span class="language-css">      <span class="selector-id">#form</span> &#123;</span><span class="language-css">        <span class="attribute">display</span>: flex;</span><span class="language-css">      &#125;</span><span class="language-css">      <span class="selector-id">#input</span> &#123;</span><span class="language-css">        <span class="attribute">flex</span>: <span class="number">1</span>;</span><span class="language-css">        <span class="attribute">padding</span>: <span class="number">10px</span>;</span><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><span class="language-css">      &#125;</span><span class="language-css">      <span class="selector-id">#button</span> &#123;</span><span class="language-css">        <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">20px</span>;</span><span class="language-css">      &#125;</span><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span>  <span class="tag">&lt;/<span class="name">head</span>&gt;</span>  <span class="tag">&lt;<span class="name">body</span>&gt;</span>    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;messages&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span>    <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;form&quot;</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span>      <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;input&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;button&quot;</span>&gt;</span>Send<span class="tag">&lt;/<span class="name">button</span>&gt;</span>    <span class="tag">&lt;/<span class="name">form</span>&gt;</span>    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/socket.io/socket.io.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">      <span class="keyword">const</span> socket = <span class="title function_">io</span>();</span><span class="language-javascript"></span><span class="language-javascript">      <span class="keyword">const</span> form = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;form&quot;</span>);</span><span class="language-javascript">      <span class="keyword">const</span> input = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;input&quot;</span>);</span><span class="language-javascript">      <span class="keyword">const</span> messages = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;messages&quot;</span>);</span><span class="language-javascript"></span><span class="language-javascript">      form.<span class="title function_">addEventListener</span>(<span class="string">&quot;submit&quot;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><span class="language-javascript">        e.<span class="title function_">preventDefault</span>();</span><span class="language-javascript">        <span class="keyword">if</span> (input.<span class="property">value</span>) &#123;</span><span class="language-javascript">          socket.<span class="title function_">emit</span>(<span class="string">&quot;chat message&quot;</span>, input.<span class="property">value</span>);</span><span class="language-javascript">          input.<span class="property">value</span> = <span class="string">&quot;&quot;</span>;</span><span class="language-javascript">        &#125;</span><span class="language-javascript">      &#125;);</span><span class="language-javascript"></span><span class="language-javascript">      socket.<span class="title function_">on</span>(<span class="string">&quot;chat message&quot;</span>, <span class="keyword">function</span> (<span class="params">msg</span>) &#123;</span><span class="language-javascript">        <span class="keyword">const</span> item = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;li&quot;</span>);</span><span class="language-javascript">        item.<span class="property">textContent</span> = msg;</span><span class="language-javascript">        messages.<span class="title function_">appendChild</span>(item);</span><span class="language-javascript">        <span class="variable language_">window</span>.<span class="title function_">scrollTo</span>(<span class="number">0</span>, <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollHeight</span>);</span><span class="language-javascript">      &#125;);</span><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  <span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></code></pre><h2 id="설정-설명"><a href="#설정-설명" class="headerlink" title="설정 설명"></a>설정 설명</h2><p>Express와 Socket.io를 사용하여 실시간 채팅 애플리케이션을 설정하고 구현하는 방법을 설명합니다.</p><ol><li><p><strong>서버 설정</strong>:</p><pre><code class="highlight javascript"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);<span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);<span class="keyword">const</span> &#123; <span class="title class_">Server</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;socket.io&quot;</span>);<span class="keyword">const</span> app = <span class="title function_">express</span>();<span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(app);<span class="keyword">const</span> io = <span class="keyword">new</span> <span class="title class_">Server</span>(server);<span class="keyword">const</span> port = <span class="number">3000</span>;app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&quot;public&quot;</span>));io.<span class="title function_">on</span>(<span class="string">&quot;connection&quot;</span>, <span class="function">(<span class="params">socket</span>) =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;A user connected&quot;</span>);  socket.<span class="title function_">on</span>(<span class="string">&quot;disconnect&quot;</span>, <span class="function">() =&gt;</span> &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;User disconnected&quot;</span>);  &#125;);  socket.<span class="title function_">on</span>(<span class="string">&quot;chat message&quot;</span>, <span class="function">(<span class="params">msg</span>) =&gt;</span> &#123;    io.<span class="title function_">emit</span>(<span class="string">&quot;chat message&quot;</span>, msg);  &#125;);&#125;);server.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Server is running on &lt;http://localhost&gt;:<span class="subst">$&#123;port&#125;</span>`</span>);&#125;);</code></pre><p>Express와 Socket.io를 설정하고 서버를 실행합니다. 클라이언트가 연결되면 콘솔에 메시지를 출력하고, 채팅 메시지를 모든 클라이언트에 브로드캐스트합니다.</p></li><li><p><strong>클라이언트 설정</strong>:</p><pre><code class="highlight html"><span class="comment">&lt;!-- public/index.html --&gt;</span><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">head</span>&gt;</span>    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span>    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span>    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Socket.io Chat<span class="tag">&lt;/<span class="name">title</span>&gt;</span>    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span><span class="language-css">      <span class="selector-tag">body</span> &#123;</span><span class="language-css">        <span class="attribute">font-family</span>: Arial, sans-serif;</span><span class="language-css">      &#125;</span><span class="language-css">      <span class="selector-id">#messages</span> &#123;</span><span class="language-css">        <span class="attribute">list-style-type</span>: none;</span><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span><span class="language-css">      &#125;</span><span class="language-css">      <span class="selector-id">#messages</span> <span class="selector-tag">li</span> &#123;</span><span class="language-css">        <span class="attribute">padding</span>: <span class="number">8px</span>;</span><span class="language-css">        <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><span class="language-css">      &#125;</span><span class="language-css">      <span class="selector-id">#form</span> &#123;</span><span class="language-css">        <span class="attribute">display</span>: flex;</span><span class="language-css">      &#125;</span><span class="language-css">      <span class="selector-id">#input</span> &#123;</span><span class="language-css">        <span class="attribute">flex</span>: <span class="number">1</span>;</span><span class="language-css">        <span class="attribute">padding</span>: <span class="number">10px</span>;</span><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><span class="language-css">      &#125;</span><span class="language-css">      <span class="selector-id">#button</span> &#123;</span><span class="language-css">        <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">20px</span>;</span><span class="language-css">      &#125;</span><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span>  <span class="tag">&lt;/<span class="name">head</span>&gt;</span>  <span class="tag">&lt;<span class="name">body</span>&gt;</span>    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;messages&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span>    <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;form&quot;</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span>      <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;input&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;button&quot;</span>&gt;</span>        Send      <span class="tag">&lt;/<span class="name">button</span>&gt;</span>    <span class="tag">&lt;/<span class="name">form</span>&gt;</span>    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/socket.io/socket.io.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">      <span class="keyword">const</span> socket = <span class="title function_">io</span>();</span><span class="language-javascript"></span><span class="language-javascript">      <span class="keyword">const</span> form = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;form&quot;</span>);</span><span class="language-javascript">      <span class="keyword">const</span> input = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;input&quot;</span>);</span><span class="language-javascript">      <span class="keyword">const</span> messages = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;messages&quot;</span>);</span><span class="language-javascript"></span><span class="language-javascript">      form.<span class="title function_">addEventListener</span>(<span class="string">&quot;submit&quot;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><span class="language-javascript">        e.<span class="title function_">preventDefault</span>();</span><span class="language-javascript">        <span class="keyword">if</span> (input.<span class="property">value</span>) &#123;</span><span class="language-javascript">          socket.<span class="title function_">emit</span>(<span class="string">&quot;chat message&quot;</span>, input.<span class="property">value</span>);</span><span class="language-javascript">          input.<span class="property">value</span> = <span class="string">&quot;&quot;</span>;</span><span class="language-javascript">        &#125;</span><span class="language-javascript">      &#125;);</span><span class="language-javascript"></span><span class="language-javascript">      socket.<span class="title function_">on</span>(<span class="string">&quot;chat message&quot;</span>, <span class="keyword">function</span> (<span class="params">msg</span>) &#123;</span><span class="language-javascript">        <span class="keyword">const</span> item = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;li&quot;</span>);</span><span class="language-javascript">        item.<span class="property">textContent</span> = msg;</span><span class="language-javascript">        messages.<span class="title function_">appendChild</span>(item);</span><span class="language-javascript">        <span class="variable language_">window</span>.<span class="title function_">scrollTo</span>(<span class="number">0</span>, <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollHeight</span>);</span><span class="language-javascript">      &#125;);</span><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  <span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></code></pre><p>클라이언트 측 코드를 작성하여 채팅 메시지를 입력하고 서버로 전송합니다. 서버에서 받은 메시지를 리스트에 추가하여 화면에 표시합니다.</p></li></ol><h2 id="테스트"><a href="#테스트" class="headerlink" title="테스트"></a>테스트</h2><p>이렇게 하면 실시간 채팅 애플리케이션을 구현할 수 있습니다. 이 코드를 실행하기 전에 <code>server.js</code> 파일을 실행하여 서버를 시작하세요.</p><pre><code class="highlight bash">node server.js</code></pre><p>서버가 성공적으로 실행되면, <code>http://localhost:3000</code>에서 실시간 채팅 애플리케이션을 테스트할 수 있습니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a><strong>마무리</strong></h2><p>이번 시간에는 실시간 통신의 개념과 Socket.io를 이해하고, Express를 활용하여 실시간 채팅 애플리케이션을 구현하는 방법을 알아보았습니다. 이를 바탕으로 더 복잡한 실시간 애플리케이션을 개발해보세요!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> web_필수 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>환경 변수 관리의 중요성과 Node.js에서 dotenv 사용법 실습</title>
      <link href="/web/essential/3/"/>
      <url>/web/essential/3/</url>
      
        <content type="html"><![CDATA[<h1 id="환경-변수-관리의-중요성과-Node-js에서-dotenv-사용법-실습"><a href="#환경-변수-관리의-중요성과-Node-js에서-dotenv-사용법-실습" class="headerlink" title="환경 변수 관리의 중요성과 Node.js에서 dotenv 사용법 실습"></a>환경 변수 관리의 중요성과 Node.js에서 dotenv 사용법 실습</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 환경 변수 관리의 중요성과 Node.js에서 <code>dotenv</code>를 사용하여 환경 변수를 관리하는 방법을 실습해보겠습니다. 환경 변수 관리는 애플리케이션의 설정 정보를 안전하고 효율적으로 관리하기 위해 매우 중요합니다.</p><h2 id="환경-변수-관리의-중요성"><a href="#환경-변수-관리의-중요성" class="headerlink" title="환경 변수 관리의 중요성"></a>환경 변수 관리의 중요성</h2><h3 id="환경-변수란"><a href="#환경-변수란" class="headerlink" title="환경 변수란?"></a>환경 변수란?</h3><p>환경 변수는 운영 체제에서 애플리케이션 실행 환경에 영향을 주는 값들의 모음입니다. 주로 설정 정보, 비밀 키, 데이터베이스 연결 정보 등을 환경 변수로 관리합니다. 환경 변수는 시스템 전반에 걸쳐 사용되며, 애플리케이션이 실행되는 동안 접근할 수 있습니다.</p><h3 id="환경-변수-관리의-중요성-1"><a href="#환경-변수-관리의-중요성-1" class="headerlink" title="환경 변수 관리의 중요성"></a>환경 변수 관리의 중요성</h3><ol><li><strong>보안</strong>: 비밀번호, API 키와 같은 민감한 정보를 소스 코드에 직접 포함하지 않고 환경 변수로 관리함으로써 보안을 강화할 수 있습니다.</li><li><strong>환경 독립성</strong>: 개발, 테스트, 프로덕션 환경에서 각각 다른 설정을 사용할 수 있어 환경 간의 독립성을 유지할 수 있습니다.</li><li><strong>유지 보수성</strong>: 설정 정보를 중앙에서 관리함으로써 유지 보수를 용이하게 할 수 있습니다. 설정 변경 시 소스 코드를 수정할 필요가 없습니다.</li></ol><h3 id="개발기와-운영기의-개념"><a href="#개발기와-운영기의-개념" class="headerlink" title="개발기와 운영기의 개념"></a>개발기와 운영기의 개념</h3><ul><li><strong>개발기 (Development Environment)</strong>: 애플리케이션을 개발하고 테스트하는 환경입니다. 이 환경에서는 디버깅과 로깅이 강화되며, 주로 로컬 머신이나 테스트 서버에서 동작합니다.</li><li><strong>운영기 (Production Environment)</strong>: 애플리케이션이 실제 사용자에게 제공되는 환경입니다. 이 환경에서는 성능과 보안이 최우선으로 고려되며, 주로 클라우드 서버나 데이터 센터에서 동작합니다.</li></ul><h2 id="준비하기"><a href="#준비하기" class="headerlink" title="준비하기"></a>준비하기</h2><p>먼저 필요한 패키지를 설치합니다:</p><pre><code class="highlight bash">npm init -ynpm install dotenv</code></pre><h2 id="env-파일-설정"><a href="#env-파일-설정" class="headerlink" title=".env 파일 설정"></a>.env 파일 설정</h2><p>각 환경에 맞는 <code>.env</code> 파일을 생성하고 환경 변수를 정의합니다. 이 파일들은 프로젝트 루트 디렉토리에 위치해야 합니다.</p><h3 id="env-development"><a href="#env-development" class="headerlink" title=".env.development"></a>.env.development</h3><pre><code class="highlight bash">PORT=3000DATABASE_URL=mongodb://localhost:27017/devdatabaseSECRET_KEY=mydevsecretkey</code></pre><h3 id="env-production"><a href="#env-production" class="headerlink" title=".env.production"></a>.env.production</h3><pre><code class="highlight bash">PORT=80DATABASE_URL=mongodb://prodserver:27017/proddatabaseSECRET_KEY=myprodsecretkey</code></pre><h2 id="서버-설정"><a href="#서버-설정" class="headerlink" title="서버 설정"></a>서버 설정</h2><p>다음은 필요한 모듈을 가져오고 서버를 설정하는 코드입니다. 자세한 부분은 뒤에서 알아보겠습니다.</p><pre><code class="highlight javascript"><span class="comment">// server.js</span><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);<span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&quot;mongoose&quot;</span>);<span class="keyword">const</span> dotenv = <span class="built_in">require</span>(<span class="string">&quot;dotenv&quot;</span>);<span class="comment">// 환경 변수 로드</span><span class="keyword">const</span> environment = process.<span class="property">argv</span>[<span class="number">2</span>] || <span class="string">&quot;development&quot;</span>;dotenv.<span class="title function_">config</span>(&#123; <span class="attr">path</span>: <span class="string">`.env.<span class="subst">$&#123;environment&#125;</span>`</span> &#125;);<span class="keyword">const</span> app = <span class="title function_">express</span>();<span class="keyword">const</span> port = process.<span class="property">env</span>.<span class="property">PORT</span> || <span class="number">3000</span>;<span class="comment">// 데이터베이스 연결 설정</span>mongoose.<span class="title function_">connect</span>(process.<span class="property">env</span>.<span class="property">DATABASE_URL</span>, &#123;  <span class="attr">useNewUrlParser</span>: <span class="literal">true</span>,  <span class="attr">useUnifiedTopology</span>: <span class="literal">true</span>,&#125;);<span class="comment">// 간단한 라우트 설정</span>app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  res.<span class="title function_">send</span>(<span class="string">`Hello, World! Running in <span class="subst">$&#123;environment&#125;</span> mode.`</span>);&#125;);app.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Server is running on &lt;http://localhost&gt;:<span class="subst">$&#123;port&#125;</span>`</span>);&#125;);</code></pre><h2 id="dotenv-설정-설명"><a href="#dotenv-설정-설명" class="headerlink" title="dotenv 설정 설명"></a>dotenv 설정 설명</h2><p>Node.js에서 <code>dotenv</code>를 사용하여 환경 변수를 설정하고 사용하는 방법을 설명합니다.</p><ol><li><p><strong>환경 변수 로드</strong>:</p><pre><code class="highlight javascript"><span class="keyword">const</span> environment = process.<span class="property">argv</span>[<span class="number">2</span>] || <span class="string">&quot;development&quot;</span>;dotenv.<span class="title function_">config</span>(&#123; <span class="attr">path</span>: <span class="string">`.env.<span class="subst">$&#123;environment&#125;</span>`</span> &#125;);</code></pre><p>서버를 실행할 때 환경 변수를 로드합니다. 서버 시작 시 환경을 파라미터로 받아서 해당 환경에 맞는 <code>.env</code> 파일을 로드합니다. 기본값은 <code>development</code>입니다.</p></li><li><p><strong>환경 변수 사용</strong>:</p><pre><code class="highlight javascript"><span class="keyword">const</span> port = process.<span class="property">env</span>.<span class="property">PORT</span> || <span class="number">3000</span>;</code></pre><p>환경 변수를 사용하여 포트 번호를 설정합니다. 환경 변수가 설정되지 않은 경우 기본값으로 <code>3000</code>을 사용합니다.</p></li><li><p><strong>데이터베이스 연결 설정</strong>:</p><pre><code class="highlight javascript"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&quot;mongoose&quot;</span>);mongoose.<span class="title function_">connect</span>(process.<span class="property">env</span>.<span class="property">DATABASE_URL</span>, &#123;  <span class="attr">useNewUrlParser</span>: <span class="literal">true</span>,  <span class="attr">useUnifiedTopology</span>: <span class="literal">true</span>,&#125;);</code></pre><p>환경 변수로부터 데이터베이스 URL을 가져와 MongoDB에 연결합니다.</p></li></ol><h2 id="테스트"><a href="#테스트" class="headerlink" title="테스트"></a>테스트</h2><p>이렇게 하면 환경 변수를 사용한 간단한 Express 애플리케이션을 구현할 수 있습니다. 이 코드를 실행하기 전에 <code>.env.development</code>와 <code>.env.production</code> 파일이 있는지 확인하고, <code>server.js</code> 파일을 실행하여 서버를 시작하세요.</p><h3 id="개발-환경에서-서버-실행"><a href="#개발-환경에서-서버-실행" class="headerlink" title="개발 환경에서 서버 실행"></a>개발 환경에서 서버 실행</h3><pre><code class="highlight bash">node server.js development</code></pre><h3 id="운영-환경에서-서버-실행"><a href="#운영-환경에서-서버-실행" class="headerlink" title="운영 환경에서 서버 실행"></a>운영 환경에서 서버 실행</h3><pre><code class="highlight bash">node server.js production</code></pre><p>서버가 성공적으로 실행되면, <code>http://localhost:3000</code> (또는 <code>http://localhost</code> for production)에서 애플리케이션을 테스트할 수 있습니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 환경 변수 관리의 중요성과 Node.js에서 <code>dotenv</code>를 사용하여 환경 변수를 관리하는 방법을 알아보았습니다. 또한, 개발기와 운영기의 개념을 이해하고, 각 환경에 맞게 서버를 설정하고 실행하는 방법을 실습했습니다. 이를 바탕으로 더 안전하고 효율적인 애플리케이션을 개발해보세요!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> web_필수 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>파일 업로드 및 관리 원리와 Express로 실습하기</title>
      <link href="/web/essential/2/"/>
      <url>/web/essential/2/</url>
      
        <content type="html"><![CDATA[<h1 id="파일-업로드-및-관리-원리와-Express로-실습하기"><a href="#파일-업로드-및-관리-원리와-Express로-실습하기" class="headerlink" title="파일 업로드 및 관리 원리와 Express로 실습하기"></a>파일 업로드 및 관리 원리와 Express로 실습하기</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 파일 업로드 및 관리 원리에 대해 알아보고, Express를 활용하여 파일 업로드를 실습해보겠습니다. 파일 업로드와 관리는 웹 애플리케이션에서 매우 중요한 기능 중 하나입니다.</p><h2 id="파일-업로드-및-관리-원리"><a href="#파일-업로드-및-관리-원리" class="headerlink" title="파일 업로드 및 관리 원리"></a>파일 업로드 및 관리 원리</h2><h3 id="파일-업로드의-개념"><a href="#파일-업로드의-개념" class="headerlink" title="파일 업로드의 개념"></a>파일 업로드의 개념</h3><p>파일 업로드는 클라이언트(사용자)의 로컬 디바이스에서 서버로 파일을 전송하는 과정을 말합니다. 파일 업로드 기능은 이미지, 문서, 동영상 등의 미디어 파일을 서버에 저장하거나 데이터베이스에 기록할 때 사용됩니다.</p><h3 id="파일-관리의-개념"><a href="#파일-관리의-개념" class="headerlink" title="파일 관리의 개념"></a>파일 관리의 개념</h3><p>파일 관리는 서버에 업로드된 파일을 효율적으로 저장, 검색, 수정, 삭제하는 과정을 포함합니다. 이는 파일 시스템 또는 데이터베이스를 사용하여 구현할 수 있습니다.</p><h3 id="주요-고려-사항"><a href="#주요-고려-사항" class="headerlink" title="주요 고려 사항"></a>주요 고려 사항</h3><ul><li><strong>파일 크기 제한</strong>: 서버 성능과 저장 공간을 고려하여 파일 크기를 제한해야 합니다.</li><li><strong>파일 형식 검증</strong>: 허용된 파일 형식만 업로드하도록 검증해야 합니다.</li><li><strong>보안</strong>: 악성 파일 업로드를 방지하기 위해 파일 형식 검증과 사용자 인증을 철저히 해야 합니다.</li><li><strong>성능</strong>: 대용량 파일 업로드 시 서버 성능을 최적화해야 합니다.</li></ul><h2 id="준비하기"><a href="#준비하기" class="headerlink" title="준비하기"></a>준비하기</h2><p>먼저 필요한 패키지를 설치합니다:</p><pre><code class="highlight bash">npm init -ynpm install express multer</code></pre><h2 id="서버-설정"><a href="#서버-설정" class="headerlink" title="서버 설정"></a>서버 설정</h2><p>다음은 필요한 모듈을 가져오고 서버를 설정하는 코드입니다. 자세한 부분은 뒤에서 알아보겠습니다.</p><pre><code class="highlight javascript"><span class="comment">// server.js</span><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);<span class="keyword">const</span> multer = <span class="built_in">require</span>(<span class="string">&quot;multer&quot;</span>);<span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);<span class="keyword">const</span> app = <span class="title function_">express</span>();<span class="keyword">const</span> port = <span class="number">3000</span>;<span class="comment">// 파일 저장 설정</span><span class="keyword">const</span> storage = multer.<span class="title function_">diskStorage</span>(&#123;  <span class="attr">destination</span>: <span class="function">(<span class="params">req, file, cb</span>) =&gt;</span> &#123;    <span class="title function_">cb</span>(<span class="literal">null</span>, <span class="string">&quot;uploads/&quot;</span>);  &#125;,  <span class="attr">filename</span>: <span class="function">(<span class="params">req, file, cb</span>) =&gt;</span> &#123;    <span class="title function_">cb</span>(<span class="literal">null</span>, <span class="string">`<span class="subst">$&#123;<span class="built_in">Date</span>.now()&#125;</span>-<span class="subst">$&#123;file.originalname&#125;</span>`</span>);  &#125;,&#125;);<span class="keyword">const</span> upload = <span class="title function_">multer</span>(&#123; storage &#125;);app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&quot;public&quot;</span>));<span class="comment">// 파일 업로드 엔드포인트</span>app.<span class="title function_">post</span>(<span class="string">&quot;/upload&quot;</span>, upload.<span class="title function_">single</span>(<span class="string">&quot;file&quot;</span>), <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  res.<span class="title function_">send</span>(<span class="string">&quot;File uploaded successfully.&quot;</span>);&#125;);<span class="comment">// 파일 목록 조회 엔드포인트</span>app.<span class="title function_">get</span>(<span class="string">&quot;/files&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  <span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);  <span class="keyword">const</span> files = fs.<span class="title function_">readdirSync</span>(<span class="string">&quot;uploads/&quot;</span>);  res.<span class="title function_">send</span>(files);&#125;);<span class="comment">// 파일 다운로드 엔드포인트</span>app.<span class="title function_">get</span>(<span class="string">&quot;/download/:filename&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  <span class="keyword">const</span> filename = req.<span class="property">params</span>.<span class="property">filename</span>;  <span class="keyword">const</span> filepath = path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;uploads&quot;</span>, filename);  res.<span class="title function_">download</span>(filepath);&#125;);app.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Server is running on &lt;http://localhost&gt;:<span class="subst">$&#123;port&#125;</span>`</span>);&#125;);</code></pre><h2 id="서버-설정-설명"><a href="#서버-설정-설명" class="headerlink" title="서버 설정 설명"></a>서버 설정 설명</h2><p>Express와 Multer를 사용하여 파일 업로드 및 관리 기능을 구현하는 방법을 설명합니다.</p><ol><li><p><strong>파일 저장 설정</strong>:</p><pre><code class="highlight javascript"><span class="keyword">const</span> storage = multer.<span class="title function_">diskStorage</span>(&#123;  <span class="attr">destination</span>: <span class="function">(<span class="params">req, file, cb</span>) =&gt;</span> &#123;    <span class="title function_">cb</span>(<span class="literal">null</span>, <span class="string">&quot;uploads/&quot;</span>);  &#125;,  <span class="attr">filename</span>: <span class="function">(<span class="params">req, file, cb</span>) =&gt;</span> &#123;    <span class="title function_">cb</span>(<span class="literal">null</span>, <span class="string">`<span class="subst">$&#123;<span class="built_in">Date</span>.now()&#125;</span>-<span class="subst">$&#123;file.originalname&#125;</span>`</span>);  &#125;,&#125;);<span class="keyword">const</span> upload = <span class="title function_">multer</span>(&#123; storage &#125;);</code></pre><p>Multer를 사용하여 파일 저장 설정을 정의합니다. 파일은 <code>uploads/</code> 디렉토리에 저장되며, 파일 이름은 현재 시간과 원래 파일 이름을 결합하여 설정됩니다.</p></li><li><p><strong>파일 업로드 엔드포인트</strong>:</p><pre><code class="highlight javascript">app.<span class="title function_">post</span>(<span class="string">&quot;/upload&quot;</span>, upload.<span class="title function_">single</span>(<span class="string">&quot;file&quot;</span>), <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  res.<span class="title function_">send</span>(<span class="string">&quot;File uploaded successfully.&quot;</span>);&#125;);</code></pre><p><code>POST /upload</code> 엔드포인트를 통해 파일을 업로드합니다. 업로드된 파일은 Multer의 설정에 따라 지정된 디렉토리에 저장됩니다.</p></li><li><p><strong>파일 목록 조회 엔드포인트</strong>:</p><pre><code class="highlight javascript">app.<span class="title function_">get</span>(<span class="string">&quot;/files&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  <span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);  <span class="keyword">const</span> files = fs.<span class="title function_">readdirSync</span>(<span class="string">&quot;uploads/&quot;</span>);  res.<span class="title function_">send</span>(files);&#125;);</code></pre><p><code>GET /files</code> 엔드포인트를 통해 서버에 업로드된 파일 목록을 조회합니다.</p></li><li><p><strong>파일 다운로드 엔드포인트</strong>:</p><pre><code class="highlight javascript">app.<span class="title function_">get</span>(<span class="string">&quot;/download/:filename&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  <span class="keyword">const</span> filename = req.<span class="property">params</span>.<span class="property">filename</span>;  <span class="keyword">const</span> filepath = path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;uploads&quot;</span>, filename);  res.<span class="title function_">download</span>(filepath);&#125;);</code></pre><p><code>GET /download/:filename</code> 엔드포인트를 통해 파일을 다운로드합니다. 요청된 파일은 <code>uploads/</code> 디렉토리에서 검색됩니다.</p></li></ol><h2 id="테스트"><a href="#테스트" class="headerlink" title="테스트"></a>테스트</h2><p>이렇게 하면 파일 업로드 및 관리 시스템을 구현할 수 있습니다.<br>이 코드를 실행하기 전에 <code>uploads</code> 디렉토리를 생성하고, <code>server.js</code> 파일을 실행하여 서버를 시작하세요.</p><pre><code class="highlight bash">node server.js</code></pre><p>서버가 성공적으로 실행되면, <code>http://localhost:3000</code>에서 파일 업로드 및 관리를 테스트할 수 있습니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 파일 업로드 및 관리 원리를 이해하고, Express를 활용하여 이를 실습하는 방법을 알아보았습니다. 이를 바탕으로 더 복잡한 파일 관리 시스템을 개발해보세요!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> web_필수 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MarkDown(마크다운) 작성법</title>
      <link href="/etc/markdown/"/>
      <url>/etc/markdown/</url>
      
        <content type="html"><![CDATA[<details><summary>키워드</summary>Markdown 가이드Markdown 사용법Markdown 문법Markdown 튜토리얼Markdown 예제Markdown 제목 만들기Markdown 리스트 작성Markdown 텍스트 스타일Markdown 링크 추가Markdown 이미지 삽입Markdown 코드 블록Markdown 인용문Markdown 표 만들기Markdown 체크리스트Markdown 각주 사용법Markdown 하이라이트Markdown 이모지 사용Markdown HTML 혼용Markdown 목차 작성Markdown 줄바꿈</details><h1 id="MarkDown-마크다운-작성법"><a href="#MarkDown-마크다운-작성법" class="headerlink" title="MarkDown(마크다운) 작성법"></a>MarkDown(마크다운) 작성법</h1><h2 id="1-제목-Heading"><a href="#1-제목-Heading" class="headerlink" title="1. 제목 (Heading)"></a>1. 제목 (Heading)</h2><h3 id="이렇게-쓰면"><a href="#이렇게-쓰면" class="headerlink" title="이렇게 쓰면:"></a>이렇게 쓰면:</h3><pre><code class="highlight markdown"><span class="section"># 제목 1</span><span class="section">## 제목 2</span><span class="section">### 제목 3</span><span class="section">#### 제목 4</span><span class="section">##### 제목 5</span><span class="section">###### 제목 6</span></code></pre><h3 id="이렇게-나와요"><a href="#이렇게-나와요" class="headerlink" title="이렇게 나와요:"></a>이렇게 나와요:</h3><h1 id="제목-1"><a href="#제목-1" class="headerlink" title="제목 1"></a>제목 1</h1><h2 id="제목-2"><a href="#제목-2" class="headerlink" title="제목 2"></a>제목 2</h2><h3 id="제목-3"><a href="#제목-3" class="headerlink" title="제목 3"></a>제목 3</h3><h4 id="제목-4"><a href="#제목-4" class="headerlink" title="제목 4"></a>제목 4</h4><h5 id="제목-5"><a href="#제목-5" class="headerlink" title="제목 5"></a>제목 5</h5><h6 id="제목-6"><a href="#제목-6" class="headerlink" title="제목 6"></a>제목 6</h6><hr><h2 id="2-리스트-List"><a href="#2-리스트-List" class="headerlink" title="2. 리스트 (List)"></a>2. 리스트 (List)</h2><h3 id="2-1-순서가-있는-리스트"><a href="#2-1-순서가-있는-리스트" class="headerlink" title="2-1. 순서가 있는 리스트"></a>2-1. 순서가 있는 리스트</h3><h3 id="이렇게-쓰면-1"><a href="#이렇게-쓰면-1" class="headerlink" title="이렇게 쓰면:"></a>이렇게 쓰면:</h3><pre><code class="highlight markdown"><span class="bullet">1.</span> 첫 번째 아이템<span class="bullet">2.</span> 두 번째 아이템<span class="bullet">3.</span> 세 번째 아이템</code></pre><h3 id="이렇게-나와요-1"><a href="#이렇게-나와요-1" class="headerlink" title="이렇게 나와요:"></a>이렇게 나와요:</h3><ol><li>첫 번째 아이템</li><li>두 번째 아이템</li><li>세 번째 아이템</li></ol><h3 id="2-2-순서가-없는-리스트"><a href="#2-2-순서가-없는-리스트" class="headerlink" title="2-2. 순서가 없는 리스트"></a>2-2. 순서가 없는 리스트</h3><h3 id="이렇게-쓰면-2"><a href="#이렇게-쓰면-2" class="headerlink" title="이렇게 쓰면:"></a>이렇게 쓰면:</h3><pre><code class="highlight markdown"><span class="bullet">-</span> 첫 번째 아이템<span class="bullet">-</span> 두 번째 아이템<span class="bullet">-</span> 세 번째 아이템</code></pre><h3 id="이렇게-나와요-2"><a href="#이렇게-나와요-2" class="headerlink" title="이렇게 나와요:"></a>이렇게 나와요:</h3><ul><li>첫 번째 아이템</li><li>두 번째 아이템</li><li>세 번째 아이템</li></ul><hr><h2 id="3-텍스트-스타일-Text-Style"><a href="#3-텍스트-스타일-Text-Style" class="headerlink" title="3. 텍스트 스타일 (Text Style)"></a>3. 텍스트 스타일 (Text Style)</h2><h3 id="이렇게-쓰면-3"><a href="#이렇게-쓰면-3" class="headerlink" title="이렇게 쓰면:"></a>이렇게 쓰면:</h3><pre><code class="highlight markdown"><span class="strong">**굵게**</span>  <span class="emphasis">_기울임_</span>  ~~취소선~~  <span class="emphasis">_밑줄_</span>  <span class="strong">**<span class="emphasis">_굵게 + 기울임_</span>**</span></code></pre><h3 id="이렇게-나와요-3"><a href="#이렇게-나와요-3" class="headerlink" title="이렇게 나와요:"></a>이렇게 나와요:</h3><p><strong>굵게</strong><br><em>기울임</em><br><del>취소선</del><br><em>밑줄</em><br><strong><em>굵게 + 기울임</em></strong></p><hr><h2 id="4-링크-Link"><a href="#4-링크-Link" class="headerlink" title="4. 링크 (Link)"></a>4. 링크 (Link)</h2><h3 id="이렇게-쓰면-4"><a href="#이렇게-쓰면-4" class="headerlink" title="이렇게 쓰면:"></a>이렇게 쓰면:</h3><pre><code class="highlight markdown">[<span class="string">newcoding 이동하기</span>](<span class="link">https://www.newcoding.co.kr</span>)</code></pre><h3 id="이렇게-나와요-4"><a href="#이렇게-나와요-4" class="headerlink" title="이렇게 나와요:"></a>이렇게 나와요:</h3><p><a href="https://www.newcoding.co.kr/">newcoding 이동하기</a></p><h3 id="4-1-참조-링크"><a href="#4-1-참조-링크" class="headerlink" title="4-1. 참조 링크"></a>4-1. 참조 링크</h3><h3 id="이렇게-쓰면-5"><a href="#이렇게-쓰면-5" class="headerlink" title="이렇게 쓰면:"></a>이렇게 쓰면:</h3><pre><code class="highlight markdown">[<span class="string">Vuex 학습</span>][<span class="symbol">newcoding Vuex 링크</span>][<span class="symbol">newcoding Vuex 링크</span>]: <span class="link">https://www.newcoding.co.kr/vue/13/</span></code></pre><h3 id="이렇게-나와요-5"><a href="#이렇게-나와요-5" class="headerlink" title="이렇게 나와요:"></a>이렇게 나와요:</h3><p><a href="https://www.newcoding.co.kr/vue/13/">Vuex 학습</a></p><hr><h2 id="5-이미지-Image"><a href="#5-이미지-Image" class="headerlink" title="5. 이미지 (Image)"></a>5. 이미지 (Image)</h2><h3 id="이렇게-쓰면-6"><a href="#이렇게-쓰면-6" class="headerlink" title="이렇게 쓰면:"></a>이렇게 쓰면:</h3><pre><code class="highlight markdown">![<span class="string">난동부리는 꼬부기</span>](<span class="link">https://www.newcoding.co.kr/img/booki.gif</span>)</code></pre><h3 id="이렇게-나와요-6"><a href="#이렇게-나와요-6" class="headerlink" title="이렇게 나와요:"></a>이렇게 나와요:</h3><p><img src="https://www.newcoding.co.kr/img/booki.gif" alt="난동부리는 꼬부기"></p><h3 id="5-1-참조-이미지"><a href="#5-1-참조-이미지" class="headerlink" title="5-1. 참조 이미지"></a>5-1. 참조 이미지</h3><h3 id="이렇게-쓰면-7"><a href="#이렇게-쓰면-7" class="headerlink" title="이렇게 쓰면:"></a>이렇게 쓰면:</h3><pre><code class="highlight markdown">![<span class="string">뉴코딩 간판</span>][<span class="symbol">난동부리는 꼬부기</span>][<span class="symbol">난동부리는 꼬부기</span>]: <span class="link">https://www.newcoding.co.kr/img/booki.gif</span></code></pre><h3 id="이렇게-나와요-7"><a href="#이렇게-나와요-7" class="headerlink" title="이렇게 나와요:"></a>이렇게 나와요:</h3><p><img src="https://www.newcoding.co.kr/img/booki.gif" alt="뉴코딩 간판"></p><hr><h2 id="6-코드-블록-Code-Block"><a href="#6-코드-블록-Code-Block" class="headerlink" title="6. 코드 블록 (Code Block)"></a>6. 코드 블록 (Code Block)</h2><h3 id="6-1-특정-언어를-지정한-코드-블록"><a href="#6-1-특정-언어를-지정한-코드-블록" class="headerlink" title="6-1. 특정 언어를 지정한 코드 블록"></a>6-1. 특정 언어를 지정한 코드 블록</h3><h3 id="이렇게-쓰면-8"><a href="#이렇게-쓰면-8" class="headerlink" title="이렇게 쓰면:"></a>이렇게 쓰면:</h3><pre><code class="highlight markdown"><span class="code">```python</span><span class="code">def hello_world():</span><span class="code">    print(&quot;Hello, World!&quot;)</span><span class="code">```</span></code></pre><h3 id="이렇게-나와요-8"><a href="#이렇게-나와요-8" class="headerlink" title="이렇게 나와요:"></a>이렇게 나와요:</h3><pre><code class="highlight python"><span class="keyword">def</span> <span class="title function_">hello_world</span>():    <span class="built_in">print</span>(<span class="string">&quot;Hello, World!&quot;</span>)</code></pre><hr><h2 id="7-인라인-코드-Inline-Code"><a href="#7-인라인-코드-Inline-Code" class="headerlink" title="7. 인라인 코드 (Inline Code)"></a>7. 인라인 코드 (Inline Code)</h2><h3 id="이렇게-쓰면-9"><a href="#이렇게-쓰면-9" class="headerlink" title="이렇게 쓰면:"></a>이렇게 쓰면:</h3><pre><code class="highlight markdown">이것은 <span class="code">`인라인 코드`</span>입니다.</code></pre><h3 id="이렇게-나와요-9"><a href="#이렇게-나와요-9" class="headerlink" title="이렇게 나와요:"></a>이렇게 나와요:</h3><p>이것은 <code>인라인 코드</code>입니다.</p><hr><h2 id="8-인용문-Blockquote"><a href="#8-인용문-Blockquote" class="headerlink" title="8. 인용문 (Blockquote)"></a>8. 인용문 (Blockquote)</h2><h3 id="이렇게-쓰면-10"><a href="#이렇게-쓰면-10" class="headerlink" title="이렇게 쓰면:"></a>이렇게 쓰면:</h3><pre><code class="highlight markdown"><span class="quote">&gt; 이것은 인용문입니다.</span><span class="quote">&gt;</span><span class="quote">&gt; &gt; 중첩된 인용문입니다.</span></code></pre><h3 id="이렇게-나와요-10"><a href="#이렇게-나와요-10" class="headerlink" title="이렇게 나와요:"></a>이렇게 나와요:</h3><blockquote><p>이것은 인용문입니다.</p><blockquote><p>중첩된 인용문입니다.</p></blockquote></blockquote><hr><h2 id="9-수평선-Horizontal-Rule"><a href="#9-수평선-Horizontal-Rule" class="headerlink" title="9. 수평선 (Horizontal Rule)"></a>9. 수평선 (Horizontal Rule)</h2><h3 id="이렇게-쓰면-11"><a href="#이렇게-쓰면-11" class="headerlink" title="이렇게 쓰면:"></a>이렇게 쓰면:</h3><pre><code class="highlight markdown">---</code></pre><pre><code class="highlight markdown">---</code></pre><pre><code class="highlight markdown">---</code></pre><h3 id="이렇게-나와요-11"><a href="#이렇게-나와요-11" class="headerlink" title="이렇게 나와요:"></a>이렇게 나와요:</h3><hr><hr><hr><hr><h2 id="10-표-Table"><a href="#10-표-Table" class="headerlink" title="10. 표 (Table)"></a>10. 표 (Table)</h2><h3 id="이렇게-쓰면-12"><a href="#이렇게-쓰면-12" class="headerlink" title="이렇게 쓰면:"></a>이렇게 쓰면:</h3><pre><code class="highlight markdown">| 제목 1 | 제목 2 | 제목 3 || ------ | ------ | ------ || 내용 1 | 내용 2 | 내용 3 || 내용 4 | 내용 5 | 내용 6 |</code></pre><h3 id="이렇게-나와요-12"><a href="#이렇게-나와요-12" class="headerlink" title="이렇게 나와요:"></a>이렇게 나와요:</h3><table><thead><tr><th>제목 1</th><th>제목 2</th><th>제목 3</th></tr></thead><tbody><tr><td>내용 1</td><td>내용 2</td><td>내용 3</td></tr><tr><td>내용 4</td><td>내용 5</td><td>내용 6</td></tr></tbody></table><hr><h2 id="11-체크박스-Task-List"><a href="#11-체크박스-Task-List" class="headerlink" title="11. 체크박스 (Task List)"></a>11. 체크박스 (Task List)</h2><h3 id="이렇게-쓰면-13"><a href="#이렇게-쓰면-13" class="headerlink" title="이렇게 쓰면:"></a>이렇게 쓰면:</h3><pre><code class="highlight markdown"><span class="bullet">-</span> [x] 완료된 작업<span class="bullet">-</span> [ ] 미완료된 작업</code></pre><h3 id="이렇게-나와요-13"><a href="#이렇게-나와요-13" class="headerlink" title="이렇게 나와요:"></a>이렇게 나와요:</h3><ul><li><input checked="" disabled="" type="checkbox"> 완료된 작업</li><li><input disabled="" type="checkbox"> 미완료된 작업</li></ul><hr><h2 id="12-각주-Footnote"><a href="#12-각주-Footnote" class="headerlink" title="12. 각주 (Footnote)"></a>12. 각주 (Footnote)</h2><h3 id="이렇게-쓰면-14"><a href="#이렇게-쓰면-14" class="headerlink" title="이렇게 쓰면:"></a>이렇게 쓰면:</h3><pre><code class="highlight markdown">이것은 각주 예시입니다[^1].[<span class="symbol">^1</span>]: <span class="link">각주 내용입니다.</span></code></pre><h3 id="이렇게-나와요-14"><a href="#이렇게-나와요-14" class="headerlink" title="이렇게 나와요:"></a>이렇게 나와요:</h3><p>이것은 각주 예시입니다[^1].</p><p>[^1]: 각주 내용입니다.</p><hr><h2 id="13-하이라이트-Highlight"><a href="#13-하이라이트-Highlight" class="headerlink" title="13. 하이라이트 (Highlight)"></a>13. 하이라이트 (Highlight)</h2><h3 id="이렇게-쓰면-15"><a href="#이렇게-쓰면-15" class="headerlink" title="이렇게 쓰면:"></a>이렇게 쓰면:</h3><pre><code class="highlight markdown">==강조할 텍스트==</code></pre><h3 id="이렇게-나와요-15"><a href="#이렇게-나와요-15" class="headerlink" title="이렇게 나와요:"></a>이렇게 나와요:</h3><p>&#x3D;&#x3D;강조할 텍스트&#x3D;&#x3D;</p><hr><h2 id="14-이모지-Emoji"><a href="#14-이모지-Emoji" class="headerlink" title="14. 이모지 (Emoji)"></a>14. 이모지 (Emoji)</h2><h3 id="이렇게-쓰면-16"><a href="#이렇게-쓰면-16" class="headerlink" title="이렇게 쓰면:"></a>이렇게 쓰면:</h3><pre><code class="highlight markdown">:smile: :thumbsup: :heart:</code></pre><h3 id="이렇게-나와요-16"><a href="#이렇게-나와요-16" class="headerlink" title="이렇게 나와요:"></a>이렇게 나와요:</h3><p>:smile: :thumbsup: :heart:</p><hr><h2 id="15-HTML-사용"><a href="#15-HTML-사용" class="headerlink" title="15. HTML 사용"></a>15. HTML 사용</h2><p>Markdown은 HTML과 함께 사용할 수 있습니다.</p><h3 id="이렇게-쓰면-17"><a href="#이렇게-쓰면-17" class="headerlink" title="이렇게 쓰면:"></a>이렇게 쓰면:</h3><pre><code class="highlight markdown"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span>이것은 HTML을 사용한 문단입니다.<span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></code></pre><h3 id="이렇게-나와요-17"><a href="#이렇게-나와요-17" class="headerlink" title="이렇게 나와요:"></a>이렇게 나와요:</h3><p>이것은 HTML을 사용한 문단입니다.</p><hr><h2 id="16-원시-HTML-Raw-HTML"><a href="#16-원시-HTML-Raw-HTML" class="headerlink" title="16. 원시 HTML (Raw HTML)"></a>16. 원시 HTML (Raw HTML)</h2><h3 id="이렇게-쓰면-18"><a href="#이렇게-쓰면-18" class="headerlink" title="이렇게 쓰면:"></a>이렇게 쓰면:</h3><pre><code class="highlight markdown"><span class="language-xml"><span class="tag">&lt;<span class="name">details</span>&gt;</span></span>  <span class="language-xml"><span class="tag">&lt;<span class="name">summary</span>&gt;</span></span>여기를 클릭하세요<span class="language-xml"><span class="tag">&lt;/<span class="name">summary</span>&gt;</span></span>  숨겨진 내용입니다.<span class="language-xml"><span class="tag">&lt;/<span class="name">details</span>&gt;</span></span></code></pre><h3 id="이렇게-나와요-18"><a href="#이렇게-나와요-18" class="headerlink" title="이렇게 나와요:"></a>이렇게 나와요:</h3><details>  <summary>여기를 클릭하세요</summary>  숨겨진 내용입니다.</details><hr><h2 id="17-탈출-문자-Escape-Character"><a href="#17-탈출-문자-Escape-Character" class="headerlink" title="17. 탈출 문자 (Escape Character)"></a>17. 탈출 문자 (Escape Character)</h2><h3 id="이렇게-쓰면-19"><a href="#이렇게-쓰면-19" class="headerlink" title="이렇게 쓰면:"></a>이렇게 쓰면:</h3><pre><code class="highlight markdown">\<span class="emphasis">*별표\*</span>를 사용하려면 이스케이프 문자를 사용하세요.</code></pre><h3 id="이렇게-나와요-19"><a href="#이렇게-나와요-19" class="headerlink" title="이렇게 나와요:"></a>이렇게 나와요:</h3><p>*별표*를 사용하려면 이스케이프 문자를 사용하세요.</p><hr><h2 id="18-줄바꿈-Line-Breaks"><a href="#18-줄바꿈-Line-Breaks" class="headerlink" title="18. 줄바꿈 (Line Breaks)"></a>18. 줄바꿈 (Line Breaks)</h2><h3 id="이렇게-쓰면-20"><a href="#이렇게-쓰면-20" class="headerlink" title="이렇게 쓰면:"></a>이렇게 쓰면:</h3><pre><code class="highlight markdown">한 줄의 끝에 두 개의 공백을 넣고 엔터를 치면줄이 바뀝니다.</code></pre><h3 id="이렇게-나와요-20"><a href="#이렇게-나와요-20" class="headerlink" title="이렇게 나와요:"></a>이렇게 나와요:</h3><p>한 줄의 끝에 두 개의 공백을 넣고 엔터를 치면<br>줄이 바뀝니다.</p><hr><h2 id="19-목차-Table-of-Contents"><a href="#19-목차-Table-of-Contents" class="headerlink" title="19. 목차 (Table of Contents)"></a>19. 목차 (Table of Contents)</h2><p>Markdown 자체로 목차를 자동 생성할 수는 없지만, 링크를 사용해 목차를 만들 수 있습니다.</p><h3 id="이렇게-쓰면-21"><a href="#이렇게-쓰면-21" class="headerlink" title="이렇게 쓰면:"></a>이렇게 쓰면:</h3><pre><code class="highlight markdown"><span class="bullet">-</span> [<span class="string">삼성 바로가기</span>](<span class="link">#삼성</span>)<span class="bullet">-</span> [<span class="string">애플 바로가기</span>](<span class="link">#애플</span>)<span class="bullet">-</span> [<span class="string">샤오미 바로가기</span>](<span class="link">#샤오미</span>)<span class="section"># 삼성</span>갤럭시플립, 갤럭시워치<span class="section"># 애플</span>아이패드, 아이폰, 애플워치<span class="section"># 샤오미</span>뭐 있지?..</code></pre><h3 id="이렇게-나와요-21"><a href="#이렇게-나와요-21" class="headerlink" title="이렇게 나와요:"></a>이렇게 나와요:</h3><ul><li><a href="#%EC%82%BC%EC%84%B1">삼성 바로가기</a></li><li><a href="#%EC%95%A0%ED%94%8C">애플 바로가기</a></li><li><a href="#%EC%83%A4%EC%98%A4%EB%AF%B8">샤오미 바로가기</a></li></ul><h1 id="삼성"><a href="#삼성" class="headerlink" title="삼성"></a>삼성</h1><p>갤럭시플립, 갤럭시워치</p><h1 id="애플"><a href="#애플" class="headerlink" title="애플"></a>애플</h1><p>아이패드, 아이폰, 애플워치</p><h1 id="샤오미"><a href="#샤오미" class="headerlink" title="샤오미"></a>샤오미</h1><p>뭐 있지?..</p>]]></content>
      
      
      <categories>
          
          <category> etc </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB를 사용한 NoSQL CRUD의 이해, 그리고 Express 실습</title>
      <link href="/web/essential/1/"/>
      <url>/web/essential/1/</url>
      
        <content type="html"><![CDATA[<h1 id="MongoDB를-사용한-NoSQL-CRUD의-이해-그리고-Express-실습"><a href="#MongoDB를-사용한-NoSQL-CRUD의-이해-그리고-Express-실습" class="headerlink" title="MongoDB를 사용한 NoSQL CRUD의 이해, 그리고 Express 실습"></a>MongoDB를 사용한 NoSQL CRUD의 이해, 그리고 Express 실습</h1><p>안녕하세요. <strong>뉴코딩</strong>입니다!<br>이번 시간에는 MongoDB를 사용하여 NoSQL CRUD를 이해하고, Express를 활용하여 실습해보겠습니다. 먼저 NoSQL과 관계형 데이터베이스(RDB)의 차이점에 대해 알아보겠습니다.</p><h2 id="NoSQL과-RDB의-차이점"><a href="#NoSQL과-RDB의-차이점" class="headerlink" title="NoSQL과 RDB의 차이점"></a>NoSQL과 RDB의 차이점</h2><table><thead><tr><th>특성</th><th>관계형 데이터베이스 (RDB)</th><th>NoSQL 데이터베이스</th></tr></thead><tbody><tr><td><strong>구조</strong></td><td>테이블 기반의 데이터 구조</td><td>문서(document), 키-값(key-value), 그래프(graph), 컬럼(column) 등 다양한 데이터 모델</td></tr><tr><td><strong>스키마</strong></td><td>엄격한 스키마를 가짐</td><td>유연한 스키마를 가짐</td></tr><tr><td><strong>조인</strong></td><td>여러 테이블 간의 관계를 정의하고 조인 사용</td><td>조인을 사용하지 않으며, 중첩된 문서 구조 사용</td></tr><tr><td><strong>확장성</strong></td><td>수직적 확장(스케일 업)</td><td>수평적 확장(스케일 아웃)</td></tr><tr><td><strong>사용 예</strong></td><td>금융, 회계, ERP 시스템 등</td><td>소셜 네트워크, 실시간 분석, 콘텐츠 관리 시스템 등</td></tr><tr><td><strong>데이터 무결성</strong></td><td>높은 무결성 보장</td><td>데이터 무결성 보장 낮음</td></tr><tr><td><strong>성능</strong></td><td>복잡한 쿼리에 최적화</td><td>대용량 데이터 처리에 최적화</td></tr></tbody></table><h2 id="준비하기"><a href="#준비하기" class="headerlink" title="준비하기"></a>준비하기</h2><p>먼저 필요한 패키지를 설치합니다:</p><pre><code class="highlight bash">npm init -ynpm install express mongoose body-parser</code></pre><h2 id="MongoDB-설정"><a href="#MongoDB-설정" class="headerlink" title="MongoDB 설정"></a>MongoDB 설정</h2><p>MongoDB를 설치하고 로컬에서 실행하거나 MongoDB Atlas와 같은 클라우드 서비스를 사용할 수 있습니다. 여기서는 로컬 MongoDB 인스턴스를 사용합니다.</p><h2 id="서버-설정"><a href="#서버-설정" class="headerlink" title="서버 설정"></a>서버 설정</h2><p>다음은 필요한 모듈을 가져오고 서버를 설정하는 코드입니다. 자세한 부분은 뒤에서 알아보겠습니다.</p><pre><code class="highlight javascript"><span class="comment">// server.js</span><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);<span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&quot;mongoose&quot;</span>);<span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&quot;body-parser&quot;</span>);<span class="keyword">const</span> app = <span class="title function_">express</span>();<span class="keyword">const</span> port = <span class="number">3000</span>;<span class="comment">// MongoDB 연결 설정</span>mongoose.<span class="title function_">connect</span>(<span class="string">&quot;mongodb://localhost:27017/mydatabase&quot;</span>, &#123;  <span class="attr">useNewUrlParser</span>: <span class="literal">true</span>,  <span class="attr">useUnifiedTopology</span>: <span class="literal">true</span>,&#125;);<span class="comment">// 스키마 및 모델 정의</span><span class="keyword">const</span> userSchema = <span class="keyword">new</span> mongoose.<span class="title class_">Schema</span>(&#123;  <span class="attr">name</span>: <span class="title class_">String</span>,  <span class="attr">email</span>: <span class="title class_">String</span>,  <span class="attr">age</span>: <span class="title class_">Number</span>,&#125;);<span class="keyword">const</span> <span class="title class_">User</span> = mongoose.<span class="title function_">model</span>(<span class="string">&quot;User&quot;</span>, userSchema);app.<span class="title function_">use</span>(bodyParser.<span class="title function_">json</span>());<span class="comment">// CREATE</span>app.<span class="title function_">post</span>(<span class="string">&quot;/users&quot;</span>, <span class="title function_">async</span> (req, res) =&gt; &#123;  <span class="keyword">const</span> user = <span class="keyword">new</span> <span class="title class_">User</span>(req.<span class="property">body</span>);  <span class="keyword">try</span> &#123;    <span class="keyword">await</span> user.<span class="title function_">save</span>();    res.<span class="title function_">status</span>(<span class="number">201</span>).<span class="title function_">send</span>(user);  &#125; <span class="keyword">catch</span> (error) &#123;    res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">send</span>(error);  &#125;&#125;);<span class="comment">// READ</span>app.<span class="title function_">get</span>(<span class="string">&quot;/users&quot;</span>, <span class="title function_">async</span> (req, res) =&gt; &#123;  <span class="keyword">try</span> &#123;    <span class="keyword">const</span> users = <span class="keyword">await</span> <span class="title class_">User</span>.<span class="title function_">find</span>(&#123;&#125;);    res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">send</span>(users);  &#125; <span class="keyword">catch</span> (error) &#123;    res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(error);  &#125;&#125;);<span class="comment">// UPDATE</span>app.<span class="title function_">patch</span>(<span class="string">&quot;/users/:id&quot;</span>, <span class="title function_">async</span> (req, res) =&gt; &#123;  <span class="keyword">try</span> &#123;    <span class="keyword">const</span> user = <span class="keyword">await</span> <span class="title class_">User</span>.<span class="title function_">findByIdAndUpdate</span>(req.<span class="property">params</span>.<span class="property">id</span>, req.<span class="property">body</span>, &#123;      <span class="attr">new</span>: <span class="literal">true</span>,      <span class="attr">runValidators</span>: <span class="literal">true</span>,    &#125;);    <span class="keyword">if</span> (!user) &#123;      <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">404</span>).<span class="title function_">send</span>();    &#125;    res.<span class="title function_">send</span>(user);  &#125; <span class="keyword">catch</span> (error) &#123;    res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">send</span>(error);  &#125;&#125;);<span class="comment">// DELETE</span>app.<span class="title function_">delete</span>(<span class="string">&quot;/users/:id&quot;</span>, <span class="title function_">async</span> (req, res) =&gt; &#123;  <span class="keyword">try</span> &#123;    <span class="keyword">const</span> user = <span class="keyword">await</span> <span class="title class_">User</span>.<span class="title function_">findByIdAndDelete</span>(req.<span class="property">params</span>.<span class="property">id</span>);    <span class="keyword">if</span> (!user) &#123;      <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">404</span>).<span class="title function_">send</span>();    &#125;    res.<span class="title function_">send</span>(user);  &#125; <span class="keyword">catch</span> (error) &#123;    res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(error);  &#125;&#125;);app.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Server is running on &lt;http://localhost&gt;:<span class="subst">$&#123;port&#125;</span>`</span>);&#125;);</code></pre><h2 id="MongoDB-설정-설명"><a href="#MongoDB-설정-설명" class="headerlink" title="MongoDB 설정 설명"></a>MongoDB 설정 설명</h2><p>MongoDB와 Mongoose를 사용하여 데이터베이스를 설정하고 모델을 정의하는 방법을 설명합니다.</p><ol><li><p><strong>MongoDB 연결 설정</strong>:</p><pre><code class="highlight javascript">mongoose.<span class="title function_">connect</span>(<span class="string">&quot;mongodb://localhost:27017/mydatabase&quot;</span>, &#123;  <span class="attr">useNewUrlParser</span>: <span class="literal">true</span>,  <span class="attr">useUnifiedTopology</span>: <span class="literal">true</span>,&#125;);</code></pre><p>MongoDB 데이터베이스에 연결합니다. <code>mydatabase</code>는 사용할 데이터베이스 이름입니다.</p></li><li><p><strong>스키마 및 모델 정의</strong>:</p><pre><code class="highlight javascript"><span class="keyword">const</span> userSchema = <span class="keyword">new</span> mongoose.<span class="title class_">Schema</span>(&#123;  <span class="attr">name</span>: <span class="title class_">String</span>,  <span class="attr">email</span>: <span class="title class_">String</span>,  <span class="attr">age</span>: <span class="title class_">Number</span>,&#125;);<span class="keyword">const</span> <span class="title class_">User</span> = mongoose.<span class="title function_">model</span>(<span class="string">&quot;User&quot;</span>, userSchema);</code></pre><p>Mongoose를 사용하여 <code>User</code> 모델을 정의합니다. 각 사용자 문서는 <code>name</code>, <code>email</code>, <code>age</code> 필드를 가집니다.</p></li></ol><h2 id="CRUD-엔드포인트-설명"><a href="#CRUD-엔드포인트-설명" class="headerlink" title="CRUD 엔드포인트 설명"></a>CRUD 엔드포인트 설명</h2><p>각 CRUD 엔드포인트는 다음과 같은 기능을 합니다.</p><h3 id="CREATE"><a href="#CREATE" class="headerlink" title="CREATE"></a>CREATE</h3><pre><code class="highlight javascript">app.<span class="title function_">post</span>(<span class="string">&quot;/users&quot;</span>, <span class="title function_">async</span> (req, res) =&gt; &#123;  <span class="keyword">const</span> user = <span class="keyword">new</span> <span class="title class_">User</span>(req.<span class="property">body</span>);  <span class="keyword">try</span> &#123;    <span class="keyword">await</span> user.<span class="title function_">save</span>();    res.<span class="title function_">status</span>(<span class="number">201</span>).<span class="title function_">send</span>(user);  &#125; <span class="keyword">catch</span> (error) &#123;    res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">send</span>(error);  &#125;&#125;);</code></pre><p>사용자 데이터를 생성합니다. <code>POST /users</code> 요청을 통해 사용자를 추가할 수 있습니다.</p><h3 id="READ"><a href="#READ" class="headerlink" title="READ"></a>READ</h3><pre><code class="highlight javascript">app.<span class="title function_">get</span>(<span class="string">&quot;/users&quot;</span>, <span class="title function_">async</span> (req, res) =&gt; &#123;  <span class="keyword">try</span> &#123;    <span class="keyword">const</span> users = <span class="keyword">await</span> <span class="title class_">User</span>.<span class="title function_">find</span>(&#123;&#125;);    res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">send</span>(users);  &#125; <span class="keyword">catch</span> (error) &#123;    res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(error);  &#125;&#125;);</code></pre><p>모든 사용자 데이터를 읽어옵니다. <code>GET /users</code> 요청을 통해 모든 사용자를 조회할 수 있습니다.</p><h3 id="UPDATE"><a href="#UPDATE" class="headerlink" title="UPDATE"></a>UPDATE</h3><pre><code class="highlight javascript">app.<span class="title function_">patch</span>(<span class="string">&quot;/users/:id&quot;</span>, <span class="title function_">async</span> (req, res) =&gt; &#123;  <span class="keyword">try</span> &#123;    <span class="keyword">const</span> user = <span class="keyword">await</span> <span class="title class_">User</span>.<span class="title function_">findByIdAndUpdate</span>(req.<span class="property">params</span>.<span class="property">id</span>, req.<span class="property">body</span>, &#123;      <span class="attr">new</span>: <span class="literal">true</span>,      <span class="attr">runValidators</span>: <span class="literal">true</span>,    &#125;);    <span class="keyword">if</span> (!user) &#123;      <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">404</span>).<span class="title function_">send</span>();    &#125;    res.<span class="title function_">send</span>(user);  &#125; <span class="keyword">catch</span> (error) &#123;    res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">send</span>(error);  &#125;&#125;);</code></pre><p>특정 사용자 데이터를 업데이트합니다. <code>PATCH /users/:id</code> 요청을 통해 사용자를 수정할 수 있습니다.</p><h3 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h3><pre><code class="highlight javascript">app.<span class="title function_">delete</span>(<span class="string">&quot;/users/:id&quot;</span>, <span class="title function_">async</span> (req, res) =&gt; &#123;  <span class="keyword">try</span> &#123;    <span class="keyword">const</span> user = <span class="keyword">await</span> <span class="title class_">User</span>.<span class="title function_">findByIdAndDelete</span>(req.<span class="property">params</span>.<span class="property">id</span>);    <span class="keyword">if</span> (!user) &#123;      <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">404</span>).<span class="title function_">send</span>();    &#125;    res.<span class="title function_">send</span>(user);  &#125; <span class="keyword">catch</span> (error) &#123;    res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(error);  &#125;&#125;);</code></pre><p>특정 사용자 데이터를 삭제합니다. <code>DELETE /users/:id</code> 요청을 통해 사용자를 제거할 수 있습니다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이번 시간에는 MongoDB를 사용한 NoSQL CRUD를 이해하고, Express를 활용하여 이를 실습하는 방법을 알아보았습니다. 이를 바탕으로 더 복잡한 데이터베이스 작업과 Express 애플리케이션을 개발해보세요!</p><p>감사합니다!</p>]]></content>
      
      
      <categories>
          
          <category> web_필수 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
